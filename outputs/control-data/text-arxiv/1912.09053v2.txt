WHICH DNR CAN BE MINIMAL

arXiv:1912.09053v2 [math.LO] 5 Jun 2020

LU LIU

Abstract. In [9], Khan and Miller proved that for every computable non
decreasing unbounded function h ∈ ω ω (henceforth order function), if h is
sufficiently large, then there exists Q
a DNRh that is of minimal degree. Where
h has to satisfy limn→∞ h(n)/(2k· m<n h(m) ) = ∞ for all k > 0. Their core
argument is that we can thin the tree by a factor of 2j to make j Turing
functional split. We improve their result by reducing this factor
to j. Thus we
Q
show that for every order function h with limn→∞ h(n)/( m<n h(m))k = ∞
for all k > 0, there exists a DNRh of minimal degree. We answer a question
of Brendle, Brooke-Taylor, Ng and Nies [4] by showing that there exists a
G ∈ ω ω such that G is weakly meager covering, G does not compute any
Schnorr random real and G does not Schnorr cover REC.

1. Introduction
In [9], Khan and Miller proved that for every sufficiently large order function
h, every oracle X, there exists a DNRX function, namely G,Qwith G ≤ h that is
of minimal degree. Where h has to satisfy limn→∞ h(n)/(2k· m<n h(m) ) = ∞ for
all k. It is not known whether the fast growing condition on h can be eliminated.
i.e., whether there exists, for every order function h and every oracle X, a DNRX
function G that is of minimal degree. This question is closely related to another
question, whether there exists a real of hausdorff dimension 1 that is of minimal
degree. The existence of such real implies that the hausdorff dimension of reals of
minimal degree is 1. A yes answer would confirm the existence of such real. We
make a progress toward this direction by improving Khan
Q and Miller’s result. We
release the fast growing condition on h to limn→∞ h(n)/( m<n h(m))k = ∞ for all
k > 0 (Theorem 3.1).
Cardinal characteristic study has been an important direction in set theory. The
recent study of Brendle, Brooke-Taylor, Ng and Nies[4] pointed out an analog between many results of cardinal characteristic and results in computability theory.
[4] pointed out some analog between notions in cardinal characteristic and computability theory (mostly algorithmic randomness theory) and shows how results
in cardinal characteristic can be translated in to results in computability theory.
Thus answering the computability theoretic analog of a question cardinal characteristic provides ideas and directions for the original problem. We answer a question in
their paper by showing that it is possible to avoid Schnorr randomness and Schnorr
covering REC simultaneously in DNR (Theorem 2.4) where REC refers to the class
of computable members in 2ω . Khan and Miller [9], improving a theorem of Greenberg and Miller [8], shows that there exists, for every order function h, a DNRh
2010 Mathematics Subject Classification. Primary 68Q30 ; Secondary 03D32 03D80 28A78.
Key words and phrases. computability theory, algorithmic randomness theory, Schnorr random, reverse math.
1

2

LU LIU

function G such that G does not compute any Kurtz random real (and therefore
does not compute any Schnorr random real). The part of our proof concerning
avoid Schnorr randomness, takes a similar frame work as in [9] [8] but is different
in combinatorial aspects.
Both of our results concerns bushy tree argument. This argument is widely
used in computability theory[11][1] [8][2][3][5]. It’s firstly invented by Kumabe (in
an unpublished paper) and later simplified by Kumabe and Lewis [11] to answer a
question of Sacks that whether there exists a DNR of minimal degree. Ambos-Spies,
Kjos-Hanssen, Lempp, and Slaman [1] proved that over RCA, WWKL is stronger
than DNR, answering a question of [7]. A recent introduction of this method can
be found in [9]. See also remark 1.3 that how bushy tree argument resembles many
arguments in reverse math. We end up this section by introducing our notations
and the bushy tree argument.
Notations. We write (Ψτ N ) ↓ if Ψτ (n) ↓ for all n ≤ N . We write h<ω for
{σ ∈ ω <ω : σ(n) ≤ h(n) for all n ≤ |σ|}. ⊥ denote empty string. For a tree T , we
write |ρ|T for the T -length of ρ, i.e. |ρ|T = n + 1 where n is the number of proper
initial segments of ρ in T . For a string ρ ∈ 2<ω , we let [ρ] = {σ : σ  ρ}; similarly,
for a set S ⊆ 2<ω , let [S] = {σ : σ  ρ for some ρ ∈ S}; for a tree T , let [T ]
denote the set of infinite paths on T ; for ρ ∈ ω <ω , let [ρ] = {X ∈ ω ω : X  ρ}; for
a finite set V ⊆ 2<ω , let [V ] = {[ρ] : ρ ∈ V }. For every non empty set S ⊆ ω <ω ,
let `(S) denote the set of leaves of S, i.e., {σ ∈ S : [σ] ∩ S = {σ}}. We define
`(∅) = {⊥}. We say η is the stem of a tree T if η ∈ T and T ⊆ [η] .
Definition 1.1. For a function p : ω → Q, a tree T is p-bushy over ρ if for every
τ ∈ (T ∩ [ρ] ) ∪ {ρ} that is not a leaf of T , τ has at least p(|τ |) many immediate
successor in T . T is p-bushy from level n to level m if for every τ ∈ T that is not
a leaf, if n ≤ |τ | ≤ m, then τ has at least p(|τ |) many immediate successor in T . T
is p-bushy above level m if it is p-bushy from level m to level ∞. A set S is p-big
over ρ if there exists a finite tree T that is p-bushy over ρ such that `(T ) ⊆ S; S is
p-small over ρ if it is not p-big over ρ.
Lemma 1.2. Given two sets B, C ⊆ ω <ω :
(1) If B ∪ C is (p + q)-big over ρ, then either B is p-big over ρ or C is q-big
over ρ.
(2) If B is p-big over ρ and C ⊆ B is q-small over ρ, then B \ C is (p − q)-big
over ρ.
Proof. For item (1), let T be a finite tree witnessing B ∪ C is (p + q)-big over ρ.
Let T̂ = {σ ∈ T : B is p-big over σ}. If ρ ∈ T̂ , then we are done since this means
B is p-big over ρ. Suppose ρ ∈
/ T̂ . Note that for every σ ∈ T \ T̂ that is not a leaf
of T , σ admits at least q(|σ|) many immediate successors in T that are contained
in T \ T̂ (otherwise it admits at least p(|σ|) many immediate successors in T that
are contained in T̂ , which implies B is p-big over σ, a contradiction). Therefore
`(T \ T̂ ) ⊆ `(T ) ⊆ B ∪ C. But clearly B ∩ `(T ) ⊆ T̂ . Therefore `(T \ T̂ ) ⊆ C. Since
T \ T̂ is q-bushy over ρ, T \ T̂ witnesses C being q-big over ρ. Item (2) follows from
item (1) directly.

Remark 1.3. Lemma 1.2 explains that how bushy tree method resembles many
arguments in reverse math. A tree can be seen as an instance and its solution
is the infinite path through it. In order to make G satisfy multiple requirements

WHICH DNR CAN BE MINIMAL

3

say R0 , R1 , we restrict G on different trees T0 , T1 where Ti forces Ri and each of
them is very bushy in the sense that T i is small. Note that T0 ∩ T1 forces both
requirements. It remains to show that T0 ∩ T1 is still combinatorially weak, i.e.,
very bushy. This can be done by applying Lemma 1.2 to show that T 0 ∪ T 1 is still
very small.
2. Generic Schnorr covering
The main result in this section is Theorem 2.4 which construct a G ∈ ω ω satisfying three weakness properties. First we introduce some necessary notions concerning Theorem 2.4. Let REC denote the class of all computable members in 2ω .
Definition 2.1 ([4]). A set A ⊆ 2ω is A-effectively meager if there exists a sequence
of uniformly Π0,A
1 -classes (Qm : m ∈ ω) so that each Qm is nowhere dense such that
A ⊆ ∪m Qm . A set A is weakly meager covering if the class REC is A-effectively
meager.
For convenience, we adopt the following definition of Schnorr test. Standard
definition can be found in most text book e.g. [12][6].
Definition 2.2. An A-schnorr test is a sequence of finite sets V0 , V1 , · · · ⊆ 2<ω
(denoted as V) with the canonical index of Vn A-computable from n so that
m(Vn ) ≤ 2−n for all n. We say V succeeds on X ∈ 2ω if
\ [
X∈
[Vm ].
n∈ω m>n

A real X is Schnorr random if there is no Schnorr test succeeding on X.
Definition 2.3 ([4]). We say A Schnorr cover a set A ⊆ 2ω iff there exists an
A-Schnorr test, namely V = (V0 , V1 , · · · ), such that V succeeds on every X ∈ A.
Our main result in this section is the following which answers question 4.1-(8)
of [4].
Theorem 2.4. There exists a G such that:
(1) G is weakly meager covering;
(2) G does not compute any Schnorr random real;
(3) G does not Schnorr cover REC.
The rest of this section will prove Theorem 2.4. We firstly note that by results
in [4][13][10], weakly meager covering is characterized as following.
Theorem 2.5. A set X is weakly meager covering if and only if it is high or of
DNR degree.
By Theorem 2.5, to prove Theorem 2.4 it suffices to construct a G ∈ DNR that
satisfies item (2)(3). The proof follows the general steps as in Mathias forcing (in
computability theory), or forcing on Π01 class. The condition is an effective closed
set of some cantor space which is seen as a collection of candidates of the G we are
constructing. More specifically, it is a bushy tree who has very ‘few’ leaves. We
show how to extend a condition to force a given requirement. We deal with the
requirements of item (3), item (2) in section 2.1 and section 2.2 respectively.
In this section, fix P
a computable monochromatically decreasing positive function
ε : ω → Q such that m∈ω ε(m) < 1/4.

4

LU LIU

Definition 2.6. For functions q, p : ω → Q, we say (p, q) allow splits if for every
k ∈ ω, p(x)εk (x) > q(x) ≥ 1 for all but finitely many x.
A condition is a tuple (η, T, p, q) such that
(1) The tree T is a computably bounded computable tree (in ω <ω ) with η as
its stem;
(2) The functions p, q are computable function from ω to Q such that (p, q)
allow split and p(x) >> q(x) for all x ≥ |η| (where y >> x means y is
sufficiently larger than x);
(3) The tree T is p-bushy over η and `(T ) is q-small over every ρ such that
[ρ] ∩ [T ] 6= ∅.
As usual, a condition (η, T, p, q) is seen as a collection, namely [T ], of the candidates of the G we construct. A condition (η̂, T̂ , p̂, q̂) extends a condition (η, T, p, q)
(written as (η̂, T̂ , p̂, q̂) ⊆ (η, T, p, q)) if [T̂ ] ⊆ [T ].
An example of condition is the following. Let p̃ : ω → ω be sufficiently large
that (p̃, 2) allow split (where 2 denote the constant function 2), let T̃ ⊆ (p̃ + 2)<ω
be such a computable tree that [T̃ ] = DNRp̃+2 , T̃ is p̃-bushy over ⊥ and `(T̃ ) is
2-small over each ρ such that [ρ] ∩ [T̃ ] 6= ∅ (see Lemma 2.14). Clearly (⊥, T̃ , p̃, 2) is
a condition. This will be our initial condition.
We need to satisfy the following two kinds of requirements:
RΨ :ΨG as a Schnorr test does not cover REC;
R0Ψ :ΨG is not a Schnorr random real.
A condition (η, T, p, q) forces a requirement R if every X ∈ [T ] satisfies R. As
usual, it suffices to show that every condition admit an extension forcing a given
requirement since this enable us to construct a sequence of conditions
d0 = (⊥, T̃ , p̃, 2) ⊇ d1 ⊇ · · ·
T
so that every requirement is forced by some dt . Then let G ∈ t dt , which exists
by compactness, we have that G satisfies all requirements. Since G ∈ d0 , G is a
DNR, thus we are done.
2.1. Avoid Schnorr covering REC. In this subsection we deal with requirement
RΨ . The final goal is Lemma 2.15 where the major technique lies in Lemma 2.10.
We will frequently use the following version of Markov inequality. For a random
variable x, we write x ∼ P to denote that x follows the probability measure P ; we
write x|y ∼ P to denote that conditional on y, x follows P . For a finite set S, we
use U (S) to denote the uniform probability measure on S.
Lemma 2.7. Let S be a finite set and let f be a positive function on S. If
Ex∼U (S) [f (x)] < λ, then for every λ̂ > 0, there exists a subset S ∗ of S such that
|S ∗ |/|S| > 1 − λ/λ̂ and f (x) < λ̂ for all x ∈ S ∗ .
We frequently need to pruned the tree so that for some l ∈ ω, level l is shrunk
into a subset S ∗ where the proportion of S ∗ on that level is close to 1. To make
sure that the tree is not severely pruned, we work on exactly bushy tree defined as
following (see Lemma 2.9).
Definition 2.8. For a function p : ω → Q, a tree T is exactly p-bushy over ρ if for
every τ ∈ (T ∩ [ρ] ) ∪ {ρ} that is not a leaf of T , τ has p(|τ |)+ many immediate

WHICH DNR CAN BE MINIMAL

5

successor in T where x+ denote the smallest integer y such that y ≥ x. A tree T
is exactly p-bushy from level n to level m if for every τ ∈ T that is not a leaf, if
n ≤ |τ | ≤ m, then τ has p(|τ |)+ many immediate successor in T . A tree T is exactly
p-bushy above level m if it is exactly p-bushy from level m to level ∞. A finite set
S is exactly p-big over ρ if there exists a finite tree T that is exactly p-bushy over
ρ such that `(T ) = S.
P
Lemma 2.9. Let λ, ε0 , ε1 , · · · , εn−1 > 0 satisfy λ > m<n εm . Let T ⊆ ω ≤n be
a finite, exactly p-bushy (over empty string) tree with `(T ) ⊆ ω n . Let S ⊆ `(T )
satisfies |S|/|`(T )| > λ. Then there exists a p̂-bushy (over empty string) subtree T̂
of T such that `(T̂ ) ⊆ S where p̂(m) = p(m)εm for all m < n.
Proof. We prove by induction on n. The conclusion holds trivially for n = 1.
Suppose it holds for n − 1. Since for every α ∈ T ∩ ω 1 , |`(T ) ∩ [α] | is identical,
therefore
 |S ∩ [α] | 
|S|
= Eα∼U (T ∩ω1 )
.
|`(T )|
|`(T ) ∩ [α] |
Let
|S ∩ [α] |
f (α) = 1 −
,
|`(T ) ∩ [α] |
we have
Eα∼U (T ∩ω1 ) [f (α)] < 1 − λ.
1−λ
in the Markov inequality 2.7, we have that there exists a subset S0
Let λ̂ = 1−ε
0
1
of T ∩ ω with
1−λ
|S0 | > (1 − (1 − λ)
)|T ∩ ω 1 | = ε0 |T ∩ ω 1 | ≥ ε0 p(0)
1 − ε0
such that for every α ∈ S0 ,

|S ∩ [α] |
1−λ
= 1 − f (α) > 1 −
> λ − ε0 .

|`(T ) ∩ [α] |
1 − ε0
Thus, by induction (where λ is substituted by λ − ε0 ), there exists, for each α ∈ S0 ,
a subtree Tα of T with α as its stem such that Tα is p̂-bushy over α and `(Tα ) ⊆ S.
S
Thus α∈S0 Tα is the desired tree T̂ .

Before the core Lemma 2.10, we introduce some terminology. For a finite set
V ⊆ 2<ω , we write m(V ) for m([V ]) where m is the Lebesgue measure on 2ω ; and
we write m(V |V 0 ) for m([V ] ∩ [V 0 ])/m([V 0 ]). For every Turing functional Ψ, every
oracle Y , we assume that ΨY is computing a Schnorr test, namely Vn = ΨY (n)
such that
m(∪n ΨY (n)) = λ∗
whenever ΨY is total and λ∗ is sufficiently small. Moreover,
m(∪m≤n ΨY (m)) > λ∗ − 2−n−1
if ΨY (m) ↓ for all m ≤ n.
We write
ΨY [t] for

[

ΨY (m);

m≤t,ΨY (m)[t]↓
Y

Ψ (t0 , t1 ] for ΨY [t1 ] \ ΨY [t0 ].

6

LU LIU

Whenever we write Ψσ [t], it implies |σ| > t. i.e., for every τ  σ, Ψτ [t] = Ψσ [t].
In the following text of this subsection, let T̃ be a computably bounded computable tree with η as its stem, let
T = {ρ ∈ T̃ : [ρ] ∩ [T̃ ] 6= ∅}.
Suppose T̃ is p-bushy over η and `(T̃ ) is q-small over every ρ ∈ T where p, q are
computable function. The following Lemma is the core argument.
Lemma 2.10. Suppose q < pε3 /8 and for every Y ∈ [T̃ ], ΨY is total. Then there
exists a computable real X ∈ 2ω , a computable tree T̂ ⊆ T̃ with η as its stem such
that
(1) T̂ is pε3 /8-bushy over η and `(T̂ ) is q-small over every ρ such that [ρ]∩[T̂ ] 6=
∅;
S
/ m∈ω [ΨY (m)].
(2) For every Y ∈ [T̂ ], X ∈
Remark 2.11. We will inductively define a sequence of trees Tn and a sequence of
strings ρn ∈ 2<ω so that
\ [
X = lim ρn and {ρ ∈ T̂ : [ρ] ∩ [T̂ ] 6= ∅} =
Tm .
n→∞

n∈ω m>n

To this end, we maintain that
m(∪n0 ΨY (n0 )|ρn ) is small for all n and Y ∈ [T̂ ].
Suppose we have found ρn , Tn+1 at time tn+1 so that for every σ ∈ `(Tn+1 ),
m(Ψσ [tn+1 ]|ρn ) is small. In order to find the next ρn+1 , wait for a time tn+2 so
that for some level ln+2 , for every τ ∈ T [tn+2 ] ∩ ω ln+2 , m(Ψτ [tn+2 ]) is sufficiently
close to λ∗ , as to how close depends on whatever constructed by step n, namely
Tn+1 , ρn etc. To find the next ρn+1 ∈ 2mn+1 ,
we take an average of m(Ψτ [tn+2 ]|ρ) over
ρ ∈ [ρn ] ∩ 2mn+1 and τ ∈ T [tn+2 ] ∩ ω ln+2 .
We argue that we can pruned the tree so that the average on that tree’s leaves
(and a subset of [ρn ] ∩ 2mn+1 ) can be much smaller than m(Ψσ [tn+1 ]|ρn ). This
is done by showing that for many ρ and many τ , ρ is not a member in Ψτ [tn+1 ]
since m(Ψσ [tn+1 ]|ρn ) is small. Moreover, if ρ is not a member in Ψτ [tn+1 ], many
strings in the Schnorr test contributing to m(Ψσ [tn+1 ]|ρn ) no longer contribute to
m(Ψσ [tn+2 ]|ρ). i.e.,
m(Ψτ [tn+2 ]|ρ) = m(Ψτ [tn+1 , tn+2 )|ρ).
Once we have proved that Eτ,ρ [m(Ψτ [tn+1 ]|ρ)] is small, by Markov inequality 2.7,
there is a ρn+1 and a large subset of T [tn+2 ]∩ω ln+2 ∩[`(Tn )] so that m(Ψτ [tn+2 ]|ρn+1 )
is sufficiently small for all τ in that subset.
In order to make sure that the pruned tree is sufficiently bushy over sufficiently
many σ ∈ `(Tn+1 ) (so that the tree Tn+1 need not be pruned below certain level),
we will take the average over τ on an exactly bushy (above some level) tree. This
is to avoid that the average is mainly affected by a small portion of `(Tn+1 ) above
which the tree T [tn+2 ] ∩ ω ln+2 ∩ [`(Tn+1 )] is much more bushy than the rest. To
ensure that for each level l, the tree is not pruned below level l after some point,
before we decide how to prune the tree, we wait for a long enough time so that

WHICH DNR CAN BE MINIMAL

7

Ψτ [tn+2 ] is close enough to λ∗ for all τ in level ln+2 in T [tn+2 ], as to how close
depends on whatever constructed by step n, namely Tn+1 , ρn etc.
Proof. Since T̃ \ T is q-small over each ρ ∈ T with q(x) << p(x) for all x ≥ |η|, By
hypothesis on T̃ and T , for every σ ∈ T , every m, there exists t and a tree Tσ with
σ as its stem such that Tσ is p/2-bushy over σ and Ψτ (m)[t] ↓ for all τ ∈ `(Tσ ).

Initial
that:
(1)
(2)
(3)
(4)

setup. Wait for such a time t0 that there exists a tree T0 ⊆ T [t0 ], such

For some l0 ∈ ω, T0 is p/2-bushy from level |η| to l0 − 1 and `(T0 ) ⊆ ω l0 .
for every τ ∈ `(T0 ), λ0 < m(Ψτ [t0 ]).
√
Let λ0 = λ∗ − λ0 , then λ0 is sufficiently small, say λ∗ < λ0 .
Let m0 be sufficiently large, say for every τ ∈ T [t0 ] ∩ ω l0 , every ρ ∈ Ψτ [t0 ],
m0 > |ρ|.
For a positive real a, we write a = os (A, B, · · · ) if a is very small, as to how
small depends on the object A, B, · · · .
Inductive hypothesis. Fix n ≥ −1. Suppose by induction that we have computed
• a sequence of rationals (λn̂ : −1 ≤ n̂ ≤ n + 1);
• a sequence of trees (Tn̂ : −1 ≤ n̂ ≤ n + 1) with Tn̂ ⊆ T [tn̂ ] ∩ ω ≤ln̂ ; and
• a sequence of strings (ρn̂ ∈ 2mn̂ : −1 ≤ n̂ ≤ n)
such that for every −1 ≤ n̂ ≤ n 1
(1) Tree Tn̂+1 is
1
pε-bushy from level ln to level ln̂+1 − 1,
2
1 2
pε -bushy from level ln̂−1 to level ln̂ − 1,
4
1
tree Tn̂+1 ∪ (T̃ \ T ) is pε3 -bushy from level l−1 to level ln̂−1 − 1;
8
moreover, `(Tn̂+1 ) ⊆ (T̃ \ T ) ∪ ω ln̂+1 .
(2) For every σ ∈ Tn̂+1 ∩ ω ln̂+1 ,
λ0 + · · · + λn̂+1 < m(Ψσ [tn̂+1 ]) and
p
m(Ψσ [tn̂+1 ]|ρn̂ ) < λn̂+1 .
(3) Let λn̂+1 = λ∗ − (λ0 + · · · + λn̂+1 ), we have
0 < λn̂+1 < os (T̃ ∩ ω ≤ln̂ , mn̂ , λn̂ ).
(4) The integer mn̂+1 > mn̂ is large enough so that
for every τ ∈ T [tn̂+1 ] ∩ ω ln+1 , ρ ∈ Ψτ [tn̂+1 ], mn̂+1 > |ρ|.
In addition, we also make the minor requirement that tn+1 ≤ ln+1 , which means
Ψτ [tn+1 ] = Ψσ [tn+1 ] for all σ ∈ Tn+1 ∩ ω ln+1 , τ ∈ [σ] . Intuitively, item (3) is
because we choose λn̂ to be very close to λn̂−1 as to how close depends on whatever
constructed by step n̂ − 1. We refer these items as inductive hypothesis. It’s easy to
verify that the inductive hypothesis holds for λ0 , T0 and ρ−1 (when l < ˆl, T̂ being
1 In these items, let λ
−1 = 0, l−2 = l−1 = |η|, ρ−1 = ⊥, m−2 = m−1 = |ρ−1 | = 0.

8

LU LIU

p̂-bushy from level ˆl to level l is meaningless and holds trivially) especially checking
that item (2) holds since
p
m(Ψσ [t0 ]|ρ−1 ) ≤ λ∗ < λ0
and item (3) holds since |T̃ ∩ ω ≤|η| | = 1 (and since λ∗ is sufficiently small).

Initial set up of step n + 1. Now we construct the next tree Tn+2 and ρn+1 . As
we said, we will firstly wait for a time tn+2 so that m(Ψτ [tn+2 ]) to be close enough
to λ∗ for many τ ∈ T [tn+2 ]. Then we pruned the tree (on whose leaves Ψτ [tn+2 ] is
close enough to λ∗ ) to an exact bushy (above level ln−1 ) tree.
By hypothesis of T̃ , there exists such a time tn+2 and a ln+2 ≥ tn+2 such that :
for sufficiently many nodes τ in T̃ , m(Ψτ [tn+2 ]) is sufficiently large. More precisely:
• There exists a subset S of Tn+1 ∩ω ln+1 such that for every α ∈ Tn+1 ∩ω ln−1 ,
either α ∈
/ T [tn+2 ], or the set of nodes between level ln−1 and S, namely
{α0 : for some σ ∈ S, α  α0  σ} is
1
exactly pε2 -bushy from level ln−1 to level ln − 1,
8
1
exactly pε-bushy from level ln to level ln+1 − 1.
4
Moreover, for every σ ∈ S, there exists a subset Sσ of [σ] ∩ T [tn+2 ] ∩ ω ln+2
such that
1
Sσ is exactly p-big over σ.
2
• For every σ ∈ S, every τ ∈ Sσ ,
λ0 + · · · + λn+2 < m(Ψτ [tn+2 ]).
• Where let λn+2 = λ∗ − (λ0 + · · · + λn+2 ), we have
(2.1)

0 < λn+2 < os (T̃ ∩ ω ≤ln+1 , mn+1 , λn+1 )
• Let mn+2 > mn+1 be large enough so that,

(2.2)

for every τ ∈ T [tn+2 ] ∩ ω ln+2 , every ρ ∈ Ψτ [tn+2 ], mn+2 > |ρ|.

Note that such set S does exist since Tn+1 is pε2 /4-bushy from level ln−1 to level
ln − 1, pε/2-bushy from level ln to level ln+1 − 1 and Tn+1 \ T [tn+2 ] ⊆ T̃ \ T is
q-small over each ρ ∈ T with q < pε3 /8.
Now we construct ρn+1 and shrink the set T [tn+2 ] ∩ ω ln+2 so that for sufficiently
many τ in the shrinked set, we have
p
m(Ψτ [tn+2 ]|ρn+1 ) < λn+2 .
To this end, we shrink S to S ∗ so that for every σ ∈ S ∗ , for many ρ ∈ 2mn+1 ∩[ρn ] ,
ρ is not a member of Ψσ [tn+1 ]. And for every σ ∈ S ∗ , we shrink Sσ to Sσ∗ so that
for every τ ∈ Sσ∗ , m(Ψτ [tn+2 ]|ρn+1 ) is small. The key point is that shrinking S to
S ∗ does not thin out any nodes below level ln−1 . The tree Tn+2 will be constructed
according to S ∗ and (Sσ∗ : σ ∈ S ∗ ). See Figure 1 and the explanatory note to have
an intuition of how much tree is pruned.
Claim 2.12. There exists a tree Tn+2 with η as its stem and a ρn+1 ∈ [ρn ] ∩2mn+1
such that:

WHICH DNR CAN BE MINIMAL

9

(1) Below level ln−1 , nothing is thinned out. i.e.,
Tn+2 ∩ ω ≤ln−1 = Tn+1 ∩ ω ≤ln−1 ∩ T [tn+2 ].
Above level ln−1 , all leaves lies in level ln+2 . i.e.,
`(Tn+2 ) ∩ ω ≥ln−1 ⊆ ω ln+2 .
(2) The tree Tn+2 ⊆ T [tn+2 ] ∩ ω ≤ln+2 is
1
pε-bushy from level ln+1 to level ln+2 − 1,
2
1 2
pε -bushy from level ln to level ln+1 − 1
4
1 3
pε -bushy from level ln−1 to level ln − 1 and ;
8
1
the tree Tn+2 ∪ (T̃ \ T ) is pε3 -bushy from level 0 to level ln−1 − 1;
8
ln+2
,
(3) For every τ ∈ Tn+2 ∩ ω
p
m(Ψτ [tn+2 ]|ρn+1 ) < λn+2 .
(4) Moreover, the inductive hypothesis holds.
Proof. Item (3)(4) of the inductive assumption are verified by definition of λn+2
(2.1) and mn+2 (2.2). Item (1)(2) of the inductive assumption will be verified by
item (2)(3) of this Claim. Therefore it remains to deal with item (1)(2)(3) of this
−
Claim. In the following text, we write λ1 if it is λc for some constant c that can be
+
chosen arbitrarily close to 1 and write λ0 if it is λc for some constant c bounded
away from 0.
For every ρ ∈ 2mn+1 , let
Aρ = {σ ∈ S : ρ ∈
/ [Ψσ [tn+1 ]] }.
Since mn+1 is sufficiently large (by inductive hypothesis (4)), therefore:
for every ρ ∈ 2mn+1 , every σ ∈ S, either ρ ∈ [Ψσ [tn+1 ]] or [ρ] ∩ [Ψσ [tn+1 ]] = ∅.
Thus we can rewrite the inductive assumption (2), namely
p
for every σ ∈ S, m(Ψσ [tn+1 ]|ρn ) < λn+1 as:


p
P(σ,ρ)∼U (S×([ρn ] ∩2mn+1 )) σ ∈
/ Aρ < λn+1 .
(2.3)




Take the function f (ρ) = Pσ∼U (S) σ ∈
/ Aρ

and rewrite (2.3) as

Eρ∼U ([ρn ] ∩2mn+1 ) [f (ρ)] <

p
λn+1 .

+

Let λ̂ = λ0n+1 in the Markov inequality 2.7, we have there exists
a subset R of [ρn ] ∩ 2mn+1 with
such that f (ρ) <

+
λ0n+1
+

|[ρn

]

+
|R|
> 1 − λ0n+1
m
n+1
∩2
|

for all ρ ∈ R.
+

By definition of f , f (ρ) < λ0n+1 translates to |Aρ |/|S| > 1 − λ0n+1 . In summary:

10

LU LIU

Figure 1. Intuitively, the tree is thinned by a factor of ε above
ln+2
level
, m(Ψτ [tn+2 ]|ρn+1 ) <
p ln−1 so that for every τ ∈ Tn+2 ∩ ω
λn+2 . Meanwhile, below level ln−1 , nothing is thinned out.

(2.4)

+
|R|
|R|
= mn+1 −mn > 1 − λ0n+1
|[ρn ] ∩ 2mn+1 |
2
+
|Aρ |
and for every ρ ∈ R,
> 1 − λ0n+1
|S|

The key note is the following, which says that for most ρ ∈ 2mn+1 ∩ [ρn ] ,
m(Ψτ [tn+2 ]|ρ) is much smaller than m(Ψτ [tn+2 ]|ρn ) as long as ρ is not a member
of Ψτ [tn+1 ] since in that case
m(Ψτ [tn+2 ]|ρ) = m(Ψτ (tn+1 , tn+2 ]|ρ),
which is, in average, small since
m(Ψτ (tn+1 , tn+2 ]) < λn+1 < os (mn ).

WHICH DNR CAN BE MINIMAL

11

More precisely, for every σ ∈ S, τ ∈ Sσ 2:
X
(2.5)
m(Ψτ [tn+2 ]|ρ) · m(ρ|ρn )
ρ∈R\[Ψσ [tn+1 ]]

X

=

m(Ψτ (tn+1 , tn+2 ]|ρ) · m(ρ|ρn )

ρ∈R\[Ψσ [tn+1 ]]

X

≤
ρ∈[ρn

m(Ψτ (tn+1 , tn+2 ]|ρ) · m(ρ|ρn )

] ∩2mn+1

= m(Ψτ (tn+1 , tn+2 ]|ρn )
≤ 2mn λn+1

since m(Ψτ (tn+1 , tn+2 ]) < λn+1

1−

< λn+1

since λn+1 < os (mn ).

Now we prove that |R ∩ [Ψσ [tn+1 ]] | is very small compared to |R| for all σ ∈ S:
(2.6)
|R ∩ [Ψσ [tn+1 ]] | = 2mn+1 · m(R ∩ [Ψσ [tn+1 ]] )
≤ 2mn+1 · m([ρn ] ∩ [Ψσ [tn+1 ]] )

since R ⊆ [ρn ]

= 2mn+1 −mn · m(Ψσ [tn+1 ]|ρn )
p
< 2mn+1 −mn · λn+1

by inductive hypothesis (2).

Therefore by (2.4)(2.6), R \ [Ψσ [tn+1 ]] is very large in [ρn ] ∩ 2mn+1 :
(2.7)

|R \ [Ψσ [tn+1 ]] | = |R| − |R ∩ [Ψσ [tn+1 ]] |
+

≥ 2mn+1 −mn (1 − λ0n+1 )
Thus,
(2.8)

1
|R \

[Ψσ [t

n+1

]] |

<

2
2mn+1 −mn

= 2m(ρ|ρn ).

For σ ∈ S, ρ ∈ R, let
C(σ|ρ) = Eτ ∼U (Sσ ) [m(Ψτ [tn+2 ]|ρ)].
By (2.8), replace m(ρ|ρn ) in (2.5) by 1/|R \ [Ψσ [tn+1 ]] |, we have: for every σ ∈ S,
1−

(2.9)

Eρ∼U (R\[Ψσ [tn+1 ]] ) [C(σ|ρ)] < λn+1 .

Next, we show that there exists a ρn+1 ∈ R such that,
Eσ∼U (Aρn+1 ) [C(σ|ρn+1 )] ≈ Eρ∼U (R\[Ψσ̂ [tn+1 ]] ) [C(σ̂|ρ)].
Averaging (2.9) over σ:
(2.10)



1−
E(σ,ρ)∼P C(σ|ρ) < λn+1 .

Where P is such a probability measure on S×R that if (σ, ρ) ∼ P , then σ ∼ U (S)
and ρ|σ ∼ U (R \ [Ψσ [tn+1 ]] ). Consider another probability measure P 0 on S × R
that if (σ, ρ) ∼ P 0 , then ρ ∼ U (R) and σ|ρ ∼ U (Aρ ). Note that the support of P
2Recall that for every σ ∈ S, since |σ| = l
τ
σ
n+1 ≥ tn+1 , so Ψ [tn+1 ] = Ψ [tn+1 ] for all τ  σ.

12

LU LIU

and P 0 (denoted as supp(P 0 ), supp(P ) respectively) are identical (namely {(σ, ρ) ∈
S×R:ρ∈
/ [Ψσ [tn+1 ]] }) and for every (σ, ρ) ∈ supp(P ):
1
1
2
P (σ, ρ) ≥
and by (2.4) P 0 (σ, ρ) =
<
,
|S| · |R|
|R| · |Aρ |
|S| · |R|
P0
which means
(σ, ρ) < 2 for all (σ, ρ) ∈ supp(P ).
P
Therefore we can rewrite (2.10) as


1−
E(σ,ρ)∼P 0 C(σ|ρ) < λn+1 .
This implies, by definition of P 0 , that there exists a member in R, namely ρn+1 ,
such that


1−
Eσ∼U (Aρn+1 ) C(σ|ρn+1 ) < λn+1 .
Applying Markov inequality 2.7, there exists an S ∗ ⊆ Aρn+1 such that
|S ∗ |
0+
> 1 − λn+1 and for every σ ∈ S ∗
|Aρn+1 |

(2.11)

1−

C(σ|ρn+1 ) < λn+1 .
Unfolding the definition of C(σ|ρn+1 ) and applying Markov inequality 2.7, for every
σ ∈ S ∗ , there exists an Sσ∗ ⊆ Sσ such that
|Sσ∗ |
0+
> 1 − λn+1 and for every τ ∈ Sσ∗
|Sσ |
p
1−
m(Ψτ [tn+2 ]|ρn+1 ) < λn+1 < λn+2 .
S
We will ensure that `(Tn+2 ) ∩ ω ln+2 ⊆ σ∈S ∗ Sσ∗ , therefore (2.12) verifies item
(3) of the Claim. Now we construct Tn+2 according to S ∗ and (Sσ∗ : σ ∈ S ∗ ). Recall
that the key point is that below level ln−1 , nothing has to be thinned out. This is
+
because the proportion of S \ S ∗ over S (namely λ0n+1 ) is very small compared to
1/|T̃ ∩ ω ≤ln−1 |. By (2.11)(2.4),

(2.12)

+
|S ∗ |
> 1 − λ0n+1 .
|S|

Since S is exactly big above level ln−1 , for every α ∈ Tn+1 ∩ω ln−1 ∩T [tn+2 ], |S∩[α] |
|S|
is identical, therefore |S ∩ [α] | = |T ∩ωln−1
. Thus:
∩T [t
]|
n+1

∗

(2.13)



n+2

∗

|S ∩ [α] |
|S \ S |
≥1−
|S ∩ [α] |
|S ∩ [α] |
|S \ S ∗ |
=1−
· |Tn+1 ∩ ω ln−1 ∩ T [tn+2 ]|
|S|
+

> 1 − λ0n+1 · |T̃ ∩ ω ≤ln−1 |
0+

> 1 − λn · |T̃ ∩ ω ≤ln−1 |
3
since λn < os (T̃ ∩ ω ≤ln−1 ).
>
4
Since S is exactly pε2 /8-big from level ln−1 to level ln − 1, and exactly pε/4-big
from level ln to level ln+1 − 1, by Lemma 2.9, for every α ∈ Tn+1 ∩ ω ln−1 ∩ T [tn+2 ],

WHICH DNR CAN BE MINIMAL

13

there exists a finite tree Tα∗ ⊆ Tn+2 with α as its stem such that `(Tα∗ ) ⊆ S ∗ and
Tα∗ is
1 3
pε -bushy from level ln−1 to level ln − 1;
8
1 2
pε -bushy from level ln to level ln+1 − 1.
4
Since Sσ is exactly p/2-big over σ, by Lemma 2.9 and (2.12), for every σ ∈ S ∗ ,
there exists a finite tree Tσ∗ with σ as its stem such that `(Tσ∗ ) ⊆ Sσ∗ and Tσ∗ is
pε/2-bushy over σ.
Let
T∗ =
Tn+2

[
{Tα∗ : α ∈ Tn+1 ∩ ω ln−1 ∩ T [tn+2 ]} and
[
= (Tn+1 ∩ ω ≤ln−1 ∩ T [tn+2 ]) ∪ T ∗ ∪
Tσ∗ .
σ∈`(T ∗ )

Combine with (2.12), Tn+2 , ρn+1 are the desired tree and string. Thus we are done.

Let
T̂ =

[

(Tn+2 ∩ ω ≥ln−1 ∩ ω ≤ln ).

n≥0

Note that for every ρ in the tree
T̂ ∩ ω ≥ln−1 ∩ ω ≤ln = Tn+2 ∩ ω ≥ln−1 ∩ ω ≤ln ,
the only reason for [ρ] ∩ [T̂ ] = ∅ is that ρ enters T . Therefore, for every ρ ∈ T̂ ∩ T ,
T̂ \ T ⊆ T̃ \ T is q-small over ρ.
Therefore,
every ρ ∈ T̂ ∩ T has at least
1
p(|ρ|)ε(|ρ|)3 − q(|ρ|) many immediate successors in T̂ ∩ T.
8
Thus
{ρ ∈ T̂ : [ρ] ∩ [T̂ ] 6= ∅} = T̂ ∩ T.
By definition of Tn , T̂ is pε3 /8-bushy over η (see item (2) of Claim 2.12). Let
X = ∪n ρn . If for some Y ∈ [T̂ ], some ρ ∈ ΨY (m), X ∈ [ρ], then there must exists
n such that
p
m(ΨY [tn+1 ]|ρn ) = 1 > λn+1 ,
a contradiction to item (3) of Claim 2.12. Thus T̂ , X is the desired tuple as in this
Lemma.

Lemma 2.10 requires that for every Y ∈ [T̃ ], ΨY is total. Starting with the
condition (η, T̃ , p, q), the following Lemma 2.13 shows that we can easily shrink the
tree T̃ so that either every Y on the remaining subtree makes ΨY total, or every
Y on the remaining subtree makes ΨY non total. Moreover, the remining subtree
is still sufficiently bushy, say p̂-bushy over its stem where p̂ is a given computable
function that is very small compared to p, but is very large compared to q. i.e.,
both (p, p̂) and (p̂, q) allow split.

14

LU LIU

Lemma 2.13. Suppose for every ρ ∈ T , every m,

the set τ ∈ T̃ : Ψτ (m) ↓ is p̂-big over ρ.
Then there exists a computable subtree T̂ of T̃ with η being its stem such that:
(1) T̂ is p̂-bushy over η;
(2) `(T̂ ) is q-small over each ρ such that [ρ] ∩ [T̂ ] 6= ∅;
(3) For every Y ∈ [T̂ ], ΨY is total.
Proof. We compute a sequence of finite trees T̂s , s ∈ ω as following. Let T̂0 = {η}
and let T̂−1 = ∅ for convenience. Suppose we have computed T̂s . To compute T̂s+1 :
wait for such a time t that for every σ ∈ `(T̂s \ T̂s−1 ), either σ ∈
/ T [t] or there exists
a tree Tσ ⊆ T̃ with σ as its stem such that Tσ is p̂-bushy over σ and Ψτ (s + 1) ↓
for all τ ∈ `(Tσ ). Let
[
T̂s+1 = T̂s ∪ {Tσ : σ ∈ `(T̂s \ T̂s−1 ) ∩ T [t]}.
By hypothesis of the lemma, such t must exist. Clearly T̂ = ∪s T̂s ⊆ T̃ is p̂-bushy
over η. Moreover, `(T̂ ) ⊆ T̃ \ T . Therefore `(T̂ ) is q-small over each ρ ∈ T .
Meanwhile, for every ρ ∈ T̂ with [ρ] ∩ [T̂ ] 6= ∅, we have ρ ∈ T . Thus item (2) of this
Lemma is verified. It is trivial to verify that ΨY is total for all Y ∈ [T̂ ]. Thus we
are done.

It’s convenient to note the following.
Lemma 2.14. Suppose T̃ is a computable tree with η as its stem and T ⊆ T̃ is a
pruned co.c.e. tree with η as its stem such that T̃ \ T is q-small over each ρ ∈ T
and T̃ is p-bushy over η. Then there exists a computable tree T̂ ⊆ T̃ with η as its
stem such that [T̂ ] = [T ], T̂ is p-bushy over η and `(T̂ ) is q-small over each ρ such
that [ρ] ∩ [T̂ ] 6= ∅.
Now we are ready to finally prove that:
Lemma 2.15. Every condition admits an extension that forces RΨ .
Proof. Fix a condition (η, T̃ , p, q) and recall that

T = ρ ∈ T̃ : [ρ] ∩ [T̃ ] 6= ∅ .
Clearly T is a co-c.e. pruned subtree of T̃ (and with η as its stem), T is (p − q)bushy over η and T̃ \ T is q-small over every ρ ∈ T . Suppose |η| is sufficiently large
so that there exists a computable function p̂ : ω → Q such that (p, 2p̂), (p̂, q) allow
split and p(x) >> p̂(x) >> q(x) >> x for all x ≥ |η|.


Case 1. There exist a ξ ∈ T , m ∈ ω such that τ ∈ T̃ : Ψτ (m) ↓ is not p̂-big
over ξ.
Let

0
T̂ = τ ∈ T ∩ [ξ] : {τ 0 ∈ T̃ : Ψτ (m) ↓} is not p̂-big over τ .
Clearly T̂ is a co-c.e. tree with ξ as its stem. By bushy tree combinatorics and since
p̂+q < p, T̂ is pruned. Actually every ρ ∈ T̂ has at least p(|ρ|)− p̂(|ρ|)−q(|ρ|) many

WHICH DNR CAN BE MINIMAL

15

immediate successor in T̂ since T is (p − q)-bushy over ξ. Note that by definition
of T̂ ,
the set T \ T̂ is p̂-small over every ρ ∈ T̂ .
Since T̃ \ T is q-small over every ρ ∈ T , by Lemma 1.2,
the set T̃ \ T̂ is (p̂ + q)-small over every ρ ∈ T̂ .
Since p̂ + q < 2p̂, by Lemma 2.14 there exists a computable subtree T ∗ of T̂ such
that [T ∗ ] = [T̂ ], T ∗ is p-bushy over ξ, and `(T ∗ ) is 2p̂-small over each ρ such that
[ρ] ∩ [T ∗ ] 6= ∅. Thus (ξ ∗ , T ∗ ∩ [ξ ∗ ] , p, 2p̂) is the desired condition forcing RΨ
negatively where ξ ∗ is a sufficiently long extension of ξ in {ρ ∈ T ∗ : [ρ] ∩ [T ∗ ] 6= ∅}.
Thus we are done in Case 1.

Case 2. Otherwise.
By Lemma 2.13, there exists a computable subtree T̂ of T̃ such that
• T̂ is p̂-bushy over η;
• `(T̂ ) is q-small over every ρ such that [ρ] ∩ [T̂ ] 6= ∅;
• For every Y ∈ [T̂ ], ΨY is total.
Thus by Lemma 2.10, there exists a condition (η, T ∗ , p∗ , q) extending (η, T̂ , p̂, q)
that forces RΨ . Thus we are done.

2.2. Avoid computing Schnorr random real. Our proof employs the framework in [8] with a combinatorial difference. We begin with some combinatorial
notions.
Definition 2.16. Given a finite set S, a collection of sets
B = {B0 , · · · , Bn−1 } ⊆ P(S)
is (k, δ)-hash in S if for every J ⊆ n with |J| = k, we have:
\
Bi /|S| < δ.
i∈J

Sometimes we simply say “(k, δ)-hash collection B” when the set S is clear.
Lemma 2.17. Given any 1 > ε > δ > 0, any k ∈ ω with k > log δ/ log ε, we have:
for every n ∈ ω, there exists an N = N (ε, δ, k, n) such that if |S| > N , then there
exists a (k, δ)-hash collection of sets B ⊆ P(S) with |B| > n such that for all B ∈ B,
|B|/|S| > ε.
Proof. Let 1 > ε̂ > ε be such that ε̂k < δ. Such ε̂ exists since k > log δ/ log ε. To
construct members of B, namely Bi , i ≤ n, let Bi include each x ∈ S independently
of every thing else with probability ε̂. By law of large number, if |S| is sufficiently
large, then since δ > ε̂k , we have with high probability:
\
for every i ≤ n, |Bi | > ε|S| and for every J ⊆ n with |J| = k,
Bi < δ|S|.
i∈J

In summary, if |S| is sufficiently large, then the above construction generate a
(k, δ)-hash collection of sets B satisfying
|B| > n ∧ (∀B ∈ B)[|B|/|S| > ε]

16

LU LIU

with probability larger than 0. This means such collection of sets exists.

In the following text of this subsection, let T̃ be a computably bounded computable tree with η as its stem, let
T = {ρ ∈ T̃ : [ρ] ∩ [T̃ ] 6= ∅}.
Suppose T̃ is a p-bushy over η and `(T̃ ) is q-small over every ρ ∈ T where p, q are
computable function. Let p̂ : ω → Q be such a computable function that
6q < 3p̂ < p, lim q(n)/p̂(n) &= 0, lim p̂(n)/p(n) &= 0
n→∞

n→∞

and (p̂, q) allow split. The main ingredient is the following.
Lemma 2.18. Suppose ΨY is total for all Y ∈ [T̃ ]. For every ρ ∈ T , every λ > 0,
there exists a V ∗ ⊆ 2<ω with m(V ∗ ) < λ and a finite tree T̂ with ρ as its stem such
that T̂ is p̂-bushy over ρ and for some N ∈ ω,
(Ψτ N ) ↓∈ [V ∗ ] for all τ ∈ `(T̂ ).
Proof. If such V ∗ does not exists, then for every V with m(V ) ≥ 1 − λ, we have
that for most τ , Ψτ ∈ [V ] . Then we select V0 , · · · , Vk−1 for some k that is not so
large (say k = log λ/ log(1 − λ)) such that
m(∩j<k Vj ) < λ
while there are still many τ such that
Ψτ ∈ [∩j<k Vj ] .
More specifically,
let SVj be the set of τ such thatTΨτ N ∈ [Vj ] . We want to make
T
sure that j SVj is sufficiently big and therefore j Vj is the desired V ∗ . Since for
each j,TS Vj is very small, therefore, above a sufficiently large level l (depending
on k) j SVj must be still sufficiently big above level l (since p(n) > k p̂(n) for all
sufficiently large n). But below level l, it may not be the case if we don’t carefully
choose V0 , · · · , Vk−1 . To this end, note that there are much more (than k) sets V
such that m(V ) ≥ 1 − λ and SV is sufficiently big. Given the level l, we select
V0 , · · · , Vk−1 among a very large (depending on T̃ ∩ ω ≤l ) hash collection so that
the initial segments of SVj below level l are identical.
Let k, l, M, N ∈ ω and V ⊆ P(2N ) be such that:
log λ
(1) k > log(1−λ)
;
(2) 5k p̂(l) < p(l);
(3) M is sufficiently large so that for every M many trees T0 , · · · , TM −1 ⊆
T̃ ∩ ω ≤l , at least k of them that are identical;
(4) V ⊆ P(2N ) is a (k, λ)-hash collection of finite sets such that |V| ≥ M and
m(V ) > 1 − λ for all V ∈ V.
Clearly k exists. Given k, by the condition on p̂, p, any sufficiently large l satisfies
(2). Since T̃ ∩ ω ≤l is finite, any sufficiently large M satisfies (3). By Lemma 2.17,
N and the collection V exists. Thus the objects as above exist.
By hypothesis on T̃ , there exists a sufficiently large time t ∈ ω such that for
every τ ∈ T̃ ∩ T [t] ∩ ω ≤t , the Turing functional Ψτ N converges. For every V ⊆ 2N ,
let

SV = τ ∈ [ρ] ∩ T̃ ∩ T [t] ∩ ω t : Ψτ N ∈ V .

WHICH DNR CAN BE MINIMAL

17

Since T̃ /T is q-small and ΨY is total for all Y ∈ [T̃ ], we have that S2N is (p − q)-big
over ρ. If for some V with m(V ) < λ, SV is p̂-big over ρ, then we are done. Suppose
this is not the case.
Note that S2N = SV ∪ S2N \V for all V ⊆ 2N . Therefore, by Lemma 1.2, for
every V ⊆ 2N with m(V ) ≥ 1 − λ,
S2N \ SV is (p̂ + q)-small over ρ.
By definition of M , there exist V0 , · · · , Vk−1 ∈ V such that the set of predecessors
of SVj below level l, namely {σ ∈ ω ≤l : [σ] ∩ SVj 6= ∅}, are identical. Let
T̂ = {σ ∈ T̃ ∩ [ρ] ∩ ω ≤t : σ  τ for some τ ∈ ∩j<k SVj }
and V ∗ = ∩j<k Vj .
We prove that T̂ , V ∗ are as desired. By definition of (k, λ)-hash, m(V ∗ ) < λ.
Clearly
for every τ ∈ `(T̂ ), (Ψτ N ) ↓∈ V ∗ .
Since below level l, the set of predecessors of SVj are identical. Therefore
(2.14)

T̂ is (p − p̂ − q)-bushy from level |ρ| to level l − 1.

Since S2N \ SVj is (q + p̂)-small, by Lemma 1.2,
∪j<k (S2N \ SVj ) is k(q + p̂)-small.
By Lemma 1.2 again,
∩j<k SVj is (p − q − kq − k p̂)-big above level l.
Therefore the tree
(2.15)

T̂ is (p − 4k p̂)-bushy above level l since 4k p̂ > q + kq + k p̂.

Since p(n) − 4k p̂(n) > p̂(n) for all n ≥ l and p − p̂ − q > p̂, combine (2.14)(2.15)T̂
is p̂-bushy over ρ. Thus we are done.

The following is exactly the same as Lemma 2.13. Let p̂ : ω → Q be a computable
function such that both (p, p̂) and (p̂, q) allow split.

Lemma 2.19. Suppose for every ρ ∈ T , every m, the set τ ∈ T̃ ∩[ρ] : Ψτ (m) ↓
is p̂-big over ρ. Then there exists a computable subtree T̂ of T̃ with η being its stem
such that:
(1) T̂ is p̂-bushy over η;
(2) `(T̂ ) is q-small over each ρ such that [ρ] ∩ [T̂ ] 6= ∅;
(3) For every Y ∈ [T̂ ], ΨY is total.
Now we are ready to prove our conclusion.
Lemma 2.20. Every condition admits an extension that forces R0Ψ .
Proof. Fix a condition (η, T̃ , p, q) and recall that

T = ρ ∈ T̃ : [ρ] ∩ [T̃ ] 6= ∅ .
Clearly T is a co-c.e. pruned subtree of T̃ (and with η as its stem), T is (p − q)bushy over η and T̃ \ T is q-small over every ρ ∈ T . Suppose |η| is sufficiently large
so that there exists a computable function p̂ : ω → Q such that
6q < 3p̂ < p, lim q(n)/p̂(n) &= 0, lim p̂(n)/p(n) &= 0
n→∞

n→∞

18

LU LIU

and (p̂, q) allow split.

Case 1. There exist ξ ∈ T , m ∈ ω such that the set τ ∈ T̃ : Ψτ (m) ↓ is not
p̂-big over ξ.
This part is the same as Case 1 of Lemma 2.15 and is therefore omitted.
Case 2. Otherwise.
For convenience, we simply assume that ΨY is total for all Y ∈ [T̃ ]. We inductively define a sequence of finite trees Tn ⊆ T̃ with η as their stem and a Schnorr
test V0 , V1 , · · · that will succeed on all ΨY , Y ∈ [T̃ ]. Let T0 = {η}. Suppose we
have defined T0 , · · · , Tn and V0 , · · · , Vn−1 . To define Vn , wait for such a time t that
for every σ ∈ `(Tn ) ∩ T [t], there exists a finite, p̂-bushy over σ tree Tσ with σ as its
stem and a Vσ with m(Vσ ) < 2−n /|Tn | such that for every τ ∈ `(Tσ ),
(Ψτ N ) ↓∈ [Vσ ] for some N.
By Lemma 2.18, such time t must exist. Define
[
(2.16)
Vn = {Vσ : σ ∈ `(Tn ) ∩ T [t]} and
[
Tn+1 = Tn ∪ ( {Tσ : σ ∈ `(Tn ) ∩ T [t]}).
Note that m(Vn ) ≤ 2−n , therefore V0 , V1 , · · · is a Schnorr test. Let T̂ = ∪n Tn . It’s
easy to see that the Schnorr test V0 , V1 , · · · succeed on ΨY for all Y ∈ [T̂ ]. Clearly
T̂ is p̂-bushy over η and
{ρ ∈ T̂ : [ρ] ∩ [T̂ ] 6= ∅} = T̂ ∩ T.
Thus (η, T̂ , p̂, q) is the desired extension of (η, T̃ , p, q) forcing R0Ψ .

3. A DNRh that is of minimal degree
Our goal in this sectionQis to prove the following. Let h ∈ ω ω be an order function
such that limn→∞ h(n)/( m<n h(m))k = ∞ for all k.
Theorem 3.1. For every X, there exists a DNRX
h that is of minimal degree.
The rest of this section will prove Theorem 3.1. In section 2, the core tree of a
condition, namely the set {ρ ∈ T̃ : [ρ] ∩ [T̃ ] 6= ∅} is co-c.e. Since we are working
on DNR relative to an arbitrary oracle, this is no longer true. In [9], Khan and
Miller construct a minimal degree within a sufficiently bushy tree with an arbitrary
complex core tree. This is done by passively wait for Ψ to split and only focus on
the nodes above which it does split.
A tree T is strong c.e. iff there exists a computable array of finite trees Ts , s ∈ ω
such that
Ts ⊆ Ts+1 , Ts+1 \ Ts ⊆ [`(Ts )] and ∪s Ts = T.
We will, again, use the Mathias type forcing to force all requirements. In this
section, a condition is a tuple (η, T̃ , T, pT , qT ) such that
(1)
(2)
(3)
(4)

T̃ is a strong c.e. tree with η as its stem;
T ⊆ T̃ is an infinite tree with no leaf and with η as its stem;
pT , qT are computable functions from ω to Q;
T is pT -bushy over η and T̃ \ T is qT -small over every σ ∈ T .

WHICH DNR CAN BE MINIMAL

19

(5) pT (n) > 1 for all n ≥ |η| and
lim

n→∞

pT (n)
=∞
max{qT (n), 1} · |T̃ ∩ ω n |k

for all k.
We emphasis that there is no complexity restriction on T . Again, a condition
(η, T̃ , T, pT , qT ) is seen as a collection of candidates of the G we are constructing,
namely [T ]. A condition (η 0 , T̃ 0 , T 0 , p0T , qT0 ) extends condition (η, T̃ , T, pT , qT ) iff:
T̃ 0 ⊆ T̃ and T 0 ⊆ T (which automatically implies η 0 ∈ T ). The requirement is:
RΨ : ΨG is computable or non total or G ≤T ΨG .
A condition (η, T̃ , T, pT , qT ) forces RΨ iff for every G ∈ [T ], ΨG satisfies RΨ .
We begin with some notions. Let T̃ be a strong c.e. tree with η as its stem. For
a Turing functional Ψ, an n ∈ ω, and a computable function q : ω → Q, let

(3.1) ṼΨ,n,q = V ⊆ 2n : The set {σ ∈ T̃ : (Ψσ n) ↓∈ 2n \ V } is q-small over η .

VΨ,n,q = V ⊆ 2n : there exists a finite q-big over η set S ⊆ T̃
such that for every σ ∈ S, (Ψσ n) ↓∈ V. .
Intuitively, V ∈ ṼΨ,n,q means that q is a measure of how much tree one needs to
prune in order to force ΨG ∈ [V ]. If V ∈ ṼΨ,n,q for small q, it means Ψ easily avoid
2n \ V ; we interpret this as the measure of 2n \ V is smaller than q. On the other
hand, if V ∈ VΨ,n,q for some q, it means we can force ΨG ∈ [V ] in a Σ01 way on a
q-bushy tree; we interpret this as the measure of V is lager than q. We make some
simple observations. These observations coincides with the measure interpretation
of ṼΨ,n,q . For example, item (2) can be interpreted as if 2n \ V, 2n \ V 0 has measure
smaller than q, q 0 respectively, then their union, 2n \ (V ∩ V 0 ), has measure smaller
than q + q 0 .
Lemma 3.2. Let V, V 0 ⊆ 2n :
(1) V ∈ VΨ,n,q if and only if 2n \ V ∈
/ ṼΨ,n,q .
(2) If V ∈ ṼΨ,n,q , V 0 ∈ ṼΨ,n,q0 , then V ∩ V 0 ∈ ṼΨ,n,q+q0 .
(3) If V ∈ ṼΨ,n,q , V 0 ∈ VΨ,n,q0 , then V ∩ V 0 ∈ VΨ,n,q0 −q ;
(4) If V ∈ ṼΨ,n,q , V 0 ∈
/ VΨ,n,q0 , then V \ V 0 ∈ ṼΨ,n,q+q0 .
0
(5) If V ∈ ṼΨ,n,q , V ∈
/ ṼΨ,n,q0 , then V \ V 0 ∈ VΨ,n,q0 −q .
0
(6) If V ∈
/ VΨ,n,q , V ∈
/ VΨ,n,q0 , then V ∪ V 0 ∈
/ VΨ,n,q+q0 .
Proof. Item (1) follows from definition.
For item (2), let
(3.2)

S = {σ ∈ T̃ : (Ψσ n) ↓∈ 2n \ V },
S 0 = {σ ∈ T̃ : (Ψσ n) ↓∈ 2n \ V 0 }.

Since V ∈ ṼΨ,n,q , V 0 ∈ ṼΨ,n,q0 , S, S 0 are q-small, q 0 -small respectively. By Lemma
1.2, S ∪ S 0 is (q + q 0 )-small over η. But
S ∪ S 0 = {σ ∈ T̃ : (Ψσ n) ↓∈ 2n \ (V 0 ∩ V )}.
Compare with (3.1) and we are done.
For item (3), let S 0 ⊆ T̃ be a finite q 0 -big over η set witnessing V 0 ∈ VΨ,n,q0 . Let
S = {σ ∈ S 0 : (Ψσ n) ↓∈
/ V }.

20

LU LIU

Since V ∈ ṼΨ,n,q , S is q-small over η. Thus by Lemma 1.2, S 0 \ S is (q 0 − q)-big
over η. And clearly for every σ ∈ S 0 \ S, (Ψσ n) ↓∈ V ∩ V 0 . Note that for this item,
it’s crucial that for some n, V, V 0 ⊆ 2n .
For item (4), note that V 0 ∈
/ VΨ,n,q0 implies 2n \ V 0 ∈ ṼΨ,n,q0 . Thus by item (2),
n
0
0
V ∩ (2 \ V ) = V \ V ∈ ṼΨ,n,q+q0 . Item (5)(6) follows from item (3)(2) respectively
in a similar fashion.

Suppose T is an infinite subtree of T̃ with no leaf and with η as its stem. Firstly,
it’s easy to prove that if there are not enough successor of η that make Ψ(n)
converge, then we can force it to diverge.
Lemma 3.3. Suppose T̃ \ T is q-small over each σ ∈ T and T is p-bushy.
(1) Suppose S is a subset of T̃ that is q 0 -small over η with p > q 0 + q, then there
exists an infinite subtree T 0 of T with no leaf and with η as its stem such
that T̃ \ T 0 is (q + q 0 )-small over every σ ∈ T 0 and [T 0 ] ∩ [S] = ∅.
(2) Suppose ∅ ∈ ṼΨ,n,q00 with p > q 00 , then there exists an infinite subtree T 0 of
T with no leaf and with η as its stem such that T̃ \ T 0 is (q + q 00 )-small over
every σ ∈ T 0 and for every X ∈ [T ], ΨX is not total.
Proof. For item (1). Consider the following subtree of T :

T 0 = σ ∈ T : [S] is q 0 -small over σ .
It’s obvious that [T 0 ]∩[S] = ∅. Clearly η ∈ T 0 and for every σ ∈ T 0 , σ admit at least
p(|σ|)−q 0 (|σ|)−q(|σ|) many immediate successor in T 0 . Thus T 0 is (p−q 0 −q)-bushy
over η. Since p > q 0 + q, we have that T 0 is infinite with no leaf. Note that for
every σ ∈ T 0 , less than q 0 (|σ|) many immediate successor of σ in T is contained in
T \ T 0 . Therefore T \ T 0 is q 0 -small over each σ ∈ T 0 . Meanwhile, T̃ \ T is q-small
over each σ ∈ T 0 . Thus by Lemma 1.2, T̃ \ T 0 is (q + q 0 )-small over each σ ∈ T 0 .
Item (2) follows from item (1) by setting S to be {σ ∈ T̃ : (Ψσ n) ↓}.

Our core argument is the following Lemma 3.4 which shows that we can thin a
tree by a factor of j to make j many Turing functionals split. Let T̃i , i < j be strong
c.e. trees with ηi , i < j as their stem respectively. Fix j many Turing functionals
{Ψi : i < j}. For any computable function q : ω → Q, let

i
Ṽn,q
= V ⊆ 2n : The set {σ ∈ T̃i : (Ψσ n) ↓∈ 2n \ V } is q-small over ηi .

i
i
Vn,q
= V ⊆ 2n : 2n \ V ∈
/ Ṽn,q
.
Suppose each T̃i admit an infinite subtree Ti such that Ti has no leaf, T̃i \ Ti is
qi -small over each σ ∈ Ti and Ti is p-bushy over ηi where p, qi are computable
function from ω to Q.
Lemma 3.4. Let q, q 0 , q 00 be computable functions from ω to Q such that p >
i
q + q 0 + q 00 . Suppose V ∗ ∈ Ṽni ∗ ,q0 , ∅ ∈
/ Ṽn,q
0 +2jq for all i < j, n ∈ ω. Either of the
following is true:
(1) There exists a sequence of sets V0 , · · · , Vj−1 ⊆ [V ∗ ] with [Vi ] , i < j being
i
mutually disjoint such that for every i < j, Vi ∈ Vn,q
for some n;
(2) There exists a i < j, an infinite tree T ⊆ Ti with no leaf with ηi as its stem
such that T̃i \ T is (2jq + q 0 + qi )-small over every σ ∈ T , and there exists a

WHICH DNR CAN BE MINIMAL

21

finite (2jq + q 0 + q 00 )-big over ηi set S ⊆ T̃i such that for every X ∈ [T ] ∩ [S],
ΨX
i is not total;
(3) There exists a i < j, an infinite tree T ⊆ Ti with no leaf with ηi as its stem
such that T̃i \ T is (2jq + q 0 + q 00 + qi )-small over every σ ∈ T and for every
X
X ∈ [T ], if ΨX
i is total, then Ψi is computable.
i
Remark 3.5. The intuition of this Lemma is the following. For V ∈ Vn,q
, we can see
q as a measure of V assigned by Ψi . Meanwhile, it’s trivial to verify that for j many
continuous positive measure µ0 , · · · , µj−1 on a space S, there exists a partition of
S into k disjoint pieces, namely S0 , · · · , Sj−1 such that µi (Si ) ≥ 1/k. Here a
measure is continuous means it does not assign non zero measure on singleton. In
our application, V ∗ = ⊥, q 0 ≡ 0, q, q 00 are mush smaller compared to p and much
i
larger than qi . The hypothesis ∅ ∈
/ Ṽn,q
0 +2jq simply means there are many strings
0
σ (a measure of more than q + 2jq) such that (Ψσi n) ↓.

Proof. We prove by induction on j. For j = 1, V ∗ ∈ Ṽn0∗ ,q0 , ∅ ∈
/ Ṽn0∗ ,q+q0 implies by
∗
0
Lemma 3.2 item (5) that V ∈ Vn∗ ,q . Thus the conclusion follows when j = 1. Now
assume that conclusion holds for j −1 by fulfilling item (1). For every n > n∗ , i < j,
let Vn∗ = [V ∗ ] ∩ 2n . As said in the remark, the major trouble maker is singletons,
therefore let
i
i
Wn,q
= {ρ ∈ Vn∗ : {ρ} ∈ Vn,q
}.
The key part is Case 1 where not so much measure is put on singletons. i.e., for
i
some sufficiently big set S, some ĩ, Ψσĩ n ∈
/ ∪i<j Wn,q
for all σ ∈ S.
i
ĩ
∈
/ Ṽn,q+q
Case 1. For some ĩ < j, n > n∗ , ∪i<j Wn,q
0.
i
)
Intuitively, the hypothesis of this case says that the measure of 2n \ (∪i<j Wn,q
0
is larger than q + q . In this case we locate a V̂ so that every proper subset of V̂ can
be very easily avoided by all Ψi and for some î, V̂ can not be as easily avoided by
Ψî as its proper subset. We argue that by Lemma 3.2, V̂ can be avoided by all Ψi .
Thus we force ΨG
∈ [V̂ ] while we force ΨG
/ [V̂ ] for all i 6= î. And the conclusion
i ∈
î
follows by induction.
∗
Since V ∗ ∈ Ṽnĩ ∗ ,q0 (the measure of 2n \ V ∗ is smaller than q 0 ), we have Vn∗ ∈
ĩ
∗
Ṽn,q
0 for all n > n . Therefore, the hypothesis of Case 1 implies, the measure of
n
i
(2 \ ∪i<j Wn,q ) \ (2n \ Vn∗ ) is larger than (q + q 0 ) − q 0 = q. More precisely, by Lemma
3.2 item (5),
i
ĩ
Vn∗ \ (∪i<j Wn,q
) ∈ Vn,q
.
Consider the collection of such sets
i
î
V ⊆ Vn∗ \ (∪i<j Wn,q
) that for some î < j, V ∈ Vn,q
.
i
Let V̂ ⊆ Vn∗ \ (∪i<j Wn,q
) be the minimal (in the sense of subset) among this
collection. i.e.,
0

i
there is no V 0 ( V̂ such that ∃i0 < j[V 0 ∈ Vn,q
].
î
Suppose V ∈ Vn,q
. It is not necessary that î = ĩ.
i
We show that Vn∗ \ V̂ ∈ Ṽn,q
0 +2q for all i < j. This is because every proper subset
of V̂ can be easily avoided by minimality of V̂ . So, simply choose two subsets of V̂

22

LU LIU

and apply Lemma 3.2 item (6) to avoid both of them. Let ρ ∈ V̂ be arbitrary (which
î
i
i
clearly exists since V̂ ∈ Vn,q
) and let i < j. Since ρ ∈
/ ∪i<j Wn,q
, so {ρ} ∈
/ Vn,q
.
i
i
Since V̂ is minimal, so V̂ \ {ρ} ∈
/ Vn,q . Thus by Lemma 3.2 item (6), V̂ ∈
/ Vn,2q .
∗
i
This implies, by Lemma 3.2 item (4), Vn \ V̂ ∈ Ṽn,q0 +2q .
Now the conclusion follows by induction where V ∗ , q 0 are reset to be Vn∗ \ V̂ and
0
q + 2q respectively, and j is reduced to j − 1. In the end, if item (1) holds, then V̂
will be the set corresponding to î.

i
Case 2. There exists a i < j such that |Wn,q
| is not bounded with respect to n.
i
Let B = {i < j : |Wn,q | is not bounded with respect to n}. It is clear that for
i
some sufficiently large n, there exists a ρi ∈ Wn,q
for each i ∈ B such that ρi , i ∈ B
î
/ B. Let W = {ρi : i ∈ B}. Since
are mutually different and ρi ∈
/ Wn,q for all î ∈
each ρi has measure smaller than q with respect to Ψî ) therefore (2n \ Vn∗ ) ∪ W has
measure smaller than q with respect to Ψî when î ∈
/ B.
î
More precisely, since {ρi } ∈
/ Vn,q for all i ∈ B, î ∈ j \ B, by Lemma 3.2 item (4),
î
Vn∗ \ W ∈ Ṽn,q
for
all
î
∈
/ B. Thus the conclusion follows by induction where
0 +|B|q
j is reduced to j − |B| and V ∗ , q 0 are reset to be Vn∗ \ W , q 0 + |B|q respectively. In
case item (1) holds, the set corresponding to Ψi with i ∈ B will be {ρi }.

Case 3. Otherwise.
i
and Wq = ∪n Wn,q . It is clear that Wn,q ⊆ [Wn−1,q ] .
Let Wn,q = ∪i<j Wn,q
∗
Therefore Wq is a tree (in 2≥n ). Moreover, since it is not Case 2, for some u and
n > n∗ , we have |Wn,q | = u for all n > n. By compactness, Wn,q is c.e., therefore
Wq is a c.e. tree. Since |Wn,q | = u for all n > n, Wq is a computable tree and
every element in [Wq ] is computable. Fix an i, to force ΨG to be a member of [Wq ]
(fulfilling item (3)), consider the set on which ΨG ∈
/ [Wq ]:
Ŝ = {σ ∈ T̃i : (Ψσi n) ↓∈
/ Wn,q for some n > n}.
Note that for every n, since it is not Case 1, Ψi can easily avoid 2n \ Wn,q . But it
doesn’t mean Ψi can easily avoid W q . i.e., Ŝ might not be very small. We show
that if we can not easily avoid W q , then we can force Ψi to be non total.
If Ŝ is (q + q 0 + q 00 )-small over η, then by Lemma 3.3, there exists an infinite tree
T ⊆ Ti with no leaf with ηi as its stem such that
T̃i \ T is (q + q 0 + q 00 + qi )-small over every σ ∈ T
and [T ] ∩ [Ŝ] = ∅, which means for every X ∈ [T ], every n > n,
X
(ΨX
i n) ↓→ Ψi n ∈ Wn,q .
X
Then we are done since for every X ∈ [T ], ΨX
i is total implies Ψi ∈ [Wq ] and is
therefore computable, which fulfills item (3) of this lemma.
If Ŝ is (q + q 0 + q 00 )-big over η, by definition of “bigness”, there exists a finite
subset S of Ŝ that is (q + q 0 + q 00 )-big over η. Let n̂ be sufficiently large, say,

n̂ > max{n : for some σ ∈ S, (Ψσi n) ↓∈
/ Wn,q }.

WHICH DNR CAN BE MINIMAL

23

i
Since it is not Case 1, Wn̂,q ∈ Ṽn̂,q+q
0 for all i < j. By Lemma 3.3, there exists an
infinite subtree T of Ti with no leaf and with η as its stem such that

T̃i \ T is (q + q 0 + qi )-small over every σ ∈ T and
(Ψσi n̂) ↓→ Ψσi n̂ ∈ Wn̂,q for all σ ∈ T.
We show that S, T is the desired pair fulfilling conclusion (2). Let X ∈ [T ] ∩ [S].
By definition of S, (ΨX n) ∈
/ Wn,q for some n < n̂, which means,
(ΨX n̂) ↓→ (ΨX n̂) ∈
/ Wn̂,q
since Wn,q ⊆ [Wn−1,q ] . But by definition of T ,
(ΨX n̂) ↓→ (ΨX n̂) ∈ Wn̂,q .
Thus ΨX can not be total.

Fix a Turing functional Ψ and a condition (η, T̃ , T, pT , qT ). Suppose p̂ : ω → Q
is such a computable function that
lim

n→∞

p̂(n)
pT (n)
= ∞, lim
=∞
n
k
n→∞
max{p̂(n), 1} · |T̃ ∩ ω |
max{qT (n), 1} · |T̃ ∩ ω n |k

for all k (which means both (p̂, qT ) and (pT , p̂) satisfy item (5) of the definition of
condition) and for every n ≥ |η|,
pT (n) > 4p̂(n) · |T̃ ∩ ω n | > 16qT (n) · |T̃ ∩ ω n |.
For convenience, we transform Lemma 3.4 into the following:
Lemma 3.6. Either there exists an extension of (η, T̃ , T, pT , qT ) forcing ΨG to be
computable or non total, or for any m, any set B = {ηi }i<j ⊆ T ∩ ω m , there exists
for each i ∈ B a finite tree Ti0 ⊆ T̃ with ηi being its stem such that Ti0 is p̂/2-bushy
over ηi and for every σ ∈ `(Ti0 ), (Ψσ n) ↓∈ Vi for some n where [Vi ] , i ∈ B are
mutually disjoint.
Proof. Fix a B = {ηi }i<j ⊆ T ∩ ω m . Let T̃i = T̃ ∩ [ηi ] . Note that
pT (n) − 2j p̂(n) − qT (n) > 1
for all n ≥ |η| since pT (n) > 4p̂(n) · |T̃ ∩ ω n |. Therefore, if for some i < j, n ∈ ω,
i
0
∅ ∈ Ṽn,2j
p̂ , then by Lemma 3.3, there exists an infinite subtree T of Ti with no leaf
0
and with ηi as its stem such that T̃i \ T is (qT + 2j p̂)-small over every σ ∈ T 0 and
for every X ∈ [T 0 ], ΨX is not total. Thus (ηi , T̃i , T 0 , pT , qT + 2j p̂) is the desired
extension.
Suppose this is not the case. Apply Lemma 3.4 with
(3.3)

Ψi = Ψηi , T̃i = T̃ ∩ [ηi ] , Ti = T ∩ [ηi ] ,
n∗ = 0, V ∗ = {⊥}, q 0 ≡ 0, q = p̂, qi = qT , q 00 = qT ,

we have that one of the three items holds.
If item (1) of Lemma 3.4 holds, it means that there exists finite set Si ⊆ T̃i for
each i < j, with Si being p̂-big over ηi respectively, such that for every σ ∈ Si ,
(Ψσ n) ↓∈ Vi for some n where [Vi ] , i < j are mutually disjoint. Since T̃i \ Ti is
qT -small over every σ ∈ Ti with qT < p̂/2, there exists for each i < j a finite tree
Ti0 ⊆ T̃i with ηi as its stem such that Ti0 is p̂/2-bushy and for every σ ∈ `(Ti0 ), there

24

LU LIU

exists n such that (Ψσ n) ↓∈ Vi . Clearly such Ti0 , i < j are computable (if exists)
uniformly in B, T̃ , pT , qT , p̂. Thus we are done for this case.
If item (2) of Lemma 3.4 holds, it means that for some i < j, there exists an
infinite tree T 0 ⊆ Ti with no leaf with ηi as its stem such that T̃i \ T 0 is (2j p̂ + qT )small over every σ ∈ T 0 , and there exists a finite (2j p̂ + qT )-big over ηi set S ⊆ T̃i
0
such that for every X ∈ [T 0 ] ∩ [S], ΨX
i is not total. But T̃i \ T is (2j p̂ + qT )-small
over ηi and S is (2j p̂ + qT )-big over ηi . This implies that S ∩ T 0 6= ∅. Suppose
η 0 ∈ S ∩ T 0 . Clearly the condition
(η 0 , T̃i ∩ [η 0 ] , T 0 ∩ [η 0 ] , pT , 2j p̂ + qT )
is a desired extension of (η, T̃ , T, pT , qT ) that forces RΨ .
If item (3) of Lemma 3.4 holds, the conclusion follows similarly. Thus we are
done.

Now it’s easy to prove the following:
Lemma 3.7. Every condition admit an extension forcing RΨ .
Proof. Fix a condition (η, T̃ , T, pT , qT ). Without loss of generality suppose |η| is
sufficiently large so that the function p̂ defined before Lemma 3.6 exists (otherwise
extend η to be so). Suppose there is no extension of (η, T̃ , T, pT , qT ) forcing ΨG to
be computable or non total. We construct a strong c.e. tree by inductively define
a sequence of finite trees Tn , n ∈ ω so that Ψ split on the tree. Which ensure that
for every infinite path G of the tree, G ≤T ΨG . Let T0 = {η}, T1 = T̃ ∩ ω |η|+1 .
Suppose we have defined T0 , · · · , Tn . Let An denote the set of string σ such that
at some step before n, some nodes have grown above σ and after that point, the
tree above σ has remained unchanged. i.e.,

An = σ ∈ Tn : for some m ≤ n, σ ∈ `(Tm−1 ) and
(Tm \ Tm−1 ) ∩ [σ] = (Tn \ Tm−1 ) ∩ [σ] ) {σ} .
Moreover, we assume that for every σ ∈ An , `(Tn ∩ [σ] ) ⊆ ω l for some l ∈ ω.
This is because we can require in Lemma 3.6 that each Ti0 being height-homogeneous
i.e., its leaves lies on the same level.
At step n, we wait for a time that above some σ ∈ An , Ψ split by that time.
For every σ ∈ An , let Sσ = `(Tn ) ∩ [σ] . Wait for such a time t that there exists
a σ ∈ An a subset Bσ = {ηi }i<j of Sσ with Sσ \ Bσ being qT -small over every
τ ∈ {τ ∈ [σ] : for some i < j, τ  ηi } such that for every i < j, there exists a
finite height-homogeneous tree Ti0 ⊆ T̃ ∩ [ηi ] with ηi as its stem such that
• Ti0 ) {ηi } is p̂/2-bushy over ηi ;
• For every τ ∈ `(Ti0 ), there exists an n such that (Ψτ n) ↓∈ Vi .
Where [Vi ] , i < j are mutually disjoint. By Lemma 3.6 such time t exists. In this
case we say the tree grows due to σ at step n.
Let Tn+1 = Tn ∪ (∪i<j Ti0 ) and declare Sσ \ Bσ leaves of T̃ 0 . Let
T̃ 0 = ∪n Tn and T 0 = T ∩ {ρ ∈ T̃ 0 : [ρ] ∩ [T̃ 0 ] 6= ∅}.
We show that (η, T̃ 0 , T 0 , p̂/2, 2qT ) is the desired extension. It’s easy to see that ΨY
computes Y if Y ∈ [T 0 ] since we have made sure that Ψ split on T 0 . It’s also trivial

WHICH DNR CAN BE MINIMAL

25

to verify item (1)(2)(3)(5) of definition of condition. By the construction of T̃ 0 , it’s
direct that T̃ 0 is p̂/2-bushy over η.
Now we verify item (4) of the definition of condition, which is simple but tedious.
Let D denote the set of nodes that is declared to be leaves of T̃ 0 . It’s easy to see
that for every n, every σ ∈ An , D is qT -small over σ. We prove that this is true for
all τ ∈ T 0 .
Claim 3.8. For every τ ∈ T 0 , D is qT -small over τ .
Proof. Fix a τ ∈ T 0 . Note that there must exist a time point at which τ is put into
T̃ 0 . i.e., there must exist some m, σ ∈ `(Tm ), such that τ ∈ (Tm+1 \ Tm ) ∩ [σ] .
Since [τ ] ∩ [T̃ 0 ] 6= ∅, the tree must grow again due to σ, i.e., there exists an n with
σ ∈ An (which means the tree above σ remains unchanged before step n) such that
(Tn+1 \ Tn ) ∩ [σ] 6= (Tm+1 \ Tm ) ∩ [σ] .
Note that if the tree above τ does not grow at step n, then all elements in [τ ] ∩`(Tn )
will be declared leaf of T̃ 0 and the tree above τ will no longer grows, which makes
it impossible that [τ ] ∩ [T̃ 0 ] 6= ∅. Therefore we have:
[τ ] ∩ Bσ 6= ∅.
This implies, by our construction, Sσ \ Bσ is qT -small over τ . Meanwhile, it’s
obvious that Bσ ⊆ An+1 . Therefore D is qT -small over every η 0 ∈ Bσ . Thus D is
qT -small over τ .

Next we argue that:
Claim 3.9. For every ρ ∈ T , if ρ ∈
/ T 0 , then it must be the case that at some point

n, all elements in `(Tn ) ∩ [ρ] have been declared leaves. i.e.,
(3.4)

T̃ 0 \ T 0 ⊆ {ρ ∈ T̃ : T̃ 0 ∩ [ρ] is finite and `(T̃ 0 ∩ [ρ] ) ⊆ D} ∪ (T̃ \ T ).

Proof. The key point is:
(3.5)

for every ζ ∈ T, if ζ ever enters some An , then [ζ] ∩ [T̃ 0 ] 6= ∅.

Simply because each Bσ still contains many elements in T if σ ∈ T . Fix a ρ ∈
T̃ 0 \ T 0 such that ρ ∈ T . Suppose otherwise that (3.4) is not true. By definition
of T 0 , [ρ] ∩ [T̃ 0 ] = ∅. Note that there must exist an n and a σ 0 ∈ An such that
ρ ∈ (Tn \ Tn−1 ) ∩ [σ 0 ] . Clearly σ 0 ∈ T since σ 0  ρ. Note that for every σ ∈ T , if
σ ever enters An at some step n, then there must exists some point that the tree
grows due to σ. Which means at some step n, Bσ0 is defined. Since [ρ] ∩ Bσ0 6= ∅
(otherwise all `([ρ] ∩ Tn ) will be declared leaves, a contradiction to the otherwise
assumption), therefore Sσ0 \ Bσ0 is qT -small over ρ. Combine with T̃ \ T being qT
small over ρ and Sσ0 being p̂/2-big over ρ, we have
[ρ] ∩ Bσ0 ∩ T is (p̂/2 − 2qT )-big over ρ.
Therefore there exists a τ ∈ [ρ] ∩ Bσ0 ∩ T 6= ∅. But Bσ0 ⊆ An , so τ ∈ An . As we
observed in (3.5), [τ ] ∩ [T̃ 0 ] 6= ∅, which implies [ρ] ∩ [T̃ 0 ] 6= ∅, a contradiction.

Now we are ready to check item (4). For every τ ∈ T 0 ,
T̃ 0 \ T 0 ⊆ (T̃ \ T ) ∪ (T \ T 0 )

26

LU LIU

and (T̃ \ T ) is qT -small over τ (since τ ∈ T 0 ⊆ T ). On the other hand, if T \ T 0 is
not qT -small over τ , then by Claim 3.9, D is not qT -small over τ , a contradiction
to Claim 3.8. Thus T̃ 0 \ T 0 is 2qT -small over τ and we are done.

Proof of Theorem 3.1. The initial condition is (⊥, h<ω , T, h1 , 2) where
X
T = {σ ∈ h<ω : for every n ≤ |σ|, σ(n) 6= ΨX
n (n) if Ψn (n) ↓}

and h1 (n) = h(n+1). It’s easy to verify that (⊥, h<ω , T, h1 , 2) is indeed a condition.
By Lemma 3.7, there exists a sequence of conditions d0 ⊇ d1 ⊇ · · · where ds =
(ηs , T̃s , Ts , ps , qs ) such that every requirement is forced at some point. Thus G =
∪s ηs is a member of all conditions ds , therefore G satisfy all requirements. Clearly
G ∈ DNRX
h since G ∈ d0 . Thus we are done.

References
1. Klaus Ambos-Spies, Bjørn Kjos-Hanssen, Steffen Lempp, and Theodore A. Slaman, Comparing DNR and WWKL, Journal of Symbolic Logic 69 (2004), no. 04, 1089–1104.
2. Achilles Beros, A DNC that computes no effectively bi-immune set, arXiv preprint
arXiv:1308.1324 (2013).
3. Laurent Bienvenu and Ludovic Patey, Diagonally non-computable functions and fireworks,
Information and Computation (2016), To appear. Available at http://arxiv.org/abs/1411.
6846.
4. Jörg Brendle, Andrew Brooke-Taylor, Keng Meng Ng, and André Nies, An analogy between
cardinal characteristics and highness properties of oracles, Proceedings of the 13th Asian
Logic Conference, World Scientific, 2015, pp. 1–28.
5. François G. Dorais, Jeffry L. Hirst, and Paul Shafer, Comparing the strength of diagonally nonrecursive functions in the absence of Σ02 induction, arXiv preprint arXiv:1401.3823 (2014).
6. Rodney G. Downey and Denis R. Hirschfeldt, Algorithmic randomness and complexity,
Springer, 2010.
7. Mariagnese Giusto and Stephen G Simpson, Located sets and reverse mathematics, The Journal of Symbolic Logic 65 (2000), no. 3, 1451–1480.
8. Noam Greenberg and Joseph S Miller, Diagonally non-recursive functions and effective hausdorff dimension, Bulletin of the London Mathematical Society 43 (2011), no. 4, 636–654.
9. Mushfeq Khan and Joseph S Miller, Forcing with bushy trees, Bulletin of Symbolic Logic 23
(2017), no. 2, 160–180.
10. Bjørn Kjos-Hanssen, Wolfgang Merkle, and Frank Stephan, Kolmogorov complexity and the
recursion theorem, Transactions of the American Mathematical Society 363 (2011), no. 10,
5465–5480.
11. Masahiro Kumabe and Andrew EM Lewis, A fixed point free minimal degree, Journal of the
London Mathematical Society 80 (2009), no. 3, 785–797.
12. André Nies, Computability and Randomness, Oxford Logic Guides, vol. 51, Oxford University
Press, 2009.
13. Nicholas Rupprecht, Effective correspondents to carcindal characteristicsin chichons diagram,
(2010).
Department of Mathematics, Central South University, City Changsha, Hunan Province,
China. 410083
E-mail address: g.jiayi.liu@gmail.com

