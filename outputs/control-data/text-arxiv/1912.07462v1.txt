On the Unity of Logic: a Sequential,
Unpolarized Approach

arXiv:1912.07462v1 [math.LO] 16 Dec 2019

Norihiro Yamada
Department of Computer Science
University of Oxford
Wolfson Bulding, Parks Road, Oxford OX1 3QD, United Kingdom
Email: norihiro.yamada@cs.ox.ac.uk

Abstract—The present work aims to give a unity of logic via
standard sequential, unpolarized games. Specifically, our vision
is that there must be mathematically precise concepts of linear
refinement and intuitionistic restriction of logic such that the
linear refinement of classical logic (CL) coincides with (classical)
linear logic (LL), and its intuitionistic restriction with the linear
refinement of intuitionistic logic (IL) into intuitionistic LL (ILL).
However, LL is, in contradiction to the name, cannot be the linear
refinement of CL at least from the game-semantic point of view
due to its concurrency and polarization. In fact, existing game
semantics of LL employs concurrency, which is rather exotic
to game semantics of ILL, IL or CL. Also, linear negation in
LL brings polarization to logic, which is never true in (game
semantics of) ILL, IL or CL. In search for the linear refinement
of CL (or the classicalization of ILL), we carve out (a calculus of)
linear logic negative (LL− ) from (the two-sided sequent calculus
of) LL by discarding linear negation, restricting the rules Cut,
⊗R, `L, &R, ⊕L and ⊸R (for they cause concurrency) in a
certain way, and adding distribution rules to recover these rules
(except ⊸R) and give a translation of sequents ∆ ⊢ Γ for CL
into the sequents !∆ ⊢ ?Γ for LL− . We then give a categorical
semantics of LL− , for which we introduce why not monad ?,
dual to the well-known of course comonad !, giving a categorical
df .
translation ∆ ⇒ Γ = ?(∆ ⊸ Γ) ∼
= !∆ ⊸ ?Γ of CL into
LL− , which is the Kleisli extension of the standard translation
df .
∆ ⇒ Γ = !∆ ⊸ Γ of IL into ILL. Moreover, we instantiate the
categorical semantics by a fully complete (sequential, unpolarized)
game semantics of LL− (without atoms), for which we introduce
linearity of strategies. Moreover, employing the above categorical
translations, it automatically leads to game semantics of ILL, IL
and CL as well. Thus, we establish a sequential, unpolarized unity
of logic, where discarding the co-Kleisli construction ( )! and/or
the Kleisli construction ( )? , and imposing well-bracketing on
strategies capture linear refinement and intuitionistic restriction
of logic in a syntax-independent manner, respectively.

I. I NTRODUCTION
A. Linear Logic
Linear logic (LL) [1] is often said to be resource-conscious
or resource-sensitive because it requires proofs to consume
each premise exactly once to produce a conclusion. One of
the achievements of LL is: Like classical logic (CL) [2],
[3] it has an involutive negation, and more generally the De
Morgan dualities [1], [4], in the strict sense (i.e., not only
up to logical equivalence), called linear negation ( )⊥ , while
like intuitionistic logic (IL) [5], [6], [3] it has constructivity in
the sense of non-trivial semantics [7], where note that neither

CL nor IL (in the form of the sequent calculi LK and LJ [8])
achieves both the dualities and the contructivity [7], [3].
Strictly speaking, LL has both classical and intuitionistic
variants, CLL and ILL, and LL usually refers to CLL [9],
[10]. Let us call the standard (and two-sided) sequent calculi
for LL and ILL [1], [9], [3], [10] LLK and LLJ, respectively.
B. Game Semantics
Game semantics [11], [12] refers to a particular kind of
semantics of logic and computation [13], [14], [15], in which
formulas (or types) and proofs (or programs) are interpreted
as games and strategies, respectively.
A game is a certain kind of a rooted forest whose branches
correspond to possible developments or (valid) positions of the
‘game in the usual sense’ (such as chess and poker). These
branches are finite sequences of moves of the game; a play of
the game proceeds as its participants, Player who represents a
‘mathematician’ (or an ‘agent’) and Opponent who represents
a ‘rebutter’ (or an ‘environment’), alternately and separatedly
perform moves allowed by the rules of the game.
On the other hand, a strategy on a game is what tells Player
which move she should perform at each of her turns, i.e., ‘how
she should play’, on the game.
C. Concurrency and Polarization in Logic and Games
Problems in the game semantics of LL by Andreas Blass
[16] were the starting point of game semantics in its modern,
categorical form [17]. Today, Guy McCusker’s variant [18]
models ILL and IL in a unified manner, embodying Girard’s
df.
translation A ⇒ B = !A ⊸ B of IL into ILL [1]. Even
game semantics of computation with classical features has
been proposed [19], [20] though game semantics of CL in
general has not been well-established yet.
Notably, modern game semantics of LL [21], [22] employs
concurrent games, in which more than one participant may
be active simultaneously, as opposed to standard sequential
games, in which only one participant may perform a move at
a time. Importantly, however, concurrency is not necessary at
all for game semantics of CL mentioned above.
Another approach is to model the polarized fragment of LL
by polarized (yet sequential) games [23]. A game has the positive (resp. negative) polarity if Player (resp. Opponent) always
initiates a play of the game [23]; standard unpolarized games

are all negative. Also, polarization in games corresponds to
polarization in logic [4], [24], giving a unity of logic.
However, polarization is rather exotic to (game semantics
of) CL; hence, it seems to have nothing to do with classicalization of logic or games. Also, polarization never occurs in
(game semantics of) ILL, and therefore, it appears irrelevant
to linear refinement of logic.
D. Sequential, Unpolarized Unity of Logic
Hence, we are concerned with LL without concurrency or
polarization, which let us call linear logic negative (LL− ),
and moreover, conjecture that there are mathematically precise
concepts of linear refinement and intuitionistic restriction of
logic such that the linear refinement of CL coincides with
LL− , and its intuitionistic restriction with the linear refinement
of IL into ILL, giving a sequential, unpolarized unity of logic
(n.b., classicalization is the inverse of intuitionistic restriction).
Motivated in this way, we carve out the language of LL−
from that of LL by discarding linear negation (for it brings
polarization) and a sequent calculus LLK− for LL− from
LLK by restricting the rules Cut, ⊗R, `L, &R, ⊕L and ⊸R
(for they cause concurrency) in a certain way and adding
distribution rules to recover these rules (except ⊸R) and
translate sequents ∆ ⊢ Γ in LK− into the sequents !∆ ⊢ ?Γ
in LLK− , where LK− is the calculus obtained from LK by
restricting ⇒R in the same way as ⊸R in LLK− . We then give
a cut-elimination procedure on LLK− by normalization-byevaluation (NBE) [25], exploiting the game semantics below.
In terms of these calculi, linear refinement corresponds
to eliminating exponentials ! and/or ? imposed (implicitly)
in LK− and LJ, and intuitionistic restriction to limiting the
number of formulas on the RHS of sequents to at most one.
In other words, LK− (resp. LJ) is obtained from LLK− (resp.
df.
LLJ) by the translation ∆ ⊢LK− Γ = !∆ ⊢LLK− ?Γ (resp.
df.
∆ ⊢LJ B = !∆ ⊢LLJ B), and LLJ (resp. LJ) from LLK−
−
(resp. LK ) by intuitionistic restriction, and the two operations
commute, where the subscripts indicate the underlying calculi.
E. Sequential, Unpolarized Unity of Games
We then aim to establish the game-semantic counterpart of
the unity on LLK− , LK− , LLJ and LJ. Let us first explain
our approach in terms of categorical logic [26], [27]. Recall
that the standard categorical semantics of ILL (without ⊥
or ⊕) is a new-Seely category (NSC) [28], which is a symmetric monoidal closed category (SMCC) C = (C, ⊗, ⊤, ⊸)
with finite products (1, &) equipped with a comonad ! and
∼
∼
isomorphisms ⊤ → !1 and !A ⊗ !B → !(A&B) natural in
A, B ∈ C such that the canonical adjunction between C and
the co-Kleisli category C! is monoidal. Its charm is its unified
semantics of ILL and IL: C! is cartesian closed, inducing the
standard semantics of IL (without ⊥ or ∨) [26], [27].
Then, to model LL− , it is a natural idea to impose on C
another symmetric monoidal structure (`, ⊥), finite coprod∼
ucts (0, ⊕), a monad ? and natural isomorphisms ?0 → ⊥
∼
and ?(A ⊕ B) → ?A ` ?B such that the canonical adjunction
between C and the Kleisli category C ? is monoidal. However,

it is not possible; thus, we require that C is equipped with a lluf
subcategory ♯C whose morphisms are all strict, which has the
NSC-structure inherited from C (except ⊸), finite coproducts
and the triple (`, ⊥, ?). Moreover, we impose a distributive
law between ! and ? [29] on ♯C so that the co-Kleisli and the
Kleisli constructions on ♯C are extended to each other, leading
df.
to the bi-Kleisli category ♯C!? = (♯C! )? ≃ (♯C ? )! . Then, if
♯C has certain natural transformations/isomorphisms, it models
LLK− , and ♯C!? does LK− , while C and C! do LLJ and LJ.
Finally, we instantiate the categorical semantics by a gamesemantic NSC LG satisfying the required axioms, for which
we introduce linearity of strategies. As the main theorem,
we establish a fully complete [30] game semantics of LLK−
(without atoms) in ♯LG and a game semantics of LK− in ♯LG ?! .
Also, focusing on the intuitionistic part of the interpretations,
we establish a fully complete game semantics of LLJ (without
atoms) in the lluf subNSC LG wb of LG, in which strategies
are well-bracketed [31], and a game semantics of LJ in LG wb
! .
Thus, we establish a semantic unity of logic, where linear refinement and intuitionistic restriction correspond respectively
to deletion of the co-Kleisli construction ( )! and/or the Kleisli
construction ( )? , and imposing well-bracketing on strategies.
F. Our Contribution and Related Work
Broadly, our main contribution is to establish the novel, in
particular sequential and unpolarized, unity of logic in terms of
sequent calculi, categories and games. Novelties are the unified
(categorical and game) semantics and linearity of strategies;
highlights are the full completeness results.
Our approach stands in sharp contrast to the concurrent
and/or polarized approaches [21], [22], [23], [32], [33], [34]
for they stick to LL or its polarized fragments, while we
modify the logic into the sequential, unpolarized LL− .
Our categorical account is based on the established categorical semantics of ILL [35], [36], [37], [28] and of IL [26],
[27], as well as the study of the relation between monad and
comonad [29] and its application in game semantics [38].
G. Structure of the Paper
We first present the sequent calculi in Sect. II, and the
categorical semantics in Sect. III. Then, we establish the game
semantics in Sect. IV together with some consequences in
Sect. V. Finally, we show the full completeness in Sect. VI,
and draw a conclusion and propose future work in Sect. VII.
II. S EQUENT C ALCULI FOR THE L OGICS
We assume that the reader is familiar with the formal
languages and the sequent calculi for classical logic (CL) and
intuitionistic logic (IL) [8], [3], and those for linear logic (LL)
and intuitionistic linear logic (ILL) [1], [3], [9].
Throughout the paper, we focus on propositional logic [39].
A. Sequent Calculi for Classical and Intuitionistic Logics
Let us first present our sequent calculi LK− for CL, and LJ
for IL. Roughly, LK− is obtained from Gentzen’s LK [8] by
∆,A⊢B,Γ
restricting the rule (⇒R) ∆⊢A⇒B,Γ
to ⇒R− given in Fig. 1
(so that they can be modeled by sequential game semantics).

df.

As minor points, we define negation ¬ by ¬A = A ⇒ ⊥,
and include top ⊤ and the right-rule on bottom ⊥ for our
unified approach. Also, we modify ∧L and ∨R into the ones
closer to the calculi for (I)LL [1], [3] for convenience, which,
in the presence of the structural rules, does not matter.
Definition 1 (LK− ). The calculus LK− for CL consists of the
rules in Fig. 1.
(I D )
(XL)
(WL)
(CL)
(⊤L)
(⊥L)
(∧L)
(∨L)
(⇒L)

∆ ⊢ B, Γ
∆′ , B ⊢ Γ′
′
∆, ∆ ⊢ Γ, Γ′
′
′
∆ ⊢ Γ, B, B ′ , Γ′
∆, A, A , ∆ ⊢ Γ
(XR)
∆, A′ , A, ∆′ ⊢ Γ
∆ ⊢ Γ, B ′ , B, Γ′
∆⊢Γ
(WR) ∆ ⊢ Γ
∆, A ⊢ Γ
∆ ⊢ B, Γ
∆ ⊢ B, B, Γ
∆, A, A ⊢ Γ
(CR)
∆, A ⊢ Γ
∆ ⊢ B, Γ
∆⊢Γ
(⊤R)
⊢⊤
∆, ⊤ ⊢ Γ
∆⊢Γ
⊥ ⊢ (⊥R) ∆ ⊢ ⊥, Γ
∆ ⊢ B1 , Γ
∆ ⊢ B2 , Γ
∆, A1 , A2 ⊢ Γ
(∧R)
∆, A1 ∧ A2 ⊢ Γ
∆ ⊢ B1 ∧ B2 , Γ
∆ ⊢ B1 , B2 , Γ
∆, A1 ⊢ Γ
∆, A2 ⊢ Γ
(∨R)
∆, A1 ∨ A2 ⊢ Γ
∆ ⊢ B1 ∨ B2 , Γ
∆ ⊢ A, Γ
∆, B ⊢ Γ
A ⊢ B, Γ
(⇒R− )
∆, A ⇒ B ⊢ Γ
⊢ A ⇒ B, Γ

A⊢A

(C UT )

Fig. 1. The sequent calculus LK− for CL

In Sect. V, we give a cut-elimination procedure [8], [3] on
LK− by normalization-by-evaluation (NBE) [25], exploiting
the fully complete game semantics given in Sect. IV.
If one identifies sequents up to currying, which is implicitly
assumed by the one-sided calculus for CL [3] and justified by
the game semantics, the change of ⇒R into ⇒R− is not a
real restriction. In this sense, LK− is equivalent to LK.
Definition 2 (LJ [8], [3]). The calculus LJ for IL consists
of the rules of LK that have only intuitionistic sequents, i.e.,
ones such that the number of formulas on the RHS is 6 1.
B. Sequent Calculi for Linear Logic
In the present work, let us call the sequent calculi for LL and
ILL [1], [3] LLK and LLJ, respectively. As mentioned in the
introduction, LL and LLK are concurrent and polarized; thus,
we introduce the following sequential, unpolarized fragment:
df.

Notation. Given n ∈ N, we define n = {1, 2, . . . , n}.
Definition 3 (LL− and LLK− ). The formal language of
linear logic negative (LL− ) is obtained from that of LL by
discarding linear negation ( )⊥ . The calculus LLK− for LL−
df.
consists of the rules in Fig. 2, where f (A1 , A2 , . . . , Ak ) =
f A1 , f A2 , . . . , f Ak for all f ∈ {!, ?}.
That is, LLK− is obtained from LLK by discarding′ linear
∆ ,B⊢Γ′
negation ( )⊥ , restricting the rules (C UT ) ∆⊢B,Γ
,
∆,∆′ ⊢Γ,Γ′

∆ ⊢ !?B, Γ
∆, ?!A ⊢ Γ
(!?R)
∆, !?A ⊢ Γ
∆ ⊢ ?!B, Γ
∆ ⊢ A ⊗ (B ` C), Γ
∆, (A ⊗ B) ` C ⊢ Γ
(⊗`R)
(⊗`L)
∆, A, B ` C ⊢ Γ
∆ ⊢ A ⊗ B, C, Γ
′
∆⊢B
∆ , B ⊢ Γ′
(I D )
−
A ⊢ A (C UT )
′
∆, ∆ ⊢ Γ′
′
′
∆ ⊢ Γ, B, B ′ , Γ′
∆, A, A , ∆ ⊢ Γ
(XR)
(XL)
∆, A′ , A, ∆′ ⊢ Γ
∆ ⊢ Γ, B ′ , B, Γ′
∆
⊢
Γ
∆
⊢
Γ
(?W)
(!W)
∆, !A ⊢ Γ
∆ ⊢ ?B, Γ
∆, !A, !A ⊢ Γ
∆ ⊢ ?B, ?B, Γ
(!C)
(?C)
∆, !A ⊢ Γ
∆ ⊢ ?B, Γ
∆, A ⊢ Γ
∆ ⊢ B, Γ
(!D)
(?D)
∆, !A ⊢ Γ
∆ ⊢ ?B, Γ
!∆ ⊢ B, ?Γ
!∆, A ⊢ ?Γ
(!R)
(?L)
!∆, ?A ⊢ ?Γ
!∆ ⊢ !B, ?Γ
(1R)
(0L)
0⊢Γ
∆ ⊢ 1, Γ
∆⊢Γ
∆
⊢
Γ
(⊤R)
(⊥L)
(⊤L)
⊢⊤
⊥ ⊢ (⊥R) ∆ ⊢ ⊥, Γ
∆, ⊤ ⊢ Γ
∆, A1 , A2 ⊢ Γ
∆1 ⊢ B1
∆2 ⊢ B2
(⊗L)
(⊗R− )
∆1 , ∆2 ⊢ B1 ⊗ B2
∆, A1 ⊗ A2 ⊢ Γ
∆ ⊢ B1
∆ ⊢ B2
∆, Ai ⊢ Γ
i∈2
(&R− )
(&L)
∆ ⊢ B1 &B2
∆, A1 &A2 ⊢ Γ
∆
⊢ B1 , B2 , Γ
A
⊢
Γ
A
⊢
Γ
1
1
2
2
(`R)
(`L− )
A1 ` A2 ⊢ Γ1 , Γ2
∆ ⊢ B1 ` B2 , Γ
A1 ⊢ Γ
A2 ⊢ Γ
∆ ⊢ Bi , Γ
i∈2
(⊕L− )
(⊕R)
A1 ⊕ A2 ⊢ Γ
∆ ⊢ B1 ⊕ B2 , Γ
A ⊢ B, Γ
∆1 ⊢ A, Γ1
∆2 , B ⊢ Γ2
(⊸L)
(⊸R− )
∆1 , ∆2 , A ⊸ B ⊢ Γ1 , Γ2
⊢ A ⊸ B, Γ
(!?L)

Fig. 2. The sequent calculus LLK− for LL−
∆2 ⊢B2 ,Γ2
∆2 ,A2 ⊢Γ2
1 ,Γ1
1 ,A1 ⊢Γ1
(⊗R) ∆∆1 ⊢B
, (`L) ∆∆
,
1 ,∆2 ⊢B1 ⊗B2 ,Γ1 ,Γ2
1 ,∆2 ,A1 `A2 ⊢Γ1 ,Γ2
∆⊢B1 ,Γ
∆⊢B2 ,Γ
∆,A1 ⊢Γ
∆,A2 ⊢Γ
(&R)
, (⊕L)
and
∆⊢B1 &B2 ,Γ
∆,A1 ⊕A2 ⊢Γ
∆,A⊢B,Γ
(⊸R) ∆⊢A⊸B,Γ
, respectively, to Cut− , ⊗R− , `L− , &R− ,
⊕L− and ⊸R− given in Fig. 2, and adding the distribution
rules !?L, !?R, ⊗`L and ⊗`R. It is easy to see that Cut,
⊗R and `L are derivable in LLK− in the presence of ⊗`L
and ⊗`R. For example, Cut is derived in LLK− by:

∆ ⊢ B, Γ
∆′ , B ⊢ Γ′
∆ ⊢ ⊗∆
∆ ⊢ `(B, Γ)
∆′ , ∆ ⊢ (⊗∆′ ) ⊗ (`(B, Γ))
⊗(∆′ , B) ⊢ Γ′
`Γ ⊢ Γ
′
′
′
∆ , ∆ ⊢ ⊗(∆ , B) ` (`Γ)
⊗(∆ , B) ` (`Γ) ⊢ Γ′ , Γ
∆′ , ∆ ⊢ Γ′ , Γ
′

′

∆, ∆′ ⊢ Γ, Γ′
where the double line indicates a multiple application of rules,
df.
df.
df.
df.
⊗ǫ = ⊤, ⊗(∆, A) = (⊗∆) ⊗ A, `ǫ = ⊥ and `(Γ, B) =
(`Γ)` B. These derived Cut, ⊗R and `L faithfully represent
our categorical semantics given in Sect. III.
On the other hand, the remaining two distribution rules !?L
and !?R enable us to translate LK− into LLK− :

Theorem 4 (Translation of LK− into LLK− ). There is a
translation Tc of formulas and proofs that assigns, to every
proof p of a sequent ∆ ⊢ Γ in LK− , a proof Tc (p) of a
df.
sequent !Tc∗ (∆) ⊢ ?Tc∗ (Γ) in LLK− , where Tc (⊤) = ⊤,
df.
df.
df.
Tc (⊥) = ⊥, Tc (A ∧ B) = ?Tc (A)&?Tc (B), Tc (A ∨ B) =
df.
!Tc (A) ⊕ !Tc (B) and Tc (A ⇒ B) = !?Tc (A) ⊸ ?!Tc (B).
Proof. We shall translate each rule of LK− into a proof tree in
LLK− . First, note that we have shown that Cut is admissible
in LLK− ; then, Cut of LK− is translated into LLK− by:
!∆ ⊢ ?B, ?Γ
!∆ ⊢ !?B, ?Γ
!∆ ⊢ ?!B, ?Γ

!∆′ , !B ⊢ ?Γ′
!∆′ , ?!B ⊢ ?Γ′

!∆, !∆′ ⊢ ?Γ, ?Γ′
WL, WR, CL, CR, XL and XR of LK− are translated, by
!W, ?W, !C, ?C, XL and XR of LLK− , respectively, and Id of
LK− by Id, !D and ?D of LLK− , in the obvious manner.
⊤L and ⊤R of LK− are translated by:
!∆ ⊢ ?Γ
!∆, ⊤ ⊢ ?Γ
!∆, !⊤ ⊢ ?Γ

Also, ∨R is translated by:
!∆ ⊢ ?B1 , ?B2 , ?Γ
!∆, ⊢ !?B1 , !?B2 , ?Γ
!∆, ⊢ ?!B1 , ?!B2 , ?Γ
(S UB⊕,`
!B1 ,!B2 ` ?Γ)

−
where Sub⊕,`
X,Y ` Z is Cut with:

X⊢X
Y ⊢Y
X ⊢X ⊕Y
Y ⊢X ⊕Y
X ⊢ ?(X ⊕ Y )
Y ⊢ ?(X ⊕ Y )
?X ⊢ ?(X ⊕ Y )
?Y ⊢ ?(X ⊕ Y )
?X ` ?Y ⊢ ?(X ⊕ Y ), ?(X ⊕ Y )
?X ` ?Y ⊢ ?(X ⊕ Y )
Z⊢Z
(?X ` ?Y ) ` Z ⊢ ?(X ⊕ Y ), Z
Next, ⇒L is translated by:
!∆ ⊢ ?A, ?Γ
!∆, !B ⊢ ?Γ
!∆ ⊢ !?A, ?Γ
!∆, ?!B ⊢ ?Γ
!∆, !∆, !?A ⊸ ?!B ⊢ ?Γ, ?Γ

⊢⊤
⊢ ?⊤

!∆, !(!?A ⊸ ?!B) ⊢ ?Γ

respectively into LLK− ; ⊥L and ⊥R are symmetric.
∧L of LK− is translated into LLK− by:

−

and ⇒R

!∆, !A1 , !A2 ⊢ ?Γ
!∆, ?!A1 , ?!A2 ⊢ ?Γ
!∆, !?A1 , !?A2 ⊢ ?Γ
!∆,
!?A1 ⊗ !?A2 ⊢ ?Γ
(S UB⊗,&
?A1 ,?A2 )
!∆, !(?A1 &?A2 ) ⊢ ?Γ
−
where Sub⊗,&
X,Y is Cut with:

∆,(A∧B)∨C⊢Γ
∆,A∧(B∨C)⊢Γ

Similarly, ∨L− is translated by:
!A1 ⊢ ?Γ
!A2 ⊢ ?Γ
!A1 ⊕ !A2 ⊢ ?Γ
!(!A1 ⊕ !A2 ) ⊢ ?Γ

!A ⊢ ?B, ?Γ
?!A ⊢ ?B, ?Γ
!?A ⊢ ?B, ?Γ
!?A ⊢ !?B, ?Γ
!?A ⊢ ?!B, ?Γ
⊢ !?A ⊸ ?!B, ?Γ
⊢ ?(!?A ⊸ ?!B), ?Γ

The translation Tc of Thm. 4 is, as far as we are concerned,
a novel one. In contrast to the translations of CL into LL given
in [1], [4], [32], [23], our translation is unpolarized.
Finally, note that the following standard result (Thm. 6) can
be seen as the intuitionistic restriction of Thm. 4 (except ∨):
and

−
(∧∨R) ∆⊢A∧(B∨C),Γ
(by ⊗`L, ⊗`R, ?L and
∆⊢(A∧B)∨C,Γ into LLK
!R); we omit the details for lack of space. Thus, translations
∆⊢B2
1
of ∧R and ∨L are reduced to those of (∧R− ) ∆⊢B
∆⊢B1 ∧B2
A2 ⊢Γ
− A1 ⊢Γ
and (∨L ) A1 ∨A2 ⊢Γ , respectively, in the obvious way.
Then, a translation of ∧R− is very simple:

!∆ ⊢ ?B1
!∆ ⊢ ?B2
!∆ ⊢ ?B1 &?B2
!∆ ⊢ ?(?B1 &?B2 )

by:

which completes the proof.

X⊢X
Y ⊢Y
X&Y ⊢ X
X&Y ⊢ Y
!(X&Y ) ⊢ X
!(X&Y ) ⊢ Y
!(X&Y ) ⊢ !X
!(X&Y ) ⊢ !Y
!(X&Y ), !(X&Y ) ⊢ !X ⊗ !Y
!(X&Y ) ⊢ !X ⊗ !Y
Next, it is not hard to translate (∧∨L)

!∆, ⊢ (?!B1 ` ?!B2 ) ` ?Γ
!∆ ⊢ ?(!B1 ⊕ !B2 ), ?Γ

Definition 5 (LLJ [9], [10]). The formal language of ILL is
obtained from that of LL by discarding ( )⊥ , ? and `. The
calculus LLJ for ILL consists of the rules of LLK that have
only intuitionistic sequents.
Theorem 6 (Translation of LJ into LLJ [1], [4]). There is a
translation Ti of formulas and proofs that assigns, to every
proof p of a sequent ∆ ⊢ B in LJ, a proof Ti (p) of a sequent
df.
df.
!Ti ∗ (∆) ⊢ Ti ∗ (Γ) in LLJ, where Ti (⊤) = ⊤, Ti (⊥) = ⊥,
df.
df.
Ti (A ∧ B) = Ti (A)&Ti (B), Ti (A ∨ B) = !Ti (A) ⊕ !Ti (B)
df.
and Ti (A ⇒ B) = !Ti (A) ⊸ Ti (B).
Remark. Note that Tc translates ∨L in terms of ⊕L− by utilizing distribution rules, while Ti translates ∨L in terms of ⊕L.
Nevertheless, except the mismatch between the translations of
∨L, Ti can be seen as the intuitionistic restriction of Tc .

III. C ATEGORICAL S EMANTICS
Next, we proceed to give categorical semantics [26], [27] of
the sequent calculi introduced in Sect. II in a unified manner.
We assume that the reader is familiar with the basic concepts
of symmetric monoidal (closed) categories (SM(C)Cs) and
monoidal adjoints [40], [28]. To indicate what is to be modeled, we frequently employ notations from LL for categorical
structures in this section. Also, we often do not specify natural
isomorphisms even if they are part of a categorical structure.
Remark. Since cut-eliminations on the calculi are given in
Sect. V, we postpone (equational) soundness/completeness of
the semantics to Sect. V, and in this section just assign objects
and morphisms to formulas and proofs, respectively.
A. Categorical Semantics of ILL and IL
Let us first recall the standard categorical semantics of LLJ
(without ⊥ or ⊕), introducing a nonstandard terminology:
Definition 7 (BwLSMCs). A SMC C = (C, ⊗, ⊤) is backward
liberalizable (BwL) if it has finite products (1, &) and is
equipped with:
• A comonad ! = (!, ǫ, δ) on C such that the canonical
adjunction between C and the co-Kleisli category C! of C
over ! is monoidal;
∼
∼
• Isomorphisms ⊤ → !1 and !A ⊗ !B → !(A&B) natural
in A, B ∈ C.
In other words, a BwLSMC is simply a new-Seely category
(NSC) [28] without a closed structure ⊸; it is just to state
Thm. 13 and Def. 16 concisely. Recall that NSCs give a
(equationally sound and complete) semantics of ILL without
⊥ or ⊕ (w.r.t. the term calculus given in [36], [37]):
Theorem 8 (Semantics of ILL without ⊥ or ⊕ [28]). NSCs
give a semantics of LLJ without ⊥ or ⊕.
Recall that a strong advantage of NSCs is the following:
Theorem 9 (CCCs via NSCs [35], [28]). The co-Kleisli
category C! of a NSC C over the equipped comonad ! is
cartesian closed.
Proof (sketch). Let C = (C, ⊗, ⊤, ⊸, !) be a NSC, and
A, B ∈ C! . First, we may give, as a terminal object and a
binary product of A and B in C! , a terminal object 1 and a
ǫA&B ;π1
ǫA&B ;π2
diagram A ← !(A&B) → B in C, respectively.
Next, we may give !A ⊸ B ∈ C as an exponential object
A ⇒ B from A to B in C! . In fact, we have an isomorphism:
C! (A&B, C) = C(!(A&B), C)
∼
= C(!A ⊗ !B, C)
∼
= C(!A, !B ⊸ C)
= C! (A, B ⇒ C)
natural in A, C ∈ C.
df.

The linear decomposition A ⇒ B = !A ⊸ B of
exponential objects in C! into the comonad ! and the closed
structure ⊸ in C is the categorical counterpart of Girard’s

translation [1], and it gives a unified semantics of ILL and IL,
where note that CCCs give the standard categorical semantics
of IL (without ⊥ or ∨) [26], [27]. What about ⊥ and ∨?
It then seems a natural idea to add finite coproducts (0, ⊕) to
the NSC C. As pointed out in [35], however, finite coproducts
ǫ0
0 99K A in
in C become weak in C! : The morphism !0 →
C is a morphism 0 → A in C! for each A ∈ C, but it may
not be unique for !0 is not necessarily initial in C; also, it
seems reasonable to take, as a coproduct of A, B ∈ C! in C! , a
ι2
ι1
!B in C, but the induced copairings
!A⊕!B ←
coproduct !A →
in C! do not necessarily satisfy uniqueness as they may not be
copairings in C. Meanwhile, this construction clearly works for
weak coproducts in C as well, which is important as the gamesemantic NSC in Sect. IV has only weak ones. To summarize:
Corollary 10 (Semantics of ILL and IL [35], [28]). A NSC
C = (C, ⊗, ⊤, ⊸, !) with weak finite coproducts (0, ⊕) gives
a semantics of LLJ. Moreover, the co-Kleisli category C! has:
• Finite products just given by finite products (1, &) in C;
df.
• Exponential objects given by A ⇒ B = !A ⊸ B in C
for all A, B ∈ C! ;
• Weak finite coproducts given by (0, !( ) ⊕ !( )) in C
and thus, C! gives a semantics of LJ [26], [27].
Note that the derivation of the categorical semantics of IL
in C! from that of ILL in C coincides with the translation Ti .
B. Categorical Semantics of LL− and CL
Our main idea on modeling LLK− is then to introduce the
following symmetric structure to BwLSMCs:
Definition 11 (FwLSMCs). A SMC C = (C, `, ⊥) is forwardliberalizable (FwL) if it has finite coproducts (0, ⊕) and is
equipped with:
• A monad ? = (?, η, µ) on C such that the canonical
adjunction between C and the Kleisli category C ? of C
over ? is monoidal;
∼
∼
• Isomorphisms ?0 → ⊥ and ?(A ⊕ B) → ?A ` ?B natural
in A, B ∈ C.
Corollary 12 (Coproducts and weak products in FwLSMCs).
The Kleisli category C ? of a FwLSMC C = (C, `, ⊥, ?) with
weak finite products (1, &) has:
• Finite coproducts given by finite coproducts (0, ⊕) in C;
• Weak finite products given by (1, ?( )&?( )) in C.
Proof. Symmetric to Cor. 10.
Naturally, it seems a reasonable idea to require the FwLstructure on NSCs to model LLK− , but it is impossible for the
game-semantic NSC LG in Sect. IV: The game-semantic `
and ? are not well-defined on non-strict [15], [18] strategies;
they may generate concurrent (or nondeterministic) strategies
from non-strict, sequential (or deterministic) strategies. As we
shall see, the non-strictness is caused by currying of strategies,
i.e., the closed and the FwL-structures of LG are incompatible.
This suggests employing the lluf subBwLSMC ♯LG of LG
whose strategies are all strict. Of course, ♯LG is not closed, but

currying w.r.t. the entire domain and uncurrying w.r.t. the entire
codomain are possible. This observation actually motivates the
rules ⇒R− and ⊸R− given in Sect. II. It also leads to:
Lemma 13 (Semantics of LL− ). A NSC C = (C, ⊗, ⊤, ⊸, !)
equipped with a FwLSMC ♯C = (♯C, `, ⊥, ?) such that:
1) ♯C is a lluf subBwLSMC of C, in which ⊤ is terminal, ⊥
is initial, ♯C(A, ⊥) = C(A, ⊥) and ♯C(⊤, B) = C(⊤, B)
for all A, B ∈ C;
2) It is equipped with the following morphisms in ♯C:
ΩA,B,C : A ⊗ (B ` C) → (A ⊗ B) ` C
ΥA : !?A → ?!A

((ev A,⊥ ◦̟A,¬A )`id Γ1 )`id Γ2
→
(⊥`Γ1 )`Γ2 ∼
Γ2
= Γ1 `Γ2 , where
ev A,⊥ : ¬A ⊗ A → ⊥ is obtained from id ¬A : ¬A → ¬A
by uncurrying in C (n.b., ev A,⊥ must be in ♯C because its
codomain is ⊥). The interpretation of ⊸R− is by currying in
C, for which ♯C(⊤, B) = C(⊤, B) for all B ∈ C is employed.
Note that !D, !W and !C may be handled just as in the
interpretation of ILL in NSCs [36], [37]; ?D, ?W and ?C
are just symmetric. Also, XL and XR are interpreted by
symmetries w.r.t. ⊗ and `, respectively.
a:!∆⊗A→?Γ
Finally, ?L is interpreted by
,
Π∆,A
µ
?a

and !R by

A`⊤∼
=⊤
∼
A ⊸ B = ¬A ` B

(1)
(2)

df.

natural in A, B ∈ C, where ¬A = A ⊸ ⊥;
gives a semantics of LLK− in ♯C.

∆

→

∆′ ⊗B →Γ′

where ̟∆,∆′ is the symmetry w.r.t. ⊗.
The interpretations of ⊗L and `R may be reduced to
the induction hypotheses; ⊗R− and `L− are interpreted by
f1 :∆1 →B1
f2 :∆2 →B2
g2 :A2 →Γ2
1 →Γ1
and gg11:A
f1 ⊗f2 :∆1 ⊗∆2 →B1 ⊗B2
`g2 :A1 `A2 →Γ1 `Γ2 .
The interpretations of &L and ⊕R are given by
li :∆⊗Ai →Γ
i∈2
ri :∆→Bi `Γ
i∈2
and
,
id ∆ ⊗πi
ιi `id Γ
li
ri
∆⊗(A1 &A2 )

→

∆⊗Ai →Γ

∆→Bi `Γ → (B1 ⊕B2 )`Γ

r2 :∆→B2
1
and
and those of &R− and ⊕L− by r1 :∆→B
hr1 ,r2 i:∆→B1 &B2
l1 :A1 →Γ
l2 :A2 →Γ
by
, respectively.
[l1 ,l2 ]:A1 ⊕A2 →Γ
The interpretation of ⊸L is given as follows. Given
A, B, C, D ∈ C, let ΦA,B,C,D : A⊗B ⊗(C `D) → (A⊗C)`
(B ⊗ D) be the natural transformation obtained by composing
Ω and symmetries w.r.t. ⊗ in the obvious manner. Then, given
h1 : ∆1 → A ` Γ1 and h2 : ∆2 ⊗ B → Γ2 in ♯C, we compose
ΦA,¬A,⊤,Γ1
(A`Γ1 )⊗¬A ∼
→
(¬A⊗A)`
= (¬A⊗⊤)⊗(A`Γ1 )
(⊤ ⊗ Γ1 ) ∼
= (A ⊗ ¬A) ` Γ1 , for which we write Φ′A,Γ1 ,¬A .
id ∆1 ⊗∆2 ⊗(2)
→
∆1 ⊗∆2 ⊗
Then, we obtain ∆1 ⊗∆2 ⊗(A ⊸ B)

(¬A ` B)

Φ∆1 ,∆2 ,¬A,B

→

(∆1 ⊗ ¬A) ` (∆2 ⊗ B)

((A ` Γ1 ) ⊗ ¬A) ` Γ2

Φ′A,Γ1 ,¬A `id Γ2

→

ΣB,Γ

.

df.

where ¬A = A ⊸ ⊥ is the negation of A. This natural
bijection allows ♯C to model (linear) classical laws:
• We may get:
lem A ∈ ♯C(⊤, ¬A ` A)

Proof. We interpret proofs of each sequent A1 , A2 , . . . , Am ⊢
B1 , B2 , . . . , Bn in LLK− by morphisms A1 ⊗ A2 · · · ⊗ Am →
B1 ` B2 · · · ` Bn in ♯C by induction on the proofs, where we
indicate the interpretation of logical constants and connectives
of LL− by the notation for C (n.b., the domain of the
morphisms is ⊤ if m = 0, and the codomain is ⊥ if n = 0).
First, Id, ⊤R and ⊥L are interpreted by identities in ♯C. We
may handle ⊤L and ⊥R by the unit laws of ⊤ and ⊥, and
1R and 0L by (1) and initiality of 0, respectively. Also, the
distribution rules are modeled by Ω and Υ in the obvious way.
f :∆→B
f ′ :∆′ ⊗B→Γ′
,
We interpret Cut− by
̟
id ′ ⊗f
∆,∆′
f′
∆′ ⊗∆

!b

∆
!∆ →
!!∆→!(B`?Γ) → !B`?Γ

♯C(A, A) ∼
= ♯C(⊤ ⊗ A, A)
∼ ♯C(⊤, A ⊸ A)
=
∼
= ♯C(⊤, ¬A ` A) (by (2))

natural in A, B, C ∈ C;
3) It is equipped with the following isomorphisms in ♯C:

→

δ

Γ
!∆⊗?A → ?(!∆⊗A)→??Γ →?Γ

In particular, for each A ∈ C, currying in C gives:

ΣA,B : !(A ` ?B) → !A ` ?B
ΠA,B : !A ⊗ ?B → ?(!A ` B)

∆⊗∆′

b:!∆→B`?Γ

(h1 ⊗id ¬A )`h2

→

((A ⊗ ¬A) ` Γ1 ) `

•

from id A ∈ C(A, A), which models the classical law of
excluded middle (LEM) [3];
We may further compose:
dne A ∈ ♯C(¬¬A, A)

id ¬¬A ⊗lem A
→
¬¬A ⊗ (¬A ` A) ∼
by ¬¬A ∼
=
= ¬¬A ⊗ ⊤
Φ¬¬A,⊤,¬A,A
¬¬A ⊗ ⊤ ⊗ (¬A ` A)
→
(¬¬A ⊗ ¬A) ` (⊤ ⊗
ev ¬A,⊥ `id A
A) ∼
→
⊥`A ∼
= (¬¬A ⊗ ¬A) ` A
= A, which
models double negation elimination (DNE) [3].
Recall that our aim is to give a unity of logic; thus, we shall
obtain semantics of CL from that of LL− , i.e., NSCs satisfying
the assumption of Lem. 13. For this point, we employ:

Definition 14 (Distributive laws [29]). Let C be a category,
and ? = (?, η, µ) and ! = (!, ǫ, δ) a monad and a comonad on
C. A distributive law of ! over ? is a natural transformation
d : !? ⇒ ?! such that ?ǫ ◦ d = ǫ? : !? ⇒ ?, ?δ ◦ d = d! ◦ !d ◦ δ? :
!? ⇒ ?!!, d◦!η = η! : ! ⇒ ?! and d◦!µ = µ!◦?d◦d? : !?? ⇒ ?!.
Theorem 15 (Bi-Kleisli extension [29]). Let ? and ! be a
monad and a comonad on a category C, and d : !? ⇒ ?! a
distributive law of ! over ?. The Kleisli construction on C over
? is extended to the co-Kleisli category C! , and the co-Kleisli
construction on C over ! to the Kleisli category C ? . Moreover,
the extended Kleisli and co-Kleisli categories are equivalent,
i.e., (C! )? ≃ (C ? )! .
df.

Given a distributive law of ! over ?, we define C!? = (C! )? ≃
?
(C )! and call it the bi-Kleisli category of C over ! and ?.
As one may have already expected, we propose C!? as our
categorical structure to interpret CL. Hence, we define:

Definition 16 (BiLSMCCs). A bi-liberalizable (BiL) SMCC
is a NSC C = (C, ⊗, ⊤, ⊸, !) such that it has weak finite
coproducts (0, ⊕), and it is equipped with:
• A lluf subBwLSMC ♯C and a triple (`, ⊥, ?) such that
⊤ (resp. ⊥) is terminal (resp. initial) in ♯C, ♯C(A, ⊥) =
C(A, ⊥) and ♯C(⊤, B) = C(⊤, B) for all A, B ∈ C, and
♯C = (♯C, `, ⊥, ?) is FwL with finite coproducts (0, ⊕);
• Natural transformations Ω, Σ and Π in ♯C (Lem. 13);
• Natural isomorphisms (1) and (2) as well as
?(A ⊸ B) ∼
= !A ⊸ ?B
¬A ⊕ ¬B ∼
= ¬(A&B)
•

(3)
(4)

(natural in A, B ∈ C) in ♯C;
A distributive law Υ of ! over ?.

Proof. By the proofs of Thm. 4 and 17, the interpretation of
LK− in ♯C actually occurs in ♯C!? ; thus, it suffices to establish
the natural isomorphisms and transformation. Then, we have
(4 )
(5 )
¬(A ∧ B) = ¬(?A&?B) ∼
= ¬?A ⊕ ¬?B ∼
= !¬A ⊕ !¬B =
(3)
(2)
¬A ∨ ¬B and A ⇒ B = !?A ⊸ ?!B ∼
= ?(?A ⊸ !B) ∼
=
(5)
?(¬?A ` !B) ∼
= ?(!¬A ` !B) = ?(¬A ∨ B). Finally, we have
ηA
dne
ǫA
!(¬¬A) → ¬¬A →A A → ?A, completing the proof.
Note that the interpretation of Cor. 18 matches the translation Tc . On the other hand, ¬(A ∨ B) and ¬A ∧ ¬B (resp.
¬(A ` B) and ¬A ⊗ ¬B, ¬(A ⊕ B) and ¬A&¬B) should not
be isomorphic for they are not in the game semantics below.
IV. G AME S EMANTICS

Theorem 17 (Semantics of LL− ). Each BiLSMCC C gives a
semantics of LLK− in ♯C.

This section gives a game-semantic BiLSMCC LG. We
employ Guy McCusker’s games and strategies [18].

Proof. Immediate from Lem. 13.

A. Review: Game-Semantic NSC

The natural isomorphisms (3) and (4) are not necessary for
Thm. 17, but they induce some of the De Morgan laws:

Notation. Given a finite sequence s = x1 x2 . . . x|s| , where
|s| is the length of s, we write s(i) for xi (i ∈ |s|). We
df.
define Even(s) ⇔ |s| ≡2 0, where ≡2 is the equality on N
df.
modulo 2, and Odd(s) ⇔ |s| ≡2 1 for a finite sequence s,
df.
df.
and S Even = {s ∈ S | Even(s) } and S Odd = S \ S Even for a
set S of finite sequences. We write ǫ for the empty sequence.

?¬A = ?(A ⊸ ⊥)
∼
= !A ⊸ ?⊥ (by (3))
∼
= ¬!A ` ?⊥ (by (2))
∼
= ⊥)
= ?0 ∼
= ¬!A ` ⊥ (by ?⊥ ∼
∼
= ¬!A

(5)

natural in A ∈ C, as well as:
¬A ` ¬B ∼
= A ⊸ (B ⊸ ⊥) (by (2))
∼
= (A ⊗ B) ⊸ ⊥
= ¬(A ⊗ B)

(6)

natural in A, B ∈ C. Note that (4) is also one of the De Morgan
laws. As we shall see in Sect. V, these natural isomorphisms
exist in the game-semantic and the syntactic instances.
By Thm. 4 and 17, a BiLSMCC C may interpret LK− in
♯C. In addition, it is easy to see that the interpretation of LK−
occurs always in the bi-Kleisli category ♯C!? , and therefore:
Corollary 18 (Semantics of CL). Let C = (C, ⊗, ⊤, ⊸, !)
together with ♯C = (♯C, `, ⊥, ?, Ω, Σ, Π, Υ) be a BiLSMCC.
The bi-Kleisli category ♯C!? gives a semantics of LK− such
that ∧, ∨ and ⇒ are interpreted by:
df.

A ∧ B = ?A&?B
df.

A ∨ B = !A ⊕ !B
df.

A ⇒ B = !?A ⊸ ?!B
for all A, B ∈ C, and there are natural isomorphisms in ♯C:
¬(A ∧ B) ∼
= ¬A ∨ ¬B
A⇒B∼
= ?(¬A ∨ B)
and a natural transformation in ♯C:
¬¬A → A.

Recall that games are based on arenas and legal positions:
An arena defines the basic components of a game, which in
turn induces its legal positions that specify the basic rules of
the game. Let us first recall these two preliminary concepts.
Definition 19 (Arenas [18]). An arena is a triple G =
(MG , λG , ⊢G ), where:
• MG is a set whose elements are called moves;
• λG is a function from MG to {O, P} × {Q, A}, called the
labeling function, in which O, P, Q and A are arbitrarily
fixed symbols, called the labels;
• ⊢G is a subset of ({⋆} ∪ MG ) × MG , where ⋆ is an
arbitrarily fixed element such that ⋆ 6∈ MG , called the
enabling relation, that satisfies:
– (E1) ⋆ ⊢G m implies λG (m) = OQ ∧ (n ⊢G m ⇔
n = ⋆);
QA
– (E2) m ⊢G n ∧ λQA
G (n) = A implies λG (m) = Q;
OP
– (E3) m ⊢G n ∧ m 6= ⋆ implies λG (m) 6= λOP
G (n)
df.

df.

QA
in which λOP
G = π1 ◦ λG : MG → {O, P} and λG =
π2 ◦ λG : MG → {Q, A}.
A move m ∈ MG is initial if ⋆ ⊢G m, an O-move (resp. a
OP
P-move) if λOP
G (m) = O (resp. if λG (m) = P), a question
(resp. an answer) if λQA
(m)
=
Q
(resp.
if λQA
G
G (m) = A). Let
Init df.
nInit df.
Init
MG = {m ∈ MG | ⋆ ⊢G m } and MG = MG \ MG
.

Definition 20 (Occurrences of moves). Given a finite sequence
∗
s ∈ MG
of moves of an arena G, an occurrence (of a move)
in s is a pair (s(i), i) such that i ∈ |s|. More specifically, we
call the pair (s(i), i) an initial occurrence (resp. a non-initial
occurrence) in s if ⋆ ⊢G s(i) (resp. otherwise).

To be exact, positions of games are not finite sequences but:
Definition 21 (J-sequences [18]). A justified (j-) sequence of
∗
an arena G is a pair s = (s, Js ) of a finite sequence s ∈ MG
and a map Js : |s| → {0} ∪ |s| − 1 such that for all i ∈ |s|
Js (i) = 0 if ⋆ ⊢G s(i), and 0 < Js (i) < i ∧ s(Js (i)) ⊢G
s(i) otherwise. The occurrence (s(Js (i)), Js (i)) is called the
justifier of a non-initial occurrence (s(i), i) in s.
Notation. We write JG for the set of all j-sequences of an
arena G, and s = t for any s, t ∈ JG if s = t and Js = Jt .
The idea is that each non-initial occurrence in a j-sequence
must be performed for a specific previous occurrence, viz., its
justifier, in the j-sequence.
Remark. Henceforth, by abuse of notation, we keep the pointer
structure Js of each j-sequence s = (s, Js ) implicit and
abbreviate occurrences (s(i), i) in s as s(i). Moreover, we
usually write Js (s(i)) = s(j) if Js (i) = j.
Definition 22 (J-subsequences). Let G be an arena, and s ∈
JG . A j-subsequence of s is any t ∈ JG that satisfies:
• t is a subsequence of s, written (s(i1 ), s(i2 ), . . . , s(i|t| ));
• Jt (s(ir ))
=
s(il ) iff there are occurrences
s(j1 ), s(j2 ), . . . , s(jk ) in s eliminated in t
such that Js (s(ir )) = s(j1 ) ∧ Js (s(j1 )) =
s(j2 ) · · · ∧ Js (s(jk−1 )) = s(jk ) ∧ Js (s(jk )) = s(il ).
Next, let us recall ‘relevant part’ of previous occurrences:
Definition 23 (Views [18]). The Player (P-) view ⌈s⌉G of a
j-sequence s ∈ JG of an arena G is the j-subsequences of s
df.
df.
given by the following induction on |s|: ⌈ǫ⌉G = ǫ; ⌈sm⌉G =
df.
⌈s⌉G .m if m is a P-move; ⌈sm⌉G = m if m is initial; and
df.
⌈smtn⌉G = ⌈s⌉G .mn if n is an O-move such that m justifies
n. The Opponent (O-) view ⌊s⌋G of s is symmetric to ⌈s⌉G .
We may now recall legal positions of an arena [18], [11]:
Definition 24 (Legal positions [18], [11]). A legal position
of an arena G is a j-sequence s ∈ JG that satisfies:
OP
OP
• (A LTERNATION ) s = s1 mns2 ⇒ λG (m) 6= λG (n);
• (V ISIBILITY ) If s = tmu with m non-initial, then
Js (m) occurs in ⌈t⌉G if m is a P-move, and in ⌊t⌋G
otherwise.
Notation. We write LG for the set of all legal positions of G.

The set PG is non-empty because there is always the starting
position or ‘moment’ of a game G, and prefix-closed because
each non-empty ‘moment’ of G must have the previous
‘moment’. Identifications of positions are originally introduced
in [41] and also employed in Section 3.6 of [18]. They are to
identify positions up to inessential details of ‘tags’ for disjoint
union of sets of moves for exponential ! (Def. 29). For this
underlying idea, the axioms I1, I2 and I3 should make sense.
Recall that a game G is well-founded (wf) if so is ⊢G [42],
i.e., there is no infinite sequence ⋆ ⊢ m1 ⊢ m2 ⊢ m3 . . . , and
Init
well-opened (wo) if sm ∈ PG ∧ m ∈ MG
⇒ s = ǫ [18].
df.
The top game ⊤ = (∅, ∅, ∅, {ǫ}, {(ǫ, ǫ)}) and the bottom
df.
game ⊥ = ({q}, q 7→ OQ, {(⋆, q)}, {ǫ, q}, {(ǫ, ǫ), (q, q)})
are, e.g., wf and wo. We also write 1 and 0 for ⊤ and ⊥,
and call them the one game and the zero game, respectively.
Now, let us recall standard constructions on games. For
brevity, we usually omit ‘tags’ for disjoint union of sets.
For instance, we write x ∈ A + B iff x ∈ A or x ∈ B;
also, given relations RA ⊆ A × A and RB ⊆ B × B,
we write RA + RB for the relation on A + B such that
df.
(x, y) ∈ RA + RB ⇔ (x, y) ∈ RA ∨ (x, y) ∈ RB .
We first review tensor ⊗. A position of the tensor A ⊗ B
of games A and B is an interleaving mixture of positions of
A and B, in which only Opponent may switch the AB-parity.
Definition 26 (Tensor product of games [18], [11]). The
tensor (product) A ⊗ B of games A and B is defined by:
•
•
•
•

•

It is easy to see that in fact only Opponent may switch the
AB-parity of moves during a play of A ⊗ B by alternation.
Next, let us recall the space of linear functions [1], [24]:
Definition 27 (Linear implication between games [18], [11]).
The linear implication A ⊸ B from a game A to another B
is defined by:

We are now ready to recall the following central notion:
•

Definition 25 (Games [18], [11]). A game is a quintuple
G = (MG , λG , ⊢G , PG , ≃G ) such that (MG , λG , ⊢G ) is an
arena, PG is a non-empty, prefix-closed subset of LG , whose
elements are called (valid) positions of G, and ≃G is an
equivalence relation on PG , called the identification of (valid)
positions of G, that satisfies:
• (I1) s ≃G t ⇒ |s| = |t|;
• (I2) sm ≃G tn ⇒ s ≃G t ∧ λG (m) = λG (n) ∧ (m, n ∈
Init
∨ (∃i ∈ |s|. Jsm (m) = s(i) ∧ Jtn (n) = t(i)));
MG
• (I3) s ≃G t ∧ sm ∈ PG ⇒ ∃tn ∈ PG . sm ≃G tn.

df.

MA⊗B = MA + MB ;
df.
λA⊗B = [λA , λB ];
df.
⊢A⊗B = ⊢A + ⊢B ;
df.
PA⊗B = {s ∈ LA⊗B | s ↾ A ∈ PA , s ↾ B ∈ PB },
where s ↾ A (resp. s ↾ B) is the j-subsequence of s that
consists of moves of A (resp. B);
df.
s ≃A⊗B t ⇔ s ↾ A ≃A t ↾ A ∧ s ↾ B ≃B t ↾ B ∧
att ∗A⊗B (s) = att ∗A⊗B (t), where att A⊗B : MA⊗B →
{0, 1} maps a ∈ MA 7→ 0, b ∈ MB 7→ 1.

•

•

•
•

df.

MA⊸B = MA + MB ;
df.
df.
QA
λA⊸B = ([λA , λB ], where λA = hλOP
A , λA i and
P if λOP
df.
A (m) = O
;
λOP
A (m) =
O otherwise
df.

⊢A⊸B = {(⋆, b̂) | ⋆ ⊢B b̂ } + {(b̂, â) | ⋆ ⊢A â, ⋆ ⊢B b̂ }
+ (⊢A ∩ (MA × MA )) + (⊢B ∩ (MB × MB ));
df.
PA⊸B = {s ∈ LA⊸B | s ↾ A ∈ PA , s ↾ B ∈ PB };
df.
s ≃A⊸B t ⇔ s ↾ A ≃A t ↾ A ∧ s ↾ B ≃B t ↾ B ∧
att ∗A⊸B (s) = att ∗A⊸B (t), where att A⊸B : MA⊸B →
{0, 1} maps a ∈ MA 7→ 0, b ∈ MB 7→ 1.

Similarly to tensor A⊗B, a position of the linear implication
A ⊸ B is an interleaving mixture of positions of A and B, but
only Player may switch the AB-parity again by alternation.
For lack of space, we leave the details of product & on
games to [18]. Roughly, the set PA&B of all positions of the
product A&B of games A and B is the disjoint union PA +PB .
Next, we introduce coproduct or sum of games:
Definition 28 (Sum of games). The sum A ⊕ B of games A
and B is defined by:
•
•

•

•

•

df.

MA⊕B = (MAInit × MBInit ) + MA + MB ;
λA⊕B : (â, b̂) ∈ MAInit × MBInit 7→ OQ, a ∈ MA 7→
λA (a), b ∈ MB 7→ λB (b);
df.
⊢A⊕B = {(⋆, (â, b̂)) | ⋆ ⊢A â, ⋆ ⊢B b̂ }+ ⊢A + ⊢B
+ {((â, b̂), a) ∈ (MAInit × MBInit ) × MA | â ⊢A a }
+ {((â, b̂), b) ∈ (MAInit × MBInit ) × MB | b̂ ⊢B b };
df.
PA⊕B = {s ∈ LA&B | s ↾ A ∈ PA ∨ s ↾ B ∈ PB , s =
xt ⇒ x ∈ (MAInit × MBInit ) ∩ (PA × PB )}, where s ↾ A
(resp. s ↾ B) is the j-subsequence of s that consists of
moves (â, b̂) ∈ MAInit ×MBInit and a ∈ MA (resp. b ∈ MB )
with the former changed into â (resp. b̂);
df.
s ≃A⊕B t ⇔ s ↾ A ≃A t ↾ A ∨ s ↾ B ≃B t ↾ B.

That is, a non-empty position of A ⊕ B is of the form
(â, b̂)t such that ât ∈ PA ∨ b̂t ∈ PB . It is easy to see that an
initial move of the form (â, b̂) ∈ MAInit × MBInit may occur in
a position s only as the first element of s. Our sum of games
is different from the one given in [18] to give a unity of logic.
Now, let us recall the game semantics of of course !:
Definition 29 (Exponential of games [18]). The exponential
(or of course) !A of a game A is defined by:
•
•
•

•

•

df.

M!A = MA × N;
λ!A : (a, i) ∈ MA × N 7→ λA (a);
df.
⊢!A = {(⋆, (â, i)) ∈ {⋆} × (MA × N) | ⋆ ⊢A â }
∪ {((a, i), (a′ , i)) ∈ (MA × N) × (MA × N) | a ⊢A a′ };
df.
P!A = {s ∈ L!A | ∀i ∈ N. s ↾ i ∈ PA }, where s ↾ i is
the j-subsequence of s that consists of moves (a, i) yet
changed into a;
df.
s ≃!A t ⇔ ∃ϕ ∈ P(N). ∀i ∈ N. s ↾ ϕ(i) ≃A t ↾
i ∧ π2∗ (s) = (ϕ ◦ π2 )∗ (t), where P(N) is the set of all
permutations of natural numbers.

Lemma 30 (Well-defined constructions on games). Games
(resp. wf-games) are closed under ⊗, ⊸, &, ⊕ and !.
Proof. Similarly to the corresponding proof in [18].
Next, let us recall another central notion of strategies:
Definition 31 (Strategies [18]). A strategy on a game G is a
non-empty subset σ ⊆ PGEven , written σ : G, that satisfies:
• (S1) Even-prefix-closed (i.e., ∀smn ∈ σ. s ∈ σ);
′ ′ ′
• (S2) Deterministic (i.e., ∀smn, s m n ∈ σ. sm =
′ ′
′ ′ ′
s m ⇒ smn = s m n ).
As positions of a game G are to be identified up to ≃G , we
must identify strategies on G up to ≃G , leading to:

Definition 32 (Identification of strategies [18]). The identification of strategies on a game G, written ≃G , is the relation on
df.
strategies σ, τ : G given by σ ≃G τ ⇔ ∀s ∈ σ, t ∈ τ. sm ≃G
tl ⇒ ∀smn ∈ σ. ∃tlr ∈ τ. smn ≃G tlr ∧ ∀tlr ∈ τ. ∃smn ∈
σ. tlr ≃G smn. A strategy σ : G is valid if σ ≃G σ.
The identification ≃G of strategies on each game G forms
a partial equivalence relation (PER); see [18], [41].
Next, we need to focus on strategies that behave as proofs,
which we call winning ones:
Definition 33 (Winning of strategies). A strategy σ : G is:
• Total if s ∈ σ ∧ sm ∈ PG implies ∃smn ∈ σ [42], [43];
• Innocent if smn, t ∈ σ ∧ tm ∈ PG ∧ ⌈tm⌉G = ⌈sm⌉G
implies tmn ∈ σ ∧ ⌈tmn⌉G = ⌈smn⌉G [31], [18], [11];
• Noetherian if σ does not contain any strictly increasing
infinite sequence of P-views of positions of G [42];
• Winning if it is innocent, total and noetherian.
In addition, an innocent strategy σ : G is finite if the set
df.
⌈σ⌉G = {⌈s⌉G | s ∈ σ } of all P-views of σ is finite.
A conceptual explanation of winning is as follows. First, a
proof or an ‘argument’ for the truth of a formula should not
get ‘stuck’, and thus, strategies for proofs must be total. In
addition, since logic is concerned with the truth of formulas,
which are invariant w.r.t. ‘passage of time’, proofs should not
depended on states; thus, it makes sense to impose innocence
on strategies for proofs [31], [11]. Next, recall that totality
is not preserved under composition of strategies [43], but it
can be solved by additing noetherianity [42]. It conceptually
makes sense too because if a play by an innocent, noetherian
strategy keeps growing infinitely, then it cannot be Player’s
‘intention’, and therefore, it should result in win for Player.
In addition, let us introduce the game-semantic counterpart
of linearity of proofs in logic [1]:
Definition 34 (Linearity of strategies). A j-sequence s is
linear, written L(s), if, for each even-length prefix t of s, an
initial move q in t justifies exactly one question q ′ in t, and
the number of answers justified by q ′ equals that of answers
justified by q in t. A strategy σ : G is linear if ∀s ∈ σ. L(s).
Also, we slightly generalize strictness of strategies in [23]:
Definition 35 (Strictness of strategies). A strategy φ : A ⊸ B
is strict if ∀smn ∈ σ. m ∈ MBInit ⇒ n ∈ MAInit .
Next, let us proceed to recall standard constructions on
strategies. The simplest strategies are the following:
Definition 36 (Copy-cats [17], [41], [31], [18]). The copy-cat
(strategy) cp A on a game A is defined by:
df.

cp A = {s ∈ PAEven
| ∀t  s. Even(t) ⇒ t ↾ 0 = t ↾ 1 }
[0] ⊸A[1]
where the subscripts ( )[i] on A are to distinguish the two
df.

copies of A, and t ↾ i = t ↾ A[i] (i = 0, 1).
Lemma 37 (Well-defined copy-cats [17], [18]). Given a game
A, cp A is a valid, innocent, total, linear, strict strategy on the
game A ⊸ A. In addition, it is noetherian if A is wf.

Proof. We just show that cp A is noetherian if A is wf for
the other points are trivial, e.g., validity of cp A is immediate
from the definition of ≃A⊸A . Given smm ∈ cp A , it is easy
to see by induction on |s| that the P-view ⌈sm⌉A⊸A is of the
form m1 m1 m2 m2 . . . mk mk m, and thus, there is a sequence
⋆ ⊢A m1 ⊢A m2 · · · ⊢A mk ⊢A m. Therefore, if A is wf, then
cp A must be noetherian.
Next, let us recall composition and tensor of strategies:
Definition 38 (Composition of strategies [18]). Given games
A, B and C, and strategies φ : A ⊸ B and ψ : B ⊸ C, the
parallel composition φ k ψ of φ and ψ is given by:

Lemma 41 (Well-defined constructions on strategies [18]).
Given games A, B, C and D, and strategies φ : A ⊸ C
and ψ : B ⊸ D, φ ⊗ ψ is a strategy on A ⊗ B ⊸ C ⊗ D. If φ
and ψ are winning (resp. linear, strict), then so is φ⊗ψ. Given
strategies φ′ : A ⊸ C and ψ ′ : B ⊸ D such that φ ≃A⊸C φ′
and ψ ≃B⊸D ψ ′ , we have φ⊗ψ ≃A⊗B⊸C⊗D φ′ ⊗ψ ′ . Similar
statements hold for pairing and promotion. The dereliction
der A is a valid, innocent, total, linear, strict strategy on
!A ⊸ A; in addition, it is noetherian if A is wf.
Definition 42 (Category LG). The category LG is given by:
•
•

df.

φ k ψ = {s ∈ J((A⊸B[0] )⊸B[1] )⊸C | s ↾ A, B[0] ∈ φ,
s ↾ B[1] , C ∈ ψ, s ↾ B[0] , B[1] ∈ pr B }
where the subscripts ( )[i] on B (i =
guish the two copies of B, s ↾ A, B[0]
s ↾ B[0] , B[1] ) is the j-subsequence of
moves of A or B[0] (resp. B[1] or C,

0, 1) are to distin(resp. s ↾ B[1] , C,
s that consists of
B[0] or B[1] ), and

df.

pr B = {s ∈ PB[0] ⊸B[1] | ∀t  s. Even(t) ⇒ t ↾ 0 = t ↾ 1 }.
The composition φ; ψ (or ψ ◦ φ) of φ and ψ is defined by:
df.

φ; ψ = {s ↾ A, C | s ∈ φ k ψ }
where s ↾ A, C is the j-subsequence of s that consists of
moves of A or B.
That is, the composition φ; ψ : A ⊸ C plays implicitly on
((A ⊸ B[0] ) ⊸ B[1] ) ⊸ C, employing φ if the last O-move
is of A or B[0] , and ψ otherwise, while Opponent plays on
A ⊸ C, where φ and ψ communicate with each other via
moves of B[0] or B[1] , but it is ‘hidden’ from Opponent.
Lemma 39 (Well-defined composition of strategies [18], [42]).
Given games A, B and C, and strategies φ : A ⊸ B and
ψ : B ⊸ C, φ; ψ is a strategy on the game A ⊸ C. If φ
and ψ are winning (resp. linear, strict), then so is φ; ψ. Given
strategies φ′ : A ⊸ B and ψ ′ : B ⊸ C such that φ ≃A⊸B φ′
and ψ ≃B⊸C ψ ′ , we have φ; ψ ≃A⊸C φ′ ; ψ ′ .
Proof. It is well-known that innocent strategies are closed
under composition [11], [18]. Also, it is shown in [42] that
the conjunction of innocence, totality and noetherianity is
preserved under composition. Finally, composition clearly preserves linearity, strictness and identification of strategies.
Definition 40 (Tensor product of strategies [17], [18]). Given
games A, B, C and D, and strategies φ : A ⊸ C and ψ :
B ⊸ D, the tensor (product) φ ⊗ ψ of φ and ψ is given by:
df.

φ ⊗ ψ = {s ∈ LA⊗B⊸C⊗D | s ↾ A, C ∈ φ, s ↾ B, D ∈ ψ }
where s ↾ A, C (resp. s ↾ B, D) is the j-subsequence of s that
consists of moves of A or C (resp. B or D).
Intuitively the tensor φ ⊗ ψ : A ⊗ B ⊸ C ⊗ D plays by φ
if the last O-move is of A or C, and by ψ otherwise.
Let us leave the details of pairing h , i, copairing [ , ],
promotion ( )† and derelictions der to [18] for lack of space.

•

•

Objects are wf-games;
df.
Morphisms A → B are the equivalence classes [φ] =
{φ′ : A ⊸ B | φ ≃A⊸B φ′ } of valid, winning, linear
strategies φ : A ⊸ B;
Composition of morphisms [φ] : A → B and [ψ] : B →
df.
C is given by [ψ] ◦ [φ] = [ψ ◦ φ] : A → C;
df.
Identities are given by id A = [cp A ] : A → A.

Theorem 43 (NSC LG). The tuple LG = (LG, ⊗, ⊤, ⊸, !)
forms a NSC with finite products (1, &).
Proof. As outlined in [12] and by Lem. 30, 37 and 41
(constructions on strategies are lifted to their equivalence
classes, and games are wf for copy-cats to be noetherian).
For lack of space, we leave the details of well-bracketing
(wb) of strategies to [31], [18]. It is easy to show:
Corollary 44 (NSC LG wb ). The lluf subcategory LG wb of LG,
in which for each morphism [φ] the strategy φ is wb, forms a
subNSC of LG with finite products (1, &).
B. Game-Semantic BiLSMCC
Now, let us define a FwL-structure (`, ⊥, ?) on:
Definition 45 (Subcategory ♯LG). The lluf subcategory ♯LG
of LG has exactly morphisms [φ] in LG such that φ is strict.
Clearly, ♯LG is not closed, but Thm. 43 immediately gives:
Lemma 46 (BwLSMC ♯LG). The category ♯LG together with
the triple (⊗, ⊤, !) inherited from LG is a BwLSMC with finite
coproducts (0, ⊕) (n.b., they are weak in LG as in [18]).
Definition 47 (Par on games). The par of games A and B is
the game A ` B defined by:
•
•

•

•

df.

MA`B = (MAInit × MBInit ) + MA + MB ;
λA`B : (â, b̂) ∈ MAInit × MBInit 7→ OQ, a ∈ MA 7→
λA (a), b ∈ MB 7→ λB (b);
df.
⊢A`B = {(⋆, (â, b̂)) | ⋆ ⊢A â, ⋆ ⊢B b̂ }+ ⊢A + ⊢B
+ {((â, b̂), a) ∈ (MAInit × MBInit ) × MA | â ⊢A a }
+ {((â, b̂), b) ∈ (MAInit × MBInit ) × MB | b̂ ⊢B b };
df.
PA`B = {s ∈ LA`B | s ↾ A ∈ PA , s ↾ B ∈ PB , s =
xt ⇒ x ∈ MAInit × MBInit }, where s ↾ A (resp. s ↾ B)
is the j-subsequence of s that consists of moves (â, b̂) ∈
MAInit × MBInit and a ∈ MA (resp. b ∈ MB ) with the
former changed into â (resp. b̂);

•

df.

s ≃A`B t ⇔ att ∗A`B (s) = att ∗A`B (t) ∧ s ↾ A ≃A t ↾
A ∧ s ↾ B ≃B t ↾ B, where att A`B is the function
MA`B → {0, 1, 2} that maps (â, b̂) ∈ MAInit × MBInit 7→
0, a ∈ MA 7→ 1, b ∈ MB 7→ 2.

Dually to tensor ⊗, a position of A ` B is an interleaving
mixture of positions of A and B in which only Player may
switch the AB-parity again by alternation. Also, similarly to
sum ⊕, only the first element of each position of A ` B can
be of the form (â, b̂) ∈ MAInit × MBInit . Note also that our par
on games slightly generalizes that on wo-games given in [23].
For instance, typical plays of A ` B are as follows:
A`B
(â, b̂)
a2
a3
b2
b̂′
b′2

A`B
(â, b̂)
b2
b3
a2
a3
a4

For preservation of innocence, let φ : A ⊸ B and ψ :
B ⊸ D be innocent. Note that, during a play of the game
A ` B ⊸ C ` D, each O-move occurring in the codomain
C ` D cannot change the CD-parity, while the domain A ` B
part of each P-view must be that of A or B. Hence, the P-view
of each element s ∈ φ`ψ is either the P-view of s ↾ A, C ∈ φ
or s ↾ B, D ∈ ψ, whence φ ` ψ is innocent.
Finally, ` clearly preserves composition and identities.
Definition 51 (Why not on games). The why not of a game
A is the game ?A defined by:
•
•
•

•

where âa2 a3 a4 ∈ PA , b̂b2 b̂′ b′2 , b1 b2 b3 ∈ PB , and the arrows
represent the justification relation in the positions.
•

Definition 48 (Par on strategies). Given games A, B, C and
D, the par of strategies φ : A ⊸ C and ψ : B ⊸ D is the
Even
subset φ ` ψ ⊆ PA`B⊸C`D
defined by:
df.

φ ` ψ = {s ∈

Even
PA`B⊸C`D

| s ↾ A, C ∈ φ, s ↾ B, D ∈ ψ }

df.

M?A = MAInit,N + (MA × N), where MAInit,N is the set of
all functions N → MAInit ;
λ?A : α ∈ MAInit,N 7→ OQ, (a, i) ∈ MA × N 7→ λA (a);
df.
⊢?A = ({⋆} × MAInit,N ) + ({⋆} × (MAInit × N))
+ {(α, (a, i)) ∈ MAInit,N × (MAnInit × N) | α(i) ⊢A a }
+ {((a, i), (a′ , i)) ∈ (MAnInit × N)2 | a ⊢A a′ };
df.
P?A = {s ∈ L?A | ∀i ∈ N. s ↾ i ∈ PA , s = xt ⇒
x ∈ MAInit,N }, where s ↾ i is the j-subsequence of s that
consists of moves α ∈ MAInit,N and (a, i) ∈ MA × N yet
changed into α(i) and a, respectively;
df.
s ≃?A t ⇔ ∃ϕ ∈ P(N). ∀i ∈ N. s ↾ i ≃A t ↾ ϕ(i) ∧
(ϕ ◦ att ?A )∗ (s) = att ∗?A (t), where the function att ?A :
M?A → {⋆} + N is given by α 7→ ⋆ and (a, i) 7→ i.

Definition 52 (Why not on strategies). The why not of a
Even
strategy φ : A ⊸ B is the subset ?φ ⊆ P?A⊸?B
given by:
df.

where s ↾ A, C (resp. s ↾ B, D) is the j-subsequence of s that
ˆ ∈ M Init ×M Init ,
consists of moves (â, b̂) ∈ MAInit ×MBInit , (ĉ, d)
C
D
a ∈ MA and c ∈ MC (resp. b ∈ MB and d ∈ MD ) with the
ˆ respectively.
first two changed into â and ĉ (resp. b̂ and d),
φ ` ψ may not satisfy the axiom S2 (Def. 31) unless φ and
ψ are both strict. If φ and ψ are strict, φ ` ψ plays, e.g., as:
A`B

φ`ψ

⊸

C`D
ˆ
(ĉ, d)

(â, b̂)
a2
c2
ĉ′
c′2

A`B

φ`ψ

⊸

C `D
ˆ
(ĉ, d)

(â, b̂)
b2
b̂′
b′2

Even
?φ = {s ∈ P?A⊸?B
| ∀i ∈ N. s ↾ i ∈ φ }

where s ↾ i is the obvious analogue of that given in Def. 51.
Why not is essentially the infinite iteration of par, i.e., ?A ∼
=
A ` A ` A . . . and ?φ ∼
= φ ` φ ` φ . . . A similar construction
was introduced independently in [38] for a different purpose.
As outlined in the paper, we may lift ? to a monad on ♯LG:
Definition 53 (Why not monad). Given A ∈ ♯LG, strategies
wst A : A ⊸ ?A and abs A : ??A ⊸ ?A, called the waste and
the absorption on A, respectively, are defined by:
df.

Even
| ∀t  s. Even(t) ⇒ t ↾ A = t ↾ ?A ↾ 0 }
wst A = {s ∈ PA⊸?A
df.

d2

where ĉâa2 c2 ĉ′ c′2 ∈ φ and dˆb̂b2 b̂′ b′2 d2 ∈ ψ. Hence, ` cannot
be a bifunctor on LG, but it can be on ♯LG:
Definition 49 (Functor par). The functor par is the bifunctor
` on ♯LG that maps objects (A, B) ∈ ♯LG × ♯LG to A ` B ∈
♯LG, and morphisms ([φ], [ψ]) ∈ ♯LG × ♯LG((A, C), (B, D))
to [φ ` ψ] ∈ ♯LG(A ` C, B ` D).
Lemma 50 (Well-defined par). The functor par ` is indeed
a well-defined bifunctor on ♯LG.
Proof. First, ` on objects is clearly well-defined. Next, `
on strict strategies is well-defined, and it clearly preserves
linearity, totality, noetherianity and identification of strategies.

Even
abs A = {s ∈ P??A⊸?A
| ∀t  s. Even(t)
⇒ ∀i, j ∈ N. t ↾ ??A ↾ i ↾ j = t ↾ ?A ↾ hi, ji }
∼

where h , i is any fixed bijection N × N → N. The why not
monad is the monad ? = (?, η, µ) on ♯LG, where:
• The functor ? is given by A ∈ ♯LG 7→ ?A ∈ ♯LG, and
[φ] ∈ ♯LG(A, B) 7→ [?φ] ∈ ♯LG(?A, ?B);
• The components of the natural transformations η :
id ♯LG ⇒ ? and µ : ?? ⇒ ? on each A ∈ ♯LG are given
df.
df.
by ηA = [wst A ] and µA = [abs A ], respectively.
Lemma 54 (Well-defined why not). The why not monad is a
well-defined monad on ♯LG.
Proof. Similarly to the corresponding proof in [38].
Now, based on Lem. 46, 50 and 54, it is easy to establish:

Theorem 55 (BiLSMCC LG). The NSC LG together with
the lluf subBwLSMC ♯LG, the triple (`, ⊥, ?), the obvious
natural transformations Ω, Σ and Π, natural isomorphisms
(1)-(4), and the distributive law Υ : !? ⇒ ?! given by:
df.

Even
| ∀t  s. Even(t)
ΥA = {s ∈ P!?A⊸?!A

⇒ ∀i ∈ N. t ↾ !?A ↾ 0 ↾ i = π1∗ (t ↾ ?!A ↾ i) }
where π1∗ (t ↾ ?!A ↾ i) is obtained from t ↾ ?!A ↾ i by replacing
each occurrence (a, j) with a, is a BiLSMCC.
V. C UT-E LIMINATION , S OUNDNESS

AND

C OMPLETENESS

Next, let us define cut-elimination processes on the calculi
given in Sect. II by the game semantics given in Sect. IV.
To define the cut-elimination processes, the following inductive, categorical notion plays a key role:
−

Definition 56 (LL morphisms). Given a BiLSMCC C, a
morphism in ♯C is LL− if it is of the following form:
ς

φ

̺

A → A′ → B ′ → B

(7)

such that φ, ς and ̺ are morphisms in ♯C inductively constructed respectively by the following grammars:
df.

φ = id | !⊤ | !⊥ | φ ⊗ φ | φ ` φ | hφ, φi | [φ, φ] | φ; φ |
!φ | ?φ | λ(φ) | λ−1 (φ)
df.
• ς = id | Ω | Υ | Π | α | ℓ | ̟ | ǫ | δ | θ | πi | (2) | ς ⊗ ς |
ς ` ς | ς; ς
df.
• ̺ = id | Ω | Υ | Σ | α | ℓ | ̟ | η | µ | ϑ | ιi | (1) |
̺ ⊗ ̺ | ̺ ` ̺ | ̺; ̺
where !⊤ (resp. !⊥ ) is the canonical one to ⊤ (resp. from
⊥), α, ℓ and ̟ respectively range over associativities, units
and symmetries w.r.t. ⊗ or `, θ (resp. ϑ) over natural
isomorphisms of ! (resp. ?), πi and ιi over projections and
injections (i = 1, 2), respectively, ! = (!, ǫ, δ), ? = (?, η, µ),
and λ (resp. λ−1 ) is currying w.r.t. the entire domain (resp.
uncurrying w.r.t. the entire codomain).
•

Lemma 57 (Inductive semantics of LL− ). The interpretation
of any proof in LLK− in any BiLSMCC is LL− .
Proof. By induction on proofs in LLK− .

Cut− occurring in nf(p), i.e., nf(p) is cut-free; that is, we have
defined a cut-elimination process nf on LLK− . Combined with
Thm. 4, it is not hard to give such a process on LK− , and by
the same method, on LLJ (without ⊕) and LJ (without ∨) as
well, which for lack of space we omit. To summarize:
Theorem 59 (Correctness). Given a proof p of a sequent ∆ ⊢
Γ in LLK− (resp. LK− , LLJ, LJ), the normal-form nf(p) of p
is cut-free, and Jnf(p)K = JpK, where J K is the interpretation
of the calculus in ♯LG (resp. ♯LG ?! , LG wb , LG wb
! ).
Theorem 60 (Categorical soundness/completeness). Given a
BiLSMCC C, the interpretation of LLK− (resp. LK− , LLJ, LJ)
in ♯C (resp. ♯C!? , C, C! ) is equationally sound and complete
w.r.t. the cut-elimination defined above.
Proof. The soundness is by induction on proofs, and the
completeness immediately follows from Thm. 55.
VI. F ULL C OMPLETENESS
Lem. 58 characterizes definable strategies only inductively,
which is not satisfactory as full completeness per se (n.b., it
was to define the cut-elimination procedure). This last main
section addresses the problem: Focusing on finite, strongly
linear strategies, it gives a non-inductive full completeness:
Definition 61 (Strong linearity of strategies). A strategy φ :
A ⊸ B is strongly linear if it is linear, strict, and satisfies:
1) If B = (X1 ⊗ X2 ) ` Y for some games X1 , X2 and Y ,
φ′

Ω

then φ = A ⊸ Xi ⊗ (Xj ` Y ) ⊸ (X1 ⊗ X2 ) ` Y for
some φ′ : A ⊸ Xi ⊗ (Xj ` Y ), where i 6= j;
2) If A = X1 ⊗ (X2 ` Y ) for some games X1 , X2 and Y ,
φ′′

Ω

then φ = X1 ⊗ (X2 ` Y ) ⊸ (Xi ⊗ Xj ) ` Y ⊸ B for
some φ′′ : (Xi ⊗ Xj ) ` Y ⊸ B, where i 6= j;
3) If B = !X ` ?Y for some games X and Y , then φ =
φ′

φ′

Σ

A ⊸ !(A ` ?Y ) ⊸ !X ` ?Y for some A ⊸ !(A ` ?Y );
4) If A = !X ⊗ ?Y for some games X and Y , then φ =
Π

φ′′

φ′′

!X ⊗ ?Y ⊸ ?(!A ` Y ) ⊸ B for some ?(!A ` Y ) ⊸ B;
φi

ιi

5) If B = B1 ⊕ B2 , then φ = A ⊸ Bi ⊸ B1 ⊕ B2 for
some i ∈ 2 and φi : A ⊸ Bi .

Lemma 58 (Inductive definability). Given a BiLSMCC C, let
∆ and Γ be sequences of formulas of LL− , and f : J∆K → JΓK
a LL− -morphism in ♯C, where J∆K, JΓK ∈ C are the interpretations of the sequences. Then, there is a proof p of a sequent
∆ ⊢ Γ in LLK− whose interpretation JpK equals f .

Theorem 62 (Full completeness). Let J∆K → JΓK be the interpretation of a sequent ∆ ⊢ Γ without atoms in LLK− (resp.
LLJ without ⊕) in ♯LG (resp. LG wb ), and [φ] : J∆K → JΓK
in the category such that φ is finite and strongly linear. Then,
there is a proof p of ∆ ⊢ Γ in the calculus such that JpK = [φ].

Proof. Since f is LL− , we may write f = ̺◦φ◦ς; see (7). By
the structural and the distribution rules in LLK− and naturality
of ς and ̺, ς and ̺ may be excluded; thus, it suffices to prove
definability of φ. Then, it is immediate by induction on φ.

Proof. By finiteness and strong linearity of φ, we may show
full completeness of the interpretation of LLK− in ♯LG by
induction on ∆, Γ. Finally, full completeness of the interpretation of LLJ (without ⊕) in LG wb is shown just similarly.

By Lem. 57 and 58, we may first compute the interpretation
JpK of any given proof p in LLK− in ♯LG (as defined in the
proof of Thm. 17) and then calculate the proof nf(p) in LLK− ,
called the normal-form of p, from JpK such that Jnf(p)K = JpK
(as defined in the proof of Lem. 58). Note that there is no

VII. C ONCLUSION

AND

F UTURE W ORK

We have given a unity of logic in terms of sequent calculi,
categories and games. As future work, we would like to
develop term calculi that match our semantics. We are also
interested in extending the present work to predicate logic.

R EFERENCES
[1] J.-Y. Girard, “Linear logic,” Theoretical Computer Science, vol. 50,
no. 1, pp. 1–101, 1987.
[2] S. Shapiro, “Classical logic,” Stanford Encyclopedia of Philosophy,
2018.
[3] A. S. Troelstra and H. Schwichtenberg, Basic proof theory. Cambridge
University Press, 2000, no. 43.
[4] J.-Y. Girard, “Linear logic: its syntax and semantics,” London Mathematical Society Lecture Note Series, pp. 1–42, 1995.
[5] A. Heyting, “Die formalen regeln der intuitionistischen logik,” Sitzungsbericht PreuBische Akademie der Wissenschaften Berlin, physikalischmathematische Klasse II, pp. 42–56, 1930.
[6] A. S. Troelstra and D. van Dalen, “Constructivism in mathematics. Vol.
I, volume 121 of,” Studies in Logic and the Foundations of Mathematics,
p. 26, 1988.
[7] J.-Y. Girard, P. Taylor, and Y. Lafont, Proofs and Types. Cambridge
University Press Cambridge, 1989, vol. 7.
[8] G. Gentzen, “Untersuchungen über das logische schließen. i,” Mathematische zeitschrift, vol. 39, no. 1, pp. 176–210, 1935.
[9] S. Abramsky, “Computational interpretations of linear logic,” Theor.
Comput. Sci., vol. 111, no. 1&2, pp. 3–57, 1993.
[10] P.-A. Mellies, “Categorical semantics of linear logic,” Panoramas et
syntheses, vol. 27, pp. 15–215, 2009.
[11] S. Abramsky and G. McCusker, “Game semantics,” in Computational
Logic: Proceedings of the 1997 Marktoberdorf Summer School. Berlin,
Heidelberg: Springer, 1999, pp. 1–55.
[12] M. Hyland, “Game semantics,” in Semantics and Logics of Computation.
New York: Cambridge University Press, 1997, vol. 14, p. 131.
[13] G. Winskel, The Formal Semantics of Programming Languages: An
Introduction. MIT press, 1993.
[14] C. A. Gunter, Semantics of programming languages: structures and
techniques. MIT press, 1992.
[15] R. M. Amadio and P.-L. Curien, Domains and Lambda-Calculi. Cambridge: Cambridge University Press, 1998, no. 46.
[16] A. Blass, “A game semantics for linear logic,” Annals of Pure and
Applied logic, vol. 56, no. 1, pp. 183–220, 1992.
[17] S. Abramsky and R. Jagadeesan, “Games and full completeness for
multiplicative linear logic,” The Journal of Symbolic Logic, vol. 59,
no. 02, pp. 543–574, 1994.
[18] G. McCusker, Games and Full Abstraction for a Functional Metalanguage with Recursive Types. London: Springer Science & Business
Media, 1998.
[19] H. Herbelin, “Games and weak-head reduction for classical PCF,” in
International Conference on Typed Lambda Calculi and Applications.
Springer, 1997, pp. 214–230.
[20] V. Blot, “Realizability for Peano arithmetic with winning conditions in
HON games,” Annals of Pure and Applied Logic, vol. 168, no. 2, pp.
254–277, 2017.
[21] S. Abramsky and P.-A. Mellies, “Concurrent games and full completeness,” in Proceedings of the 14th Symposium on Logic in Computer
Science. IEEE, 1999, pp. 431–442.
[22] P.-A. Mellies, “Asynchronous games 4: A fully complete model of
propositional linear logic,” in LiCS 2005–Logic in Computer Science.
IEEE, 2005, pp. 386–395.
[23] O. Laurent, “Polarized games,” in Proceedings of the 17th Annual IEEE
Symposium on Logic in Computer Science. IEEE, 2002, pp. 265–274.
[24] J.-Y. Girard, The Blind Spot: lectures on logic. European Mathematical
Society, 2011.
[25] U. Berger and H. Schwichtenberg, “An inverse of the evaluation functional for typed lambda-calculus,” 1991.
[26] J. Lambek and P. J. Scott, Introduction to Higher-order Categorical
Logic. Cambridge University Press, 1988, vol. 7.
[27] B. Jacobs, Categorical Logic and Type Theory. Elsevier, 1999, vol.
141.
[28] G. M. Bierman, “What is a categorical model of intuitionistic linear
logic?” in International Conference on Typed Lambda Calculi and
Applications. Springer, 1995, pp. 78–93.
[29] J. Power and H. Watanabe, “Combining a monad and a comonad,”
Theoretical Computer Science, vol. 280, no. 1-2, pp. 137–162, 2002.
[30] P.-L. Curien, “Definability and full abstraction,” Electronic Notes in
Theoretical Computer Science, vol. 172, pp. 301–310, 2007.
[31] J. M. E. Hyland and C.-H. Ong, “On full abstraction for PCF: I, II, and
III,” Information and Computation, vol. 163, no. 2, pp. 285–408, 2000.

[32] J.-Y. Girard, “On the unity of logic,” Annals of pure and applied logic,
vol. 59, no. 3, pp. 201–217, 1993.
[33] P.-A. Melliès and N. Tabareau, “Resource modalities in tensor logic,”
Annals of Pure Applied Logic, vol. 161, no. 5, pp. 632–653, 2010.
[34] P.-A. Melliès, “Game semantics in string diagrams,” in Proceedings of
the 2012 27th Annual IEEE/ACM Symposium on Logic in Computer
Science. IEEE Computer Society, 2012, pp. 481–490.
[35] R. A. Seely, Linear logic,*-autonomous categories and cofree coalgebras. Ste. Anne de Bellevue, Quebec: CEGEP John Abbott College,
1987.
[36] N. Benton, G. Bierman, V. de Paiva, and M. Hyland, Term assignment
for intuitionistic linear logic (preliminary report). Citeseer, 1992.
[37] N. Benton, G. Bierman, V. De Paiva, and M. Hyland, “A term calculus
for intuitionistic linear logic,” in International Conference on Typed
Lambda Calculi and Applications. Springer, 1993, pp. 75–90.
[38] R. Harmer, M. Hyland, and P.-A. Mellies, “Categorical combinatorics
for innocent strategies,” in 22nd annual IEEE symposium on logic in
computer science, 2007, pp. pp–379.
[39] J. R. Shoenfield, Mathematical Logic. Reading: Addison-Wesley, 1967,
vol. 21.
[40] S. Mac Lane, Categories for the working mathematician. Springer
Science & Business Media, 2013, vol. 5.
[41] S. Abramsky, R. Jagadeesan, and P. Malacaria, “Full abstraction for
PCF,” Information and Computation, vol. 163, no. 2, pp. 409–470, 2000.
[42] P. Clairambault and R. Harmer, “Totality in arena games,” Annals of
pure and applied logic, vol. 161, no. 5, pp. 673–689, 2010.
[43] S. Abramsky et al., “Semantics of interaction: An introduction to game
semantics,” Semantics and Logics of Computation, vol. 14, pp. 1–31,
1997.

