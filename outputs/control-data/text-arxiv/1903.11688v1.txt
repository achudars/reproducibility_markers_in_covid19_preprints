Rallying Adversarial Techniques against Deep
Learning for Network Security
Joseph Clements*, Yuzhe Yang† , Ankur A. Sharma*, Hongxin Hu† , Yingjie Lao*

arXiv:1903.11688v1 [cs.CR] 27 Mar 2019

*Deptartment of Electrical and Computer Engineering, Clemson University
†
School of Computing, Clemson University
Clemson, South Carolina
{jfcleme, ankurs, yuzhey}@g.clemson.edu, {hongxih, ylao}@clemson.edu

Abstract—Recent advance in artificial intelligence and the
increasing need for powerful defensive measures in the domain of
network security, have lead to the adoption of deep learning approaches for use in network intrusion detection systems (NIDS).
These methods have achieved superior performance against
conventional network attacks, which enable the deployment of
practical security systems to unique and dynamic sectors. Adversarial machine learning, unfortunately, has recent shown that
deep learning models are inherently vulnerable to adversarial
modifications on their input data. Because of this susceptibility,
the deep learning models deployed to power a network defense
could in fact be the weakest entry point for compromising a
network system. In this paper, we show that by modifying on
average as little as 1.38 of input features, an adversary can
generate malicious inputs which effectively fool a deep learning
based NIDS. Therefor, when designing such systems, it is crucial
to consider the performance from not only the conventional
network security perspective but also the adversarial machine
learning domain.
Index Terms—Network Intrusion Detection System, Adversarial Machine Learning, Adversarial Examples, Deep Learning.

I. I NTRODUCTION
Largely attributable to advances in deep learning, the field
of artificial intelligence has been growing swiftly in the recent
past. Through many examples, it has been witnessed that deep
learning systems have the potential to achieve or even surpass
human-level performance on certain tasks. Furthermore, these
systems are not explicitly given a function to implement, but
instead can discover hidden rules or patterns that developers
may not be able to comprehend. This ability to learn has made
deep learning an indispensable tool for advancing the state-ofthe art in multiple fields.
With this remarkable successes, it is unsurprising that deep
learning techniques are quickly being adopted in network security for use in intrusion detection [1], malware analysis [2],
spam filtering [3], and phishing detection [4]. However, the
growing popularity of novel network paradigms (i.e., Internet
of Things (IoT) and mobile networks) also brings more unique
and higher security requirements. To this end, modern deep
learning algorithms have the potential to rival traditional
approaches, especially in these emerging fields. Recently,
the field of deep learning based network intrusion detection
systems (DL-NIDS) have been growing due to the variability
and efficiency of the deep learning model. The availability
of novel techniques such as recurrent neural networks, semi-

supervised learning, and reinforcement learning is allowing
DL-NIDS to achieve success in applications that have been
traditionally out of the reach of intrusion detection systems
[5]–[7].
However, the downside of deep learning is that the high nonlinearity seen in these systems limits the ability of developers
to guarantee or explain their functionality. This allows for
the possibility of unseen security risks. Indeed, many recent
works have demonstrated the vulnerability of deep learning
to adversarial manipulation [8]–[10]. For example, adversarial
examples can completely misclassify a deep learning model
by only slightly altering the network input data [11]–[14].
In response to the threat that this form of attack poses to
deep learning multiple potential defenses have arisen [15]–
[17]. Despite this, security applications remain vulnerable due
to the fact that it is uncertain which defensive methodologies
are most effective in given scenarios.
Therefore, to ensure the defensive capabilities of deep
learning based security systems, these application should be
evaluated against both the traditional performance metrics in
the target security field and those vulnerabilities from the
adversarial deep learning domain. In fact, if deployed without
understanding the vulnerability, a deep learning model could
easily become the most susceptible component of a security
application. In this paper, we analyze the current state-ofthe art in deep learning based network intrusion detection
system (DL-NIDS). Specifically, we investigate the security
of a recently proposed DL-NIDS, Kitsune, which offers a
similar level of the defensive capability as traditional intrusion
detection systems, while requiring a lower overhead. We
evaluate the DL-NIDS from two perspectives: 1) the ability to
defend from malicious network attack, and 2) the robustness
against adversarial examples.
In the remainder of the paper, we first introduce the basics
of deep learning and its use in intrusion detection systems
as well as the state-of-the-art in adversarial deep learning.
We decompose the target DL-NIDS, Kitsune, in Section III.
Then, we briefly outline our experimental setup in Section
IV. In Sections V and VI, we evaluate the DL-NIDS from the
perspectives of network security and adversarial deep learning,
respectively. Finally, Section VII concludes the paper with a
discussion of potential future research directions.

II. BACKGROUND
A. Deep Learning based Network Intrusion Detection Systems
The increasing frequency and size of cyber-attacks in recent years [18] makings network intrusion detection systems
(NIDS) a critical component in network security. An example
of a network intrusion detection system is shown in Figure 1.
The intrusion detection system essentially acts as a gate keeper
at the target node which activates a firewall or alerts a host
device when a malicious network traffic is detected. Unfortunately, while these systems can be used to effectively defend
the entry point, much of the network remains unprotected. In
other words, attacks that remain internal to the network are
often difficult to detect by the traditional intrusion detection
systems [19].

Fig. 1. An intrusion detection system positioned to defend a
host device from abnormal network traffic.
Deploying an intrusion detection system at multiple nodes
in a distributed manner throughout the network can fill this
hole to further securing networks. A major drawback of the
traditional rule based approach, however, is that each intrusion
detection system must be explicitly programmed to follow
a set of rules. This process also generates potentially long
lists of rules that need to be stored locally for the intrusion
detection systems to access. Furthermore, any changes in a
network node might potentially lead to an update for the entire
network. To this end, DL-NIDS have the potential to overcome
this weakness as they can generalize the defense by capturing
the distribution of normal network traffics, instead of being
explicitly programmed [19]–[22]. In addition, these methods
do not require large lookup tables, which could also reduce
the implementation cost.
B. Adversarial Example Generation
A major focus of adversarial deep learning is the adversarial
example generation, which attempts to find input samples by
slightly perturbing the original benign data to yield different
classifications. Formally, the adversarial example generation
process can be expressed by [11]:
minimize D(~x, ~x + ~δ)
such that C(~x + ~δ, ~t)
~x + ~δ ∈ X

(1)

Where ~x is the model’s original primary input, ~δ is a perturbation on ~x to achieve the desired adversarial behavior,
and X is defines a bounded region of the valid input values.

D(·) is a distance metric which limits δ, while C(·) is a
constraint that defines the goal of the attack. Two commonly
used constraint functions are F (~x) = ~t and F (~x) 6= ~t. The
first defines a targeted attack in which the adversarial goal is
to force the network output, F (~x), to a specific output, ~t. The
second defines the untargeted scenario where the adversarial
goal is for the network to produce any output except ~t. The
choice of D(·) also greatly affects the final outcome of the
attack. In the existing works, LP norms (i.e., L0 , L1 , L2 , and
L∞ ) are often used due to their mathematical significance
and correlation with perceptual distance in image or video
recognition. Recently, new distance metrics are being explored
with the recent works such as spatially transformed adversarial
examples [23].
In the literature, many algorithms for generating adversarial
examples utilizing various C(·), D(·), and/or optimization
approaches have been developed. For example, one of the
earliest adversarial example algorithms, Fast Gradient Sign
Method (FGSM), perturbs every element of the input in the
direction of its gradient by a fixed size [12]. While this method
produced quick results, Basic Iterative Method (BIM) can
significantly decrease the perturbation which however requires
a longer time to run [16]. Furthermore, adversarial example
generation algorithms continue grow more sophisticated as
novel attack build on the foundation of existing works. An
example of this is the elastic net method (ENM) which
adds an L1 regularization term and the iterative shrinkagethresholding algorithm to Carlini and Wagner’s attack [14].
Moreover, adversarial examples are expanding out from image
processing into alternate fields where they continue to inhibit
the functionality of deep learning models [24]–[26]. The effort
to draw researcher awareness to the subject has even lead to
the generation of competitions in which contestants attempt
to produce and defend neural networks from these adversarial
example [27], [28].
C. Robustness against Adversarial Examples
Some researchers believe that the vulnerability of deep
learning models to adversarial examples is evidence of a
pervasive lack of robustness rather than simply an inability
to secure these models [29]–[31]. As such, defenses attempt
to bolster the deep learning model’s robustness through the
use of either reactive or proactive methods [32]. Defensive
distillation and adversarial training are two proactive defenses,
which improve a neural network’s robustness by retraining
the network weights to smooth the classification space [15],
[16]. A recent example of a reactive defense is, PixelDefend,
which attempts to perturb adversarial example input back to
the region of inputs space that is correctly handled by the
network [17].
When deep learning is powering security applications the
robustness of the model is even more critical. The field of malware classification is a prime example as deep learning models
have been shown to perform superbly in this area in multiple
implementation and scenarios [33]–[36]. Unfortunately, when
adversarial example are presented to these systems the lack of

robustness in the deep learning model often allows an attack
to bypass these security measures [37], [38]. Despite this
vulnerability deep learning is a prime candidate for security
implementations when the resource demands or static nature
of traditional defenses inhibit their practicality. Thus, as deep
learning continues to develop into network intrusion detection
the robustness of such systems should be thoroughly studied.
To this end, researchers are continuing to develop guidelines
and frameworks to aid in ensuring the robustness of machine
learning systems against adversarial manipulations [39], [40].
III. E VALUATED N ETWORK
In this section, we present a brief overview of the network
intrusion detection system and then analyze the Kitsune’s deep
learning model, KitNET, in more detail.
A. Kitsune Overview
The DL-NIDS, Kitsune, is composed of Packet Capturer, Packet Parser, Feature Extractor, Feature Mapper, and
Anomaly Detector [19]. The Packet Capturer and Packet
Parser are standard components of NIDS, which forward
the parsed packet and meta information (e.g., transmission
channel, network jitter, capture time) to the Feature Extractor.
Then, the Feature Extractor generates a vector of over 100
statistics which defines the packet and current state of the
active channel. The Feature Mapper clusters these features into
subsets to be fed into the Anomaly Detector, which houses the
deep learning model, KitNET.
The Kitsune DL-NIDS is specifically targeted at being a
light-weight intrusion detection system to be deployed on
network switches in the IoT settings. Thus, each implementation of Kitsune should be tailored to the network node that
it is deployed to. This is achieved through the use of an
unsupervised online learning approach which allows the DLNIDS to dynamically update in response to the traffic at the
target network node. The algorithm assumes that all real-time
transmissions during the training stage are legitimate and thus
learns a benign data distribution. For inference, it analyzes
the incoming transmissions to determine if it resembles the
learned distribution.
B. KitNET
KitNET consists of an ensemble layer and an output layer.
The ensemble layer includes multiple autoencoders, with each
working on a single cluster of inputs provided from the Feature
Mapper. The output scores of these autoencoders are then
normalized before being passed to an aggregate autoencoder
in the output layer whose score is used to assess the security
of the network traffic data.
1) The Autoencoders: The fundamental building block of
KitNET is an autoencoder, a neural network which reduces
an input down to a base representation before reconstructing
to the same input dimension from that representation. The
autoencoders in KitNET are trained to correctly capture the
property of normal network traffics. The number of hidden

neurons inside an autoencoder is limited so the network can
learn a compact representation.
KitNET employs a root-mean-squared-error (RMSE) function on each autoencoder as the performance criteria. The score
generated by each autoencoder block is given by:
r Pn
x)i )2
i=1 (xi − F (~
(2)
s(~x) = RM SE(~x, F (~x)) =
n
where n is the number of inputs. Because the model was
trained to reproduce instances from X a low score indicates
the input resembling the normal distribution well.
2) The Normalizers: Another component used by Kitsune
is the normalizers, appearing both before entering KitNET and
before the aggregate autoencoder. These normalizers implement the standard function:
xi − mini
(3)
norm(xi ) =
M axi − mini
which linearly scales minimum and maximum input values to
0 and 1, respectively. In Kitsune’s training, the value of M axi
and mini respectively take on the maximum and minimum
input values seen by the xith element during training.
C. Classifying the Output
The primary output of KitNET is the RMSE score, S,
produced by the aggregate autoencoder. It should be noted that
the scores produced by KitNET are numerical values rather
than a probability distribution or logits like in common deep
learning classifiers. Kitsune utilizes a classification scheme
which triggers an alarm under the condition: S ≥ φβ, where
φ is the highest value of S recorded during training and β is a
constant used to find a trade-off between the amount of false
positives and negatives. The authors limit the value of β to be
greater than or equal to 1.0 in order to assure a 100% training
accuracy (i.e., all the training data are considered as benign).
IV. E XPERIMENTAL S ETUP
In this section, we briefly describe our experimental setup
and the necessary modifications to the KitNET.
A. Implementing KitNET
In order to perform adversarial machine learning, the
original C++ version of Kitsune was reproduced in TensorFlow [41]. The TensorFlow model was tested and evaluated
similarly as the C++ implementation with an average deviation
on the outputs of 5.71×10−7 from the original model. We then
utilized the Cleverhans [42], an adversarial machine learning
library that are produced and maintained by key contributors in
the domain, to mount different adversarial example generation
algorithms on the Kitsune. We also used the same Mirai dataset
as in [19].
B. Modifications to the Model
Our implementation of KitNET moves the classification
mechanism into the model by adding a final layer at the output,

Fig. 2. A graphical representation of Kitsune [19].

False Positives
(Benign Inputs)

60

False Negatives
(Malicious Inputs)

40

Classification Accuracy

(a)

20.00

15.00

7.00

Threshold

10.00

5.00

1.00

0.25

0.10

0

0.05

20

1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0

True Positive Rate (TPR)

80

0.03

V. E VALUATION FROM THE N ETWORK S ECURITY
P ERSPECTIVE
To understand the defensive capability of a DL-NIDS, it
must be evaluated from both the network security and adversarial machine learning aspects. In the domain of intrusion
detection, the ability to distinguish malicious network traffics
from benign traffics is the main performance metric. In this
section, we evaluate the classification accuracy of the Kitsune.
Kitsune’s developers evaluate the DL-NIDS against a series
of attacks in a variety of networks [19]. In our implementation,
the accuracy of Kitsune is highly dependent on the threshold,
T . This value defines the decision boundary, which makes it a
critical parameter when deploying the model. We evaluate the
KitNET by assuming that the threshold is not predefined, but
trained as in an end-to-end deep learning system. In addition,
this analysis also indicates how the threshold correlates with
the perturbation required in adversarial machine learning.
To assess the performance of a given threshold value, we
consider the following two metrics:
1) False Positives: The percentage of benign inputs that
are incorrectly classified as malicious.
2) False Negatives: The percentage of malicious data that
are incorrectly classified as benign.
On the one hand, the rate of false positives accounts for the
reliability of a network. On the other hand, the rate of false

100

0.01

This allows the deep learning model to produce the classification result based on a threshold, T . Effectively, this alteration
moves the original classification scheme into KitNET itself
when T = φβ, transforming the model from a regression
model into a classifier.
As adversarial examples target on deep learning models, we
isolate KitNET from Kitsune when performing our attacks. In
a real-world attack on Kitsune, the adversary must circumvent,
or surmount, the Feature Extractor in order to induce perturbations on KitNET’s input. However, with an understanding of
the Feature Extractor, it is feasible for the adversary to craft
network traffics to generate required features. Thus, in our
experiments, we focus on evaluating the security of KitNET
from the normalized feature space.

Rate of (%)

(4)

negatives is closely associated with the effectiveness of the
intrusion detection system. Therefore, both rates should be
minimized in an ideal situation. However, in the setting of
Kitsune, the value of the threshold T indeed acts as a tradeoff between false positive rate and false negative rate.
We investigated the full functional range of possible thresholds in this analysis, i.e., from the minimum score of 0 to
a score of 20 which leads to 100% false negatives on the
given dataset. Figure 3(a) plots the two metrics as well as the
accuracy of the DL-NIDS.

0.00

as expressed in Equation 4.


   
benign
1
0
C(~x) =
= S(~x)
+
malicious
−1
2T

0

0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9

False Positive Rate (FPR)
(b)

1

Fig. 3. The percentage of misclassified benign and malicious
inputs for chosen threshold values (a). A receiver operating
characteristic (ROC) curve for Kitsune (b).
It can be seem that the rates of false positives and false
negatives remain almost unchanged in the middle range. Furthermore, it can also be observed that if we want to minimize
one of the rates, the other rate will increase significantly.
Finally, the accuracy is also largely unchanged for threshold
values below 7, which this can be partially contributed to the
imbalance of the dataset (i.e., most of the data belong to the
benign class). Therefore, a threshold between 0.05 and 1 would
be appropriate for this scheme. The effectiveness of Kisune at
separating the Mirai dataset is further demonstrated by the
ROC curve in Figure 3(b).
VI. E VALUATION AGAINST A DVERSARIAL M ACHINE
L EARNING
This section continues the evaluation of Kitsune through
an empirical analysis of its robustness against adversarial
examples.

A. Adversarial Example Generation Methods
Intelligent and adaptive adversaries will exploit the vulnerability of the machine learning models against novel DLNIDS by using techniques such as adversarial examples and
poisoning attacks. There are mainly two attacking objectives in
adversarial machine learning, namely, integrity and availability
violations [43]. In this setting, integrity violations attempt to
generate malicious traffic which evades detection (produce a
false negative), while availability violations attempt to make
benign traffic appear malicious (produce a false positive) [44].
However, adversarial examples demand to achieve the misclassification with perturbations as small as possible.
Another concern in performing these attacks is that the
network data are fundamentally distinct from images, which
are usually used in conventional adversarial machine learning.
An adversarial example in the image domain is an image
that is perceived to be the same by human observers but
differently by the model. The LP norm between the two
images exemplifies that observable distance and hence can be
used as the distance metric. In network security, however, this
definition fails as observing network traffic at the bit-level is
not generally practical. Therefore, the semantic understanding
of these attacks in this setting is remarkably different.
One potential definition for adversarial examples in this
scenario, which is facilitated by the architecture of Kitsune,
is to use the extracted features generated by the model as an
indication of the observable difference. Thus, we adopt the
LP distance on the feature space between the original input
and the perturbed input as the distance metric. In particular,
the L0 norm correlates to altering a small number of extracted
features, which might be a better metric than other LP norms.
As many methods of generating adversarial examples have
been developed with each thrives in different settings, we
attempt to generate a broad comparison on the effect of
adversarial examples with different distance metrics in the
network security domain. We evaluate the robustness of the
KitNET against the following algorithms:
•

•

•

•

Fast Gradient Sign Method (FGSM): This method
optimizes over the L∞ norm (i.e., reduces the maximum
perturbation on any input feature) by taking a single step
to each element of ~x in the direction opposite the gradient
[12].
Jacobian Base Saliency Map (JSMA): This attack minimizes the L0 norm by iteratively calculating a saliency
map and then perturbing the feature that will have the
highest effect [13].
Carlini and Wagner (C&W): Carlini and Wagner’s
adversarial framework, as discussed earlier, can either
minimize the L2 , L0 or L∞ distance metric [11]. In our
experiments, we utilize the L2 norm to reduce the Euclidean distance between the vectors through an iterative
method.
Elastic Net Method (ENM): Elastic net attacks are novel
algorithms that limit the total absolute perturbation across
the input space, i.e., the L1 norm. ENM produces the

adversarial examples by expanding an iterative L2 attack
with an L1 regularizer [14].
B. Experimental Results
We conduct our experiments on both integrity and availability violations. Integrity violation attacks are performed on the
benign inputs with a threshold of s = 1.0. The experimental
results are presented in Table I. For comparison between
different algorithms, the common LP distance metrics are
all presented. Each attack was conducted on the same 1000
random benign samples from the dataset.
TABLE I. Integrity Attacks on KitNET
Algorithm
FGSM
JSMA
C&W
ENM

Success (%)
100
100
100
100

L0
100
2.33
100
1.21

LP Distances
L1
L2
108
10.8
10.73 6.97
7.44
3.61
4.94
4.64

L∞
1.8
4.87
3.49
4.49

Availability attacks are also performed using the same
threshold of s = 1.0. 1000 input vectors that yield closest
output scores to the threshold were selected. The results are
summarized in Table II. Note that as the normalizers were
only trained on benign inputs, many malicious inputs would
be normalized outside the typical range between 0 and 1.
TABLE II. Availability Attacks on KitNET
Algorithm
FGSM
JSMA
C&W
ENM

Success (%)
4
0
100
100

L0
100
−
100
8.74

LP Distances
L1
L2
78.00
7.79
−
−
22.00
8.50
21.7123 8.14

L∞
0.78
−
5.61
3.60

C. Analysis and Discussion
By comparing Table I and Table II, it can be seen that
the integrity attacks in general perform much better than the
availability attacks. For instance, adversarial examples are
rarely generated in the FGSM and JSMA availability attacks.
Additionally, the perturbations produced by the availability
attacks are all larger than their integrity counterparts. A potential cause for the difficulty is the disjoint nature between the
benign and malicious input data, as exhibited by the clipping of
the normalized inputs, in conjunction with a boundary decision
(i.e., the threshold T ) that is much closer to the benign input
data.
Among these four methods, the earlier algorithms, i.e., the
FGSM and JSMA, perform worse than the C&W and ENM
attacks. As we mentioned above, especially in the availability
attacks, the success rates of these attacks are significantly
low. This result is actually expected, since the more advanced
iterative C&W and ENM algorithms are capable of searching
a larger adversarial space than the FGSM and JSMA.
A final observation is that ENM is very effective in these
attacks. Despite the fact that this attack is optimized with

D. Optimizing ENM
Since ENM has been demonstrated to be very successful in
our experiments, we next focus on optimizing the ENM attack
on Kitsune in our setting. The Cleverhans implementation uses
a simple gradient descent optimizer to minimize the function:
c · max{F (~x)j − Y , 0} + β||~x − x~0 ||1 + ||~x − x~0 ||2

(5)

where F (·)j is the logit output of the target classifier, Y is the
target logit output (i.e., the output which produces the desired
violation), and x~0 is the original network input. It can be seen
that there are two regularization parameters, c and β. These
parameters determine the contribution of the different metrics
to the attack algorithm. For example, a very large c effectively
increases the attacks ability to converge to a successful attack.
The large contribution of the constraint terms also potentially
overshadows the distance metrics effectively diminishing the
attacks ability to minimize the perturbation. The focus of this
optimization is to determine optimal regularization terms to
produce effective attacks on KitNET.
The ENM algorithm has several other hyper-parameters,
including the learning rate, the maximum number of gradient
descent steps, and the targeted confidence level. As these
parameters are standard in adversarial example attacks, these
parameters are set to the constant values of 0.05, 1000, and
0, respectively. An optimization scheme included in the ENM
algorithm aids in producing optimal result by altering c. It does
this by decreasing the parameter N -times, only retaining the
successful attack which produces the lowest perturbation. To
insure this functionality isn’t contributing to the optimization,
this feature is disabled by setting N = 0. Therefore, the results
of the optimization could be further improved by enabling this
functionality.
The parameter, c, determines the contribution of the adversarial misclassification objective at the cost of diminishing
the two LP normalization terms. Thus, it can be logically
determined that the optimal value of c is that value which
achieves the demanded success rate while remaining as small
as possible. We evaluate a wide range of c values for β = 1,

as shown in Figure 4. We find c = 450 to be optimal,
which achieves a 100% success rate with a relatively small
perturbation. It can also be observed from Figure 4 that
the resulted L1 distance does not directly correlated to the
selection of c. We also tried to increase the value of c into the
thousands; interestingly, the LP distances still only changed
very slightly.
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0.0

4.15
4.10
4.05
4.00
3.95
3.90
3.85
0

50 100 200 200 250 300 350 400 450 500

L1 distance (Red)

Success Rate (Blue)

respect to the L1 norm, its generated adversarial examples
yield very small values for all other norms as well. Specifically,
the L0 perturbations produced were even better than those
produced by JSMA. As stated above, the L0 norm seems to
be the most appropriate norm among these four Lp norms
in the setting of network security, as it signifies altering a
minimized number of extracted features from the network
traffic. Thus, ENM can be feasibly implemented against the
Kitsune to generate adversarial examples to fool the detection
system, while only requiring very small perturbations.
We note that the above attacks were produced with an
adaptive step size random search of each methods parameters.
In practice adversaries may use such a naive approach to
determine effect attack algorithms. Then, utilize more robust
optimization algorithms, such as Bayesian or gradient decent
optimization, with the indicated attack algorithms to produce
superior result.

3.80

Fig. 4. The success rate and L1 distance with respect to
changes in the regularization parameter, c.
On the other hand, the choice of β significantly affects the
LP distances. We now optimize the produced perturbation
through varying the parameter β for c = 450. The results
are summarized in Table III. It can be seen that the success
rate will drop as the increase of c, after the second term of
Equation 5 begins to overpower the loss function associated
with c.
TABLE III. The perturbations produced with respect to β.
β
1 × 10−5
1 × 10−4
1 × 10−3
1 × 10−2
1 × 10−1
1 × 100
2 × 101
5 × 101
1 × 102

Success (%)
100
100
100
100
100
100
0.84
0.08
0

L0
96.61
78.46
33.34
5.51
1.09
1.01
1.00
1.00
-

LP Distances
L1
L2
5.9518 3.6378
5.7574 3.6388
5.0577 3.6435
5.1722 3.7658
3.8624 3.7277
4.0347 4.0158
4.1350 4.1350
4.2054 4.2054
-

L∞
3.5163
3.516
3.5268
3.3129
3.6450
4.0044
4.1350
4.2054
-

Summary: It can be concluded that adversarial machine
learning can be a realistic threat against DL-NIDS. Therefore,
when moving intrusion detection towards the deep learning
realm, it is critical to evaluate the security of a DL-NIDS
against both adversarial attacks in the conventional network
and the machine learning domains.
VII. C ONCLUSIONS AND F UTURE D IRECTIONS
This paper has demonstrated the vulnerability of DL-NIDS
to well-crafted attacks from the domain of adversarial machine learning. This vulnerability is present in deep learning
based systems even when the model achieves a high degrees
of accuracy for classifying between benign and malicious

network traffics. Therefore, researchers must take steps to
verify the security of deep learning models in security-critical
applications to ensure they do not impose additional risks;
otherwise, it will defeat the purpose of using deep learning
techniques to protect networks.
The existence of the Feature Extractor and the Packet Parser
signifies that the Kitsune is at least partially utilizing domain
knowledge of network traffic to generate its classification.
To get the most benefit from deep learning models, their
applications strive to be as data-driven as possible (i.e., require
little to no human knowledge to generate a function mapping).
Thus, despite the current success of Kitsune and other DLNIDS, as the field continues to develop, DL-NIDS will attempt
directly converting network traffic to a classification utilizing
end-to-end deep learning models. Furthermore, the human
knowledge currently being used by modern DL-NIDS implies
that to increase the probability of a successful attack an
adversary should have an understanding of this knowledge.
Thus, as DL-NIDS continue to develop evaluating the model
against adversarial machine learning techniques becomes even
more critical as attacks will no longer have a need for this
additional knowledge when targeting the system.
In this work it is assumed that the adversary has direct
knowledge of the target DL-NIDS allowing them to directly
generate inputs for the deep learning model. A potential
drawback of this assumption is that the perturbation require to
generate the adversarial examples does not directly correlate to
the alteration on the network. Additionally, it doesn’t account
for the effect that that change on the network traffic would
have on the host device. Future works will attempt to address
this by bridging this gap between the adversarial input to the
deep learning model and the network traffic.
R EFERENCES
[1] A. L. Buczak and E. Guven, “A survey of data mining and machine
learning methods for cyber security intrusion detection,” IEEE Communications Surveys & Tutorials, vol. 18, no. 2, pp. 1153–1176, 2016.
[2] J. Gardiner and S. Nagaraja, “On the security of machine learning in
malware c&c detection: A survey,” ACM Computing Surveys (CSUR),
vol. 49, no. 3, p. 59, 2016.
[3] E. Blanzieri and A. Bryl, “A survey of learning-based techniques of
email spam filtering,” Artificial Intelligence Review, vol. 29, no. 1, pp.
63–92, 2008.
[4] S. Abu-Nimeh, D. Nappa, X. Wang, and S. Nair, “A comparison of
machine learning techniques for phishing detection,” in Proceedings
of the anti-phishing working groups 2nd annual eCrime researchers
summit. ACM, 2007, pp. 60–69.
[5] C. Yin, Y. Zhu, J. Fei, and X. He, “A deep learning approach for
intrusion detection using recurrent neural networks,” Ieee Access, vol. 5,
pp. 21 954–21 961, 2017.
[6] R. A. R. Ashfaq, X.-Z. Wang, J. Z. Huang, H. Abbas, and Y.-L. He,
“Fuzziness based semi-supervised learning approach for intrusion detection system,” Information SciencesInformatics and Computer Science,
Intelligent Systems, Applications: An International Journal, vol. 378,
pp. 484–497, 2017.
[7] S. Venkatesan, M. Albanese, A. Shah, R. Ganesan, and S. Jajodia,
“Detecting stealthy botnets in a resource-constrained environment using
reinforcement learning,” in Proceedings of the 2017 Workshop on
Moving Target Defense. ACM, 2017, pp. 75–85.
[8] W. Li, J. Yu, X. Ning, P. Wang, Q. Wei, Y. Wang, and H. Yang, “Hu-Fu:
Hardware and Software Collaborative Attack Framework against Neural
Networks,” International Symposium on Very Large Scale Integration
(ISVLSI), 2018.

[9] Y. Liu, Y. Xie, and A. Srivastava, “Neural Trojans,” arXiv preprint
arXiv:1710.00942, 2017.
[10] C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. Goodfellow,
and R. Fergus, “Intriguing properties of neural networks,” arXiv preprint
arXiv:1312.6199, 2013.
[11] N. Carlini and D. Wagner, “Towards evaluating the robustness of neural
networks,” in Symposium on Security and Privacy (SP). IEEE, 2017,
pp. 39–57.
[12] I. J. Goodfellow, J. Shlens, and C. Szegedy, “Explaining and harnessing
adversarial examples,” International Conference on Learning Representations (ICLR), 2015.
[13] N. Papernot, P. McDaniel, S. Jha, M. Fredrikson, Z. B. Celik, and
A. Swami, “The limitations of deep learning in adversarial settings,”
in Security and Privacy (EuroS&P), 2016 IEEE European Symposium
on. IEEE, 2016, pp. 372–387.
[14] P.-Y. Chen, Y. Sharma, H. Zhang, J. Yi, and C.-J. Hsieh, “Ead: elasticnet attacks to deep neural networks via adversarial examples,” in ThirtySecond AAAI Conference on Artificial Intelligence, 2018.
[15] N. Papernot, P. McDaniel, X. Wu, S. Jha, and A. Swami, “Distillation
as a defense to adversarial perturbations against deep neural networks,”
in 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 2016,
pp. 582–597.
[16] A. Kurakin, I. Goodfellow, and S. Bengio, “Adversarial examples in the
physical world,” International Conference on Learning Representations,
2016.
[17] Y. Song, T. Kim, S. Nowozin, S. Ermon, and N. Kushman, “Pixeldefend: Leveraging generative models to understand and defend against
adversarial examples,” arXiv preprint arXiv:1710.10766, 2017.
[18] M. A. Kuypers, T. Maillart, and E. Pate-Cornell, “An empirical
analysis of cyber security incidents at a large organization,” Department of Management Science and Engineering, Stanford University, School of Information, UC Berkeley, http://fsi. stanford.
edu/sites/default/files/kuypersweis v7. pdf, accessed July, vol. 30, 2016.
[19] Y. Mirsky, T. Doitshman, Y. Elovici, and A. Shabtai, “Kitsune: an
ensemble of autoencoders for online network intrusion detection,” arXiv
preprint arXiv:1802.09089, 2018.
[20] N. Srivastav and R. K. Challa, “Novel intrusion detection system integrating layered framework with neural network,” in Advance Computing
Conference (IACC), 2013 IEEE 3rd International. IEEE, 2013, pp.
682–689.
[21] D. Damopoulos, S. A. Menesidou, G. Kambourakis, M. Papadaki,
N. Clarke, and S. Gritzalis, “Evaluation of anomaly-based ids for mobile
devices using machine learning classifiers,” Security and Communication
Networks, vol. 5, no. 1, pp. 3–14, 2012.
[22] Y. Li, J. Xia, S. Zhang, J. Yan, X. Ai, and K. Dai, “An efficient intrusion
detection system based on support vector machines and gradually feature
removal method,” Expert Systems with Applications, vol. 39, no. 1, pp.
424–430, 2012.
[23] C. Xiao, J.-Y. Zhu, B. Li, W. He, M. Liu, and D. Song, “Spatially
transformed adversarial examples,” International Conference on Learning Representations (ICLR), 2018.
[24] N. Carlini and D. Wagner, “Audio adversarial examples: Targeted attacks
on speech-to-text,” in 2018 IEEE Security and Privacy Workshops
(SPW). IEEE, 2018, pp. 1–7.
[25] S. Huang, N. Papernot, I. Goodfellow, Y. Duan, and P. Abbeel,
“Adversarial attacks on neural network policies,” arXiv preprint
arXiv:1702.02284, 2017.
[26] J. Kos, I. Fischer, and D. Song, “Adversarial examples for generative
models,” in 2018 IEEE Security and Privacy Workshops (SPW). IEEE,
2018, pp. 36–42.
[27] W. Brendel, J. Rauber, A. Kurakin, N. Papernot, B. Veliqi, M. Salathé,
S. P. Mohanty, and M. Bethge, “Adversarial vision challenge,” arXiv
preprint arXiv:1808.01976, 2018.
[28] A. Kurakin, I. Goodfellow, S. Bengio, Y. Dong, F. Liao, M. Liang,
T. Pang, J. Zhu, X. Hu, C. Xie et al., “Adversarial attacks and defences
competition,” in The NIPS’17 Competition: Building Intelligent Systems.
Springer, 2018, pp. 195–231.
[29] N. Ford, J. Gilmer, N. Carlini, and D. Cubuk, “Adversarial examples are a natural consequence of test error in noise,” arXiv preprint
arXiv:1901.10513, 2019.
[30] A. Fawzi, S.-M. Moosavi-Dezfooli, and P. Frossard, “Robustness of
classifiers: from adversarial to random noise,” in Advances in Neural
Information Processing Systems, 2016, pp. 1632–1640.

[31] J. Gilmer, L. Metz, F. Faghri, S. S. Schoenholz, M. Raghu, M. Wattenberg, and I. Goodfellow, “Adversarial spheres,” arXiv preprint
arXiv:1801.02774, 2018.
[32] X. Yuan, P. He, Q. Zhu, and X. Li, “Adversarial examples: Attacks and
defenses for deep learning,” IEEE transactions on neural networks and
learning systems, 2019.
[33] Z. Zhu and T. Dumitraş, “Featuresmith: Automatically engineering
features for malware detection by mining the security literature,” in
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2016, pp. 767–778.
[34] L. Sayfullina, E. Eirola, D. Komashinsky, P. Palumbo, Y. Miche,
A. Lendasse, and J. Karhunen, “Efficient detection of zero-day android
malware using normalized bernoulli naive bayes,” in 2015 IEEE Trustcom/BigDataSE/ISPA, vol. 1. IEEE, 2015, pp. 198–205.
[35] J. Saxe and K. Berlin, “Deep neural network based malware detection
using two dimensional binary program features,” in 10th International
Conference on Malicious and Unwanted Software (MALWARE). IEEE,
2015, pp. 11–20.
[36] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, K. Rieck, and
C. Siemens, “Drebin: Effective and explainable detection of android
malware in your pocket.” in Ndss, vol. 14, 2014, pp. 23–26.
[37] K. Grosse, N. Papernot, P. Manoharan, M. Backes, and P. McDaniel,
“Adversarial examples for malware detection,” in European Symposium
on Research in Computer Security. Springer, 2017, pp. 62–79.
[38] B. Kolosnjaji, A. Demontis, B. Biggio, D. Maiorca, G. Giacinto,
C. Eckert, and F. Roli, “Adversarial malware binaries: Evading deep
learning for malware detection in executables,” in 2018 26th European
Signal Processing Conference (EUSIPCO). IEEE, 2018, pp. 533–537.
[39] J. Gilmer, R. P. Adams, I. Goodfellow, D. Andersen, and G. E. Dahl,
“Motivating the rules of the game for adversarial example research,”
arXiv preprint arXiv:1807.06732, 2018.
[40] N. Carlini, A. Athalye, N. Papernot, W. Brendel, J. Rauber, D. Tsipras,
I. Goodfellow, and A. Madry, “On evaluating adversarial robustness,”
arXiv preprint arXiv:1902.06705, 2019.
[41] Mart\’\in˜Abadi, Ashish˜Agarwal, Paul˜Barham, Eugene˜Brevdo, and
Others, “{TensorFlow}: Large-Scale Machine Learning on Heterogeneous Systems,” 2015. [Online]. Available: https://www.tensorflow.org/
[42] N. Papernot, F. Faghri, N. Carlini, I. Goodfellow, R. Feinman, A. Kurakin, C. Xie, Y. Sharma, T. Brown, A. Roy, A. Matyasko, V. Behzadan,
K. Hambardzumyan, Z. Zhang, Y.-L. Juang, Z. Li, R. Sheatsley, A. Garg,
J. Uesato, W. Gierke, Y. Dong, D. Berthelot, P. Hendricks, J. Rauber,
and R. Long, “Technical report on the cleverhans v2.1.0 adversarial
examples library,” arXiv preprint arXiv:1610.00768, 2018.
[43] L. Huang, A. D. Joseph, B. Nelson, B. I. Rubinstein, and J. Tygar, “Adversarial machine learning,” in Proceedings of the 4th ACM workshop
on Security and artificial intelligence. ACM, 2011, pp. 43–58.
[44] G. Apruzzese, M. Colajanni, L. Ferretti, A. Guido, and M. Marchetti,
“On the effectiveness of machine and deep learning for cyber security,”
in 2018 10th International Conference on Cyber Conflict (CyCon).
IEEE, 2018, pp. 371–390.

