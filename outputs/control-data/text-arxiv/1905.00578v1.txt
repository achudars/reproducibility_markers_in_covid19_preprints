A NOTE ON ADJOINT LINEAR ALGEBRA
UWE NAUMANN

∗

arXiv:1905.00578v1 [cs.NA] 2 May 2019

Abstract. A new proof for adjoint systems of linear equations is presented. The argument
is built on the principles of Algorithmic Differentiation. Application to scalar multiplication sets
the base line. Generalization yields adjoint inner vector, matrix-vector, and matrix-matrix products
leading to an alternative proof for first- as well as higher-order adjoint linear systems.
Key words. algorithmic differentiation, adjoint, linear algebra
AMS subject classifications. 15A06, 15A29, 26B05

1. Motivation. Algorithmic Differentiation [3, 5] of numerical programs builds
on a set of elemental functions with known partial derivatives with respect to their arguments at the given point of evaluation. The propagation of adjoint derivatives relies
on the associativity of the chain rule of differential calculus. Differentiable combinations of elemental functions yield higher-level elementals. Efficient implementation of
AD requires the highest possible level of elemental functions.
Basic AD assumes the set of elemental functions to be formed by the arithmetic
operators and intrinsic functions built into the given programming language. While
its application to linear algebra methods turns out to be straight forward basic AD is
certainly not the method of choice from the point of view of computational efficiency.
Elementals of the highest possible level should be used. Their derivatives should
be formulated as functions of high-level elementals in order to exploit benefits of
corresponding optimized implementations.
Following this rationale this note presents a new way to derive adjoint systems of
linear equations based on adjoint Basic Linear Algebra Subprograms (BLAS) [4]. It
is well known (see [2] and references therein) that for systems A · x = b of n linear
equations with invertible A and primal solution x = A−1 · b first-order adjoints A(1)
of A (both ∈ IRn×n with IR denoting the real numbers) and b(1) of b (both ∈ IRn )
can be evaluated at the primal solution x ∈ IRn as
!
b(1) = A−T · x(1)
.
(1.1)
A(1) = −b(1) · xT
The main contribution of this note is an alternative proof for Eqn. (1.1) that builds
naturally on the adjoint BLAS used in the context of state of the art AD. For consistency with related work we follow the notation in [5], that is, v (1) ∈ IR denotes the
value of the first-order directional derivative (or tangent) associated with a variable
v ∈ IR and v(1) ∈ IR denotes the value of its adjoint.
m×n
of a differen2. Prerequisites. The Jacobian ∇F = ∇F (x) ≡ dF
dx (x) ∈ IR
n
m
tiable implementation of y = F (x) : IR → IR as a computer program induces a
linear mapping y(1) = ∇F · x(1) : IRn → IRm implementing the tangent of F. The corresponding adjoint operator ∇F ∗ = ∇F ∗ (x) is formally defined via the inner vector
product identity

(2.1)

h∇F · x(1) , y(1) i = hx(1) , ∇F ∗ · y(1) i

of Computer Science, RWTH Aachen University, 52056 Aachen, Germany, naumann@stce.rwth-aachen.de
∗ Department

1

yielding ∇F ∗ = ∇F T [1]. In the following all (program) variables are assumed to be
alias- and context-free, that is, distinct variables do not overlap in memory and F is
assumed to be not embedded in an enclosing computation. We distinguish between
active and passive variables. Derivatives of all active outputs of the given program
are computed with respect to all active inputs. We are not interested in derivatives
of passive outputs nor are we computing derivatives with respect to passive inputs.
3. BLAS Revisited. In its basic form AD builds on known tangents and adjoints of the arithmetic functions and operators built into programming languages.
Tangents and adjoints are propagated along the flow of data according to the chain
rule of differential calculus. We enumerate entries of vectors v ∈ IRn staring from zero
as v0 , . . . , vn−1 .
From the perspective of AD adjoint versions of higher-level BLAS are derived
as adjoints of lower-level BLAS. Optimization of the result aims for implementation
using the highest possible level of BLAS. For example, adjoint matrix-matrix multiplication (level-3 BLAS) is derived from adjoint matrix-vector multiplication (level-2
BLAS) yielding efficient evaluation as two matrix-matrix products (level-3 BLAS) as
shown in Lemma 3.4. Rigorous derivation of this result requires bottom-up investigation of the BLAS hierarchy. We start with basic scalar multiplication (Lemma 3.1)
followed by the inner vector (Lemma 3.2) and matrix-vector (Lemma 3.3) products
as prerequisites for the matrix-matrix product.
Lemma 3.1. The adjoint of scalar multiplication y = a · x with active a, x, y ∈ IR
is computed as
a(1) = x · y(1)

(3.1)

x(1) = a · y(1)

for y(1) ∈ IR yielding a(1) , x(1) ∈ IR.
Proof. Differentiation of y = a · x with respect to a and x yields the tangent
 (1)   
a
x
(1)
y =
,
a
x(1)
for y (1) , a(1) , x(1) ∈ IR. Eqn. (2.1) implies
 (1)  
  (1)   
a
a(1)
a
x
hy (1) , y(1) i = y (1) · y(1) =
,
=
,
· y(1)
x(1)
a
x(1)
x(1)
yielding



a(1)
x(1)

and hence Eqn. (3.1).



 
x
=
· y(1)
a

Lemma 3.2. The adjoint of an inner vector product
y = ha, xi ≡ aT · x =

n−1
X

ai · xi

i=0

with active inputs a ∈ IRn and x ∈ IRn yielding the active output y ∈ IR is computed
as
(3.2)

a(1) = x · y(1)
x(1) = a · y(1)
2

for y(1) ∈ IR yielding a(1) ∈ IRn and x(1) ∈ IRn .
Proof. Differentiation of y = aT · x, for a = (ai )i=0,...,n−1 and x = (xi )i=0,...,n−1 ,
with respect to a and x yields the tangent
! n−1
n−1
(1)

X
X
a
(1)
(1)
i
xi · ai + ai · xi
(xi ai ) ·
=
y (1) =
(1)
xi
i=0
i=0
 (1) 
n−1
n−1
X
X
a
(1)
(1)
xi · ai +
=
xi · ai = xT · a(1) + aT · x(1) = (xT aT ) ·
.
x(1)
i=0

i=0

Eqn. (2.1) implies

y(1) · y (1) = (aT(1) xT(1) ) ·



a(1)
x(1)



= y(1) · (xT aT ) ·



a(1)
x(1)



yielding (aT(1) xT(1) ) = y(1) · (xT aT ) and hence Eqn. (3.2).
The following derivation of adjoint matrix-vector and matrix-matrix products relies on serialization of matrices. Individual rows of a matrix A ∈ IRm×n are denoted as
ai ∈ IR1×n for i = 0, . . . , m − 1; columns are denoted as aj ∈ IRm for i = 0, . . . , n − 1.
(Row) Vectors in IR1×n are denoted as (vj )j=0,...,n−1 ; (column) vectors in IRm are
denoted as (vi )i=0,...,m−1 ; Consequently, a row-major serialization of A is given by


aTi i=0,...,m−1 . A column-major serialization of A is given by aj j=0,...,n−1 . Tangents and adjoints of the individual entries of A define
(1)

(1)

j=0,...,n−1
A(1) = (ai )i=0,...,m−1 = (ai,j )i=0,...,m−1

and

A(1) = (a(1)i )i=0,...,m−1 = (a(1)i,j )j=0,...,n−1
i=0,...,m−1 ,

respectively.
Lemma 3.3. The adjoint of a matrix-vector product
y = A · x ≡ (ai · x)i=0,...,m−1
with active inputs A ∈ IRm×n and x ∈ IRn yielding the active output y ∈ IRm is
computed as
x(1) = AT · y(1)

(3.3)

A(1) = y(1) · xT

for y(1) ∈ IRm yielding x(1) ∈ IRn and A(1) ∈ IRm×n .
Proof. Differentiation of y = A · x, where A = (ai )i=0,...,m−1 , x = (xj )j=0,...,n−1
and y = (yi )i=0,...,m−1 , with respect to A and x yields the tangent
* 
!+!


(1) T
x
(1) T
(1)
(1)
T
a
i
,
y =
+ ai · x
= x · ai
aTi
x(1)
i=0,...,m−1
i=0,...,m−1




(1) T
+ ai · x(1)
= xT · ai
i=0,...,m−1

i=0,...,m−1





(1)
= ai · x
+ ai · x(1)
i=0,...,m−1
i=0,...,m−1


(1)
· x + (ai )i=0,...,m−1 · x(1) = A(1) · x + A · x(1) .
= ai
i=0,...,m−1

3

Eqn. (2.1) implies
D

y(1) , y

(1)

E

=

* 

aT(1)i



i=0,...,m−1

x(1)

!



(1)T
ai

,

i=0,...,m−1

x(1)

!+

T



(1)T
= aT(1)i
+ xT(1) · x(1)
· ai
i=0,...,m−1
i=0,...,m−1


T
T
T
· A · x(1)
· A(1) · x + y(1)
· A(1) · x + A · x(1) = y(1)
= y(1)
T


(1)T
T
· (x)i=0,...,m−1 + y(1)
· A · x(1)
=
y(1)i · ai
i=0,...,m−1

=



T 


(1)T
T
y(1)i · x i=0,...,m−1 · ai
· A · x(1) ,
+ y(1)
i=0,...,m−1
| {z }
|
{z
}
=xT
(1)


T
= (aT
)
(1)i i=0,...,n−1

where (x)i=0,...,m−1 ∈ IRm·n denotes a concatenation of m copies of x ∈ IRn as a
column vector. Eqn. (3.3) follows immediately.
Lemma 3.4. The adjoint of a matrix-matrix product Y = A · X with active inputs
A ∈ IRm×p , X ∈ IRp×n yielding the active output Y ∈ IRm×n is computed as
A(1) = Y(1) · X T

(3.4)

X(1) = AT · Y(1)

for Y(1) ∈ IRm×n yielding A(1) ∈ IRm×p and X(1) ∈ IRp×n .
Proof. Differentiation of Y = A·X, where A = (ai )i=0,...,m−1 , X = xk
k=0,...,p−1
and Y = yk
, with respect to A and X yields tangents
y

(1)k

=

*

xk
aTi



(1) T

, ai(1)k
x

!+!

k=0,...,p−1

= A(1) · xk + A · x(1)k .
i=0,...,m−1

for k = 0, . . . , p − 1 and hence
Y (1) = A(1) · X + A · X (1) .
Eqn. (2.1) implies
D

E

k
, y(1)k =
y(1)


* 
aT(1)i



!

(1)T

ai



!+

i=0,...,m−1
i=0,...,m−1 ,
x(1)k
x(1)k
T 



(1)T
kT
k
· A · x(1)k
· ai
+ y(1)
· xk
=
y(1)i
i=0,...,m−1
i=0,...,m−1
| {z }
{z
}
|
kT
=x(1)


T
= (aT
)
(1)i i=0,...,m−1

for k = 0, . . . , p − 1 and hence the Eqn. (3.4).
4. Systems of Linear Equations Revisited. Lemmas 4.1 and 4.2 form the
basis for the new proof of Eqn. (1.1).
4

Lemma 4.1. The tangent
Y (1) = A · X (1) · B
of Y = A · X · B for active X ∈ IRn×q , Y ∈ IRm×p and passive A ∈ IRm×n , B ∈ IRq×p
implies the adjoint
X(1) = AT · Y(1) · B T .
Proof.
Y (1) = Z (1) · B

⇒

Z(1) = Y(1) · B T

follows from application of Lemma 3.4 to Y = Z · B with passive B.
Z (1) = A · X (1)

⇒

X(1) = AT · Z(1)

follows from application of Lemma 3.4 to Z = A · X with passive A. Substitution of
Z (1) and Z(1) yields Lemma 4.1.
Lemma 4.2. The tangent
Y (1) =

k−1
X

(1)

Ai · Xi

· Bi

i=0

Pk−1
Pk−1
of Y = i=0 Ai · Xi · Bi = i=0 Yi with active Xi ∈ IRni ×qi , Y ∈ IRm×p and with
m×ni
qi ×p
passive Ai ∈ IR
, Bi ∈ IR
implies the adjoint
Xi(1) = ATi · Y(1) · BiT
for i = 0, . . . , k − 1
Proof. From
(1)

Yi

(1)

= Ai · Xi

· Bi

follows with Lemma 4.1
Xi(1) = ATi · Yi(1) · BiT
Pk−1 (1)
for i = 0, . . . , k − 1. Moreover, Y (1) = i=0 Yi implies Yi(1) = Y(1) due to identity
Jacobians of Y with respect to Yi for i = 0, . . . , k − 1 and hence Lemma 4.2.
Theorem 4.3. Adjoints of systems A · x = b of n linear equations with invertible
A ∈ IRn×n and right-hand side b ∈ IRn are evaluated at the primal solution x =
A−1 · b ∈ IRn by Eqn. (1.1).

Proof. Differentiation of A · x = b with respect to A and b yields the tangent
system
A(1) · x + A · x(1) = b(1)
which implies
x(1) = A−1 · b(1) · In − A−1 · A(1) · x
with identity In ∈ IRn×n . Lemma 4.2 yields
b(1) = A−T · x(1) · InT
A(1) = −A−T · x(1) · xT
| {z }
=b(1)

and hence Eqn. (1.1).

5

5. Conclusion. As observed previously by various authors a possibly available
factorization of A can be reused both for the tangent (A · x(1) = b(1) − A(1) · x)
and the adjoint (AT · b(1) = x(1) ) systems. The additional worst case computational
cost of O(n3 ) can thus be reduced to O(n2 ). Higher-order tangents [adjoints] of linear
systems amount to repeated solutions of linear systems with the same [transposed]
system matrix combined with tangent [adjoint] BLAS.
REFERENCES
[1] N. Dunford and J. Schwartz, Linear Operators. I. General Theory, With the assistance of W.
G. Bade and R. G. Bartle. Pure and Applied Mathematics, Vol. 7, Interscience Publishers,
Inc., New York, 1958.
[2] M. B. Giles, Collected matrix derivative results for forward and reverse mode algorithmic differentiation, in Advances in Automatic Differentiation, C. Bischof, M. Bücker, P. Hovland,
U. Naumann, and J. Utke, eds., Springer, 2008, pp. 35–44.
[3] A. Griewank and A. Walther, Evaluating Derivatives. Principles and Techniques of Algorithmic Differentiation, Seocnd Edition, no. OT105 in Other Titles in Applied Mathematics,
SIAM, 2008.
[4] C. Lawson, R. Hanson, D. Kincaid, and F. Krogh, Basic linear algebra subprograms for
Fortran usage, ACM Trans. Math. Softw., 5 (1979), pp. 308–323.
[5] U. Naumann, The Art of Differentiating Computer Programs. An Introduction to Algorithmic
Differentiation., no. SE24 in Software, Environments, and Tools, SIAM, 2012.

6

