arXiv:1912.05885v1 [astro-ph.IM] 12 Dec 2019

Automated SpectroPhotometric Image REDuction (ASPIRED)
Marco C Lam, Robert J Smith, and Iain A Steele
Astrophysics Research Institute, Liverpool John Moores University, IC2, LSP,
146 Brownlow Hill, Liverpool, Merseyside L3 5RF, UK
c.y.lam@ ljmu.ac.uk

Abstract.
We aim to provide a suite of publicly available spectral data reduction
software to facilitate rapid scientific outcomes from time-domain observations. For
time resolved observations, an automated pipeline frees astronomers from performance
of the routine data analysis tasks to concentrate on interpretation, planning future observations and communication with international collaborators. The project consists
of two parts: data processing (ASPIRED) and a graphical user interface (gASPIRED).
ASPIRED is written in Python 3, and was intentionally developed as a self-consistent
reduction pipeline with its own diagnostics and error handling. The pipeline can reduce
2D spectral data from raw image to wavelength and flux calibrated 1D spectrum automatically without any user input. gASPIRED is a cross-platform software developed
with Electron on a single code base. It brings interactivity to the software with a
well-maintained and user-friendly environment.

1.

Introduction

With major global investments in multi-wavelength and multi-messenger surveys, time
domain astronomy is entering a golden age. To maximally scientific exploit discoveries from these facilities rapid spectroscopic follow-up observations of transient objects (e.g., supernovae, gravitational wave optical counterparts etc.) will provide crucial
astrophysical interpretations. Part of the OPTICON1 project coordinates the operation
of a network of largely self-funded European robotic and conventional telescopes, coordinating common science goals and providing the tools to deliver science-ready photometric and spectroscopic data. As part of this activity SPRAT (Piascik et al. 2014)
was developed as a compact, reliable, low-cost and high-throughput spectrograph and
appropriate for deployment on a wide range of 1-4m class telescopes. Installed on the
Liverpool Telescope since 2014, the deployable slit and grating mechanism and optical
fibre based calibration system make the instrument self-contained. Copies of SPRAT
are being built for other telescopes. Our final task is to deliver software that can be
easily configured to build pipelines for long slit spectrographs on different telescopes.
We use SPRAT as a test case for this development, but our aim is to support a much
wider range of instruments. By delivering near real-time data reduction we will facilitate automated or interactive decision making, allowing "on-the-fly" modification of
observing strategies and rapid triggering of other facilities.

1

https://www.astro-opticon.org/

1

Lam, Smith & Steele

2
2.

Desktop or Web Application?

Desktop and web-based applications have their strengths and weaknesses, examples
specific to the development of the ASPIRED pipeline are summarised in Table 1. Some
other considerations include:
Geographical Location – If users are working in extreme or remote environments,
there is less likely to be a high speed and reliable internet connection. An application
will become completely unusable if it does not have an offline mode.
Platform – The three platforms that dominate the market are the various distributions
of Windows, Mac and Linux. (In the context of research data reduction, we neglect
hand-held and mobile computing. The solutions selected here ought to be well suited to
adaptation to the current generation of mobile devices.) Astrophysics research heavily
employs Unix-like systems, but Windows is more commonly used in teaching.
Cost – Development costs for a web-based and a desktop application are similar. When
the technology shifts to a completely new paradigm, updating a piece of software can
be more expensive than developing a new one.
Desktop
Users only need to download once
Users have to update the service
Work both on- and/or off-line
No overhead cost for hosting
Difficult cross-platform support
High performance for local storage
Less concern with security problem
Table 1.

3.

Web-based
Has to be downloaded every time
A single copy is maintained on the server
Only work online
Cost for hosting service
Difficult cross-browser support
Usually up/download speed limited
Every connection is a potential security issue

Comparison of the pros and cons of desktop and web-based application.

Data Processing Software

In order to maximise the potential user base and allow easier maintenance and future extension, the development is divided into three self-consistent components – (a) 2D and
1D spectral reduction (except wavelength calibration); (b) wavelength calibration (see
RASCAL by Veitch-Michaelis & Lam (2020) in this proceeding); and (c) graphical user
interface. The ASPIRED is written in object-oriented Python 3, while the gASPIRED is
written in JavaScript, html and CSS with the Electron2 framework.
3.1.

Data Reduction – ASPIRED

ASPIRED3 focuses on spectral data extraction, but it also contains a minimal image
reduction facility, which serves basic arithmetic operations. The data extraction itself
contains: (a) aperture tracing; (b) top hat/optimal aperture extraction (Horne 1986); (c)
2

https://electronjs.org/

3

https://github.com/cylammarco/ASPIRED

Automated SpectroPhotometric Image REDuction (ASPIRED)

3

Figure 1. An M-dwarf spectrum taken with SPRAT in red optimised mode used as
a test case for the development. Top Left: visualisation of the regions for spectral extraction region (black) and background sky fitting (red); bottom left: extracted spectrum (blue), uncertainty (orange), sky signal (red) and signal-to-noise ratio (grey);
top right: the extracted spectrum of the standard star after wavelength and flux calibration (blue) and the standard spectrum used for flux calibration (black); bottom
right: the extracted spectrum (blue), the uncertainty (orange) and the sky signal (red).

wavelength calibration with RASCAL, or user defined polynomial/spline solutions; and
(d) flux calibration if standard star is also provided. It is currently suitable for low resolution long-slit spectral extraction, including flux calibration. It makes use of a number
of well-developed packages: NumPy(Walt et al. 2011), ccdproc(Craig et al. 2017) &
Astropy for data handling (Astropy Collaboration et al. 2013, 2018); SciPy(Virtanen
et al. 2019) for peak finding and curve fitting, as well as for a 1D geometrical distortion
correction along the spatial direction, which is applicable to cases of single or multiple
sources appearing in the slit, it should be easily extendable to spectral images taken with
most integrated field units (although it currently does not support flux calibration of this
type of spectrograph); Astro-SCRAPPY(McCully et al. 2018; van Dokkum 2001) for
cosmic ray removal to improve the reliability in spectral tracing (original image is used
in spectral extraction); RASCAL for wavelength calibration; a slightly modified forked
version of SpectRes4 for 1D spectral resampling (Carnall 2017); and plotly(Plotly
Technologies Inc. 2015) for visualisations ( Fig. 1) in both scripting mode and passing
JSON to gASPIRED for the interactive GUI mode.
3.2.

Graphical User Interface – gASPIRED

As a layer independent of the “logical” part, gASPIRED itself cannot function without
an appropriate data reduction script running at the back of the GUI. The spectral identification from a 2D image is manipulated with JS95 (Mandel & Vikhlinin 2019), JSON
strings are sent to the back calling a python script to perform the spectral identification

4

https://github.com/cylammarco/spectres

5

https://js9.si.edu

Lam, Smith & Steele

4

and extraction interactively. The extracted spectra are displayed using plotly. Because the Python-plotly is built on top of the JavaScript version, it allows us to
maintain only a single code base for visualisation in both scripting and GUI modes.
If developers prefer a different plotting library, or a static image file is preferred over
dynamic plots, only minor modification would be required. The Electron framework
has cross-platform support. Travis CI is used to test the cross-platform builds from
Linux and Mac environments for deployment to Windows (32-bit), Linux and Mac. The
final software can be installed or used as a “double-click” portable application. This is
also hosted on GitHub6 in a public repository.
4.

Future Development

The current development is expected to be released as an alpha version at the end of
2019. We anticipate wider beta-release in 2020. The object-oriented nature of the
development should make it easy for subseqeuent conversion into an Astropy affiliated
package should it become the future goal.
Acknowledgement
This project has received funding from the European Union’s Horizon 2020 research
and innovation programme under grant agreement No 730890. This material reflects
only the authors views and the Commission is not liable for any use that may be made
of the information contained therein.
References
Astropy Collaboration, et al. 2013, A&A, 558, A33. 1307.6212
— 2018, AJ, 156, 123. 1801.02634
Carnall, A. C. 2017, arXiv e-prints, arXiv:1705.05165. 1705.05165
Craig, M., et al. 2017, astropy/ccdproc: v1.3.0.post1. URL https://doi.org/10.5281/
zenodo.1069648
Horne, K. 1986, PASP, 98, 609
Mandel, E., & Vikhlinin, A. 2019, ericmandel/js9: v2.5 a checkpoint release with a few bug
fixes, in preparation for widespread ES6 upgrade edits. URL https://doi.org/10.
5281/zenodo.3382228
McCully, C., et al. 2018, astropy/astroscrappy: v1.0.5 zenodo release. URL https://doi.
org/10.5281/zenodo.1482019
Piascik, A. S., Steele, I. A., Bates, S. D., Mottram, C. J., Smith, R. J., Barnsley, R. M., &
Bolton, B. 2014, in Proc. SPIE, vol. 9147 of Society of Photo-Optical Instrumentation
Engineers (SPIE) Conference Series, 91478H
Plotly Technologies Inc. 2015, Collaborative data science. URL https://plot.ly
van Dokkum, P. G. 2001, PASP, 113, 1420. astro-ph/0108003
Veitch-Michaelis, J., & Lam, M. C. 2020, in ADASS XXIX, edited by TBD (San Francisco:
ASP), vol. TBD of ASP Conf. Ser., TBD
Virtanen, P., et al. 2019, arXiv e-prints, arXiv:1907.10121. 1907.10121
Walt, S. v. d., Colbert, S. C., & Varoquaux, G. 2011, Computing in Science and Engg., 13, 22.
URL https://doi.org/10.1109/MCSE.2011.37

6

https://github.com/cylammarco/gASPIRED

