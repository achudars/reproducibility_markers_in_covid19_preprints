An Analysis Framework for Metric Voting based on LP Duality
David Kempe
University of Southern California

arXiv:1911.07162v3 [cs.GT] 14 Dec 2019

December 17, 2019

Abstract
Distortion-based analysis has established itself as a fruitful framework for comparing voting
mechanisms. The assumption is that the m voters and n candidates are jointly embedded in
an (unknown) metric space, and the voters submit rankings of candidates by non-decreasing
distance from themselves. Based on the submitted rankings, the social choice rule chooses a
winning candidate; the quality of the winner is the sum of the (unknown) distances to the voters.
Since it is missing the information about the actual distances, the rule’s choice will in general be
suboptimal, and the worst-case ratio between the cost of its chosen candidate and the optimal
candidate is called the rule’s distortion. It was shown in prior work that every deterministic rule
has distortion at least 3, while the Copeland rule and related rules guarantee distortion
at most
√
5, and a very recent result gave a generalization of Copeland with distortion 2 + 5 ≈ 4.236.
We provide a framework based on LP-duality and flow interpretations of the dual which
provides a simpler and more unified way for proving upper bounds on the distortion of social
choice rules. Rather than having to reason about all possible metric spaces, to establish an
upper bound, it is sufficient to exhibit a certain type of flow with small cost. We illustrate the
utility of this approach with three examples. First, we give a fairly simple proof of a strong
generalization of the upper bound of 5 on the distortion of Copeland, to social choice rules with
short paths from the winning candidate to the optimal candidate
√ in generalized weak preference
graphs. A special case of this result recovers the recent 2 + 5 guarantee. Next,√ we use this
generalization to show that the Ranked Pairs and Schulze rules have distortion Θ( n). Finally,
our framework naturally suggests a combinatorial rule that is a strong candidate for achieving
distortion 3, which had also been proposed in recent work. We prove that the distortion bound
of 3 would follow from any of three combinatorial conjectures we formulate (and have verified
by computer for n ≤ 7 candidates).

1

Introduction

Voting is an important and widespread way for a group to choose one out of multiple available
candidate options.1 The group could be a country, academic department, or other organization,
and the n candidate options they choose from could be courses of action or human candidates.
Typically, each voter submits a total order of all options, called a ranking or preference order.
Based on all the submitted rankings, a social choice rule (or mechanism) determines the winning
option.
Different mechanisms will have different desirable and undesirable properties, and it is important
to articulate and analyze these properties to guide an organization’s choice of mechanisms. The
axiomatic approach, dating back at least several centuries [17, 18], articulates natural axioms about
1
In this submission, we do not consider the equally important and widely studied problem of a group ranking all
of the available options.

1

the properties that the mapping from rankings to a winner should satisfy, and has led to extensive
work (see, e.g., [12] for an overview). Unfortunately, many of the key results are impossibility
results, in particular the famous Gibbard-Satterthwaite Theorem [21, 31] showing that there is no
truthful mechanism satisfying very minimal additional properties.
An alternative that has gained much recent popularity, in particular in the computer science
community, is to view social choice through the lens of optimization and approximation. In this
line of work (e.g., [10, 14, 29, 30]), it is assumed that one can quantify the utility (or cost) that a
voter derives from a candidate. These individual utilities or costs can then be aggregated into a
social welfare or cost, e.g., by taking the average or median. The social welfare/cost captures how
good of a choice a candidate is for the voter population overall.
The problem with this approach, articulated clearly in [11, 3], is that voting mechanisms typically allow voters only to communicate a ranking of candidates, but not the actual utilities/costs;
furthermore, even if a mechanism provided a way to communicate numerical scores, it is not clear
that voters could compute or estimate them accurately. In other words, “one can quantify” is more
of an abstract statement than one referring to any decision maker involved in the process. Thus,
even though the voting mechanism must optimize a cardinal objective function, it only receives
ordinal information as input, namely, for each voter, whether her2 utility/cost for candidate x is
larger or smaller than that for candidate y.
As a result, mechanisms must optimize the social welfare robustly, choosing a candidate that
has high welfare regardless of what the actual cardinal objective values are — so long as they are
consistent with the reported ordinal rankings. The distortion of a mechanism is the worst-case
ratio between the welfare/cost of the mechanism’s selected (based only on ordinal information)
candidate and the optimum (with full knowledge of the cardinal values) candidate, over all possible
inputs. (Formal definitions of this concept and all other terms can be found in Section 2.)
Our discussion so far has been in terms of general utilities/cost. While some positive results
can be obtained for fairly general classes of utility functions (e.g., [10, 14, 29, 30]), stronger results
are achievable when the functions take more specific forms. A particularly natural way of defining
costs is in terms of a joint metric space defined on candidates and voters, where the distance d(v, x)
between voter v and candidate x captures their difference in opinion, and hence the cost. Voters then
rank candidates by non-decreasing distance from themselves.3 The approach of using the distances
explicitly as the cost objective for optimization was proposed in [3]; [2] is an expanded/improved
journal version, and [1] provides a broader overview of the area and its results. While [2] consider
both the average and median of all voters’ costs as the overall objective, here, we focus solely on
the average/total cost.
The main result of [3, 2] is that under the model of metric costs, many widely used voting
rules (including Plurality, Veto, Borda count, and others) have distortion linear in the number of
candidates or worse. Furthermore, even with just 2 candidates and a 1-dimensional metric space,
every deterministic voting mechanism has distortion at least 3. On the positive side, [3, 2] show
that any rule which always outputs a candidate from the uncovered set of candidates has distortion
at most 5, for all metric spaces and numbers of candidates. Uncovered sets are defined in terms of
the tournament graph G on n candidates in which the directed edge (x, y) is present iff a (weak)
majority of voters prefer x to y. The uncovered set is the set of candidates that have a directed path
of length at most 2 in G to every other candidate (see [27]). Very recently, Munagala and Wang
[28] gave a voting rule based on uncovered sets in a weighted tournament graph which improves
2

For ease of presentation, we use female pronouns for voters and male pronouns for candidates throughout.
Such distance-based rankings had been considered in a large body of earlier work, e.g., [8, 9, 19, 26, 25, 7, 6],
though most of the listed papers studied such rankings specifically when the metric is the line; such preference orders
are often called single-peaked.
3

2

√
the upper bound from 5 to 2 + 5 ≈ 4.236.
There is an obvious gap √
between the lower bound of 3 for the distortion of every mechanism,
and the upper bound of 2 + 5. In the original version of [3], it was conjectured that a mechanism
called Ranked Pairs (defined in Section 2) achieves a distortion of 3. This conjecture was disproved
by [22], who showed a lower bound of 5 on the distortion of Ranked Pairs (and the Schulze rule,
also defined in Section 2).
√
The proof of the upper bound of 5, the recent upper bound of 2 + 5, and many other proofs
in the literature are based on reasoning about all metric spaces that are consistent with assumed
rankings. They often involve intricate case distinctions and rather ad hoc arguments. So far, a
more solid foundation and framework for distortion proofs has been missing from the literature.

1.1

Our Contribution

Our main contribution, presented in Section 3, is an analysis framework based on LP duality
and flows for proving upper bounds on the metric distortion of voting mechanisms. Our point of
departure is a well-known linear program for the following problem: given the rankings of all voters,
a winning candidate (presumably selected by a mechanism) and an “optimum” candidate, find a
metric space maximizing the distortion of this choice; that is, find a metric that makes the selected
winner as expensive as possible, subject to the “optimum” candidate having cost 1.4 We show
that the dual of the cost minimization LP can be interpreted as a flow problem with an unusual
objective function. Using this framework, in order to show an upper bound on the metric distortion
of a particular mechanism, rather than having to explicitly consider all possible metric spaces, it
is enough to exhibit a flow of small cost meeting certain demands. We illustrate the power of this
analysis framework with three applications.
First, in Section 4, we give a strong generalization of the
√ key lemmas from [3] (Theorem 7) and
[28] (Lemma 3.7), used to prove distortions of 5 and 2 + 5 for the respective mechanisms under
consideration. The common idea of both is that when a large enough fraction of voters prefer x to
y, and a large enough fraction prefer y to z, then the cost of x can be bounded in terms of the cost
of z. Theorem 7 of [3] is the special case where both fractions are 21 , while Lemma 3.7 of [28] is
√

√

the case when the first fraction is 3−2 5 , and the second is 5−1
2 . These bounds immediately imply
the upper bounds on the distortion for any candidate in the uncovered set of a suitably defined
tournament graph. We give a generalization to arbitrary chains of preferences, and upper-bound
the cost of x1 in terms of the cost of xℓ when a pi fraction of voters prefer xi over xi+1 , for each
i = 1, . . . , ℓ − 1. For the specific case when all pi = p, the bound can be stated very cleanly: the cost
of x1 is at most pℓ − 1 times that of xℓ if ℓ is even, and at most ℓ−1
p + 1 times that of xℓ if ℓ is odd.
Our results fully recover and generalize the bounds of [3] and [28]. The generalization to longer
path lengths can be useful in analyzing voting mechanisms that are missing information. This can
happen if the environment restricts the communication between voters and the mechanism, so that
parts of the rankings remain unknown, as in [24]. In fact, the results of Section 4 can be used to
significantly improve the upper bounds on the performance of “Copeland-like” mechanisms with
missing information, compared to the bounds in [24].
As a direct application of this generalized bound, in Section 5, we resolve the distortion of
the Ranked Pairs and Schulze rules (defined in Section 2): we show that both have distortion
√
Θ( n). The upper bound is a clean application of the lemma bounding distortion via longer
chains of preferences, while the lower bound is obtained with a generalization of the example which
4

This approach can of course immediately be leveraged into an optimal polynomial-time voting mechanism; we
discuss this more in Section 3.1.

3

[22] used to lower-bound the distortion of both rules
√ by 5. The distortion of both rules is thus
significantly higher than the distortions of 5 and 2 + 5 achieved by the uncovered set mechanisms.
Understanding the distortion of the Schulze rule in particular is of importance because it is widely
used in practice.
As a third application, the flow interpretation naturally suggests a candidate mechanism that
might achieve distortion 3, which we present in Section 6. The analysis points to a sufficient
condition for distortion 3: that for every given preference profile of the voters, there be a candidate
x such that for all other candidates y, a certain bipartite graph on the voters have a perfect
matching. In fact, the mechanism itself can be phrased in this terminology, leading to a purely
combinatorial polynomial-time mechanism.
This mechanism was independently discovered and presented in [28]. In [28], it is also shown
— again with a case distinction proof over metric spaces — that if such a candidate x exists, the
mechanism guarantees distortion 3. Our duality framework gives a cleaner and simpler proof of
this fact. The main question is then whether the desired candidate x always exists.
Munagala and Wang [28] conjecture — as do we — that it does. They phrase a conjecture
which is essentially a restatement of the fact that the algorithm succeeds in finding a candidate x.
In Section 6, we present a slight rephrasing of this conjecture, along with two more very differentlooking (in fact, much more self-contained) conjectures, each of which would resolve the question
positively, i.e., establish a distortion of 3. One of the two new conjectures is phrased in terms of
certain preferences between candidates and sets under randomly drawn preference orders, while
another talks about cycles in certain induced subsets of a type of graph we define. The fact that
they are sufficient to establish distortion 3 is based on Hall’s Marriage Theorem for bipartite graphs.
We have verified the conjecture by hand for n ≤ 4 candidates, and using exhaustive computer search
for n ≤ 7. Resolving any of the three conjectures positively would answer√
the key open question of
the field of metric voting, closing the gap between the upper bound of 2 + 5 on the best distortion
of any deterministic mechanism, and the lower bound of 3.

1.2

Additional Related Work

The observation that mechanisms may have to optimize a cardinal objective function while only
given ordinal information (i.e., rankings) extends beyond just voting mechanisms, to more general
problems. See, e.g., [5, 1] for results on other optimization problems under ordinal information.
The lower bound of 3 on the distortion of any mechanism is based on worst-case input instances.
Better bounds can be obtained when additional assumptions are placed on the instances. As one
example, [4, 23] show that when instances are decisive, in the sense that each voter has a candidate
she strongly prefers over all others, better upper bounds on the distortion are obtained. As another
example, when the candidates are drawn i.i.d. from the set of all voters, [15] gives improved constant
distortion bounds in the case of two candidates, while [16] shows that many position-based scoring
rules now achieve constant distortion (instead of linear).
The lower bound of 3 on the distortion of voting mechanisms only applies to deterministic
mechanisms. Randomization can lead to lower distortion [4]. For example, it is known that the
Randomized Dictatorship mechanism, which outputs the first choice of a uniformly random voter,
has distortion strictly smaller than 3.
Our work ignores the issue of incentives, i.e., whether voters truthfully report their preferences.
The connection between strategy proofness and distortion in metric voting is studied in [20].
The use of LP duality for analyzing the performance of optimization algorithms has a long
history, e.g., in approximation algorithms (see [34]). Another more recent example is the duality
framework of Cai, Devanur, and Weinberg [13] (see also references in [13] to prior, less general,
4

work) for analyzing the revenue of Bayesian Incentive Compatible mechanisms. In their case as
well, dual solutions can be interpreted as flows, and Cai et al. obtain performance guarantees by
exhibiting particular types of “canonical” flows that can be interpreted as witnesses for the revenue
guarantees. While this work and ours have the use of duality, and the interpretation as flows, in
common, the specific technical details are very different.

2

Preliminaries

2.1

Voters, Candidates, and Social Choice Rules

An instance (X, P) consists of a set of n candidates X, and the voters’ preferences P among these
candidates. Candidates will always be denoted by lowercase letters w, x, y, z (and their variations),
with w specifically reserved for a candidate chosen as winner by a mechanism (which will be clear
from the context). Sets of candidates are denoted by uppercase letters X, Y, Z. The m voters are
denoted by v, v ′ and variants thereof, and the set of all voters is V .
Each voter v has a total order (or preference order or ranking — we use the three terms
interchangeably) ≻v over the n candidates. We write x ≻v y to denote that v (strictly) prefers x
over y, and x v y to denote that v weakly prefers x over y; the difference is that the latter allows
x = y. We extend this notation to sets, writing, for instance, Y ≻v Z to denote that v (strictly)
prefers all candidates in Y over all candidates in Z. We write [x ≻ Y ] = {v ∈ V | x ≻v Y } for the
set of voters who rank x strictly ahead of all candidates in Y , and [Y ≻ x] = {v ∈ V | Y ≻v x} for
the set of voters who rank x strictly behind all candidates in Y .
A vote profile P is the vector of the rankings of all voters P = (≻v )v∈V . A social choice rule
(we use the term mechanism interchangeably) f : (X, P) 7→ w is given the rankings of all voters,
i.e., P, and deterministically produces as output one winning candidate w = f (X, P) ∈ X.

2.2

(Pseudo-)Metric Space and Distortion

The voter preferences are assumed to be derived from distances between voters and candidates.
The distance d(v, x) between voter v and candidate x captures how similar their positions on key
issues are. The distances d form a pseudo-metric, i.e., they are non-negative and satisfy the triangle
inequality5 d(v, x) ≤ d(v, y) + d(v ′ , y) + d(v ′ , x) for all voters v, v ′ and candidates x, y.
A vote profile P is consistent with the pseudo-metric d if and only if each voter ranks the
candidates by non-decreasing distance from herself; that is, if x ≻v y whenever d(v, x) < d(v, y).
When P is consistent with d, we write d ∼ P. If there are ties among distances, several vote profiles
will be consistent with d.
Definition 2.1 (Social Cost, Distortion)P 1. The social cost of candidate x is the sum of
distances from x to all voters: C(x) = v d(v, x).
2. A candidate is an optimum candidate iff he minimizes6 the social cost: x∗d ∈ argminx∈X C(x).

3. The distortion of a mechanism f is the largest possible ratio between the cost of the candidate
chosen by f , and the optimal (with respect to the pseudo-metric d, which f does not know)
5

Distances between pairs of voters, or between pairs of candidates, could be defined using shortest-path distances;
however, they are irrelevant for our analysis. Symmetry, another defining property of a pseudo-metric, would arise
automatically when using this definition.
6
There could be multiple optimum candidates — for our analysis, it will never matter which of them is designated
as “the” optimum.

5

candidate x∗d :
ρ(f ) = max sup
P

d:d∼P

C(f (X, P))
.
C(x∗d )

The main cause for (large) distortion is that while the social choice rule knows the voter preferences P, it does not know the pseudo-metric d. We can think of the pseudo-metric d as being chosen
adversarially, based on the winning candidate w = f (P) chosen by the mechanism. However, the
adversary is constrained by having to ensure that d is consistent with P.

2.3

Ranked Pairs and the Schulze Rule

In Section 5, we will characterize the distortion of the Ranked Pairs and Schulze Rules. We briefly
review these rules here. Both are based on a weighted directed graph on the set of candidates X.
The weight px,y of the edge from candidate x to y is the fraction of voters who have x ≻ y. As a
result, px,y + py,x = 1 for all x, y.
In Ranked Pairs [33], the (ordered) pairs (x, y) are considered in non-increasing order of px,y .
When the pair (x, y) is considered, the directed edge (x, y) is inserted into the graph if and only if
doing so creates no cycle. When the insertion process terminates, the graph has a unique source
node, which is returned as the winner.
In the Schulze Method [32], a directed weighted graph is created in which each ordered pair
(x, y) has an edge with weight px,y . Then, for each pair (x, y), let sx,y be the width of the widest
path from x to y, that is, the largest p such that there is a path from x to y on which all edges
(x′ , y ′ ) have px′ ,y′ ≥ p. It has been shown [32] that there is a candidate node x such that sx,y ≥ sy,x
for all other candidates y. Any such candidate x is returned as the winner.
For the purposes of our analysis, the only property of these methods that matters is captured
by the following lemma, which is well known. (We prove it only for completeness.)
Lemma 2.2 Let w be the candidate selected by the rule (either Ranked Pairs or Schulze), and y any
other candidate. Then, there exists a p and a sequence of (distinct) candidates x1 = w, x2 , . . . , xℓ =
y with the property that at least a p fraction of voters prefer xi over xi+1 (for each i), and at most
a p fraction of voters prefer y over w.
Proof. For the Ranked Pairs rule, because w was selected, it has no incoming edges in the DAG
that is constructed. In particular, this means that Ranked Pairs did not insert the edge (y, w), so
when it was considered for insertion, it would have caused a cycle, meaning that there was a path
from w to y all of whose edges had been inserted earlier. By the definition of the Ranked Pairs
insertion order, this means that all edges on this path had a higher fraction of voters agreeing with
them, giving us the path claimed above.
For the Schulze rule, recall that the winner has the property that sw,x ≥ sx,w for all candidates
x. Let p = sw,y . Then, there is a path from w to y in which each edge corresponds to a preference
by at least a p fraction of voters. On the other hand, because (y, w) is a path from y to w, at most
an sy,w ≤ sw,y fraction of voters can prefer y to w.

3

The LP Duality Approach and Flows

In this section, we develop the key tool for our analysis: the dual linear program for distortion in
metric voting.
The voters’ preferences P = (≻v )v are given. Let w be a candidate that the mechanism is
considering as a potential winner, and x∗ the optimal candidate. Following [2, 22], we phrase the
6

adversary’s problem of finding the distortion-maximizing metric as a linear program whose variables
dv,x denote distances between voters v and candidates x. These distances must be non-negative,
obey the triangle inequality, and be consistent with the reported preferences of the voters. The
objective is to maximize the distortion, i.e., the ratio between the cost of w and the cost of x∗ .
Maximize
subject to

P

dv,w
dv,x ≤ dv′ ,x + dv′ ,y + dv,y
dv,x ≤ dv,y
P
∗
Pv dv,x = 1
v dv,x ≥ 1
dv,x ≥ 0
v

for all x, y, v, v ′ (Triangle Inequality)
for all x, y, v such that x ≻v y (consistency)
(normalization)
for all x (optimality of x∗ )
for all x, v.

(1)

As is standard in the use of LPs for optimizing a ratio, the normalization side-steps the issue
of having to write a ratio: for any worst-case metric, one could simply rescale all distances by a
constant so that the normalization holds — this does not change any ratios, and thus also not the
distortion.

3.1

An Efficient Optimal Mechanism

As already observed in [2, 22], the LP (1) can be leveraged to immediately yield an instance-optimal
polynomial-time mechanism for minimizing distortion, as follows. Given the voter preferences ≻v ,
let cw,x∗ denote the maximum LP objective of the LP (1) for the winner w and putative optimum
x∗ . The distortion for w as a winner is then c̄w = maxx∗ cw,x∗ . The mechanism returns as winner
any candidate in argminw c̄w .
Because the algorithm only involves solving n2 linear programs, it runs in polynomial time. By
definition (and correctness of the LP (1)), the distortion for a given vote profile P and winner w is
c̄w ; thus, the mechanism does indeed minimize distortion. Unfortunately, as also observed in [2], it
is not immediate from the mechanism and the LP formulation how to bound the distortion for all
vote profiles; though [22] conjecture that the LP-based algorithm guarantees distortion at most 3.
The dual program provides a very useful tool towards making the LP-based algorithm combinatorial, and for reducing an analysis of its distortion to simpler combinatorial conjectures. More
generally (and perhaps importantly), the dual program provides a general approach for bounding
the metric distortion of other voting rules, too.

3.2

The Dual Linear Program

Rearranging the primal LP into normal form, taking the dual, and switching the signs of the αx
(v,v′ )
variables (for clarity) yields the following dual LP (2). In this LP, the ψx,y are the dual variables
(v)
for the triangle inequality constraints, φx,y are the dual variables for the consistency constraints,
and the αx are the dual variables for the normalization/optimality constraints.

7

Minimize
subject to

P

x αx


P
P
P  (v,v′ )
(v,v′ )
(v′ ,v)
(v′ ,v)
(v)
(v)
ψ
−
ψ
−
ψ
−
ψ
φ
−
φ
+
′
x,y
y,x
x,y
y,x
x,y
y,x
y:x≻v y
y:y≻v x
y,v
(
1 if x = w
for all v, x
≥
0 if x 6= w

αx +

(v,v′ )

for all v, v ′ , x, y
for all v, x, y
for all x =
6 x∗ .

ψx,y ≥ 0
(v)
φx,y ≥ 0
αx ≤ 0

(2)

Notice that αx∗ is in fact unconstrained, due to the equality constraint in the normalization.
The advantage of studying the dual linear program instead of the primal (or reasoning about
the distortion directly) is that it omits any reference to any metric space. Rather than having to
reason about all candidate metric spaces consistent with given voting patterns, by weak duality,
we only have to exhibit one setting of the dual variables that yields a small dual objective value.
Thus, our goal in analyzing a mechanism will be to show that for any voter preferences P, with a
suitably chosen winner w, there is a setting of dual variables giving a small objective value.

3.3

Using the Dual by Exhibiting Flows
(v,v′ )

The LP (2) looks rather unwieldy, mostly due to the terms involving the ψx,y variables. However,
by making some specific choices for these variables, it can be interpreted as a flow7 problem on
a suitably defined graph, with a somewhat unusual objective function. This is captured by the
following lemma:
Lemma 3.1 Let H = (U, E) be a directed graph with vertex set U = V × X, and edges defined as
follows:
• Whenever x ≻v y, E contains the directed edge (v, x) → (v, y). We call such edges preference
edges.
• For all x and v 6= v ′ , E contains the directed edge (v, x) → (v ′ , x). We call such edges
sideways edges.
Let f be a flow on H such that exactly one unit of flow originates at the node (v, w) for each
voter v, and flow is only absorbed at nodes (v, x∗ ) for voters v. Define the cost of f at voter v to
P
P
P
(f )
be γv = e into (v,x∗ ) fe + x6=x∗ v′ 6=v (f(v′ ,x)→(v,x) + f(v,x)→(v′ ,x) ).
(f )

Then, C(w) ≤ C(x∗ ) · maxv γv .

The graph H has two types of edges. For any fixed voter v, the preference edges (v, x) → (v, y)
(over all candidate pairs x, y) exactly correspond to v’s preference order. For any fixed candidate
x, the sideways edges (v, x) → (v ′ , x) (over all voter pairs v, v ′ ) form a complete directed graph.
The flow’s cost function has two terms for each voter v. The first is fairly standard in the study
of multi-commodity flows: the capacity required at the sink node (v, x∗ ) to be able to absorb all of
the flow. The second one is rather non-standard: for each voter v, there is an additional penalty
7

Some sources use the word “flow” only when there is a single source and a single sink; here, we will have multiple
sources and sinks. We will still use the word “flow” in a generic sense.

8

term for all incoming and outgoing flows of nodes (v, x) for x 6= x∗ along sideways edges. In other
words, using preference edges is much less costly than using sideways edges: the former just route
flow, while the latter route the flow, but also incur a cost penalty at both endpoints.
Proof. Let f be a flow with one unit of flow originating at each node (v, w), such that flow is
only absorbed at nodes (v, x∗ ). We define dual variables, and show that these dual variables are
feasible. Then, we will obtain the statement of the lemma by weak LP duality.
(v)
(v,v′ )
For each triple v, x, x′ , we set φx,x′ = f(v,x)→(v,x′ ) . For each triple v, v ′ , x, we set ψx,x∗ =
f(v,x)→(v′ ,x) ; notice that we carefully choose x∗ as the additional candidate for the dual variable.
(f )

Finally, we set αx∗ = maxv γv . All other dual variables are set to 0.
(v,v′ )
We now verify that this assignment satisfies all dual constraints. First, because ψx,y = 0 and
αy = 0 whenever y 6= x∗ , the dual constraints for all x 6= x∗ are exactly circulation constraints; that
is, they require that (at least) one unit of flow originate with (v, w), and that flow be conserved (or
appear) at each node x 6= x∗ , x 6= w. Thus, all of these constraints are satisfied for the given dual
variable assignment.
For pairs (v, x∗ ), the left-hand side of the dual constraint totals the flow into (v, x∗ ) along any
(v′ ,v)
(v,v′ )
(v′ ,v)
(v)
edges (these are the φx,x∗ variables and the ψx∗ ,x∗ variables), as well as all the ψx,x∗ and ψx,x∗
variables, for all v ′ 6= v. By definition of the dual variables, this is exactly the flow into (v, x∗ ),
plus the flow into and out of all nodes (v, x) for x 6= x∗ along edges of the form (v, x) → (v ′ , x) and
(f )
(f )
(v ′ , x) → (v, x). Thus, it is exactly γv . Because we set αx∗ = maxv γv , the dual constraints for
all pairs (v, x∗ ) are also satisfied.
(f )
Since we have a dual feasible solution of objective value αx∗ = maxv γv , by weak duality, for
(f )
every metric, the cost of the primal is at most maxv γv . This completes the proof.

4

Generalization of Distortion Bounds for Undominated Nodes

As a corollary of Lemma 3.1, we obtain a strong generalization of Theorem 7 in [3] and Lemma 3.7
of [28] (which are given below for comparison). The most general version can be stated as follows:
Corollary 4.1 Let x1 , x2 , . . . , xℓ be (distinct) candidates such that for each i = 2, . . . , ℓ, at least a
pi > 0 fraction of voters prefer candidate xi−1 over candidate xi . Define λ1 = 1, λ2 = p22 − 1, and
P
λi = p2i for 2 < i ≤ ℓ. Let Λ = maxS⊆{1,...,ℓ},S indep. i∈S λi . (Here, independence of a set S of
natural numbers means that the set contains no two consecutive numbers.) Then, C(x1 ) ≤ Λ·C(xℓ ).
Proof. We define a flow f and analyze its cost. For each i, we call the nodes (v, xi ) (for all voters
v) layer i. Let Vi be the set of voters v with xi−1 ≻v xi , with V1 := V for notational simplicity.
We construct the flow layer by layer; our construction will ensure that each node (v, xi ) with
v ∈ Vi has exactly |Vmi | units of flow entering. This holds in the base case i = 1, because each node
in layer 1 is the source node of one unit of flow.
For the ith step of the construction, we first route all the flow within layer i using sideways edges,
from nodes (v, xi ) with v ∈ Vi to nodes (v ′ , xi ) with v ′ ∈ Vi+1 . We then route it to nodes (v ′ , xi+1 )
in layer i + 1 using preference edges. More specifically, to route the flow within layer i, we first
) units of flow simply stay at (v, xi ).
consider voters v ∈ Vi ∩ Vi+1 . For those voters, min( |Vmi | , |Vm
i+1 |
The node (v, xi ) for such v will have additional incoming flow from other nodes (if |Vm
> |Vmi | ) or
i+1 |
< |Vmi | ). The remaining flow is routed arbitrarily
additional outgoing flow to other nodes (if |Vm
i+1 |
using sideways edges from nodes (v, xi ) with v ∈ Vi to nodes (v ′ , xi ) with v ′ ∈ Vi+1 , of course
units of flow entering.
ensuring that each such node (v ′ , xi ) has in total |Vm
i+1 |
9

After this redistribution within layer i, each (v, xi ) routes its flow to (v, xi+1 ). Notice that this
is always possible, because xi ≻v xi+1 for all v ∈ Vi+1 . The construction is illustrated with an
example in Figure 1.
v1

v2

v3

v4

1
x1
≻v1

1

2

x2
≻v1 ,v2
x3
≻v2 ,v3 ,v4

1

4

2

2

2/3

4/3
2/3
4/3

4/3

4/3

x4

Figure 1: An illustration of the flow construction. In the example, there are 4 voters and 4 relevant
candidates, with voter preferences shown on the left. The preference fractions are p1 = 1/4, p2 =
1/2, p3 = 3/4. Sideways flows are shown in solid red, while flow along preference edges is shown in
dashed lines. The dashed lines into nodes for candidate x4 are shown in blue (instead of black), to
emphasize that they contribute to the objective function. The amount of flow is given numerically,
and also shown using the width of the lines/arcs. Edges that are not used by the flow are not
shown.
We now analyze the cost associated with any fixed voter v. The cost has two components: the
incoming flow at (v, xℓ ) (shown in blue in Figure 1), and the cost associated with incoming/outgoing
flow using sideways edges incident on (v, xi ) for i < ℓ (shown in red in Figure 1). We begin with
the incoming flow at (v, xℓ ): if v ∈ Vℓ−1 , the incoming flow is |Vmℓ | = p1ℓ ; otherwise, it is 0.
Next, we consider the cost associated with sideways edges. As a general guideline (subtleties
will be discussed momentarily), when v ∈ Vi , the node (v, xi ) has |Vmi | = p1i units of flow coming in
along sideways edges, and the node (v, xi+1 ) has the same amount of flow leaving along sideways
edges. The associated cost of both together is p2i . Two obvious exceptions are layers i = 1 and
i = ℓ − 1. For i = 1, one unit of flow simply originates with (v, x1 ), resulting in no cost. For
i = ℓ − 1, no sideways edge is used to route outgoing flow; however, this is compensated by the
incoming flow at (v, xℓ ) (discussed in the preceding paragraph), which adds the same cost term.
However, simply adding up the bounds from the preceding paragraph over all steps i with
v ∈ Vi is too pessimistic, because our flow construction avoids routing more flow than necessary
when v ∈ Vi ∩ Vi+1 . A tighter bound is captured by the following lemma, proved below:
Lemma 4.2 Let I be the set of all indices i with v ∈ Vi . I can be partitioned into disjoint intervals
of integers {L1 , L1 + 1, . . . , R1 }, {L2 , L2 + 1, . . . , R2 }, . . . , {LK , LK + 1, . . . , RK } (for some K ≥ 1)
10

such that:
1. For each k, there exists an index Mk ∈ {Lk , . . . , Rk } such that pLk ≥ pLk +1 ≥ · · · ≥ pMk > 0
and pMk ≤ pMk +1 ≤ · · · ≤ pRk ; that is, the pi are monotone non-increasing from Lk to Mk ,
and monotone non-decreasing from Mk to Rk .
2. The total cost of flow (both sideways flow and flow into (v, xℓ ) in case Rk = ℓ) associated
with nodes (v, xi ) with Lk ≤ i ≤ Rk is at most λMk .
To apply Lemma 4.2, the key observation is that the set {M1 , M2 , . . . , MK } is independent,
i.e., contains no two consecutive integers. If it did — say, i = Mk and i + 1 = Mk′ — then both
i, i + 1 ∈ I. If pi+1 ≤ pi , this would contradict the maximality of i in the definition of Mk ; on the
other hand, if pi+1 > pi , then i+ 1 ≤ Rk by the definition of Rk , so it is impossible that i+ 1 = Mk′ .
Now, summing up the costs for each of the disjoint intervals, we obtain that the total
P cost of
the flow at nodes associated with v (both sideways flow and flow into (v, xℓ )) is at most K
k=1 λMk ;
because the set of Mk is independent, this sum is at most Λ. Using Lemma 3.1, this completes the
proof.
Proof of Lemma 4.2. We inductively define Lk , Rk , Mk satisfying the first property, then show
that they also guarantee the second property. For the base case, we set (for convenience) R0 := 0.
For the inductive step, focus on any k ≥ 1. Define Lk = min{i | i ∈ I, i > Rk−1 }. (The construction
terminates when there is no such i.) Let Mk = max{i | {Lk , . . . , i} ⊆ I, pLk ≥ pLk +1 ≥ · · · ≥ pi }.
In words, Mk is the largest index i such that all indices between Lk and i are in I, and the pj values
are monotone non-increasing all the way to i. Notice that because Mk ∈ I, we also have pMk > 0.
Now, let Rk = max{i | {Lk , . . . , i} ⊆ I, pMk ≤ pMk +1 ≤ · · · ≤ pi }. In words, Rk is the largest
index i such that all indices between Mk and i (and thus also between Lk and i) are in I, and the
pj values are monotone non-decreasing from Mk to i. This definition explicitly ensures that each
interval {Lk , . . . , Rk } is entirely contained in I, and satisfies the given monotonicity conditions. We
now verify the second property.
We first consider the case Mk ∈
/ {1, 2, ℓ − 1}, where λMk = 2/pMk . The important observation
for the proof, also visible in Figure 1, is that when v ∈ Vi ∩ Vi+1 , this eliminates sideways flow to
and from nodes associated with v. Specifically, none of the nodes (v, xi ) for Lk ≤ i < Mk have
outgoing flow along sideways edges (since all their flow stays for the next step). The incoming flow
at (v, xi ) along sideways edges is exactly 1/pi − 1/pi−1 (with 1/pLk −1 := 0 for convenience); the
remaining flow at (v, xi ) is what is kept from step i − 1. Similarly, none of the nodes (v, xi ) for
Mk < i ≤ Rk have incoming flow along sideways edges, since the node (v, xi−1 ) has enough flow
to meet all of the needs of (v, xi ); the outgoing flow at such nodes (v, xi ) along sideways edges is
exactly 1/pi − 1/pi+1 (with 1/pRk +1 := 0). Summing up all the incoming flows for i = Lk , . . . , Mk
(a telescoping series), and the outgoing flows for i = Mk , . . . , Rk (another telescoping series), the
total flow on sideways edges for all (v, xi ) with i ∈ {Lk , . . . , Rk } is at most 2/pMk = λMk . Because
Mk < ℓ, there is no other cost associated with these nodes. Next, we consider the remaining cases
Mk ∈ {1, 2, ℓ − 1}.
1. If Mk = 1, then by construction, 2 ∈
/ I; otherwise, the fact that p1 = 1 ≥ p2 would rule out
setting Mk = 1. Thus, the entire interval is just {L1 , . . . , R1 } = {1}. Because there is no
incoming sideways flow into (v, x1 ), the only cost is for one unit of outgoing sideways flow,
i.e., the cost is 1 = λ1 .
2. If Mk = 2, then we must have k = 1 and Lk = 1, because 1 ∈ I always by definition. We can
directly apply the general analysis, except that we can subtract one unit of cost, the reason
11

being (as in the case Mk = 1) that there is no one unit of sideways flow into (v, x1 ). Thus,
the total cost associated with the interval {L1 , . . . , R1 } is at most 2/p2 − 1 = λ2 .
3. If Mk = ℓ − 1, then k = K. There is no sideways flow out of (v, xℓ−1 ) (and there are no
nodes (v, xi ) for i > ℓ − 1 to consider). Thus, the total cost of the sideways flows associated
with {LK , . . . , RK } is at most 1/pMk . On the other hand, in this case, there is also a cost of
1/pMk for flow into (v, xℓ ) (the blue flow in Figure 1); however, the total cost is still bounded
by 2/pMk = λMk .
This shows that the bound holds for all cases of the interval.

4.1

Special Cases

Lemma
3.7 √of [28] is the special case of Corollary 4.1 with ℓ = 3, x1 = w, x3 = x∗ , and p1 =
√
√
3− 5
5−1
2 , p2 =
2 . Our Corollary 4.1 then exactly recovers the bound of 2 + 5.
When we have a uniform lower bound on the pi , Corollary 4.1 can be simplified significantly. (A
direct proof of Corollary 4.3 would also be simpler than the proof of the more general Corollary 4.1.)
Corollary 4.3 Let x1 , x2 , . . . , xℓ be (distinct) candidates such that for each i = 2, . . . , ℓ, at least a
p > 0 fraction of the voters prefer candidate xi−1 over candidate xi . Then, if ℓ is even, C(x1 ) ≤
( pℓ − 1) · C(xℓ ); if ℓ is odd, C(x1 ) ≤ ( ℓ−1
p + 1) · C(xℓ ).
Proof. We substitute pi = p for all i in Corollary 4.1; then, we observe that for even ℓ, the
independent set of integers giving the largest sum is {2, 4, . . . , ℓ}, while for odd ℓ, it is {1, 3, . . . , ℓ}.
The asymmetry between even and odd ℓ disappears when p = 21 (i.e., in the case of the majority
graph), where the bound simply becomes 2ℓ − 1. The result thus strongly generalizes Theorem 7
in [3], which is the special case of p = 12 and ℓ = 3.

5

Distortion of Ranked Pairs and Schulze

Corollary 4.3 allows us to pin down the distortion of the Ranked Pairs and Schulze rules to within
small constant factors.
Corollary 5.1 Both the Ranked Pairs mechanism
√ √ and the Schulze rule asymptotically have distor√ √
√
tion at most 2 2 · n + o( n) and at least 22 n.
Proof. We begin by proving the upper bounds. Let w be the candidate selected by the rule, and
x∗ the optimum candidate. By Lemma 2.2, applied with y = x∗ , there exists a p and a sequence of
distinct candidates x1 = w, x2 , . . . , xℓ = x∗ with the property that for each i, at least a p fraction
of voters prefer xi over xi+1 , and at most a p fraction of voters prefer x∗ over w. The existence
of x1 , . . . , xℓ with these properties is all that we need from the specific voting rules. The rest of
the proof will be completely generic, and would thus also apply to any other voting rule satisfying
Lemma 2.2.
We consider two cases, depending on the value of p. The case p ≤ 1 − √12n is easy. In this case,

at least a 1 − p ≥

√1
2n

fraction of voters prefer w over x∗ . Lemma 6 from [2] states that if at least

a q fraction of voters prefer x over x′ , then C(x) ≤ (1 + 2(1−q)
) · C(x′ ). Applying this lemma to w
q
√
√
2
and x∗ , the distortion of w is at most 1−p
− 1 ≤ 2 2 · n.
12

p
When p > 1 − √12n , we use Corollary 4.3. Let λ = ⌊ n/2⌋, and B = ⌈ℓ/λ⌉. Because ℓ ≤ n, we
√
√
get that B ≤ 2n + o( n). Consider the B + 1 candidates yj := xjλ+1 for j = 0, 1, . . . , B − 1, and
yB := xℓ . Because for each i, at least a 1 − √12n fraction of voters prefer xi to xi+1 , a union bound
over the candidates xjλ+1 , xjλ+2 , . . . , x(j+1)λ shows that for each j < B, at least a 1 − λ ·

√1
2n

≥

1
2

fraction of voters prefer yj over yj+1 . By using Corollary 4.3 (applied with p = 21 and ℓ = B + 1),
we obtain that
√ √
√
C(w) = C(y0 ) ≤ (2B + 1) · C(yB ) ≤ (2 2 · n + o( n)) · C(x∗ ),
√ √
√
so the distortion is upper-bounded by 2 2 · n + o( n).

We now turn to a lower bound. Our lower-bound construction is a straightforward generalization
of the construction that [22] used to show a lower bound of 5 on the distortion of the two rules.
Let m be given (assumed even), and set (with foresight8 ) B = m/2. Our construction has m + 2
voters and n = mB candidates x1 , x2 , . . . , xn . Voters v = m + 1, m + 2 have xi ≻v xi+1 for all i.
We call this the default order. To define the order (and later: distances) for voters v = 1, . . . , m,
we define the following blocks of consecutive (according to the default order) candidates. Block
Bv,b for 1 ≤ b < B consists of the m candidates {x(b−1)m+v , x(b−1)m+v+1 , . . . , xbm+v−1 }. Block Bv,0
consists of the v − 1 candidates {x1 , . . . , xv−1 }. (Notice that B1,0 = ∅.) Finally, block Bv,B consists
of the m + 1 − v candidates {x(B−1)m+v , x(B−1)m+v+1 , . . . , xn }. Voter v = 1, . . . , m ranks the blocks
in reverse order Bv,m , Bv,m−1 , Bv,m−2 , . . . , Bv,0 ; within each block, v ranks the candidates by the
default order. An example of the block structure and ordering is shown in Figure 2.

Default order:
Voter 4’s ranking:

B4,0

B4,1

B4,2

B4,3

B4,4

}|
{ z
}|
{ z
}|
{ z}|{
z }| { z
x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16

x16 x12 x13 x14 x15 x8 x9 x10 x11 x4 x5 x6 x7 x1 x2 x3
|
{z
} |
{z
} |
{z
} | {z }
|{z}
B4,4

B4,3

B4,2

B4,1

B4,0

Figure 2: An illustration of the blocks B4,b and the preference ranking of voter 4. In this example,
m = B = 4.
Intuitively, this means that on a “global” scale, voters v = 1, . . . , m completely disagree with
the default order, but locally, it looks like they agree. More formally, each voter v disagrees with
the default order only for pairs (xi , xi+1 ) when i ≡ v − 1 mod m. In particular, this means that
for every pair (xi , xi+1 ), only one voter disagrees with the default order. For every pair (xi , xj )
with i < j, at least the voters v = m + 1, m + 2 have xi ≻v xj , so the edges (xi , xi+1 ) have highest
weight. In particular, this means that they are inserted first by Ranked Pairs, and hence Ranked
1
to each xi , exceeding the width
Pairs chooses w = x1 . Similarly, x1 has a path of width 1 − m+2
for any other node. Thus, the Schulze method also chooses w = x1 .
We will now define a metric d which is consistent with these rankings. Voters v = m + 1, m + 2
have distance B to each candidate.9 Each voter v = 1, . . . , m has distance d(v, xi ) = 2(B − b) + 1
from all candidates xi ∈ Bv,b . First, these distances explicitly ensure consistency with the voters’
8

The choice B = m/2 gives the tightest lower bound for
this type of construction. Other choices work as well; for
√ √
√
instance, B = m gives a lower bound of 23 n instead of 22 n.
9
To avoid tie breaking issues, one can easily perturb these and other equal distances by small ǫ values so that all
distances are unique and the desired order is uniquely induced. We avoid doing so to not overload the proof with
inessential notation.

13

rankings. It remains to verify the triangle inequality. Consider two voters v 6= v ′ and candidates
xi 6= xj . We need to show that d(v, xi ) ≤ d(v, xj ) + d(v ′ , xj ) + d(v ′ , xi ). This is trivial if v ∈
{m + 1, m + 2}, because v has distance B to all candidates. If v ′ ∈ {m + 1, m + 2}, then the righthand side contains two terms of B, and one term d(v, xj ) that is at least 1. Hence, the inequality
holds. Finally, if both v, v ′ ≤ m, then let b, b′ be the blocks such that xi ∈ Bv,b , xi ∈ Bv′ ,b′ . The
definition of the block structure ensures that |b − b′ | ≤ 1; in particular, d(v, xi ) ≤ d(v ′ , xi ) + 2.
Because d(v, xj ) ≥ 1, d(v ′ , xj ) ≥ 1, the triangle inequality again holds.
Finally, we compute the social costs of x1 (the winner in Schulze and Ranked Pairs) and xn . x1
is in block 0 for all voters v = 2, . . . , m, and in block 1 for voter 1. Hence, his combined distance
from these voters is (m − 1)(2B + 1) + (2B − 1) = 2Bm + m − 2. With the added distance of B
from each of v = m + 1, m + 2, the total cost of x1 is 2Bm + 2B + m − 2 ≥ 2Bm. On the other
hand, xn is at distance 1 from all voters v = 1, . . . , m and at distance B from v = m + 1, m + 2, for
a total cost of 2B + m. The ratio is thus at least
the proof.

√
2
2Bm B=m/2 m n=m /2 2
=
=
2B+m
2
2

· m. This completes

Remark 5.2 The upper bound in Corollary 5.1 was a direct application of our flow-based framework. While the lower bound did not explicitly use the framework, the counter-example was in fact
discovered after failed attempts to improve the upper bound. The failure to find ways to route flow
very clearly suggested the types of rankings that were obstacles (i.e., reversed block structures). In
turn, the distances were found essentially using the primal linear program.

6

A Candidate Algorithm for Distortion 3

As a third application, we derive a purely combinatorial (i.e., not LP-based) voting mechanism,
which we conjecture to have distortion 3. We show that this conjecture would follow from any of
three different-looking combinatorial conjectures we will formulate.
The point of departure for the derivation of the mechanism is Corollary 6.1, which simplifies
Lemma 3.1, reducing it to a purely combinatorial property of a certain graph. Corollary 6.1 was
proved as Theorem 4.4 in [28], using a significantly more complex proof.
For any two candidates x, y, we consider the following bipartite graph Hx,y on the node set
(V, V ); that is, there is one node on the “left” for each voter v, and one node on the “right” for
each voter v ′ . (We will use “left” and “right” to distinguish the two vertex sets.) There is an edge
(v, v ′ ) if and only if there exists a candidate z ∈ X (z = x or z = y are explicitly allowed) such
that x v z and z v′ y.
Corollary 6.1 Let x 6= y be two candidates. If Hx,y has a perfect matching, then C(x) ≤ 3C(y).
Proof. Assume that there is a perfect matching in Hx,y ; for each voter v, let µv be the voter v is
matched with. By definition of Hx,y , there is a candidate x̃v such that x v x̃v and x̃v µv y.
We now define the flow f from each source node (v, x). We route one unit of flow along the
path (v, x) → (v, x̃v ) → (µv , x̃v ) → (µv , y). Notice that by definition of x̃v , the first and third edge
always exist. Also, if x̃v = x, then the first two nodes are the same, and we omit the first edge.
Similarly, if µv = v, we omit the second edge, and if x̃v = y, we omit the third edge.
This construction defines a valid flow, routing one unit of flow from each (v, x) to some (v ′ , y)
(f )
(for some v ′ ). So it only remains to bound γv ≤ 3 for all v.
Because µ is a matching, there is exactly one unit of flow arriving at each node (v, y). For a given
voter v, let v ′ be the unique voter with µv′ = v. Then, the only two edges of the form (v, z) → (v ′ , z)
14

or (v ′ , z) → (v, z) that can be used by f are (v, x̃v ) → (µv , x̃v ) and (v ′ , x̃v′ ) → (v, x̃v′ ). Hence, the
(f )
(f )
second part of the cost term γv is at most 2, meaning that γv ≤ 3. The claim now follows by
applying Lemma 3.1.
Corollary 6.1 immediately suggests a natural mechanism with distortion at most three, which
was also given as MatchingUncovered in [28]:
All Bipartite Matchings:
Find a candidate w such that for all other candidates x, the bipartite graph Hw,x has
a perfect matching.
The mechanism All Bipartite Matchings sidesteps having to solve the Θ(n2 ) LPs (1),
instead solving Θ(n2 ) bipartite matching problems. The question then is whether such a candidate
w actually exists. We present three different conjectures, each of which would imply the existence
of w, and thus, by Corollary 6.1, that All Bipartite Matchings has distortion 3.

6.1

The Candidate Comparison Graph G

A key analysis tool in this section is a directed graph G on the set of all candidates X, which we
call the Candidate Comparison Graph. G contains the directed edge (y, x) if and only if the graph
Hx,y does not have a perfect matching. In a sense, y is a witness that x would be a dangerous
choice as winner, since Corollary 6.1 would not apply to bound the cost of x when y is the optimal
candidate.10 Conversely, any candidate w without incoming edges in G is a safe choice as a winner,
because Corollary 6.1 implies a bound of 3 on its cost ratio to x∗ .
The following straightforward lemma captures that if we remove some candidates, and leave
each voter’s ranking of the remaining candidates unchanged, then the edges of the resulting graph
G ′ are a superset of the edges of the subgraph of G induced by the remaining candidates. We write
P[X ′ ] for the vector of rankings ≻′v , where each ≻′v is the ranking ≻v , restricted to candidates in
X ′ . In other words, x ≻′v y if and only if x ≻v y, for all x, y ∈ X ′ .
Lemma 6.2 Let (X, P) be a social choice instance, and X ′ ⊆ X. Let G = G(X, P) and G ′ =
G(X ′ , P[X ′ ]). Then, G ′ ⊇ G[X ′ ]; that is, G ′ contains all edges of the induced subgraph G[X ′ ].
′
on voters
Proof. Consider two candidates x, y ∈ X ′ and their corresponding bipartite graph Hx,y
′
′
under the restricted instance. By definition, Hx,y contains the edge (v, v ) iff there exists a candidate
′
contains the edge (v, v ′ ), then so does the
z ∈ X ′ such that x v z and z v′ y. Thus, if Hx,y
′
are
bipartite graph Hx,y for the larger/original instance (X, P). In other words, the edges of Hx,y
′
a subset of the edges of Hx,y . Therefore, whenever Hx,y contains a perfect matching, so does Hx,y .
Because edges in G (and G ′ ) correspond to pairs that do not have bipartite matchings, the graph
G ′ is a supergraph of the induced subgraph G[X ′ ].

6.2

Acyclicity of G

One sufficient condition for the existence of a source node in G (i.e., a node without incoming edges)
is for G to be acyclic. This gives rise to our first conjecture, which was also given as Conjecture 4.8
in [28] (though it is expressed slightly differently there):
10

Of course, Corollary 6.1 is only a sufficient condition, not a necessary one. So even when Corollary 6.1 cannot
be applied, it is conceivable that w would achieve a distortion of 3. However, it is not clear which tool we could use
to bound the distortion, which is why we focus only on the implications of Corollary 6.1 here.

15

Conjecture 1 For every instance (X, P) the graph G = G(X, P) is non-Hamiltonian.11
Since our goal here is merely to show the existence of a source node in G, it appears like overkill
to aim for the “stronger” conjecture of being non-Hamiltonian/acyclic. Despite appearances, Conjecture 1 is not in fact stronger than the existence of a source node, as we show in the following
proposition:
Proposition 6.3 All Bipartite Matchings succeeds on all inputs if and only if Conjecture 1
is true.
Notice that the proposition does not say that whenever a specific instance violates Conjecture 1,
the algorithm will fail on that instance. As will be evident in the proof, it only implies that the
algorithm fails on some (potentially different) instance.
Proof.
1. For the first direction, if Conjecture 1 is true, then G is non-Hamiltonian for all
inputs. We claim that this implies that in fact, G is acyclic for all inputs. Suppose that we
had an instance (X, P) for which G contains a directed cycle, say, C = (x1 , x2 , . . . , xk , x1 ) for
some k. Let X ′ = {x1 , . . . , xk }. Consider the instance (X ′ , P[X ′ ]). By Lemma 6.2, the graph
G(X ′ , P[X ′ ]) is a supergraph of the induced subgraph G[X ′ ], and must therefore contain a
cycle including all vertices X ′ , i.e., G(X ′ , P[X ′ ]) is Hamiltonian.
We have thus shown that for all instances, G is acyclic, meaning that for all inputs, G has a
source node, which is a safe output for All Bipartite Matchings.

2. For the converse direction, assume that Conjecture 1 is false, and consider an instance (X, P)
for which G(X, P) is Hamiltonian. Because each node has at least one incoming edge, G(X, P)
cannot have a source node.

6.3

Distributions of Permutations

We next derive a much simpler-looking — but actually equivalent — conjecture, which is phrased
only in terms of distributions of permutations. The key lemma for deriving this equivalent conjecture is the following:
Lemma 6.4 G contains the edge (y, x) if and only if there exists a set Zx,y of candidates with
x ∈ Zx,y and y ∈
/ Zx,y such that
|[y ≻ Zx,y ]| + |[Zx,y ≻ x]| > m.
Proof.

(3)

The proof relies on the well-known Hall Theorem:

Theorem 6.5 (Hall’s Bipartite Matching Theorem) Let G = (X ∪ Y, E) be a bipartite graph
with |X| = |Y |. For any vertex set S, let Γ(S) denote the neighbors of S. G has a perfect matching
if and only if there is no contracting vertex set, i.e., no set X ′ ⊆ X with |Γ(X ′ )| < |X ′ |.
Fix a pair x, y of candidates. By Hall’s Theorem, (y, x) ∈ G (i.e., Hx,y has no perfect matching)
if and only if there is a contracting set of voters Vx,y . By definition of G, for every voter v on the
left, the neighborhood Γ(v) consists of all voters v ′ on the right such that there exists a candidate
z with x v z and z v′ y.
11

Recall that a directed graph is Hamiltonian if it contains a directed cycle of all nodes.

16

1. For the first direction, we assume that G contains the edge (y, x). Let Vx,y be a maximal
contracting set. Let Zx,y be the set of all candidates z such that at least one voter v ∈ Vx,y
has x v z. Then, Γ(Vx,y ) = {v ′ | there exists a z ∈ Zx,y with z v′ y}. This implies two
things:
• Γ(Vx,y ) = [y ≻ Zx,y ] is the set of all voters who rank y strictly ahead of all of Zx,y ; this
follows directly from the preceding characterization.
• Vx,y = [Zx,y ≻ x]. The reason is that every voter v ∈ Vx,y ranks only candidates in Zx,y
(weakly) after x, so Vx,y ⊆ [Zx,y ≻ x]. Since Γ(Vx,y ) = Γ([Zx,y ≻ x]), the set [Zx,y ≻ x]
is also a candidate for a contracting set, and must equal Vx,y by maximality of Vx,y .
By definition of Zx,y , we always have x ∈ Zx,y . Also, we always have y ∈
/ Zx,y , because any
voter v (on the left) with x ≻v y has edges to all voters v ′ on the right, and can therefore not
be in a contracting set Vx,y .
Next, we consider the cardinalities of the sets involved. Because
Hall

m − |[y ≻ Zx,y ]| = m − |Γ(Vx,y )| = |Γ(Vx,y )| < |Vx,y | = |[Zx,y ≻ x]|,
we have shown that there exists a set Zx,y with x ∈ Zx,y and y ∈
/ Zx,y such that |[y ≻
Zx,y ]| + |[Zx,y ≻ x]| > m.
2. For the converse direction, assume that there exists a set Zx,y of candidates with x ∈ Zx,y
and y ∈
/ Zx,y such that |[y ≻ Zx,y ]| + |[Zx,y ≻ x]| > m.

Let Vx,y = [Zx,y ≻ x] be the set of all voters who rank x behind all of Zx,y . We will show that
Vx,y is contracting. Thereto, the important step is to characterize the neighborhood Γ(Vx,y ).
By definition, it consists of all voters v ′ such that there exists a voter v ∈ Vx,y and a candidate
z with x v z and z v′ y. Because each voter v ∈ Vx,y ranks x behind all of Zx,y , the only
potential candidates for z are candidates in Zx,y . In particular, no voter v ′ ∈ [y ≻ Zx,y ] can
be in Γ(Vx,y ), implying that [y ≻ Zx,y ] ⊆ Γ(Vx,y ).

This implies that |[y ≻ Zx,y ]| ≤ |Γ(Vx,y )|, so |Γ(Vx,y )| ≤ m − |[y ≻ Zx,y ]|. And by definition
of Vx,y , we also have |Vx,y | = |[Zx,y ≻ x]|. Together with the assumption that |[y ≻ Zx,y ]| +
|[Zx,y ≻ x]| > m, we get that m < |Vx,y | + (m − |Γ(Vx,y )|), implying that Vx,y is contracting.
By Hall’s Theorem, Hx,y has no perfect matching, so G contains the edge (y, x).

Remark 6.6 As an easy corollary of Lemma 6.4, notice that the constraint (3) implies that strictly
more than half of the voters prefer y over x. This is because x ∈ Zx,y and y ∈
/ Zx,y implies that
all voters in [y ≻ Zx,y ] and all voters in [Zx,y ≻ x] rank y ahead of x. Because the combined
cardinalities of the two sets add up to more than m, by the Pigeon Hole Principle, at least one of
the two sets [y ≻ Zx,y ], [Zx,y ≻ x] must contain more than half of all voters. This proves that G is
a subgraph of the weak comparison graph.
Based on Lemma 6.4, we formulate the following conjecture, and prove it equivalent to Conjecture 1.
Conjecture 2 Let Z1 , Z2 , . . . , Zn ⊆ {1, . . . , n} be arbitrary sets with i ∈ Zi . Define the following
two indicator functions over elements i and total orders ≻:
(
(
1 if Zi ≻ i
1 if i + 1 ≻ Zi
β(i, ≻) =
(4)
α(i, ≻) =
0 otherwise;
0 otherwise;
17

here and for the rest of this proof, all additions/subtractions are modulo n; that is, n + 1 := 1 and
1 − 1 := n.
Let D be any distribution over total orders ≻ of {1, . . . , n}. Then, there exists an i such that
E≻∼D [α(i, ≻) + β(i, ≻)] ≤ 1.

(5)

Proposition 6.7 Conjecture 2 is true if and only if Conjecture 1 is true.
Proof. We first show that Conjecture 2 implies Conjecture 1, by proving the contrapositive.
Assume that G is Hamiltonian, containing a directed cycle xn → xn−1 → · · · → x1 → xn comprising
all n candidates. By Lemma 6.4, there exist sets Zi = Zxi ,xi+1 (with Zn = Zxn ,x1 ) with xi ∈
Zi , xi+1 ∈
/ Zi , such that for all i = 1, . . . , n, we have
|[xi+1 ≻ Zi ]| + |[Zi ≻ xi ]| > m.

(6)

We define a distribution D over rankings by drawing a uniformly random voter from {1, . . . , m},
and choosing this voter’s ranking. Because the distribution is uniform, we obtain that
E≻∼D [α(i, ≻)] =

1
· |[xi+1 ≻ Zi ]|,
m

E≻∼D [β(i, ≻)] =

1
· |[Zi ≻ xi ]|.
m

(7)

The inequality (6) then implies that E≻∼D [α(i, ≻) + β(i, ≻)] > 1 for all i, showing that Conjecture 2
is violated.
For the converse direction, assume that D is a distribution over total orders of {1, . . . , n} such
that
E≻∼D [α(i, ≻) + β(i, ≻)] > 1, for all i.

(8)

Define δ := mini E≻∼D [α(i, ≻) + β(i, ≻)]; because the number of candidates is finite, δ is welldefined, and δ > 1. Therefore, with sufficiently small changes to D, we can ensure that the
probability for each total order ≻ is a rational number, while preserving all (strict) inequalities (8).
Once the probabilities are all rational, we can write them with a common denominator, meaning
that we can define D as a uniform distribution over a finite multi-set of rankings; in turn, we can
consider these rankings as voters.
Because the distribution is uniform over voters, we can apply the characterization (7) to conclude
that |[xi+1 ≻ Zi ]| + |[Zi ≻ xi ]| > m for all candidates i. By Lemma 6.4, applied to each pair
(xi , xi+1 ), the graph G contains each edge (xi+1 , xi ), so G is Hamiltonian.

6.4

A Graph-Theoretic Reformulation

Our attempts to prove Conjecture 2 (so far unsuccessful) have been based on proofs by contradiction. The assumed constraints (8) prescribe several constraints on rankings that must hold
simultaneously; using transitivity, this leads to a contradiction by forcing preferences to contain
cycles. The essence of this approach is captured by another conjecture. To formulate it, we define
the following class of directed graphs, which we term Constraint-Choice Graphs.
Definition 6.8 (Constraint-Choice Graph) Let Yn = {y1 , . . . , yn }, An = {a1 , . . . , an }, Bn =
{b1 , . . . , bn } be three disjoint sets of nodes. A constraint-choice graph for a given n contains 3n
nodes Un = Yn ∪ An ∪ Bn , and the following edges:
• For each i, it contains the directed edges12 (yi , ai−1 ), (yi , bi−1 ), (ai , yi ), (bi , yi ).
12

As before, we define 1 − 1 := n and n + 1 := 1.

18

• For each i, j with j 6= i, j 6= i−1, it contains exactly one of the two directed edges (aj , yi ), (yi , bj ).
An example of a constraint choice graph is shown in Figure 3. The edges listed first in Definition 6.8 are shown in solid black, while the edges listed second are shown in dashed red lines.

a1

y1

a2

a3

y2

b1

y3

b2

a4

y4

b3

b4

Figure 3: An illustration of a constraint-choice graph for n = 4 candidates. The graph depicted
here corresponds to the sets Z1 = {1}, Z2 = {1, 2}, Z3 = {1, 3}, Z4 = {2, 3, 4} in the construction
of the proof of Proposition 6.10.
Conjecture 3 For every n and every constraint choice graph Gn of 3n nodes, there exists a nonempty index set S ⊆ {1, . . . , n} with the following property: For every vertex set T ⊆ {ai , bi | i ∈ S}
of size |T | > |S|, the induced subgraph Gn [Yn ∪ T ] contains a directed cycle.
Remark 6.9 Notice that the conjecture indeed talks about the subgraph induced by all nodes yi
(not just those with indices in T ), in addition to at least |S| + 1 nodes from among the ai , bi with
i ∈ S.
Proposition 6.10 If Conjecture 3 is true, then Conjecture 2 is true.
Proof. We prove the contrapositive, and assume that Conjecture 2 is false; that is, Inequality (8)
holds for all i.
Given the (assumed) sets Z1 , Z2 , . . . , Zn ⊆ {1, . . . , n}, we define the following constraint-choice
graph Gn . It contains the 3n nodes Yn ∪ An ∪ Bn , and all the edges that are prescribed by
Definition 6.8; in addition, if i ∈ Zj , then Gn contains the edge (aj , yi ); otherwise, it contains
the edge (yi , bj ). This completes the definition of Gn . An example for specific sets Zj is shown
in Figure 3. To gain intuition for the following proof, the reader is encouraged to think of yi as
corresponding to candidate xi , of ai as corresponding to Zi , and of bi as corresponding to Zi .
19

To prove that Gn violates Conjecture 3, consider an arbitrary
Pnon-empty set of indices
 S ⊆
{1, . . . , n}. By linearity of expectations, (8) implies that E≻∼D
i∈S (α(i, ≻) + β(i, ≻)) > |S|.
Because
the
maximum
is
at
least
the
average,
this
implies
that
there
exists some ranking ≻S with
P
(α(i,
≻
)
+
β(i,
≻
))
>
|S|,
and
because
the
quantity
on
the
left-hand
side is integral, we can
S
S
i∈S
strengthen this inequality to
X
(α(i, ≻S ) + β(i, ≻S )) ≥ |S| + 1.
(9)
i∈S

Define the node set TS := {ai | α(i, ≻S ) = 1} ∪ {bi | β(i, ≻S ) = 1}. By Inequality (9), TS
contains at least |S| + 1 nodes from {ai , bi | i ∈ S}. We will show that the induced subgraph
Gn [TS ∪ Yn ] is acyclic; since we show this for every S, it proves that Gn violates Conjecture 3.
To show that Gn [TS ∪Yn ] is acyclic, we use a proof by contradiction, and assume that Gn [TS ∪Yn ]
contains a cycle C. Because edges only go between nodes yi and either aj or bj , this cycle must
alternate nodes yi with nodes aj or bj . Let |C| = 2k, and let i1 , i2 , . . . , ik be such that the order
of nodes yi in C is yi1 , yi2 , . . . , yik , yi1 . Fix some ℓ ∈ {1, . . . , k}. Between yiℓ and yiℓ+1 (here,
k + 1 := 1), the cycle must visit either some node aj ∈ TS or some node bj ∈ TS . We distinguish
two cases:
• If the intermediate node is aj , observe first that by Definition 6.8, the only incoming edge to
aj is (yj+1 , aj ), so iℓ = j + 1. The specific constraint-choice graph Gn defined in this proof
includes outgoing edges from aj to exactly the yi with i ∈ Zj ; notice that this includes the
case of the edge (aj , yj ), because j ∈ Zj . In particular, it applies to the edge (aj , yiℓ+1 ),
implying that iℓ+1 ∈ Zj .
Because aj ∈ Ts , we have that α(i, ≻S ) = 1, meaning that under ≻S , candidate iℓ = j + 1
precedes all candidates in Zj ; this includes, in particular, the candidate iℓ+1 . In summary,
we have inferred that iℓ ≻S iℓ+1 .

• If the intermediate node is bj , observe that by Definition 6.8, the only outgoing edge from
bj is (bj , yj ), implying that iℓ+1 = j. For the particular graph Gn defined in this proof, the
incoming edge (yiℓ , bj ) exists exactly when iℓ ∈
/ Zj .
Because bj ∈ Ts , we have that β(j, ≻S ) = 1, so under ≻S , candidate j = iℓ+1 is ranked after
all candidates in Zj . By the argument of the preceding paragraph, the set Zj includes, in
particular, the candidate iℓ . In summary, we have again inferred that iℓ ≻S iℓ+1 .

Thus, we have derived that iℓ ≻S iℓ+1 for each ℓ = 1, . . . , k. By transitivity, this results in a
cycle in ≻S , a contradiction to it being a ranking.
Remark 6.11 Conjecture 3 is sufficiently clean and combinatorial that it can be verified by hand
for n ≤ 4. An exhaustive computer search for n ≤ 7 has verified the conjecture for all such n,
recovering and extending computer-assisted results in Theorem 4.11 in [28] (although we did not
include some ranges for n > 7 which [28] handle with a restricted number of voters). Unfortunately,
because it basically involves a search over all possibilities of n subsets Zi of n elements (represented
2
as graph edge choices), the running time scales roughly as 2n ; from n = 6 to n = 7, the running
time increases from less than a minute to roughly a day. Hence, even n = 8 is likely out of reach.
But the computer search is encouraging in terms of trying to prove the conjecture (rather than
disproving it).

20

7

Conclusions

Our work raises a very obvious question: prove (or possibly disprove) the conjectures stated in
Section 6. Based on exhaustive computer search, it seems more likely that the conjectures are true,
and the All Bipartite Matchings mechanism in fact is always able to find a candidate with
distortion at most 3.
Going beyond these conjectures, we believe that the duality-based framework may be useful
for bounding the performance of other voting mechanisms, in particular, those that may miss
information on parts of voters’ ranking. For instance, such a situation can occur in the setting of
[24], where voters can only name the candidates in a subset of positions on their ballot, rather than
giving a complete ranking. The analysis of a mechanism proposed in [24] becomes much simpler
(and tighter) using the techniques developed here.
While we have only studied deterministic mechanisms here, the framework can also be extended
to randomized mechanisms. When the mechanism selects a candidate x with probability qx , an
upper bound can be obtained by bounding a flow that inserts qx units of flow at each of the nodes
(v, x), which again have to be routed to x∗ .
It is conceivable that duality-based approaches similar to the one we developed could be helpful
for the analysis of mechanisms for other problems in the cardinal/ordinal framework: a worst-case
metric for a given input can often be characterized in terms of a linear program, and the dual may in
general lead to a framework for proving upper bounds on the performance of a chosen mechanism.
Acknowledgements
The author would like to thank Elliot Anshelevich, Sid Banerjee, Shaddin Dughmi, Bobby Kleinberg
and Kai Wang for useful conversations and pointers, and anonymous reviewers for useful feedback.

References
[1] Elliot Anshelevich. Ordinal approximation in matching and social choice. ACM SIGecom
Exchanges, 15(1):60–64, July 2016.
[2] Elliot Anshelevich, Onkar Bhardwaj, Edith Elkind, John Postl, and Piotr Skowron. Approximating optimal social choice under metric preferences. Artificial Intelligence, 264:27–51, 2018.
[3] Elliot Anshelevich, Onkar Bhardwaj, and John Postl. Approximating optimal social choice
under metric preferences. In Proc. 29th AAAI Conf. on Artificial Intelligence, pages 777–783,
2015.
[4] Elliot Anshelevich and John Postl. Randomized social choice functions under metric preferences. In Proc. 25th Intl. Joint Conf. on Artificial Intelligence, pages 46–59, 2016.
[5] Elliot Anshelevich and Shreyas Sekar. Blind, greedy, and random: Algorithms for matching and
clustering using only ordinal information. In Proc. 30th AAAI Conf. on Artificial Intelligence,
pages 390–396, 2016.
[6] Salvador Barberà. An introduction to strategy-proof social choice functions. Social Choice
and Welfare, 18:619–653, 2001.
[7] Salvador Barberà, Faruk Gul, and Ennio Stacchetti. Generalized median voter schemes and
committees. Journal of Economic Theory, 61:262–289, 1993.
21

[8] Duncan Black. On the rationale of group decision making. J. Political Economy, 56:23–34,
1948.
[9] Duncan Black. The Theory of Committees and Elections. Cambridge University Press, 1958.
[10] Craig Boutilier, Ioannis Caragiannis, Simi Haber, Tyler Lu, Ariel D. Procaccia, and Or Sheffet.
Optimal social choice functions: A utilitarian view. Artificial Intelligence, 227:190–213, 2015.
[11] Craig Boutilier and Jeffrey S. Rosenschein. Incomplete information and communication in
voting. In Felix Brandt, Vincent Conitzer, Ulle Endriss, Jérôme Lang, and Ariel D. Procaccia,
editors, Handbook of Computational Social Choice, chapter 10, pages 223–257. Cambridge
University Press, 2016.
[12] Felix Brandt, Vincent Conitzer, Ulle Endriss, Jérôme Lang, and Ariel D. Procaccia, editors.
Handbook of Computational Social Choice. Cambridge University Press, 2016.
[13] Yang Cai, Nikhil R. Devanur, and S. Matthew Weinberg. A duality based unified approach
to bayesian mechanism design. In Proc. 48th ACM Symp. on Theory of Computing, pages
926–939, 2016.
[14] Ioannis Caragiannis and Ariel D. Procaccia. Voting almost maximizes social welfare despite
limited communication. Artificial Intelligence, 175(9):1655–1671, 2011.
[15] Yu Cheng, Shaddin Dughmi, and David Kempe. Of the people: Voting is more effective with
representative candidates. In Proc. 18th ACM Conf. on Economics and Computation, pages
305–322, 2017.
[16] Yu Cheng, Shaddin Dughmi, and David Kempe. On the distortion of voting with multiple
representative candidates. In Proc. 32nd AAAI Conf. on Artificial Intelligence, pages 973–980,
2018.
[17] Jean-Charles de Borda. Mémoire sur les élections au scrutin. Histoire de l’Académie Royale
des Sciences, Paris, pages 657–665, 1784.
[18] M. J. A. Nicolas de Condorcet. Essai sur l’application de l’analyse à la probabilité des décisions
rendues à la pluralité des voix. Imprimerie Royale, Paris, 1785.
[19] Anthony Downs. An economic theory of political action in a democracy. The Journal of
Political Economy, 65(2):135–150, 1957.
[20] Michal Feldman, Amos Fiat, and Iddan Golomb. On voting and facility location. In Proc.
17th ACM Conf. on Economics and Computation, pages 269–286, 2016.
[21] Alan F. Gibbard. Manipulation of voting schemes: a general result. Econometrica, 41(4):587–
601, 1973.
[22] Ashish Goel, Anilesh Kollagunta Krishnaswamy, and Kamesh Munagala. Metric distortion
of social choice rules: Lower bounds and fairness properties. In Proc. 18th ACM Conf. on
Economics and Computation, pages 287–304, 2017.
[23] Stephen Gross, Elliot Anshelevich, and Lirong Xia. Vote until two of you agree: Mechanisms with small distortion and sample complexity. In Proc. 31st AAAI Conf. on Artificial
Intelligence, pages 544–550, 2017.
22

[24] David Kempe. Communication, distortion, and randomness in metric voting. In Proc. 34th
AAAI Conf. on Artificial Intelligence, 2020.
[25] Samuel Merrill and Bernard Grofman. A unified theory of voting: Directional and proximity
spatial models. Cambridge University Press, 1999.
[26] Hervé Moulin. On strategy-proofness and single peakedness. Public Choice, 35:437–455, 1980.
[27] Hervé Moulin. Choosing from a tournament. Social Choice and Welfare, 3(4):271–291, 1986.
[28] Kamesh Munagala and Kangning Wang. Improved metric distortion for deterministic social
choice rules. In Proc. 20th ACM Conf. on Economics and Computation, pages 245–262, 2019.
[29] Ariel D. Procaccia. Can approximation circumvent Gibbard-Satterthwaite?
AAAI Conf. on Artificial Intelligence, pages 836–841, 2010.

In Proc. 24th

[30] Ariel D. Procaccia and Jeffrey S. Rosenschein. The distortion of cardinal preferences in voting.
In Proc. 10th Intl. Workshop on Cooperative Inform. Agents X, pages 317–331, 2006.
[31] Mark A. Satterthwaite. Strategy-proofness and Arrow’s conditions: Existence and correspondence theorems for voting procedures and social welfare functions. Journal of Economic
Theory, 10:187–217, 1975.
[32] Markus Schulze. A new monotonic, clone-independent, reversal symmetric, and condorcetconsistent single-winner election method. Social Choice and Welfare, 36(2):267–303, 2011.
[33] T. Nicolaus Tideman. Independence of clones as a criterion for voting rules. Social Choice and
Welfare, 4(3):185–206, 1987.
[34] Vijay V. Vazirani. Approximation Algorithms. Springer, 2001.

23

