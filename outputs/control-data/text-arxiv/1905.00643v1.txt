Quality Evaluation of GANs Using Cross Local
Intrinsic Dimensionality
Sukarna Barua1 , Xingjun Ma1 , Sarah Monazam Erfani1 , Michael E. Houle2 , and
James Bailey1

arXiv:1905.00643v1 [cs.LG] 2 May 2019

1
2

The University of Melbourne, Victoria 3010, Australia
National Institute of Informatics, Tokyo 101-8430, Japan

Abstract. Generative Adversarial Networks (GANs) are an elegant
mechanism for data generation. However, a key challenge when using
GANs is how to best measure their ability to generate realistic data. In
this paper, we demonstrate that an intrinsic dimensional characterization
of the data space learned by a GAN model leads to an effective evaluation
metric for GAN quality. In particular, we propose a new evaluation
measure, CrossLID, that assesses the local intrinsic dimensionality (LID)
of real-world data with respect to neighborhoods found in GAN-generated
samples. Intuitively, CrossLID measures the degree to which manifolds
of two data distributions coincide with each other. In experiments on 4
benchmark image datasets, we compare our proposed measure to several
state-of-the-art evaluation metrics. Our experiments show that CrossLID
is strongly correlated with the progress of GAN training, is sensitive to
mode collapse, is robust to small-scale noise and image transformations,
and robust to sample size. Furthermore, we show how CrossLID can be
used within the GAN training process to improve generation quality.

1

Introduction

Generative Adversarial Networks (GANs) are powerful models for data generation,
composed of two neural networks, known as the generator and the discriminator.
The generator maps random noise vectors to locations in the data domain in an
attempt to approximate the distribution of the real-world (or real) data. The
discriminator accepts a data sample and returns a decision as to whether or
not the sample is from the real data distribution or was artificially generated.
While the discriminator is trained to distinguish real samples from generated
ones, the generator’s objective is to deceive the discriminator by producing data
that cannot be distinguished from real data. The two networks are jointly trained
to optimize an objective function resembling a two-player minimax game.
GANs were first formulated by [8], and have been applied to tasks such as
image generation [4,6,29,33] and image inpainting [32]. Despite their elegant
The first and original version of this paper was submitted to ICLR 2019 conference.
Submission link: https://openreview.net/pdf?id=BJgYl205tQ

2

S. Barua et al.

theoretical formulation [8], training of GANs can be difficult in practice due
to instability issues, such as vanishing gradients and mode collapse [2,8]. The
vanishing gradient problem occurs whenever gradients become too small to allow
sufficient progress towards an optimization goal within the allotted number of
training iterations. The latter occurs when the generator produces samples for
only a limited number of data modes, without covering the full distribution of
the real data.
Deployment of GANs is further complicated by the difficulty of evaluating the quality of their output. Researchers often rely on visual inspection of
generated samples, which is both time-consuming and subjective. A quantitative quality metric is clearly desirable, and several such methods do exist
[5,8,11,18,25,26,31,37,38]. However, past research has identified various limitations of some existing metrics [3,40], and effective evaluation of GAN models is
still an open issue.
In this paper, we show how the data distribution learned by a GAN model can
be evaluated in terms of the distributional characteristics within neighborhoods
of data samples. With respect to a given location q in the data domain, the Local
Intrinsic Dimensionality (LID) model [13] characterizes the order of magnitude
of the growth of probability measure with respect to a neighborhood of increasing
radius. LID can be regarded as a measure of the discriminability of the distribution
of distances to q induced by the global distribution; equivalently, it reveals the
intrinsic dimensionality of the local data submanifold tangent to q.
Here, we further generalize LID to a new measure, CrossLID, that assesses
the average LID estimate over data samples q from one distribution, with respect
to a set of samples from a second distribution. If the two distributions are in
perfect alignment, the CrossLID measure would yield an estimate of the average
LID value with respect to the common distribution. If the distributions were then
progressively separated (such as would happen if their underlying manifolds were
moved out of alignment), the CrossLID estimate would tend to increase, and
become higher than the average LID estimates of samples q with respect to the
distribution from which they were drawn. We show that by applying CrossLID
to samples from GAN generated data and real data, we can assess the degree to
which the GAN generated data distribution conforms to the real distribution.
As an illustration of the possible relationships between two distributions,
Fig. 1 shows four examples of how a GAN model could learn a bimodal Gaussian distribution. Decreasing CrossLID scores indicate an increasing conformity
between the two-mode real data distribution and the generated data distribution.
The main contributions of the paper are as follows:
– We propose CrossLID, a cross estimation technique based on LID that is
capable of assessing the alignment of the data embedding learned by the
GAN generator with that of the real data distribution.
– We show how CrossLID can be used to avoid mode collapse during GAN
training, to identify classes for which some modes are not well-covered by
learning. We also show how this knowledge can then be used to bias the GAN

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

3

(a) CrossLID=15.16 (b) CrossLID=7.33 (c) CrossLID=4.78 (d) CrossLID=2.10

Fig. 1: Four 2D examples showing how GAN-generated data samples (triangles)
could relate to a bimodal Gaussian-distributed data set (circles), together with
CrossLID scores: (a) generated data distributed uniformly, spatially far from the
real data; (b) generated data with two modes, spatially far from the real data; (c)
generated data associated with only one mode of the real data; and (d) generated
data associated with both modes of the real data (the desired situation).
discriminator via an oversampling strategy to improve its performance on
such classes.
– Experimentation showing that our CrossLID measure is well correlated
with GAN training progress, and comparison to two state-of-the-art GAN
evaluation measures.

2

Evaluation Metrics for GAN Models

GAN-based learning is an extensively researched area. Here, we briefly review the
topic most relevant to our work, evaluation metrics for GAN models. Past research
has employed several different metrics, including log-likelihood measures [8], the
Inception score (IS) [37], the MODE score [5], Kernel MMD [9], the MS-SSIM
index [31], the Fréchet Inception Distance (FID) [11], the sliced Wasserstein
distance [18], and Classifier Two-Sample Tests [25]. In our study, we focus on the
two most widely used metrics for image data, IS and FID, as well as a recently
proposed measure, the Geometry Score (GS) [19].
IS uses an associated Inception classifier [39] to extract output class probabilities for each image, and then computes the Kullback-Leibler (KL) divergence of
these probabilities with respect to the marginal probabilities of all classes:
IS = exp(Ex∼pg DKL (p(y|x)||p(y)),

(1)

here, x ∼ pG implies a sample x drawn from the generator outputs, p(y|x) is
the probability distribution over
different classes as assigned to sample x by the
R
Inception classifier, p(y) = x (p(y|x)dx is the marginal class distribution, and
DKL is the KL divergence. IS measures two aspects of a generative model: (1)
the images generated should be both clear and highly distinguishable by the
classifier, as indicated by low entropy of p(y|x), and (2) all classes should have
good representation over the set of generated images, which can be indicated by
high entropy of p(y|x) when marginalized over x. A recent study has shown that
IS is susceptible to variations in the Inception network weights when trained on
different platforms [3].

4

S. Barua et al.

FID passes both real and generated images to an Inception classifier, and extracts activations from an intermediate pooling layer. Activations are assumed to
follow multidimensional Gaussians parameterized by their means and covariances.
The FID is defined as:
1

FID = (||µI − µG ||)22 + Tr(ΣI + ΣG − 2((ΣI ΣG ) 2 )),

(2)

where (µI , ΣI ) and (µG , ΣG ) represent the mean and covariance of activations
for real and generated data samples, respectively. Compared to IS, FID has been
shown to be more sensitive to mode collapse and noise in the outputs; however,
it also requires an external Inception classifier for its calculation [11].
GS assesses the conformity between manifolds of real and generated data, in
terms of the persistence of certain topological properties in a manifold approximation process. The topological relationships are extracted in terms of the counts of
1-dimensional loops in a graph structure built up from proximity relationships as
a distance threshold is increased. Although it may be indirectly sensitive to variations in the dimensionality of the manifolds, GS explicitly rewards only matches
in terms of the specific topology of these loop structures in approximations of
the manifolds. However, due to its strictly topological nature, GS is insensitive
to differences in relative embedding distances or orientations within the manifold.
This issue is acknowledged by the authors, who advise that GS would be best
suited for use in conjunction with other metrics [19].

3

Local Intrinsic Dimensionality (LID)

LID is an expansion-based measure of intrinsic dimensionality within the vicinity
of some reference point q [13]. Intuitively, in Euclidean space, the volume of
a D-dimensional ball grows proportionally to rD when its size is scaled by a
factor of r. From the above rate of volume growth with radius, the dimension D
can be deduced from two volume measurements as: V2 /V1 = (r2 /r1 )D ⇒ D =
ln(V2 /V1 )/ ln(r2 /r1 ). Transferring this concept to smooth functions leads to the
formal definition of LID.
Definition of LID: Let F be a positive and continuously differentiable
function over some open interval containing r > 0. The LID of F at r is defined
as:
LIDF (r) := r

F 0 (r)
ln (F ((1 + )r)/F (r))
F ((1 + )r) − F (r)
= lim
= lim
,
+
+
F (r)
ln
(1
+
)
 F (r)
→0
→0

(3)

wherever the limits exists. The local intrinsic dimensionality of F is then:
LID∗F = lim LIDF (r).
r→0+

(4)

In our context, and as originally proposed in [13], we are interested in functions
that are the distributions of distances induced by some global distribution of data
points: for each data sample generated with respect to the global distribution,
its distance to a predetermined reference point q determines a sample from the
local distance distribution associated with q.

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

5

The LID model has the interesting property that the definition can be motivated in two different ways. The first limit stated in the definition follows from a
modeling of the growth of probability measure in a small expanding neighborhood
of the origin q: as the radius r increases, the amount of data encountered can
be expected to grow proportionally to the r-th power of the intrinsic dimension.
Although the LID model is oblivious of the representational dimension of the
data domain, in the setting of a uniform distribution with a local manifold of
dimension m, if F is the distribution of distances to a reference point in the
relative interior of the manifold, then LID∗F = m. For more information on the
formal definition and properties of LID see [14,15].
The second limit expresses the (in)discriminability of F when interpreted as a
distance measure evaluated at distance r (with low values of LIDF (r) indicating
higher discriminability). As implied by Eq. 3, the LID framework is extremely
convenient in that the local intrinsic dimensionality and the discriminability of
distance measures are shown to be equivalent and interchangeable concepts.
Estimating LID: LID is a generalization of pre-existing expansion-based
measures which implicitly use neighborhood set sizes as a proxy for probability
measure. These earlier models include the expansion dimension [17] and its
variants [16], and the minimum neighbor distance (MinD) [35], all of which have
been shown to be crude estimators of LID [1]. Although the popular estimator
due to [23] can be regarded as a smoothed version of LID, its derivation depends
on the assumption that the observed data can be treated as a homogeneous
Poisson process. However, the only assumptions made by the LID model is that
the underlying (distribution) function be continuously differentiable. For this
work, we use the Maximum Likelihood Estimator (MLE) of LID as proposed in
[1], due to its ease of implementation and its superior convergence properties
relative to the other estimators studied there.
Given a set of data points X, and a distinguished data sample x, the MLE
estimator of LID is:
LID (x; X) = −

k
1 X

k

i=1

ln

k
−1
ri (x; X) −1 
1X
ln ri (x; X)
,
= ln rmax (x; X) −
rmax (x; X)
k i=1

(5)

where k is the neighborhood size, ri (x; X) is the distance from x to its i-th
nearest neighbor in X \ {x}, and rmax (x; X) denotes the maximum distance
within the neighborhood (which by convention can be rk (x; X)). Due to the
deep equivalence between the LID model and the statistical theory of extreme
values (EVT) shown in [14,1], the first of the two equivalent formulations in Eq. 5
coincides with the well-known Hill estimator of scale derived from EVT [12]. As
can be seen from the second formulation, the reciprocal of the MLE estimator
assesses the discriminability within the k-NN set of x as the difference between
the maximum and mean of log-distance values. Note that in these estimators, no
explicit knowledge of the underlying function F is needed - this information is
implicit in the distribution of neighbor distances themselves.
LID can characterize the intrinsic dimensionality of the data submanifold in
the vicinity of a distinguished point x. The LID(x; X) values of all data samples

6

S. Barua et al.

x from a dataset X can thus be averaged to characterize the overall intrinsic
dimensionality of the manifold within which X resides. In [15,34], it was shown
that this type of average is in fact an estimator of the correlation dimension
over the sample domain (or manifold). Henceforth, whenever the context set X
is understood, we will use the simplified notation LID(x) to refer to LID(x; X),
and to denote the average of these estimates over all x ∈ X by LID(X).

4

Evaluating GANs via Cross Local Intrinsic
Dimensionality

We propose a new measure, CrossLID, that evaluates the conformity between
a real distribution pR and a GAN-generated distribution pG , as derived from
the profiles of distances from samples of one distribution to samples of the other
distribution. As illustrated in Fig. 1, our intuition is that if two distributions
are similar, then the distance profiles of a generated sample with respect to a
neighborhood of real samples should conform with the profiles observed within
the real samples, and vice versa.
4.1

CrossLID for GAN Model Evaluation

We generalize the single data distribution based LID metric defined in Eq. 3 to a
new metric that measures the cross LID characteristics between two distributions.
Given two sets of samples A and B, the CrossLID of samples in A with respect
to B is defined as:
CrossLID(A; B) = Ex∈A LID(x; B).

(6)

Note that CrossLID(A; B) does not necessarily equal CrossLID(B; A).
Low CrossLID(A; B) scores indicate low average spatial distance between the
elements of A and their neighbor sets in B. From the second formulation of the LID
estimator in Eq. 5, we see that increasing the separation between A and B would
result in a reduction in the discriminability of distances between them, as assessed
by the difference between the maximum and mean of the log-distances from
points of A to their nearest neighbors in B — thereby increasing the CrossLID
score. As a simplified example, consider the case where a positive correction d is
added to each of the distances from some reference sample x ∈ A with respect to
its neighbors in B. This distance correction would cause
Pkthe reciprocal of the LID
estimate defined in Eq. 5 to become ln(rmax +d) − k1 i=1 ln(ri +d), which leads
to an increase in the estimate of LID when d > 0, and a decrease when d < 0.
Thus, a good alignment between A and B is revealed by good discriminability
(low LID) of the distance distributions induced by one set (B) relative to the
members of the other (A). In general, CrossLID differs from LID in its sensitivity
to differences in spatial position and orientation of the respective manifolds within
which A and B reside (see Suppl. Sec. A).
Low values of CrossLID(A; B) also indicate good coverage of the domain of
A by elements of B. To see why, consider what would happen if this were not
the case: if the samples in B did not provide good coverage of all modes of the

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

7

underlying distribution of A, there would be a significant number of samples in
A whose distances to its nearest neighbors in B would be excessively large in
comparison to an alternative set B 0 providing better coverage of A (see Fig. 1c
and 1d for an example). As discussed above, this increase in the distance profile
would likely lead to an increase in many of the individual LID estimates that
contribute to the CrossLID score.
Given a set of samples XR from a real data distribution, and a set of samples
XG from the GAN-generated distribution, a low value of CrossLID(XR ; XG )
indicates a good alignment between the manifold associated with XG and the
manifold associated with XR , as well as an avoidance of mode collapse in the
generation of XG . It should be noted, however, that CrossLID(XG ; XR ) (in
contrast to CrossLID(XR ; XG )) does not indicate good coverage, and thus is not
sensitive to mode collapse. Since low values of CrossLID(XR ; XG ) encourage a
good integration of generated data into the submanifolds with respect to these
learned representations, and an avoidance of mode collapse in sample generation,
CrossLID(XR ; XG ) is a good candidate measure for evaluating GAN learning
processes.
As CrossLID is local measure rather than global, it also allows targeted
quality assessment of GANs for refined sample groups (a subset of real data) of
m
interest. For example, for a specific mode (XR
) from the real samples based on
m
either cluster or class information, CrossLID(XR
; XG ) can be used to assess how
well the GAN model learns the submanifold of this particular mode. CrossLID
can therefore be exploited to detect and mitigate underlearned modes in GAN
training (explored further in Sec. 5).
4.2

Effective Estimation of CrossLID

We next discuss 2 important aspects in CrossLID estimation: (1) the choice of
feature space where CrossLID is computed, and (2) the choice of appropriate
sample and neighborhood sizes for accurate and efficient CrossLID estimation.
Deep Feature Space for CrossLID Estimation: The representations
that define the underlying manifold of a data distribution are well learned
in the deep representation space. Recent work in representation learning [7],
adversarial detection [27] and noisy label learning [28] has shown that DNNs
can effectively map high-dimensional inputs to low-dimensional submanifolds at
different intermediate layers of the network. We denote the output of such a layer
as a function f (x), and estimate CrossLID in the deep feature space as:
CrossLID(f (XR ); f (XG )) =

X 
1
ln rmax (f (x), f (XG ))
|XR | x∈X
R

k
−1
1X
−
ln ri (f (x), f (XG ))
.
k i=1

(7)

It should be noted that successful learning by the GAN discriminator would
entail the learning of a mapping f for which the intrinsic dimensionality of f (XR )
is relatively low, and the local discriminability is relatively high. This encourages

8

S. Barua et al.

the GAN generator to produce samples for which CrossLID(f (XR ); f (XG )) is
also low, further enhancing the value of CrossLID in GAN evaluation and training.
The transformation f (x) can be computed by training an external network
separately on the real data distribution, such as the Inception network used by
IS and FID, and then extracting feature vectors from an intermediate layer of
the network. In Sec. 6.1 we will show how such feature extractors work well for
the estimation of CrossLID. Note that CrossLID can be computed using a single
forward pass of the feature extractor network — no backward pass is needed.
Sample Size and Neighborhood for CrossLID Estimation: Searching
for the k-nearest neighbors of all samples of XR within the entire GAN-generated
dataset XG can be prohibitively expensive. Recent works using the LID measure
in adversarial detection [27] and noisy label learning [28] have demonstrated that
LID estimation at the deep feature level can be effectively performed within small
batches of training samples — with neighborhood sizes as small as k = 20 drawn
from batches of 100 samples. For the estimation of CrossLID(f (XR ); f (XG )),
we use |XR | = 20000 samples from the real training dataset, and |XG | = 20000
GAN-generated samples. To reduce computational complexity, we search k = 100
nearest neighbors of each f (x), where x ∈ XR , within a batch of 1000 samples
randomly chosen from f (XG ), and use the distances from f (x) to these k = 100
nearest neighbors to estimate CrossLID(f (x); f (XG )). The mean of the CrossLID
estimates over all 20000 real samples determines the final overall estimate. A
larger k tends to result in a higher value of CrossLID, an effect of the expansion
of locality (more details in Suppl. Sec. I).

5

Oversampling in GAN training with Mode-wise
CrossLID

A GAN distribution may not equally capture the distributions of all modes
presenting in a real data distribution. Due to the inherent randomness in stochastic
learning, the decision boundary of the discriminator may be closer to regions of
some modes than others at different stages of the training process. The closer
modes may develop stronger gradients, in which case the generator would learn
these modes better than the others. If imbalances in learning can be detected
and addressed during training, we could expect a better convergence to good
solutions. To achieve this, we propose a GAN training strategy with oversampling
based on mode-wise CrossLID scores (as defined in Sec. 4.1).
We describe our training strategy in the context of labeled data, where we
simply take the classes to be the modes (or clusters if data is unlabeled). We
compute the average CrossLID score for real samples (w.r.t. generated samples)
from each class, and use it to assess how well a class has been learned by the
generator — the lower the CrossLID score, the more effective the learning. To
generate good gradients for all classes during the training, we dynamically modify
the input samples of the discriminator by oversampling the poorly learned classes
(those with high class-wise CrossLID scores) from the real data distribution. The
objective is to bias the discriminator’s decision boundary towards the regions

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

9

of poorly learned classes and to produce stronger gradients for the generator in
favor of underlearned classes.
The steps are described in Alg. 1. From each class c ∈ {1, · · · , C}, we se0
lect a subset of samples Xc , of size proportional to a deviation factor γc =
c
c
c
c
c
|CrossLID(XR
; XR
)−CrossLID(XR
; XG )|/CrossLID(XR
; XR
), and augment the
0
original real dataset with the members of Xc for subsequent training. γc measures
c
the relative deviation of the CrossLID(XR
; XG ) score from the self-CrossLID score
c
c
c
CrossLID(XR ; XR ), i.e, the LID of XR . When the GAN has already fully learned
c
c
c
the distribution of a given class (i.e., CrossLID(XR
; XG ) = CrossLID(XR
; XR
)),
γc = 0, indicating that no oversampling will be applied to this class.

Algorithm 1 GAN training with mode-wise oversampling
1: for every T generator iterations do
2:
Generate N1 GAN samples XG .
3:
for c in {1, · · · , C} do
. C: number of classes.
c
from class c
4:
Sample N2 real samples XR
c
c
c
c
c
)
; XR
; XG )|/CrossLID(XR
) − CrossLID(XR
; XR
5:
γc = |CrossLID(XR
6:
end for P
7:
γc = γc / C
. Normalization
j=1 γj , for c ∈ {1, . . . , C}.
0

0

0

c
of size
Xaug = {X1 , · · · , XC } ∪ XR where Xc is a random sample from XR
0
|Xc | = m × γc where m is a size parameter
9:
Continue GAN training with Xaug for the next T generator iterations.
10: end for

8:

Our proposed strategy can effectively deal with the mode collapse issues
encountered in GAN training. When the generator learns a class partially, or not
at all, it receives a relatively high CrossLID score for that class. In subsequent
iterations, the imbalance in learning will be addressed by our oversampling in
favor of these classes (Step 8 in Alg. 1).
Note that CrossLID guided training can be used for unconditional GAN
training that does not explicitly use label information in the generator. CrossLID
does not require the knowledge of class or mode information of the GAN generated
samples; it only requires the same information of the target dataset only. Unlike
CrossLID, other metrics such as Inception score and FID cannot be used for
mode-wise performance estimation as they are inherently global estimates. FID
can be estimated class-wise (or mode-wise) provided that we know the label
(mode) information of the GAN generated samples, which might be available in
a (class) conditional GAN training only. Thus, the proposed mode-wise training
is more widely applicable using CrossLID than using other metrics, e.g., FID, in
different training settings.

10

S. Barua et al.

6

Experimental Results

6.1

Evaluation of CrossLID as a GAN Quality Metric

2

2 12 20 28 36 44

Epoch

CIFAR
CIFAR-R

3
0

2 12 20 28 36 44

Epoch

14

SVHN
SVHN-R

9
4

2 12 20 28 36 44

Epoch

110
80
50
20

6.5

ImageNet
ImageNet-R

5.5

IS

6

6

CrossLID score

MNIST
MNIST-R

CrossLID score

CrossLID score

10

CrossLID score

We first demonstrate that the CrossLID score is well correlated with the training
progress of GAN models. We then discuss four characteristics of the CrossLID
metric: (1) sensitivity to mode collapse, (2) robustness to small input noise, (3)
robustness to small image transformations, and (4) robustness to sample size
used for estimation. We also compare CrossLID score with Geometry score, IS
and FID. For evaluation, we used 4 benchmark image datasets: MNIST [22],
CIFAR-10 [21], SVHN [30], and ImageNet [36].
For the CrossLID score, we used external CNNs trained on the original
training set of real images for feature extraction (more details in Suppl. Sec L.2).
To compute the IS, we followed [37] using the pretrained Inception network,
except in the case of MNIST, for which we pretrained a different CNN model as
described in [24]. FID scores were computed as in [11]. Our code is available at
https://www.dropbox.com/s/bqadqzr5plc6xud/CrossLIDTestCode.zip.
Correlation of CrossLID and Training Progress of GANs: We show
that the CrossLID score is highly correlated with the training progress of GAN
models. In the left three subfigures of Fig. 2, as GAN training proceeds, the
CrossLID score decreases (supporting images are reported in Suppl. Sec. E for
visual verification of training progress). CrossLID(XR ; XG ) was estimated over
20,000 generated samples using deep features extracted from the external CNN
model. To show that CrossLID metric remains effective for high dimensional
datasets, we evaluate it on the 128 × 128 pixel ImageNet dataset consisting of
1000 classes, each class having approximately 1300 images. We trained a ResNet
model using WGAN-GP [10] algorithm on the full ImageNet dataset for 100K
generator iterations and computed CrossLID scores after every 1000 generator
iterations. The fourth subfigure from the left in Fig. 2 shows the computed
CrossLID scores over different generator iterations confirming that CrossLID
score improves (decreases) as GAN training proceeds.

4.5
3.5

1 25 50 75 100

Itera�ons (in thous.)

2.5

2.8

3.5

4.2

CrossLID score

4.9

Fig. 2: Left three: The CrossLID(XR ; XG ) score for samples generated by a DCGAN model after different training epochs. Results are shown for the first 50
epochs of training on MNIST, CIFAR-10 and SVHN, and MNIST-R/CIFARR/SVHN-R denote the CrossLID(XR ; XR ) scores for real MNIST/CIFAR10/SVHN samples. Fourth from left: CrossLID score for ImageNet samples
generated by a ResNet model (trained using WGAN-GP algorithm) after different generator iterations. Rightmost: Correlation between CrossLID and IS for
CIFAR-10 dataset, each point is associated with a model at a certain epoch.

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

11

IS is an established metric that was demonstrated to correlate well with human
judgment of sample quality [37]. The rightmost subfigure in Fig. 2 illustrates
the strong negative correlation between CrossLID and IS over different training
epochs. We also observed a strong positive correlation of CrossLID with FID
(results are reported in Suppl. Sec. D). We found that GS does not exhibit a clear
correlation with sample quality, which is consistent with its reported insensitivity
to differences in embedding distances or orientations [19] (see Suppl. Sec. B).
Therefore, we omit GS from the remainder of the discussion.
Sensitivity to Mode Collapse: A challenge of GAN training is to overcome
mode collapse, which occurs when the generated samples cover only a limited
number of modes (not necessarily from the real distribution) instead of learning
the entire real data distribution. An effective evaluation metric for GANs should
be sensitive to such situations.
We simulate two types of mode collapse by downsampling the training data:
(1) intra-class mode dropping, which occurs when the GAN generates samples
covering all classes, and (2) inter-class mode dropping, which occurs when the
GAN generates samples from a limited number of classes. For both types, we
randomly select a subset of n samples from c classes from the original training set
(of N samples from C classes), then randomly subsample with replacement from
the subset to create a new dataset with the same number of samples N as in
the original training set. For the simulation of intra-class mode dropping, we let
c = C, and vary n ∈ [30, 40, 50, 70, 100], whereas for inter-class mode dropping we
let n = 50, and vary c ∈ [2, 4, 6, 8, 10]. Overall, for each of the original datasets, we
created five new datasets for each type of mode collapse, and computed CrossLID,
IS, and FID scores on the new datasets. Note that each of these new datasets has
the same number of instances N as the original training set from which it was
derived. As shown in Fig. 3(a), we found that CrossLID is sensitive to different
degrees of intra-class mode dropping, but IS failed to identify intra-class mode
dropping on MNIST and ImageNet, and responded inconsistently for different
levels of intra-class mode dropping on CIFAR-10 and SVHN (Fig. 3(b)). FID
is also sensitive to intra-class mode dropping (Fig. 3(c)). Similar results were
seen for inter-class mode dropping (Fig. 3(d–f)): again, CrossLID was found
to be sensitive to increasing levels of inter-class mode dropping, and is more
sensitive than FID. Although IS revealed inter-class mode dropping for MNIST
and ImageNet, it failed to do so for CIFAR-10 and SVHN.
Robustness to Small Input Noise: We examine the robustness of the
three metrics to small noise in data which does not alter visual quality greatly.
We add noise drawn from a Gaussian distribution with both mean and variance
equal to 127.5 (255/2) to a small proportion of pixels in the original images.
As shown in Fig. 3(g), CrossLID exhibits small variations as the proportion of
modified pixels increases from 0.2% to 2%. For example, on CIFAR10 dataset,
CrossLID score changes by only 1.2% at 2% Guassian noise. In contrast, both
IS and FID demonstrate disproportionately large variations, particularly for
CIFAR-10, SVHN, and ImageNet (Fig. 3(h) and 3(i)). For example, IS and FID
change by 52% and 48%, respectively, at only 2% noise level on CIFAR10. The

S. Barua et al.

MNIST

100

1

100 70 50 40 30

Number of
dis�nct images n

1000

(c)
(c)
1000

FID

IS
Number of classes c

(d)
10

IS

10

0.2
0.4
0.8
1.2
1.6
2

(g)

4

2

10

10 8

6

4

2

Number of classes c

(f(f))

(e)
(e)
100

Noise percent

6

Number of classes c

100

1

(b)
10 8

100

1000

1

100
10
1

0.2
0.4
0.8
1.2
1.6
2

1

2

FID

4

0.2
0.4
0.8
1.2
1.6
2

CrossLID score

Number of
dis�nct images n

10

6

100 70 50 40 30

(b)

10

10 8

100
10

100 70 50 40 30

(a)

CrossLID score

ImageNet

Number of
disn�ct images n

100

1

SVHN
FID

10
1

CIFAR10
10

IS

CrossLID score

12

Noise percent

Noise percent

(h)

(i)

Fig. 3: (a–c) Test results for intra-class mode dropping: The CrossLID, IS, and
FID scores on varying numbers of unique samples in the datasets. (d–f ) Test
results for inter-class mode dropping. (g–i) Robustness to Gaussian noise for
CrossLID, IS, and FID. Noise percent indicates the proportion of pixels of GAN
images that have been modified with noise.
behavior of the three metrics remain similar even if we normalize the scores with
respect to their minimum and maximum values. (Details and further experiments
with different noise types are reported in Suppl. Sec. G and F).
A potential drawback of high sensitivity to low noise levels is that the metric
may respond inconsistently for images with low noise as compared to images of
extremely low quality. Consider the figures 4(a) and 4(b), wherein we report
the three metrics for two specific types of noise: a black rectangle obscuring the
center of the images, and 2% Gaussian noise, respectively. Although the images
with Gaussian noise are visually superior to the other ones (with implanted
rectangle), by virtue of its lower score, FID rates the obscured images to be of
better quality — quite the opposite to human visual judgment. In contrast, for
this particular scenario, the response of both CrossLID (for which a lower score
indicates better quality) and IS (for which a higher score is better) is in line
with human assessment. We believe that robustness to small input noise which
does not greatly change visual quality of images is a desirable characteristic for a
quality measure. Noting that there is as yet no consensus on the issue of whether
GAN quality measures should be robust to noise, we pose it as an open problem
for the GAN research community to explore.
Robustness to Small Input Transformation: We further test the robustness of the metrics to small input transformations. As long as the transformations
do not alter the visual appearance of GAN images, a robust metric should be

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality
Score
CrossLID = 12.93
IS = 3.88
FID = 110.01

CrossLID = 1.97
IS = 6.19
FID = 148.30

(a)

(b)

12
8
4
0

Score

12
8
4
0

CrossLID

5 10 15 20 25
Transla�on
(% of image width)

IS

Score

FID

12
8
4
0

5 10 15 20 25
Rota�on
(degrees)

(c)

(d)

13

5 10 15 20 25
Sample size
(in thousands)
(e)

Fig. 4: (a–b) The CrossLID, IS, and FID scores of images with centers occluded
by black rectangles (a) and with 2% Gaussian noise (b). (c–e) Robustness test of
the three metrics on CIFAR-10 dataset to small image transformations including
translation, rotation, and sample size used for calculation.
able to give consistent evaluations. This is important in that GAN generated
images often exhibit small distortions compared to natural images, and such
small imperfections should not significantly detract from the perceived quality
of GANs. As demonstrated in figures 4(c) and 4(d), CrossLID and IS conform
with each other showing moderate sensitivity to small translations and rotations
on CIFAR-10 images. This is reasonable considering that the convolution layers
of the feature extractor are expected to learn features which are moderately
invariant to small input transformations. However, we find that FID changes
drastically with small input transformations (Fig. 4(c–d)). FID calculation on
different (non-Inception) feature spaces could possibly lead to different behavior;
however, this investigation is beyond the scope of this paper.
Robustness to Sample Size: For the sake of efficiency, it is desirable that
GAN quality measures be able to perform well even when computed over relatively
small sample sizes. We test the robustness of the three metrics versus sample
size on a subset of CIFAR-10 training images. The results are shown in Fig. 4(e).
CrossLID and IS are moderately stable as the subset size decreases from 25K to
5K, in particular, CrossLID exhibits the least variation. However, the FID score
turns out to be quite highly sensitive to the sample size. The lower variation of
CrossLID against sample size allows it to be computed on samples of smaller
size as compared to what is typically needed by the other two metrics. We note
that previous research on FID [26] has noted that it exhibits high variance for
low sample sizes, and has hence been recommended only for sufficiently large
sample sizes (> 10K). We have also compared the running times of the three
metrics with respect to different sample sizes and found that CrossLID requires
the lowest computation time while FID the highest (Details in Suppl. Section H).
Summary: Table 1 summarizes our experimental comparisons of CrossLID,
IS, and FID.
Table 1: Evaluation summary of CrossLID, IS and FID.
EVALUATION CRITERIA

CrossLID

IS

FID

Sensitivity to mode collapse.
Robustness to small input noise.
Robustness to small input transformations.
Robustness to sample size variation.

High
High
Moderate
High

Low
Low
Moderate
Moderate

High
Low
Low
Low

14

6.2

S. Barua et al.

Evaluation of the Proposed Oversampling

We evaluate the effectiveness of the CrossLID-guided oversampling approach
in GAN training. For the MNIST, CIFAR-10 and SVHN datasets, we compare
standard versions of the popular DCGAN [33] and WGAN [2] models to the
same models trained with CrossLID-guided oversampling. (Further details of
model architecture, experimental settings, and output images can be found in
Suppl. Sec. L.1.)
The performances in terms of CrossLID scores are reported in Table 2, where
DCGAN+ and WGAN+ refer to training with our proposed oversampling (IS
and FID results for these experiments are reported in Suppl. Sec. J). Our training
approach achieved comparatively better results than the standard training in
terms of CrossLID, IS, and FID, for both DCGANs and WGANs.
Table 2: Performance of oversampling on DCGAN and WGAN.
CrossLID score
Dataset DCGAN
DCGAN+
MNIST 5.11 ± 0.02 4.96 ± 0.08
CIFAR10 3.00 ± 0.04 2.78 ± 0.04
SVHN 7.40 ± 0.01 7.14 ± 0.03

(lower is better)
WGAN
WGAN+
5.91 ± 0.02 5.26 ± 0.02
3.70 ± 0.04 3.57 ± 0.04
10.14 ± 0.04 9.95 ± 0.04

(a) DCGAN (b) DCGAN+ (c) DCGAN (d) DCGAN+

Fig. 5: Images generated at the end of the 30-th epoch by DCGAN and DCGAN+ on the MNIST dataset, when batch normalization is removed from the
discriminator (a–b) and from both the generator and discriminator (c–d).
Effectiveness in Preventing Mode Collapse: As explained in Sec 5, our
approach can help avoid mode collapse. We next show on MNIST, when the
batch-normalization layers were removed from the discriminator, or from both the
discriminator and the generator, standard DCGAN training suffered significant
mode collapse and failed to learn the full real distribution, as shown in Fig. 5(a)
and 5(c). Our approach, however, was still able to produce high quality images
without any sign of mode collapse during the training, as shown in Fig. 5(b)
and 5(d). (Training process and visual inspections reported in Suppl. Sec. K.)

7

Conclusion

We have proposed a new metric for quality evaluation of GANs, based on cross
local intrinsic dimensionality (CrossLID). Our measure can effectively assess GAN
generation quality and mode collapse in GAN outputs. It is reasonably robust

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

15

to input noise, image transformations, and sample size. We also demonstrated
a simple oversampling approach based on the mode-wise CrossLID that can
improve GAN training and help avoid mode collapse.
We believe CrossLID is not only a promising new tool for assessing the quality
of GANs, but also can help improve GAN training. We envisage CrossLID can be
used as an additional metric for the community to evaluate GAN quality. Unlike
IS and FID, CrossLID uses a local perspective rather than global perspective
when evaluating sample quality, in that a quality score for each individual GAN
generated sample can be computed based on its neighborhood. The advantage
of mode-wise performance estimation by CrossLID may be utilized in different
GAN models such as conditional and supervised GANs.

References
1. Amsaleg, L., Chelly, O., Furon, T., Girard, S., Houle, M.E., Kawarabayashi, K.,
Nett, M.: Extreme-value-theoretic estimation of local intrinsic dimensionality. Data
Mining and Knowledge Discovery 32(6), 1768–1805 (2018)
2. Arjovsky, M., Chintala, S., Bottou, L.: Wasserstein GAN. arXiv preprint
arXiv:1701.07875 (2017)
3. Barratt, S., Sharma, R.: A note on the Inception score. arXiv preprint
arXiv:1801.01973 (2018)
4. Brock, A., Donahue, J., Simonyan, K.: Large scale gan training for high fidelity
natural image synthesis. arXiv preprint arXiv:1809.11096 (2018)
5. Che, T., Li, Y., Jacob, A.P., Bengio, Y., Li, W.: Mode regularized generative
adversarial networks. In: ICLR (2017)
6. Denton, E.L., Chintala, S., Szlam, A., Fergus, R.: Deep generative image models
using a Laplacian pyramid of adversarial networks. In: NIPS. pp. 1486–1494 (2015)
7. Goodfellow, I., Bengio, Y., Courville, A.: Deep Learning, vol. 1. MIT press Cambridge (2016)
8. Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S.,
Courville, A., Bengio, Y.: Generative adversarial nets. In: NIPS. pp. 2672–2680
(2014)
9. Gretton, A., Borgwardt, K., Rasch, M.J., Scholkopf, B., Smola, A.J.: A kernel
method for the two-sample problem. In: NIPS (2006)
10. Gulrajani, I., Ahmed, F., Arjovsky, M., Dumoulin, V., Courville, A.C.: Improved
training of Wasserstein GANs. In: NIPS. pp. 5767–5777 (2017)
11. Heusel, M., Ramsauer, H., Unterthiner, T., Nessler, B., Hochreiter, S.: GANs
trained by a two time-scale update rule converge to a local Nash equilibrium. In:
NIPS. pp. 6626–6637 (2017)
12. Hill, B.M.: A simple general approach to inference about the tail of a distribution.
Annals of Statistics 3(5), 1163–1174 (1975)
13. Houle, M.E.: Dimensionality, discriminability, density and distance distributions.
In: Data Mining Workshops (ICDMW), 2013 IEEE 13th International Conference
on. pp. 468–473. IEEE (2013)
14. Houle, M.E.: Local intrinsic dimensionality I: an extreme-value-theoretic foundation
for similarity applications. In: International Conference on Similarity Search and
Applications. pp. 64–79. Springer (2017)

16

S. Barua et al.

15. Houle, M.E.: Local intrinsic dimensionality II: multivariate analysis and distributional support. In: International Conference on Similarity Search and Applications.
pp. 80–95. Springer (2017)
16. Houle, M.E., Kashima, H., Nett, M.: Generalized expansion dimension. In: 2012
IEEE 12th International Conference on Data Mining Workshops. pp. 587–594. IEEE
(2012)
17. Karger, D.R., Ruhl, M.: Finding nearest neighbors in growth-restricted metrics. In:
Proc. 34th Annual ACM Symposium on Theory of Computing. pp. 741–750. ACM
(2002)
18. Karras, T., Aila, T., Laine, S., Lehtinen, J.: Progressive growing of GANs for
improved quality, stability, and variation. In: ICLR (2018)
19. Khrulkov, V., Oseledets, I.: Geometry score: A method for comparing generative
adversarial networks. In: ICML (2018)
20. Kingma, D.P., Ba, J.: Adam: A method for stochastic optimization. In: ICLR (2015)
21. Krizhevsky, A., Hinton, G.: Learning multiple layers of features from tiny images
(2009)
22. LeCun, Y., Boser, B.E., Denker, J.S., Henderson, D., Howard, R.E., Hubbard, W.E.,
Jackel, L.D.: Handwritten digit recognition with a back-propagation network. In:
Advances in neural information processing systems. pp. 396–404 (1990)
23. Levina, E., Bickel, P.J.: Maximum likelihood estimation of intrinsic dimension. In:
NIPS. pp. 777–784 (2005)
24. Li, C., Liu, H., Chen, C., Pu, Y., Chen, L., Henao, R., Carin, L.: Alice: Towards
understanding adversarial learning for joint distribution matching. In: NIPS (2017)
25. Lopez-Paz, D., Oquab, M.: Revisiting classifier two-sample tests. In: ICLR (2017)
26. Lucic, M., Kurach, K., Michalski, M., Gelly, S., Bousquet, O.: Are GANs created
equal? A large-scale study. In: Advances in Neural Information Processing Systems
31. pp. 698–707 (2018)
27. Ma, X., Li, B., Wang, Y., Erfani, S.M., Wijewickrema, S., Houle, M.E., Schoenebeck,
G., Song, D., Bailey, J.: Characterizing adversarial subspaces using local intrinsic
dimensionality. In: ICLR (2018)
28. Ma, X., Wang, Y., Houle, M.E., Zhou, S., Erfani, S.M., Xia, S.T., Wijewickrema,
S., Bailey, J.: Dimensionality-driven learning with noisy labels. ICML (2018)
29. Miyato, T., Kataoka, T., Koyama, M., Yoshida, Y.: Spectral normalization for
generative adversarial networks. In: ICLR (2018)
30. Netzer, Y., Wang, T., Coates, A., Bissacco, A., Wu, B., Ng, A.Y.: Reading digits
in natural images with unsupervised feature learning. In: NIPS workshop on deep
learning and unsupervised feature learning. vol. 2011, p. 5 (2011)
31. Odena, A., Olah, C., Shlens, J.: Conditional image synthesis with auxiliary classifier
GANs. In: ICML (2017)
32. Pathak, D., Krahenbuhl, P., Donahue, J., Darrell, T., Efros, A.A.: Context encoders:
Feature learning by inpainting. In: CVPR. pp. 2536–2544 (2016)
33. Radford, A., Metz, L., Chintala, S.: Unsupervised representation learning with deep
convolutional generative adversarial networks. In: ICLR (2016)
34. Romano, S., Chelly, O., Nguyen, V., Bailey, J., Houle, M.E.: Measuring dependency
via intrinsic dimensionality. In: Pattern Recognition (ICPR), 2016 23rd International
Conference on. pp. 1207–1212. IEEE (2016)
35. Rozza, A., Lombardi, G., Ceruti, C., Casiraghi, E., Campadelli, P.: Novel high
intrinsic dimensionality estimators. Machine learning 89(1-2), 37–65 (2012)
36. Russakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z.,
Karpathy, A., Khosla, A., Bernstein, M., Berg, A.C., Fei-Fei, L.: ImageNet Large

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

37.
38.
39.

40.

17

Scale Visual Recognition Challenge. International Journal of Computer Vision
(IJCV) 115(3), 211–252 (2015). https://doi.org/10.1007/s11263-015-0816-y
Salimans, T., Goodfellow, I., Zaremba, W., Cheung, V., Radford, A., Chen, X.:
Improved techniques for training GANs. In: NIPS. pp. 2234–2242 (2016)
Shmelkov, K., Schmid, C., Alahari, K.: How good is my GAN? In: ECCV (2018)
Szegedy, C., Vanhoucke, V., Ioffe, S., Shlens, J., Wojna, Z.: Rethinking the inception architecture for computer vision. In: Proceedings of the IEEE conference on
computer vision and pattern recognition. pp. 2818–2826 (2016)
Theis, L., Oord, A.v.d., Bethge, M.: A note on the evaluation of generative models.
In: ICLR (2016)

18

S. Barua et al.

A

The Effect of Manifold Positioning and Orientation on
CrossLID

In Figure 1 of Section 4 of the main text, we have shown the power of CrossLID in
capturing submanifold conformity via a toy example where a GAN model attempts
to learn a bimodal Gaussian distribution. Here, we provide more insights into
the understanding of CrossLID. Figure 6 illustrates how our proposed CrossLID
can effectively characterize the conformity of two manifolds (X and Y ) with
identical geometric structures but different positioning or orientation in space.
As the two manifolds move closer and closer to each other either in position
(decreasing distance d) or orientation (decreasing angle θ), the CrossLID scores
(CrossLID(X; Y )) tend to decrease, and are close to one (CrossLID(X; X)) when
the two manifolds are completely overlapping. This substantiates how effectively
CrossLID can measure differences in spatial position and orientation of two
manifolds, even when they have similar structure.
120

X

Y

X

90
60
30
0

(a)

0 1 2 3 4 5

(b)

(c)

Y

50
40
30
20
10
0

0 15 30 45 60 90

(d)

Fig. 6: (a) Two manifolds X and Y have identical geometric structures, but
different positions in space; (b) CrossLID score decreases as X and Y moves
closer to each other (decreasing d); (c) The same manifolds (as in (a)) but having
different orientations (rotated with respect to each other); (d) CrossLID score
decreases as the relative orientation angle θ decreases.

B

Sample Quality Evaluation of Geometry Score

We train DCGANs on MNIST, CIFAR-10 and SVHN datasets, and compute the
Geometry score using 2000 generated samples after each epoch of training for
the first 50 epochs. The DCGAN architectures used here are the same as used in
the other experiments of Section 6.1 of the paper, and are described in Suppl.
L.1. As demonstrated in Figure 7, the Geometry Score exhibits high variation
and has no clear correlation with the training progress and sample quality, which
is consistent with the claims in [19]. Visual verification of the improvement in
sample quality over epochs can be found in Figures 10 and 11. Although a larger
sample size (10000) was used in the original paper, we found it is computationally
expensive to compute Geometry scores with such a large sample size over many
epochs.

Geometry Score

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality
MNIST

3
2

16

CIFAR-10 16

12

12

8

8

4

4

1
0

2

12 22 32 42

0

Epoch

2

12 22 32 42

0

19

SVHN

2

12 22 32 42

Epoch

Epoch

Fig. 7: Evaluation of Geometry score on sample quality for DCGAN models
trained on MNIST (left), CIFAR-10 (middle) and SVHN (right). After each
epoch of training (for the first 50 epochs), we computed the Geometry Score over
2000 samples generated by the network.

C

Benefits of CrossLID Estimation in Deep Feature
Space

Pixel
Feature

1 2 3 4 5
Noise percent

16
12
8
4
0

Pixel
Feature

0 2 3 4 5
Transla�on amount
(% of image width)

CrossLID score

20
15
10
5
0

CrossLID score

CrossLID score

In Section 4.2 of the paper, we proposed the use of deep feature space for the
estimation of CrossLID. Following the discussion in Section 6.1, we show here
experimental details justifying the advantages of CrossLID when computed within
deep feature spaces. We test the estimation of CrossLID on purely real samples
(that is, CrossLID(XI , XI )) on the MNIST dataset for two settings: 1) directly
in the pixel space, or 2) in deep feature space as defined by an external CNN
classifier. Figure 8 demonstrates the robustness of CrossLID in the two settings
for three scenarios: 1) small scale input noise, 2) translations, and 3) rotations.
The CrossLID scores estimated in the feature space exhibits less variation than
those computed in the pixel space. Such robustness is expected from an evaluation
metric which should not degrade highly with respect to small perturbations in the
image pixels. This confirms the denoising and representation learning capabilities
of convolution networks, and the advantage of CrossLID estimation in the deep
feature space.

16
12
8
4
0

Pixel
Feature

0 5 10 15 20
Rota�on amount
(degrees)

Fig. 8: Comparison of CrossLID scores estimated in the pixel space versus those
estimated in the deep feature space, on the MNIST dataset, against smallscale salt-and-pepper (impulse) noise (left) and image transformations including
translations (middle) and rotations (right).

20

D

S. Barua et al.

Correlation between CrossLID and FID

In Sec. 6.1 of the main paper, we have demonstrated that CrossLID exhibits a
strong correlation with IS metric. Here, we evaluate the correlation between the
CrossLID and FID metrics. We calculate both metrics over different models of the
MNIST, CIFAR10, and SVHN datasets. The models were taken from different
epochs of a DCGAN training on the datasets. For each dataset, we compute
two correlations between the FID and CrossLID scores (of different epochs):
Pearson’s correlation coefficient and Spearman’s rank correlation coefficient.
Table 3 shows the computed value of the coefficients. We observe a strong (but
not perfect) correlation between the two metrics across all three datasets in terms
of both correlation measures. Figure 9 shows the scatter plots of the scores for
CIFAR10 dataset. Based on these results, we can say that the two measures
show considerable level of agreement, but differences in the assessment of quality
are nevertheless present, particularly for the more complex dataset CIFAR10
(correlations of roughly 0.8).

Table 3: Correlation coefficient between FID and CrossLID scores over different
models across three datasets.
Pearson
Spearman rank

MNIST
0.99
0.98

48
52
46
44
42
42
2.95
2.8

SVHN
0.69
0.97

100

FID ranks

FID
FID

52
62
50

CIFAR10
0.79
0.81

2.93.15

3

3.353.1

CrossLID score

75
50
25
0

0

25

50

75 100

CrossLID ranks

Fig. 9: Left: Scatter plot of FID and CrossLID scores of different models over the
CIFAR10 dataset. Right: Scatter plot of FID and CrossLID ranks of different
models over the CIFAR10 dataset.

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

E

21

Visual Inspections on CrossLID score and Sample
Quality

In Section 6.1 of the paper, we demonstrated that the CrossLID score is closely
correlated with the progress of GAN training, in that the CrossLID score decreases
consistently as the model progressively learns to generate samples of better quality.
Here, we visually inspect some sample images generated at different training
stages of a DCGAN model, on the MNIST and CIFAR-10 datasets. Figures 10 and
11 show examples of generated CIFAR-10 and MNIST images respectively. As can
be seen, the sample quality increases as training proceeds, and there is a strong
correlation between decreasing CrossLID score and increasing sample quality.
Note that the last subfigures in both Figure 10 and Figure 11 show the real
images and the CrossLID score of the real data distribution (CrossLID(XI ; XI )),
which is the lowest overall.

(a) CrossLID score = 30.8 (b) CrossLID score = 7.24 (c) CrossLID score = 4.18

(d) CrossLID score = 3.76 (e) CrossLID score = 3.04 (f) CrossLID score = 1.34

Fig. 10: (a-e) 25 randomly selected DCGAN generated CIFAR-10 images and the
CrossLID score of the DCGAN model after epoch 1, 5, 10, 20, and 49; (f) Real
CIFAR-10 images and the CrossLID(XI ; XI ) score.

22

S. Barua et al.

(a) CrossLID score = 28.3 (b) CrossLID score = 7.12 (c) CrossLID score = 5.88

(d) CrossLID score = 5.36 (e) CrossLID score = 5.06 (f) CrossLID score = 3.90

Normalized score

Fig. 11: (a-e) 16 randomly selected DCGAN generated MNIST images and the
CrossLID score of the DCGAN model after epoch 1, 4, 10, 20, and 50; (f) Real
MNIST images and the CrossLID(XI ; XI ) score.

0.5

CrossLID

IS

FID

0.3
0.1
-0.1

0 0.4 0.8 1.2 1.6 2

Noise percent

Fig. 12: Top: Some representative CIFAR10 images after the application of
different percentage of Gaussian noise. Bottom: Normalized CrossLID score, IS,
and FID under different levels of Gaussian noise.

0.35

CrossLID

IS

FID

0.15
-0.05

0 0.4 0.8 1.2 1.6 2

Noise percent

Normalized score

Normalizd score

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality
0.95

CrossLID

IS

23

FID

0.6
0.25
-0.1

0 0.4 0.8 1.2 1.6 2

Noise percent

Fig. 13: Normalized CrossLID score, IS, and FID under different levels of Gaussian
noise on MNIST (Left) and SVHN (Right) datasets.

F

Comparison of CrossLID, IS, and FID using
Normalized Scores

In Sec. 6.1, we compared the robustness of CrossLID, IS, and FID metrics against
small Gaussian noise. We compared the raw score values of the three metrics
for different levels of input noise (small) and found CrossLID to be more robust
than the other two metrics. Here, we provide further insights using a relative
comparison of the three metrics in terms of their normalized score values. We
S−S0
normalize the raw scores of all three metrics to [0, 1] by S100
−S0 where S is the
score at a specific noise level, S0 is the score at no noise, and S100 is the score
at maximum (100%) noise. Note that for all metrics, a lower normalized score
indicates better performance.
The top subfigure of Figure 12 shows representative CIFAR10 images at
various noise levels, confirming that the visual quality of the images is affected
only slightly through the addition of noise. The bottom subfigure of Figure 12
shows the normalized scores for different levels of Gaussian noise (up to 2%). We
find that both IS and FID have disproportionately high sensitivity to low level
noise. For example, IS and FID scores changes by 52% and 48%, respectively, at
2% noise. In contrast, the response of CrossLID is much more proportionate, a
change of 1.2% (at 2% noise level). Moreover, considering that the images suffers
almost no distortion and are highly recognizable, the response of CrossLID seems
more reasonable than the response of the other two metrics. Similar results for
MNIST and SVHN datasets can be found in Figure 13. In our opinion, a high
sensitivity to this low level of noise is quite undesirable, since the noisy images are
highly recognizable. We note however that such a conclusion might be regarded
subjective, as the GAN research community has not yet come to a consensus as
to whether it is desirable for a quality measure to have high sensitivity to a level
of noise which does not substantially alter the visual quality of an image. As a
further comparison, in Sec. G we study the behavior of GAN quality measures in
the presence of very high levels of input noise.

24

G

S. Barua et al.

Further Robustness Evaluation on Input Noise

Normalized score

In addition to the evaluation of robustness against Gaussian input noise presented
in Figure 4 of Section 6.1 of the main text, we provide here some analysis on
one form of real-world image noise, the so-called ‘salt-and-pepper’ (or impulse)
noise. The top subfigure of Figure 14 shows some representative images for low
level salt-and-pepper noise, and the bottom subfigure shows the corresponding
normalized scores of the three metrics CrossLID, IS, and FID. As shown in the
top subfigure of Figure 14, the images are only slightly affected by the low levels
of noise applied in the tests. For these low levels of noise, both the FID and IS
scores increase significantly, whereas CrossLID exhibits small and proportionate
variation.

0.08

CrossLID

IS

FID

0.05
0.02
-0.01

0 0.2 0.4 0.6 0.8 1

Noise percent

Fig. 14: Top: representative CIFAR10 images after the application of different
percentages of salt-and-pepper noise. Bottom: Normalized CrossLID score, IS,
and FID under low levels of salt-and-pepper noise.

We further show, in Figure 15, how the three metrics respond to the entire
range of salt-and-pepper noise from 0% to 100%. Although all three scores
increase as the noise level increases to 100%, they react in quite different ways.
Both IS and FID are highly sensitive to low noise levels, while CrossLID is less
sensitive. CrossLID increases sharply as noise begins to dominate (as seen in our
results for 25% and 50% noise); from the representative images on the left, we
see that this effect coincides with a drastic drop in visual quality. We believe that
the response of CrossLID to different noise levels is more reasonably correlated
with the visual quality of images, but note that this evaluation is necessarily
subjective.

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

CrossLID

Score

1

IS

25

FID

0.75
0.5
0.25

0
2.5
5
10
25
50
75
100

0

Noise percent

Fig. 15: Left: Some representative CIFAR10 images with 25% and 50% salt-andpepper noise. Right: Normalized CrossLID score, IS, and FID for images with
high levels of salt-and-pepper noise. Note the non-linear scale on the x-axis.

H

Comparison of Running Time

300
200

CrossLID
IS
FID

100
0

10 20 30 40 50

Sample size (thousands)

CrossLID score

Exec �me (sec)

We compare the running time of CrossLID, IS, and FID with respect to different
sample sizes (from 10K to 50K) used for estimation. The running time was
calculated as the time elapsed to obtain a score for a given set of samples, with
an NVIDIA Titan V GPU. The left subfigure of Figure 16 shows the result on the
CIFAR-10 dataset. As the sample size increases, the running time of the three
metrics all increase in a linear fashion, but at different pace and scales. Among
them, the CrossLID metric has the lowest running time while FID requires the
highest. Note that the different feature extractors used by the three metrics may
influence their running time slightly.
32
16
8
4
2
1

k=50
k=200
k=400

0

12

24

Epoch

k=100
k=300
k=500

36

48

Fig. 16: Left: Running time of CrossLID, IS and FID over different sample sizes
on the CIFAR-10 dataset. Right: CrossLID scores estimated using different
neighborhood size k, for images generated at different epochs by a DCGAN on
the CIFAR-10 dataset.

I

Impact of Neighborhood Size on CrossLID Estimation

CrossLID has an additional hyper-parameter k which is the size of the local
neighborhood used for estimation. For all experiments and datasets used in our

26

S. Barua et al.

experiments, we found k = 100 to be a good neighborhood size. The impact of
varying k on CrossLID estimation is further illustrated in the right subfigure of
Figure 16. For different choices of k, the estimated CrossLID scores all decrease
as training progresses, which indicates that the estimates all accurately captured
the improvement of GAN models over training. We also observe that a larger
k tends to result in a higher value of the estimate, an effect of the expansion
of locality. Overall, the discriminability of CrossLID is not greatly sensitive to
variation in the value of k..

Table 4: Inception scores (IS) (mean±std over 5 random runs) of CrossLID guided
oversampling.
Dataset
MNIST
CIFAR10
SVHN

DCGAN
8.65 ± 0.03
6.14 ± 0.09
3.03 ± 0.03

IS (higher is better)
DCGAN+
WGAN
8.76 ± 0.01
8.13 ± 0.04
6.32 ± 0.09
5.46 ± 0.03
3.01 ± 0.02
2.90 ± 0.02

WGAN+
8.46 ± 0.03
5.70 ± 0.06
2.89 ± 0.01

Table 5: FID scores (mean±std over 5 random runs) of CrossLID guided oversampling.
Dataset
MNIST
CIFAR10
SVHN

J

DCGAN
7.13 ± 0.02
40.98 ± 0.24
13.87 ± 0.07

FID (lower
DCGAN+
6.49 ± 0.04
39.75 ± 0.12
12.92 ± 0.07

is better)
WGAN
16.40 ± 0.06
56.06 ± 0.24
35.86 ± 0.12

WGAN+
12.44 ± 0.17
54.26 ± 0.22
32.82 ± 0.20

Evaluation of CrossLID-Guided Oversampling
Approach using IS and FID

Table 4 and 5 report the results in terms of IS and FID, of the CrossLID guided
oversampling experiments described in Section 6.2. We see that CrossLID guided
oversampling methods (DCGAN+ and WGAN+) achieve lower FID results than
those of standard GAN training (DCGAN and WGAN). Comparing the FID
results with the CrossLID scores reported in Table 2, we find that their rankings
are the same: the proposed oversampling approach achieved better results in
terms of both metrics. This is the case with IS as well, except for the SVHN
dataset, for which both methods demonstrate similar results.

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

(a) Epoch 20

(b) Epoch 30

(c) Epoch 50

(d) Epoch 20

(e) Epoch 30

(f) Epoch 50

27

Fig. 17: MNIST images generated at epoch 20, 30 and 50 (50 epochs in total)
by DCGAN models without batch normalization layers in both the generator
and discriminator. Top row : Images generated by a DCGAN model trained using
standard training. Bottom row : Images generated by a DCGAN model trained
with our proposed oversampling strategy.

(a) Epoch 20

(b) Epoch 30

(c) Epoch 50

(d) Epoch 20

(e) Epoch 30

(f) Epoch 50

Fig. 18: MNIST images generated at epoch 20, 30 and 50 (50 epochs in total) by
DCGAN models without batch normalization layers in the discriminator (the
generator network still has batch normalization). Top row : Images generated by
a DCGAN model trained using standard training. Bottom row : Images generated
by a DCGAN model trained with our proposed oversampling strategy.

K

Stability of the Proposed GAN Training with
Oversampling

Here, we provide more details regarding the training of DCGANs without batch
normalization layers 1) in the discriminator, or 2) in both the generator and the
discriminator. Following the methodology used in [2] to verify model stability, we
illustrate how our proposed oversampling strategy can avoid mode collapse and

28

S. Barua et al.

help learning, by showing for the MNIST dataset the images generated at different
epochs. As visualized in Figure 17, when batch normalization layers were removed
from both the generator and the discriminator, standard training suffered from
mode collapse from the beginning of training, and the images generated images by
the end of training were of low quality. More severe mode collapse was observed
with standard training when the batch normalization layers were removed from
the discriminator only: in this case, the model failed to generate realistic images
(see Figure 18). On the other hand, when trained with our proposed oversampling
strategy, mode collapse was not observed in any of the two scenarios, and the
generated images were of higher quality consistently throughout training.

L
L.1

Network Architectures and Experimental Settings
GAN architecture, Training Details and Exemplary Outputs

For all experiments, we constructed GAN models based on the architectural
guidelines of DCGAN [33]. The generator and discriminator networks used for
MNIST and CIFAR-10/SVHN are described in Table 6 and Table 7 respectively.
The same network architecture was used for WGAN experiments except that the
output activation (sigmoid) in the discriminator was removed. This was done to
produce a linear output for the training of WGANs with the Wasserstein loss [2].
For DCGAN training, the models were trained for 60 and 100 epochs on
MNIST and CIFAR-10/SVHN respectively, using the Adam optimizer [20] with
learning rate 0.0001 and decay 0.00001. The WGANs models were trained for 200
epochs on all datasets using the RMSProp optimizer. A learning rate of 0.00005
was used for CIFAR10 and SVHN training, while 0.0001 was used for MNIST. For
our proposed CrossLID guided training approach, we used N1 = 20K, N2 = 2K
for class-wise CrossLID estimation, and sample size m = 30K for DCGANs and
m = 20K for WGANs. For T , we simply used the number of generator iterations
in one epoch, i.e., we applied oversampling after every epoch. Figure 19 shows
some randomly selected images generated by 1) DCGANs trained using standard
training versus 2) DCGANs trained with our proposed oversampling strategy.
For evaluating the CrossLID scores on ImageNet dataset, ResNet architecture
was used for building the generator and discriminator network of the GAN model.
The model was trained using WGAN-GP algorithm for 100K generator iterations
using the parameter settings described in [10]. Table 8 shows the architecture
used for the generator and discriminator networks. For details on ResNet block
architecure, please see [10].
L.2

External CNN models used for Feature Extraction

Table 9 describes the architectures of external CNN models used for feature
extraction on MNIST, CIFAR-10, SVHN, and ImageNet datasets; the selected
feature layers are highlighted in bold. These CNN classifiers were trained separately on the original training sets of the three datasets. For MNIST and SVHN

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

29

Table 6: The generator and discriminator network used for the MNIST dataset.
Conv(x, y, z) represents a convolution layer with x filters of kernel size y × y and
stride z. ConvTr(x, y, z) represents a transposed convolution layer with x filters
of kernel size y × y and stride z. FC(x) represents a fully connected layer with
x output nodes. BN represents a batch normalization layer, R represents the
reshape operation and LReLU is the LeakyRelu.
Generator
Discriminator
Input: Z(100)
Input: (28,28,1)
R(1,1,100)
Conv(32,3,2), BN, LReLU
ConvTr(128,3,1), BN, ReLU Conv(64,3,2), BN, LReLU
ConvTr(64,3,2), BN, ReLU Conv(128,3,2), BN, LReLU
ConvTr(32,3,2), BN, ReLU
Conv(1,3,1), Sigmoid
Output: 1
ConvTr(1,3,2), Tanh
Output: (28, 28, 1)

Table 7: The generator and discriminator network used for the CIFAR-10 and
SVHN datasets. Conv(x, y, z) represents a convolution layer with x filters of
kernel size y × y and stride z. ConvTr(x, y, z) represents a transposed convolution
layer with x filters of kernel size y × y and stride z. FC(x) represents a fully
connected layer with x output nodes. BN represents a batch normalization layer,
R represents the reshape operation and LReLU is the LeakyRelu
Generator
Discriminator
Input: Z(100)
Input: (32,32,3)
R(1,1,100)
Conv(64,4,2), BN, LReLU
ConvTr(256,4,1), BN, ReLU Conv(128,4,2), BN, LReLU
ConvTr(128,4,2), BN, ReLU Conv(256,4,2), BN, LReLU
ConvTr(64,4,2), BN, ReLU
Conv(1,4,1), Sigmoid
Output: 1
ConvTr(3,4,3), Tanh
Output: (32, 32, 3)

networks, the outputs of the first fully connected (FC) layer was used as features,
while for CIFAR-10, the output of the last max pooling layer was used. For
ImageNet, the last pooling layer (global average pooling having 2048 outputs) of
a pretrained Inception-v3 [39] network was used for feature extraction. For the
estimation of our proposed CrossLID, the networks were applied to extract the
features for both real and fake images, and the extracted features were then used
to compute the CrossLID scores.

30

S. Barua et al.

(a) MNIST

(b) CIFAR-10

(c) SVHN

(d) MNIST

(e) CIFAR-10

(f) SVHN

Fig. 19: Top row: Images generated by standard DCGAN training (without
our proposed oversampling) on the three datasets (a-c). Bottom row: Images
generated by DCGANs trained with our proposed oversampling strategy on the
three datasets (d-f).

Table 8: ResNet architecture used for the ImageNet training. ResBlock(U,x)
denotes an upsampling ResNet block with x number of filters while ResBlock(D,x)
denotes a downsampling ResNet block.
Generator
Input: Z(100)
FC(4 × 4 × 128)
ResBlock(U,1024)
ResBlock(U,512)
ResBlock(U,256)
ResBlock(U,128)
ResBlock(U,64)
BN, ReLU
Conv(3,3,1), Tanh
Output: (128,128,3)

Discriminator
Input: (128,128,3)
ResBlock(D,64)
RestBlock(D,128)
ResBlock(D,256)
ResBlock(D,512)
ResBlock(D,1024)
GlobalAvgPool
FC(1)
Output: 1

Quality Evaluation of GANs Using Cross Local Intrinsic Dimensionality

31

Table 9: Network architecture of external CNN models used for feature extraction.
Conv(x, y, z) represents a convolution layer with x filters of kernel size y × y
and stride=z. MaxPool(x, y) represents a max-pooling layer with pool size x × y.
FC(x) represents a fully connected layer with x output nodes. The selected
feature layers are highlighted in bold.
Dataset

Architecture of external CNN models
Conv(32,3,1), Conv(64,3,1), MaxPool(2,2),
MNIST
FC(128), FC(10)
Conv(32,3,1), Conv(32,3,1), MaxPool(2,2),
Conv(64,3,1), Conv(64,3,1), MaxPool(2,2),
SVHN
Conv(128,3,1), Conv(128,3,1), MaxPool(2,2),
FC(512), FC(10)
Conv(64,3,1), Conv(64,3,1), MaxPool(2,2),
Conv(128,3,1),
Conv(128,3,1),
MaxPool(2,2) Conv(256,3,1), Conv(256,3,1),
Conv(256,3,1), MaxPool(2,2), Conv(512,3,1),
CIFAR-10
Conv(512,3,1),
Conv(512,3,1),
MaxPool(2,2), Conv(512,3,1), Conv(512,3,1),
Conv(512,3,1), MaxPool(2,2), FC(512),
FC(10)
Inception-v3 network, the last pooling
ImageNet layer (global average pooling having 2048
outputs) used for feature extraction

