Optimized geometrical metrics satisfying free-stream preservation
Irving Reyna Nolascoa,1 , Lisandro Dalcina,2 , David C. Del Rey Fernándezb,c,2 , Stefano
Zampinia,2 , Matteo Parsania,3,∗

arXiv:1911.03682v2 [math.NA] 27 Nov 2019

a

King Abdullah University of Science and Technology (KAUST), Computer Electrical and Mathematical Science
and Engineering Division (CEMSE), Extreme Computing Research Center (ECRC), Thuwal, Saudi Arabia
b
National Institute of Aerospace, Hampton, Virginia, United States
c
Computational AeroSciences Branch, NASA Langley Research Center, Hampton, Virginia, United States

Abstract
Computational fluid dynamics and aerodynamics, which complement more expensive empirical approaches, are critical for developing aerospace vehicles. During the past three decades, computational aerodynamics capability has improved remarkably, following advances in computer hardware
and algorithm development. However, for complex applications, the demands on computational
fluid dynamics continue to increase in a quest to gain a few percent improvements in accuracy.
Herein, we numerically demonstrate that optimizing the metric terms which arise from smoothly
mapping each cell to a reference element, lead to a solution whose accuracy is practically never
worse and often noticeably better than the one obtained using the widely adopted Thomas and
Lombard metric terms computation (Geometric conservation law and its application to flow computations on moving grids, AIAA Journal, 1979). Low and high-order accurate entropy stable
schemes on distorted, high-order tensor product elements are used to simulate three-dimensional
inviscid and viscous compressible test cases for which an analytical solution is known.
Keywords: Geometric conservation law, Free-stream preservation, Optimized metrics, Entropy
conservation, Summation-by-parts operators, Simultaneous-approximation-terms, Curved
elements, Unstructured curvilinear grids

1. Introduction
In recent years, with the continuous growth of computing capability and in an effort to achieve
more accurate numerical simulations over a broad class of engineering problems, computational fluid
dynamics (CFD) has gradually shifted towards high-order accurate simulations; see, for instance,
[1, 24, 40]. Modern unstructured high-order methods include discontinuous Galerkin (DG), spectral
difference (SD), and flux reconstruction (FR) methods and can produce highly accurate solutions
with minimum numerical dispersion and dissipation. Although DG, SD, and FR methods are well
∗

Corresponding author
Email addresses: irvingenrique.reynanolasco@kaust.edu.sa (Irving Reyna Nolasco), dalcinl@gmail.com
(Lisandro Dalcin), dcdelrey@gmail.com (David C. Del Rey Fernández), stefano.zampini@kaust.edu.sa (Stefano
Zampini), matteo.parsani@kaust.edu.sa (Matteo Parsani)
1
Ph.D. student
2
Research Scientist
3
Assistant Professor
Preprint submitted to Elsevier

November 28, 2019

suited for smooth solutions, numerical instabilities may occur if the flow contains discontinuities or
under-resolved physical features. A variety of mathematical stabilization strategies are commonly
used to alleviate these issues (e.g., filtering [22], weighted essentially non-oscillatory schemes [41],
artificial dissipation, over-integration, and limiters); however, the use of such techniques for practical complex flow applications often times rely on heuristic (e.g., tunable parameters) or results
in schemes that are not always stable (e.g., over-integration)
For the compressible Navier–Stokes equations, a very promising and mathematically rigorous
alternative consists in constructing discrete operators that are non-linearly stable (i.e., entropy
stable) and simultaneously conserve mass, momentum, and energy, while enforcing a secondary
entropy constraint. This strategy consists in first identifying a non-linear neutrally stable flux
for the compressible Euler equations, and then adding an appropriate amount of dissipation in
order to achieve entropy stability at the semi-discrete level, thus enhancing the stability of the
base operator [18, 28, 30, 31]. In this work, we build our study on conforming entropy stable
discontinuous collocation methods, constructed by using the summation-by-parts (SBP) operators
and the simultaneous-approximation-terms (SAT) framework [5, 7, 26, 28]. However, the proposed methodology can be immediately applied to any of the aforementioned spatial discretization
techniques.
In CFD, simulations in complex geometries are performed on the union of piece-wise smooth
sub-domains, also called elements or cells, that are smoothly mapped to a reference element. In
this element, the derivative terms appearing in the system of partial differential equations (PDEs)
are actually evaluated. In the mapped system of equations, the fluxes include the Jacobians of the
transformation and the transformation metrics, which depend on derivatives of the transformation.
On the one hand, when the element sides are straight, the mapping is linear in each coordinate
direction and the metrics are constant. On the other hand, when the element boundaries are
curved, these metric terms vary across the element.
At the continuous level, the metric terms naturally satisfy a set of identities [35–37], and the
importance of satisfying these identities at the discrete level has long been recognized; see, for
instance, [23, 36, 38]. One of the consequences is that a constant free-stream solution is exactly
preserved for all time, independent of the chosen coordinate system. Failure to preserve the freestream condition frequently leads to spurious source terms that introduce errors in the solution
and can be catastrophic in many applications.
The idea of approximating the metric terms in such a way that certain physical quantities
are preserved goes back to the early days of CFD. The terminology “geometric conservation law”
(GCL) was introduced in 1979 by Thomas and Lombard [35], who found that finite difference
approximations that satisfied the metric identities in two dimensions failed in three dimensions.
Such observation led to the re-write of the metric terms in a “conservative form”, which, when
approximated with central differences, satisfy the metric identities, and thus lead to free-stream
preservation. This concept was subsequently extended to geometrically characterize conservative
numerical schemes as algorithms that preserve the entire state of a uniform flow.
In previous works [12, 14, 16], the metric terms are constructed for non-conforming discretization at the cell interfaces by solving a strictly convex quadratic optimization problem [9], whose
solution guarantees entropy conservation and free-stream preservation. Herein, we numerically
show that optimizing the metric terms as proposed in [12, 14, 16] leads, even for conforming interfaces, to a solution whose accuracy is practically never worse and often noticeably better than
the one obtained using the widely adopted Thomas and Lombard approach [35]. Thus, we con2

clude that the pre-processing step of optimizing the metric terms can be used in a computational
framework as a unique and viable approach for conforming and h/p non-conforming interfaces. In
addition, this choice greatly simplifies the solver and allows important code re-utilization.
The paper is organized as follows. In Section 2 we introduce the notation used in this work. The
coordinate transformation from physical to computational space and the key constraints that have
to be satisfied by the discrete metric terms are introduced in the context of the linear convectiondiffusion equation in Section 3. In the same section, the metric solution mechanics for conforming
interior and boundary faces are also presented. Section 4 deals with the compressible Navier–
Stokes equations and its semi-discretization using entropy stable SBP-SAT operators of any order.
Numerical results for three-dimensional inviscid and viscous test cases for which an analytical
solution is known are presented in Section 5. Simulations are performed using low and highorder accurate entropy stable schemes on distorted, high-order tensor product elements [5, 7, 28].
Conclusions are drawn in Section 6.
2. Notation
The notation used in this work has been adopted from [12]. Partial differential equations (PDEs)
are discretized on tensor-product cells having Cartesian computational coordinates denoted by the
triple (ξ1 , ξ2 , ξ3 ), where the physical coordinates are denoted by the triple (x1 , x2 , x3 ). Vectors are
represented by lowercase bold font, for example u, while matrices are represented using sans-serif
font, for example, B. Continuous functions on a space-time domain are denoted by capital letters
in script font. For example,
U (ξ1 , ξ2 , ξ3 , t) ∈ L2 ([α1 , β1 ] × [α2 , β2 ] × [α3 , β3 ] × [0, T ])
represents a square integrable function, where t is the temporal coordinate. The restriction of such
function onto a set of mesh nodes is denoted by lower case bold font. For example, the restriction
of U onto a grid of N1 × N2 × N3 nodes is given by the vector
h 


iT
u = U ξ (1) , t , . . . , U ξ (N ) , t
,
where N is the total number of nodes (N = N1 N2 N3 ), and the square brackets are used to delineate
vectors and matrices, as well as ranges for variables (the context will make clear which meaning
is being used). Moreover, ξ is a vector of vectors constructed from the three vectors ξ1 , ξ2 , and
ξ3 , which are vectors of size N1 , N2 , and N3 and contain the coordinates of the mesh in the three
computational directions, respectively. Finally, ξ is constructed as
ξ(3(i − 1) + 1 : 3i) = ξ (i) = [ξ1 (i), ξ2 (i), ξ3 (i)]T ,
where the notation u(i) means the ith entry of the vector u and u(i : j) is the subvector constructed
from u using the ith through j th entries (i.e., Matlab notation is used).
Oftentimes, monomials are discussed and the following notation is used:
h
iT
ξlj = (ξl (1))j , . . . , (ξl (Nl ))j ,
with the convention that ξlj = 0 for j < 0.
Herein, one-dimensional SBP operators are used to discretize derivatives. The definition of a
one-dimensional SBP operator in the ξl direction, l = 1, 2, 3, is [11, 15, 34]
3

Definition 1. Summation-by-parts operator for the first derivative: A matrix operator,
(1D)
Dξl ∈ RNl ×Nl , is an SBP operator of degree p approximating the derivative ∂ξ∂ l on the domain
ξl ∈ [αl , βl ] with nodal distribution ξl having Nl nodes, if
(1D) j
ξl

1. Dξl

(1D)

2. Dξl

(1D)

3. Qξl

(1D)

Eξl

= jξlj−1 , j = 0, 1, . . . , p;


(1D)
(1D) −1 (1D)
Qξl , where the norm matrix, Pξl , is symmetric positive definite;
= Pξl






(1D)
(1D)
(1D) T
(1D)
(1D)
(1D) T
= Sξl + 12 Eξl
,
, Eξl = Eξl
, Sξl = − Sξl

T
T
T
= diag (−1, 0, . . . , 0, 1) = eN eT
N − e1 e1 , e1 = [1, 0, . . . , 0] , and eN = [0, 0, . . . , 1] .

Thus, a degree p SBP operator is one that differentiates exactly monomials up to degree p.
In this work, one-dimensional SBP operators are extended to multiple dimensions using tensor
products (⊗). The tensor product between the matrices A and B is given as A⊗B. When referencing
individual entries in a matrix the notation A(i, j) is used, which means the ith j th entry in the
matrix A.
The focus of this paper is exclusively on diagonal-norm SBP operators. Moreover, the same
one-dimensional SBP operator is used in each direction, each operating on Nl nodes. Specifically,
diagonal-norm SBP operators constructed on the Legendre–Gauss–Lobatto (LGL) nodes are used,
i.e., a discontinuous Galerkin collocated spectral element approach is utilized (see, for instance,
[5, 7, 20, 21, 26, 28]).
When solving PDEs numerically, the physical domain Ω ⊂ R3 , with boundary Γ = ∂Ω, with
Cartesian coordinates (x1 , x2 , x3 ) ⊂ R3 , is partitioned into K non-overlapping elements. The
domain of the κth element is denoted by Ωκ and has boundary ∂Ωκ . Numerically, we solve PDEs in
computational coordinates, (ξ1 , ξ2 , ξ3 ) ⊂ R3 , where each Ωκ is locally transformed to the reference
element Ω̂κ , with boundary ∂ Ω̂κ , using a pull-back curvilinear coordinate transformation which
satisfies the following assumption:
Assumption 1. Each element in physical space is transformed using a local and invertible curvilinear coordinate transformation that is compatible at shared interfaces, meaning that the pushforward element-wise mappings are continuous across physical element interfaces. Note that this
is the standard assumption requiring that the curvilinear coordinate transformation is water-tight.
Precisely, one maps from the reference coordinates (ξ1 , ξ2 , ξ3 ) ∈ [−1, 1]3 to the physical element
(see Figure 1) by the push-forward transformation
(x1 , x2 , x3 ) = X (ξ1 , ξ2 , ξ3 ) ,

(1)

which, in the presence of curved elements, is usually a high-order degree polynomial.
3. The linear convection-diffusion equation
Many of the technical details for constructing conservative and stable discretizations for the
compressible Navier–Stokes, including the metric terms, are present for the discretization of the
linear convection-diffusion equation. The linear convection-diffusion equation in Cartesian physical

4

X (ξ)

ξ3

x3

ξ2

ξ1

x2
x1

Figure 1: The reference element and its mapping to an element in the mesh.

coordinates is given as
3
3
X
X
∂U
∂ (am U)
∂ 2 (bm U)
+
=
, ∀ (x1 , x2 , x3 ) ∈ Ω,
∂t
∂xm
∂x2m

t ≥ 0,

U (x1 , x2 , x3 , t) = G (B) (x1 , x2 , x3 , t) , ∀ (x1 , x2 , x3 ) ∈ Γ,

t ≥ 0,

m=1

m=1

U (x1 , x2 , x3 , 0) = G (0) (x1 , x2 , x3 ) ,

(2)

∀ (x1 , x2 , x3 ) ∈ Ω,

where (am U) are the inviscid fluxes, am are the (constant) components of the convection speed,
∂(bm U )
∂xm are the viscous fluxes, and bm are the (constant and positive) diffusion coefficients. The
boundary data, G (B) , and the initial condition, G (0) , are assumed to be in L2 (Ω), with the further
assumption that G (B) is prescribed so that either energy conservation or energy stability is achieved.
Since derivatives are approximated with differentiation operators defined in computational
space, we use the Jacobian of the push-forward mapping and the chain rule


3
3
X
X
∂
∂ξl ∂
∂2
∂ξl ∂
∂ξa ∂
=
,
=
,
∂xm
∂xm ∂ξl
∂x2m
∂xm ∂ξl ∂xm ∂ξa
l=1

l,a=1

to transform Equation (2) from physical to computational space as


3
3
X
X
∂ξl ∂ (am U)
∂ξl ∂
∂ξa ∂(bm U)
∂U
+
J
=
J
,
J
∂t
∂xm ∂ξl
∂xm ∂ξl ∂xm ∂ξa
l,m=1

(3)

l,a,m=1

∂ξl
where J is the determinant of the metric Jacobian. Bringing the metric terms J ∂x
inside the
m
derivative, and using the product rule, gives

 X


3
3
X
∂U
∂
∂ξl
∂
∂ξl
J
+
J
am U −
am U
J
=
∂t
∂ξl
∂xm
∂ξl
∂xm
l,m=1
l,m=1
(4)




3
3
X
X
∂
∂ξl ∂ξa ∂(bm U)
∂ξa ∂(bm U) ∂
∂ξl
J
−
J
.
∂ξl
∂xm ∂xm ∂ξa
∂xm ∂ξa ∂ξl
∂xm
l,a,m=1

l,a,m=1

5

The last terms on the left- and right-hand sides of (4) are zero via the GCL relations


3
X
∂ξl
∂
J
= 0,
∂ξl
∂xm

m = 1, 2, 3,

(5)

l=1

leading to the strong conservation form of the convection-diffusion equation in computational space




3
3
X
X
∂U
∂ξl
∂ξl ∂ξa ∂(bm U)
∂
∂
J
J
am U =
J
.
+
∂t
∂ξl
∂xm
∂ξl
∂xm ∂xm ∂ξa

(6)

l,a,m=1

l,m=1

Now, consider discretizing Equation (6) by using the following differentiation matrices
(1D)

Dξ1 = Dξ1

(1D)

⊗ IN2 ⊗ IN3 , Dξ2 = IN1 ⊗ Dξ2

(1D)

⊗ IN3 , Dξ3 = IN1 ⊗ IN2 ⊗ Dξ3

,

where INl is an Nl × Nl identity matrix and Nl is the number of LGL points per direction in a
given element. The diagonal matrix containing the metric Jacobian is defined as


Jκ = diag J (ξ (1) ), . . . , J (ξ (Nκ ) ) ,
i
h
∂ξl
while the diagonal matrix of the metric terms, J ∂x
, has to be chosen to be a discretization of
m
κ




∂ξl (1)
∂ξl (Nκ )
diag J
(ξ ), . . . , J
(ξ
) ,
∂xm
∂xm
where Nκ = N1 N2 N3 is the total number of nodes in element κ. Using this nomenclature, the
discretization of (6) on the κth element reads



 

3
3
X
X
∂ξl
∂ξl
∂ξa
duκ
−1
bm Dξl Jκ J
am Dξl J
uκ =
J
Dξ uκ + SATκ , (7)
+
Jκ
dt
∂xm κ
∂xm κ
∂xm κ a
l,m,a=1

l,m=1

where SATκ is the vectors of the SATs used to impose boundary conditions and inter-element connectivity [6, 27]. The SATκ vector is in general composed from inviscid and viscous contributions,
(I)
(V )
i.e. SATκ = SATκ + SATκ .
Unfortunately, the scheme (7) is not guaranteed to be stable. However, a well-known remedy
is to canonically split the inviscid terms into one half of the inviscid terms in (3) and one half
of the inviscid terms in (4) (see, for instance, [6]), while the viscous terms are treated in strong
conservation form. In the continuum, this process leads to



3 
∂U
1 X
∂ξl
∂ξl ∂
∂
J
+
J
am U + J
(am U)
∂t
2
∂ξl
∂xm
∂xm ∂ξl
l,m=1





3 
3
X
1 X
∂
∂ξl
∂
∂ξl ∂ξa ∂(bm U)
−
am U
J
=
J
,
2
∂ξl
∂xm
∂ξl
∂xm ∂xm ∂ξa
l,m=1

(8)

l,a,m=1

where the last set of terms on the left-hand side are zero by the GCL conditions (5). Then, a
stable semi-discrete form is constructed in the same manner as the split form (8) by discretizing
6

i
h
∂ξl
, and by averaging the results. The
the inviscid portion of (3) and (6) using Dξl , Jκ , and J ∂x
m
κ

viscous terms result from the discretization of the viscous portion of (6). This procedure yields






3
duκ 1 X
∂ξl
∂ξl
Jκ
+
am Dξl J
+ J
Dξ uκ
dt
2
∂xm κ
∂xm κ l
l,m=1




3 
1 X
∂ξl
−
am diag (uκ ) Dξl J
1κ =
2
∂xm κ

(9)

l,m=1

3
X

bm Dξl J−1
κ

l,m,a=1

 


∂ξa
∂ξl
J
Dξ uκ + SATκ ,
J
∂xm κ
∂xm κ a

where 1κ is a vector of ones of size Nκ .
As in the continuous case, the semi-discrete form has a set of discrete GCL conditions
3
X


Dξl

l=1

∂ξl
J
∂xm


1κ = 0,

m = 1, 2, 3,

(10)

κ

that, when satisfied, lead to the following telescoping, provably stable, semi-discrete form
Jκ







3
duκ 1 X
∂ξl
∂ξl
+
am Dξl J
+ J
Dξl uκ =
dt
2
∂xm κ
∂xm κ
l,m=1

3
X

bm Dξl Jκ

l,m,a=1

−1

(11)


∂ξl
J
∂xm

 
κ

∂ξa
J
∂xm


Dξa uκ + SATκ .
κ

Remark 1. The linear stability of semi-discrete operators for constant coefficient hyperbolic systems, is not preserved by arbitrary design order approximations of the metric terms. Only approximations to the metric terms that satisfy the discrete GCL conditions (10) lead to stable semidiscrete forms.
Remark 2. The discrete metrics constructed using the analytic formalism of Vinokur and Yee [39]
or Thomas and Lombard [35] will in general satisfy the discrete GCL conditions given by (10) for
conforming interfaces when tensor-product differentiation operators are used.
Herein, we optimize the metric terms as presented in [12–14, 16] using the algorithm of Crean
et al. [9]. Only conforming interfaces are considered. In what follows, we show which metric terms
are optimized and how this optimization process is performed.
3.1. Review of the inviscid coupling procedure
The key element of the discretization that clearly show the opportunity of optimizing the volume
metric terms is the inviscid SAT term. Thus, we consider the discretization of the pure convection
equation, i.e., discretization (11) with only the convective contributions:






3
duκ 1 X
∂ξl
∂ξl
Jκ
+
am Dξl J
+ J
Dξ uκ = SATκ(I) .
dt
2
∂xm κ
∂xm κ l
l,m=1

7

(12)

f
κ0

κ

1

ξ3

N

1
ξ2

N
ξ1

Figure 2: Generic vertical interface between two cells in computational space.

Without loss of generality, and for clarity of presentation, we consider only one vertical shared
face f , as shown in Figure 2. When considering a single set of metrics computed, for instance, with
one of the approaches presented in [35] or [39], the inviscid SAT coupling the element κ with the
neighboring element κ0 is constructed as
(I)
SATκ,f

3
X

  ∂ξ  
l
=+ P
am
⊗
uκ
⊗
J
∂xm κ
m=1

3
  ∂ξ  
1 −1 X
(1D)
(1D)
l
T
− P
uκ
am
eN eN ⊗ Pξ2 ⊗ Pξ3
J
2
∂xm κ
m=1

3
  ∂ξ  
X
1
(1D)
(1D)
l
− P−1
am
eN eT
⊗
P
uκ0 ,
⊗
P
J
1
ξ2
ξ3
2
∂xm κ0
−1



eN eT
N

(1D)
Pξ2

(1D)
Pξ3

(13)

m=1



(1D)
(1D)
(1D)
(1D)
(1D)
⊗
P
⊗
P
where P = Pξ1 ⊗ Pξ2 ⊗ Pξ3 . The action of the operator eN eT
consists
N
ξ2
ξ3
in extracting from the volume metrics only the “surface
 metrics” associatedwith the LGL points
(1D)
(1D)
located at the interface of the two cells. Similarly, eN eT
⊗ Pξ3
extracts the shared
1 ⊗ Pξ2
surface metrics terms from the κ0 element. Expression (13) simplifies to the well-known formula
[27]
(I)
SATκ,f


3
  ∂ξ  
1 −1 X
(1D)
(1D)
l
T
=+ P
am
eN eN ⊗ Pξ2 ⊗ Pξ3
J
uκ
2
∂xm κ
m=1

3
  ∂ξ  
1 −1 X
(1D)
(1D)
l
T
− P
am
eN e1 ⊗ Pξ2 ⊗ Pξ3
J
uκ0 .
2
∂xm κ0

(14)

m=1

(I)

In this work, the convective term SATκ,f is instead constructed by using two different set of

8

metrics
(I)
SATκ,f

3
X

  ∂ξ  
l
=+ P
uκ
am
⊗
⊗
J
∂xm κ
m=1

3
  ∂ξ  
X
1
(1D)
(1D)
l
J
uκ
− P−1
am
eN eT
⊗
P
⊗
P
N
ξ2
ξ3
2
∂xm κ
m=1

3
  ∂ξ  
1 −1 X
(1D)
(1D)
l
T
− P
J
uκ0 ,
am
eN e1 ⊗ Pξ2 ⊗ Pξ3
2
∂xm κ0
−1



eN eT
N

(1D)
Pξ2

(1D)
Pξ3

(15)

m=1

where the red metric terms are the analytic metrics, i.e., the metrics computed by differentiating
the inverse of the mapping (1). Thus, the discretization of the κ element with the inviscid SAT
contribution coming only from the shared vertical interface reads






3
∂ξl
duκ 1 X
∂ξl
Jκ
+
am Dξl J
+ J
Dξ uκ =
dt
2
∂xm κ
∂xm κ l
l,m=1

+ P

3
X

−1

1
− P−1
2
1
− P−1
2

m=1
3
X
m=1
3
X

am
am
am







eN eT
N

⊗

(1D)
Pξ2

(1D)

eN eT
N ⊗ Pξ2

(1D)

eN eT
1 ⊗ Pξ2

⊗

(1D)
Pξ3

(1D)

⊗ Pξ3

(1D)

⊗ Pξ3

m=1





∂ξl
J
∂xm

 

∂ξl
J
∂xm

 

uκ
κ

(16)
uκ

κ

  ∂ξ  
l
uκ0 .
J
∂xm κ0

Further details on how to compute the blue metric terms will be presented in the Section 3.3.
3.2. Review of the coupling procedure for the convection-diffusion equation
In contrast to the metrics for the inviscid terms, the metrics used for the viscous terms need only
be, at worst, consistent and design order approximations. Herein, we use the analytic metrics for
the viscous terms calculation. To make the presentation easier and to introduce the discretization
that will later be used for the viscous portion of the compressible Navier–Stokes equations, the
inviscid term is lumped into I (I) while the viscous terms are simplified. Thus, Equation (8) reduces
to
J

3

X
∂U
∂ ˆ
+ I (I) =
Cl,a Θa ,
∂t
∂ξl
l,a=1

Cˆl,a =

3
X
m=1

∂ξl ∂ξa
J
bm ,
∂xm ∂xm

(17)
∂U
Θa =
.
∂ξa

A local discontinuous Galerkin (LDG) and interior penalty approach (IP) approach are used (see
references [6, 26, 27]). In the LDG approach, the discretization of the viscous terms in Equation
(17) proceeds in two steps. First, the gradients Θa are discretized, then the derivatives of the
viscous fluxes are discretized. Notice that all the metric terms are contained in Cˆl,a , and therefore
9

the critical requirement for stability is to use an SBP operator [6, 16, 27]. Plugging everything
together, the final discretization reads
3
h i
X
duκ
(I)
Jκ
+ Iκ =
Dξl Cˆl,a θaκ + SATκ(I) + SATκ(V ) ,
dt
κ

θaκ = Dξa uκ + SATκθ ,

(18)

l,a=1

(I)

where the inviscid contributions are contained in Iκ , while SATκθ contains
h ithe LDG penalty on the
gradient of the entropy variables [27]. The viscous coefficient matrices Cˆl,a have been highlighted
κ
in red to emphasize that they are computed using the analytic metrics. However, any other design
order choice would suffice. The proposed discretization of the viscous terms telescopes the viscous
fluxes to the boundary and adds a dissipative term [27]. Thus, it mimics the continuous energy
analysis, and leads to a provably energy stable discretization, provided appropriate boundary SATs
are used.
3.3. Metric solution mechanics
Here we demonstrate the proposed approach for the approximation of the metric terms, and
we consider the discrete GCL conditions (10) associated with Equation (16). By construction, the
analytic metric terms are continuous at the interface of the two elements because the curvilinear
coordinate transformation (1) is water-tight (see Assumption 1). Thus the GCL constraints read
3
X




  ∂ξ  
∂ξl
(1D)
(1D)
l
T
1κ = +
eN eN ⊗ Pξ2 ⊗ Pξ3
1κ
P
Dξl J
J
∂xm κ
∂xm κ
l=1

  ∂ξ  
(1D)
(1D)
l
T
−
eN e1 ⊗ Pξ2 ⊗ Pξ3
J
1κ ,
∂xm κ0

(19)

m = 1, 2, 3.
Equation (19) can be algebraically manipulated into a form that is more convenient for constructing a solution procedure for the metric terms. Multiplying Equation (19) by −1, using the
(1D)

SBP property Qξl
3
X
l=1

QT
ξl



(1D) T

= −Qξl

∂ξl
J
∂xm

(1D)


1κ =

(1D)

+ Eξl


κ

(1D)

(1D)

, and by canceling common terms, we arrive at

eN eT
1

⊗

(1D)
Pξ2

⊗

(1D)

(1D)
Pξ3

(1D)



∂ξl
J
∂xm
(1D)

 
1κ ,

m = 1, 2, 3,

(20)

κ0
(1D)

(1D)

(1D)

where Qξ1 = Qξ1 ⊗ Pξ2 ⊗ Pξ3 , Qξ2 = Pξ1 ⊗ Qξ2 ⊗ Pξ3 , Qξ3 = Pξ1 ⊗ Pξ2 ⊗ Qξ3 .
A close examination of (20) shows that the GCL constraints form a highly under-determined
system for the unknown metric terms on the left-hand side. Our strategy consists of solving a
strictly convex quadratic optimization problem that minimizes the difference between the numerical
and analytic volume metrics [9]:
1
(am − am,target )T (am − am,target ) ,
2
m = 1, 2, 3,
min
am

10

subject to Mam = cm ,

(21)

where am is a vector of size 3Nκ containing the optimized metrics, i.e.,

 
 
 
∂ξ1
∂ξ2
∂ξ3
T
T
J
(am ) = 1
, J
, J
∂xm κ
∂xm κ
∂xm κ
and am,target are the targeted, analytical metrics, i.e.

 
 
 
∂ξ1
∂ξ2
∂ξ3
T
T
J
.
(am,target ) = 1
, J
, J
∂xm κ
∂xm κ
∂xm κ
The constraints Mam = cm are simply the discrete GCL conditions (20). Specifically, the
matrix M is of size Nκ × 3Nκ , and it is defined as


T
T
(22)
M = QT
ξ1 , Qξ2 , Qξ3 ,
while the right-hand side data for the constrained equations, cm , is a vector of size Nκ defined as

  ∂ξ  
1 
(1D)
(1D)
l
T
cm =
J
1κ .
(23)
eN e1 ⊗ Pξ2 ⊗ Pξ3
2
∂xm κ0
The optimal solution of the constrained minimization problem is given by (see Proposition 1 in [9])

(24)
am = am,target − M † Mam,target − cm ,
with M † the Moore-Penrose pseudo-inverse of M.
4. Discretization of the compressible Navier–Stokes equations
In this section, the algorithm for the convection-diffusion equation presented in the previous
section is applied to the compressible Navier–Stokes equations with conforming interfaces. These
equations in Cartesian coordinates read
3
3
(I)
(V )
X
∂F xm
∂Q X ∂F xm
+
=
,
∂t
∂xm
∂xm
m=1

Q (x1 , x2 , x3 , t) = G

∀ (x1 , x2 , x3 ) ∈ Ω,

t ≥ 0,

(x1 , x2 , x3 , t) , ∀ (x1 , x2 , x3 ) ∈ Γ,

t ≥ 0,

m=1
(B)

Q (x1 , x2 , x3 , 0) = G (0) (x1 , x2 , x3 ) ,
(I)

(25)

∀ (x1 , x2 , x3 ) ∈ Ω,

(V )

where the vectors Q, F xm and F xm denote the conserved variables, the inviscid fluxes, and the
viscous fluxes, respectively. The boundary data, G (B) , and the initial condition, G (0) , are assumed
to be in L2 (Ω), with the further assumption that G (B) will be set to coincide with linear, well-posed
boundary conditions, prescribed in such a way that either entropy conservation or entropy stability
is achieved.
The vector of conserved variables is given by
Q = [ρ, ρU1 , ρU2 , ρU3 , ρE]T ,
where ρ denotes the density, U = [U1 , U2 , U3 ]T is the velocity vector, and E is the specific total
energy. The inviscid fluxes are given as
T
F (I)
xm = [ρUm , ρUm U1 + δm,1 P, ρUm U2 + δm,2 P, ρUm U3 + δm,3 P, ρUm H] ,

11

where P is the pressure, H is the specific total enthalpy and δi,j is the Kronecker delta.
The required constituent relations are
1
H = cP T + U T U ,
2

P = ρRT ,

R=

Ru
,
Mw

where T is the temperature, Ru is the universal gas constant, Mw is the molecular weight of the
gas, and cP is the specific heat capacity at constant pressure. Finally, the specific thermodynamic
entropy is given as




cp
R
ρ
T
s=
− R log
, γ=
log
,
γ−1
T∞
ρ∞
cp − R
where T∞ and ρ∞ are the reference temperature and density, respectively (the stipulated convention
has been broken here and s has been used rather than S for reasons that will be clear next).
(V )
The viscous fluxes F xm are given by
"
)
F (V
xm = 0, τ1,m , τ2,m , τ3,m ,

3
X
i=1

∂T
τi,m Ui − κ
∂xm

#T
,

(26)

while the viscous stresses are defined as
3

τi,j = µ

∂Uj
2 X ∂Un
∂Ui
+
− δi,j
∂xj
∂xi
3
∂xn

!
,

(27)

n=1

where µ(T ) is the dynamic viscosity and κ(T ) is the thermal conductivity.
The compressible Navier–Stokes equations given in (29) have a convex extension, that when
integrated over the physical domain, Ω, depends only on the boundary data and negative semidefinite dissipation terms. This convex extension depends on an entropy function, S, that is
constructed from the thermodynamic entropy as
S = −ρs,
and provides a mechanism for proving stability in the L2 norm. The entropy variables W are an
alternative variable set related to the conservative variables via a one-to-one mapping. They are
defined in terms of the entropy function S by the relation W T = ∂S/∂Q and they are extensively
used in the entropy stability proofs of the algorithms used herein; see for instance [5, 14, 19, 26]. In
addition, they simultaneously symmetrize the inviscid and the viscous flux Jacobians in all three
spatial directions. Further details on continuous entropy analysis are available elsewhere [6, 10, 28].
The entropy stability for the viscous terms in the compressible Navier–Stokes equations (29)
is readily demonstrated by exploiting the symmetrizing properties of the entropy variables. Thus,
we recast the viscous fluxes in terms of the entropy variables
)
F (V
x=

3
X

Cm,j

j=1

∂W
,
∂xj

with the flux Jacobian matrices satisfying Cm,j = (Cj,m )T .
12

(28)

Furthermore, in order to apply the algorithm outlined for the convection-diffusion case (18) to
the compressible Navier–Stokes equations, we have to recast system (25) in a skew-symmetric form
with respect to the metric terms. This procedure results in




3
3
(I)
X
X
1 ∂ξl ∂F xm
∂ξl (I)
∂ξl (V )
∂Q
1 ∂
∂
+ J
J
F
J
F
J
+
=
,
(29)
∂t
2 ∂ξl
∂xm xm
2 ∂xm ∂ξl
∂ξl
∂xm xm
l,m=1

l,m=1

where the GCL relations given in (5) are used to obtain (30) from the divergence form (25).
Substituting (28) into (29), we arrive at the system of equations




3
3
X
X
∂Q
∂ξl
1 ∂
∂
1 ∂ξl ∂F xm
∂W
J
J
F xl + J
,
+
=
Ĉl,a
(30)
∂t
2 ∂ξl
∂xm
2 ∂xm ∂ξl
∂ξl
∂ξa
l,m=1

l,a=1

where
Ĉl,a = J

3
∂ξl X
∂ξa
.
Cm,j
∂xm
∂xj

(31)

m,j=1

The symmetric properties of the viscous flux Jacobians are preserved by the rotation into curvilinear
T
coordinates, i.e. Ĉl,a = (Ĉa,l ) . We remark that this form of the equations, i.e. skew-symmetric
form plus the quadratic form of the viscous terms, is necessary for the construction of the entropy
stable schemes used in this work. For further details on the derivation of these viscous coefficient
matrices see [17, 28].
Without loss of generality, as was done for the linear convection-diffusion equation, we consider
only the coupling SAT terms for one shared interface. Thus, the discretization of the compressible
Euler equations, i.e., the inviscid part of (30), is given by





3 
dqκ 1 X
∂ξl
∂ξm
Jκ
+
Dξ l J
Dξl ◦ Fxm (qκ , qκ ) 1κ =
+ J
dt
2
∂xm κ
∂xl κ
l,m=1

3
X

 
∂ξl
+ P
⊗
◦ Fxm (qκ , qκ ) 1κ
⊗
⊗ I5 J
∂xm κ
m=1
3 
  ∂ξ  
1 −1 X 
(1D)
(1D)
l
T
eN eN ⊗ Pξ2 ⊗ Pξ3 ⊗ I5 J
− P
◦ Fxm (qκ , qκ0 ) 1κ
2
∂xm κ
m=1
3 
  ∂ξ  
1 −1 X 
(1D)
(1D)
l
T
eN e1 ⊗ Pξ2 ⊗ Pξ3 ⊗ I5 J
◦ Fxm (qκ , qκ0 ) 1κ ,
− P
2
∂xm κ0
−1



eN eT
N

(1D)
Pξ2

(1D)
Pξ3



(32)

m=1

where the symbol ◦ indicates the Hadamard product, and Fxm (·, ·) is a two argument matrix flux
function which is constructed from a two point entropy conservative flux function (see, for instance,
[16]). The Hadamard formalism is capable of compactly representing various split forms, and more
importantly, extends to nonlinear equations for which a canonical split form is inappropriate. It is
used in the construction of entropy conservative/stable discretizations which are used herein.
Next, recasting the viscous fluxes in terms of entropy variables as shown in (28) yields the
following form for the discretization of the divergence of the viscous fluxes


3
3
h i
X
X
∂W
∂
ˆ
Cl,a
≈
Dξl Cˆl,a θaκ ,
θaκ = Dξa wκ .
(33)
∂ξl
∂ξa
l,a=1

l,a=1

13

Note that Equation (33) is precisely the symmetric generalization of the convection-diffusion operator to a viscous system.
The discretization on the κth element reads
3
h i
X
dqκ
(E)
Jκ
+ Iκ =
Dξa Cˆl,a θaκ + SATκ(I) + SATκ(V ) + IPκ ,
dt

θaκ = Dξa wκ + SATκθ ,

(34)

l,a=1

(E)

where Iκ represents the discretization of the divergence of the inviscid fluxes and the interior
penalty term, IPκ , adds interface dissipation [27]. This term is a design-order zero interface dissipation term that is constructed to damp neutrally stable “odd-even” eigenmodes that arise from the
LDG viscous operator. Scheme (34) telescopes to the boundaries where appropriate SATs need to
be imposed to obtain a stability statement [6, 26, 27].
5. Numerical results
Herein, the conforming [5, 7, 26, 29] and p-adaptive solver [12, 13, 16] for unstructured grids
developed at the Extreme Computing Research Center (ECRC) at KAUST is used to perform
numerical experiments. This parallel solver is built on top of the Portable and Extensible Toolkit
for Scientific computing (PETSc) [3], its mesh topology abstraction (DMPLEX) [25] and scalable
ordinary differential equation (ODE)/differential algebraic equations (DAE) solver library [2]. The
systems of ordinary differential equations arising from the spatial discretizations are integrated
using the fourth-order accurate Bogacki–Shampine method [4] endowed with an adaptive time
stepping technique based on digital signal processing [32, 33]. To make the temporal error negligible, a tolerance of 10−8 is always used for the time-step adaptivity. The two-point entropy
consistent flux of Chandrashekar [8] is used for all the test cases.
The errors are computed using a volume scaled L2 discrete norm as follows:
kuk2L2 = Ω−1
c

K
X

uκ PJκ uκ ,

κ=1

where Ωc indicates the volume of Ω computed as Ωc =

K
P
κ=1

1T
κ PJκ 1κ .

We study the L2 norm of the error in the primitive variables (density, velocity components,
and temperature) considering two test cases having analytical solution, and using two different
computational domains discretized with geometrically high order grids.
5.1. Isentropic vortex
In this section, we report on the numerical results for the propagation of an isentropic vortex
by solving the three-dimensional compressible Euler equations. The analytical solution of this

14

problem is
n
o
G = 1 − [(x1 − x1,0 ) − U∞ cos (α) t]2 + [(x2 − x2,0 ) − U∞ sin (α) t]2 ,


1
2 γ−1
ρ = T γ−1 , T = 1 − 2ν M∞
exp
(G)
,
8π 2
 
(x2 − x2,0 ) − U∞ sin (α) t
G
,
exp
U1 = U∞ cos(α) − ν
2π
2
 
(x1 − x1,0 ) − U∞ cos (α) t
G
U2 = U∞ sin(α) − ν
exp
,
2π
2
U3 = 1,

(35)

where U∞ is the modulus of the free-stream velocity, M∞ is the free-stream Mach number, c∞ is
the free-stream speed of sound, and (x1,0 , x2,0 , x3,0 ) is the vortex center. The following values are
◦
used: U∞ = M∞ c∞ , ν = 5, M∞ = 0.5, γ = 1.4, α = 45 , and (x1,0 , x2,0 , x3,0 ) = (0, 0, 0). The
initial condition is given by (35) with t = 0.
5.1.1. Cubic domain with geometrically high order perturbed cells
The physical domain is [−1, 1]3 , uniformly subdivided into 27 hexahedrons. We first collocate
the LGL points in physical coordinates by an affine mapping of the reference element. These
physical nodal coordinates, denoted by xi,∗ , are then perturbed as
η
cos (a) cos (3b) sin (4c) ,
15
η
x2 = x2,∗ + 2 sin (4a) cos (b) cos (3c) ,
15
η
x3 = x3,∗ + 2 cos (3a) sin (4b) cos (c) ,
15

x1 = x1,∗ + 2

where a = π2 x1,∗ , b = π2 x2,∗ , and c = π2 x3,∗ , while η is a positive perturbation parameter 0 ≤ η ≤ 1.
Figure 3a shows a cut of the mesh for η = 1.
In Table 1, we report the ratio of the L2 norm of the errors of the primitive variables computed
using the metrics of Thomas and Lombard [35] and the optimization algorithm presented herein.
Solution polynomials of degree p = 1, 2, 3, 4, 7, 15 and four values of the perturbation parameter,
i.e., η = 0.25, 0.5, 0.75, 1, are considered. The numbers highlighted in green indicate that the
ratio of the error norm is equal to or greater than one, i.e., for that specific primitive variable the
solution computed with the optimized metric terms is more accurate than that obtained by using
the metrics of Thomas and Lombard [35].
We observe that 95% of the ratios are equal to or greater than one with some cases where the
error is reduced by a factor greater than 2.5. For the cases where the ratio is highlighted in red,
the maximum deviation from one is approximately 0.05%. Furthermore, we note that the ratio of
the two error norms converges to one when increasing the degree of the solution polynomial.
5.1.2. Cubic domain with a spherical hole and geometrically high-order cells
In this section, we present the results for the propagation of the isentropic vortex in a cubic
domain [−1, 1]3 with a spherical hole of radius 0.5 placed at the center. The domain is approximated
with a mesh consisting of 48 hexahedrons; a cut of the mesh is detailed in Figure 4.
15

(a) Sample of the grid.

(b) Density of the isentropic vortex at t = 0.

Figure 3: Cubic domain with geometrically high order perturbed cells.

Figure 4: Cubic domain with a spherical hole and curved cells

16

U1

ρ
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.000
1.291
2.821
2.916
1.346
1.047
1.015

0.5
1.000
1.557
2.570
2.343
1.111
1.013
1.000

0.75
1.000
1.606
2.137
1.882
1.051
1.003
1.000

1.0
1.000
1.534
1.796
1.582
1.026
0.998
1.000

η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

(a) Density.

0.25
1.000
1.485
1.829
1.583
1.044
1.009
1.001

0.5
1.000
1.849
1.775
1.319
1.034
1.006
1.000

0.25
1.000
1.543
1.822
1.974
1.056
1.017
0.999

0.5
1.000
2.027
1.807
1.556
1.038
1.005
0.999

1.0
1.000
1.721
1.444
1.162
1.019
0.996
1.000

(b) Velocity component in x1 .

U2
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.75
1.000
1.835
1.578
1.207
1.031
1.001
1.000

U3
0.75
1.000
2.078
1.602
1.333
1.025
0.998
1.000

1.0
1.000
1.966
1.436
1.232
1.017
0.995
1.000

η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

(c) Velocity component in x2 .

0.25
1.000
1.365
2.228
2.212
1.194
1.032
1.000

0.5
1.000
1.420
1.850
1.682
1.074
1.010
1.000

0.75
1.000
1.271
1.560
1.380
1.043
1.001
1.000

1.0
1.000
1.130
1.391
1.217
1.026
0.997
1.000

(d) Velocity component in x3 .

T
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.000
1.237
2.364
2.281
1.299
1.033
1.005

0.5
1.000
1.473
2.434
1.989
1.098
1.010
1.000

0.75
1.000
1.547
2.150
1.691
1.047
1.003
1.000

1.0
1.000
1.528
1.893
1.478
1.026
1.000
1.000

(e) Temperature.
Table 1: Ratio of the L2 -norm of the errors (Thomas and Lombard [35] vs. optimized): propagation of the
isentropic vortex in a cubic domain with geometrically high order perturbed cells.

17

In Table 2, we report the ratio of the L2 norm of the errors at a final time tf = 1 using solution
polynomials of degree p = 2, 3, 4, 7, 9. Both interior and boundary faces describing the spherical
geometry are approximated with polynomials of the same order. We observe that 92% of the ratios
are equal to or greater than one. In this case, where the mesh is less distorted, the maximum
improvement is approximately 10%. The ratios highlighted in red deviate from one by at most
0.01%.
p=2
p=3
p=4
p=7
p=9

ρ
1.094
1.018
1.057
1.041
1.029

U1
0.999
1.019
1.002
1.014
1.011

U2
0.999
1.019
1.002
1.014
1.011

U3
1.139
1.007
1.028
1.039
1.017

T
1.093
1.024
1.016
1.023
1.022

Table 2: Ratio of the L2 -norm of the errors (Thomas and Lombard [35] vs. optimized): propagation of the
isentropic vortex in a cubic domain with a spherical hole and geometrically high order cells.

5.2. Viscous shock
Next, we study the propagation of a viscous shock using the compressible Navier–Stokes equations. We assume a planar shock propagating along the x1 coordinate direction with a Prandtl
number of P r = 3/4. The exact solution of this problem is known; the momentum V(x1 ) satisfies
the ordinary differential equation
αV

∂V
− (V − 1)(V − Vf ) = 0,
∂x1

−∞ ≤ x1 ≤ +∞.

Assuming that the center of the viscous shock is located at x1 = 0, the implicit solution of the
former equation is


1 + Vf
1
V(x1 ) − 1
x1 − α log |(V(x1 ) − 1)(V(x1 ) − Vf )| +
log
= 0,
(36)
2
1 − Vf
V(x1 ) − Vf
where

2γ
µ
UL
,
α=
.
(37)
UR
γ + 1 P rṀ
Here UL/R are known velocities to the left and right of the shock at −∞ and +∞, respectively,
Ṁ is the constant mass flow across the shock, P r is the Prandtl number, and µ is the dynamic
viscosity. The mass and total enthalpy are constant across the shock, and the momentum and
energy equations become redundant.
For our tests, V is computed from Equation (36) to machine precision using bisection. The
moving shock solution is obtained by applying a uniform translation to the above solution. The
shock is located at the center of the domain at t = 0, and the following values are used: M∞ = 2.5,
Re∞ = 10, and γ = 1.4. The boundary conditions are prescribed by penalizing the numerical
solution against the exact solution. The analytical solution is also used to furnish data for the
initial conditions.
We investigate the L2 norm of the error for the same meshes discussed for the isentropic vortex
configurations; the simulations are stopped at a final time tf = 5.
Vf =

18

5.2.1. Cubic domain with geometrically high order perturbed cells
We consider solution polynomials of degree p = 1, 2, 3, 4, 7, 15 and four values of the perturbation
parameter, i.e., η = 0.25, 0.5, 0.75, 1. In Table 3, we report the ratio of the L2 norm of the
errors of the primitive variables computed using the metrics of Thomas and Lombard [35] and the
optimization algorithm presented herein. We observe that 80% of the ratios are equal to or greater
than one, where in some cases the improvement is more than 40%. For the cases where the ratio is
highlighted in red, the maximum deviation from one is approximately 1.6%. Furthermore, we note
that by increasing the degree of the solution polynomial the ratio of the two error norms converges
to one.
U1

ρ
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.000
1.213
1.027
1.050
0.996
1.000
1.000

0.5
1.000
1.536
1.055
1.072
0.995
1.000
1.000

0.75
1.000
1.776
1.078
1.058
0.996
1.000
1.000

1.0
1.000
1.951
1.098
1.032
0.999
1.000
1.000

η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.000
1.187
1.034
1.098
0.992
0.998
1.000

(a)

0.5
1.000
1.418
1.054
1.121
0.986
0.998
1.000

0.25
1.000
1.187
1.034
1.098
0.992
0.998
1.000

0.5
1.000
1.418
1.054
1.121
0.986
0.998
1.000

1.0
1.000
1.623
1.067
1.098
0.985
0.999
1.000

0.75
1.000
1.546
1.059
1.114
0.984
0.998
1.000

1.0
1.000
1.623
1.067
1.098
0.985
0.999
1.000

(b)

U2
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.75
1.000
1.546
1.059
1.114
0.984
0.998
1.000

U3
0.75
1.000
1.546
1.059
1.114
0.984
0.998
1.000

1.0
1.000
1.623
1.067
1.098
0.985
0.999
1.000

η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.000
1.187
1.034
1.098
0.992
0.998
1.000

(c)

0.5
1.000
1.418
1.054
1.121
0.986
0.998
1.000
(d)

T
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.000
1.227
1.105
1.203
0.996
1.002
1.000

0.5
1.000
1.467
1.182
1.208
1.011
1.006
1.000

0.75
1.000
1.568
1.226
1.184
1.020
1.006
1.000

1.0
1.000
1.633
1.262
1.161
1.023
1.005
1.000

(e)
Table 3: Ratio of the L2 -norm of the errors (Thomas and Lombard [35] vs. optimized): propagation of the viscous
shock in a cubic domain with geometrically high order perturbed cells.

19

5.2.2. Cubic domain with a spherical hole and geometrically high order cells
In Table 4, we report the ratio of the L2 norm of the errors of the primitive variables. Solution
polynomials of degree p = 2, 3, 4, 7, 9 are used. Boundary faces describing the spherical geometry
as well as internal curved interfaces are approximated with polynomials of degree p. We observe
that 70% of the ratios are equal to or greater than one with a maximum gain of 5% for the solution
computed with the optimized metrics. The ratio highlighted in red has a maximum deviation from
one of just 1.9%.
p=2
p=3
p=4
p=7
p=9

ρ
1.013
1.000
1.001
1.000
1.000

U1
0.981
0.997
1.000
1.000
1.000

U2
0.981
0.997
1.000
1.000
1.000

U3
0.981
0.997
1.000
1.000
1.000

T
1.047
0.996
1.005
1.000
1.000

Table 4: Ratio of the L2 norm of the errors (Thomas and Lombard [35] vs. optimized): propagation of the viscous
shock in a cubic domain with a spherical hole and geometrically high order cells.

6. Conclusion
We numerically show that optimizing the metric terms as proposed in [12, 14, 16] lead, even
for conforming interfaces, to a solution whose accuracy is practically never worse and often noticeably better than the one obtained using the widely adopted Thomas and Lombard metric terms
computation [35]. We also observed that by increasing the degree of the solution polynomial, the
ratio of the two error norms converges to one. This indicates that the benefits of optimizing the
metric terms decrease by increasing the solution polynomial degree of the spatial approximation.
We conclude that the pre-processing step of optimizing the metric terms can then be used in a
computational framework as a unique and viable approach for conforming and h/p non-conforming
interfaces. In addition, this choice greatly simplifies the solver and allows important code reutilization. Investigating the effect of the optimized metrics on other important systems of PDEs
is a future research direction.
Acknowledgments
The research reported in this paper was funded by King Abdullah University of Science and
Technology. We are thankful for the computing resources of the Supercomputing Laboratory and
the Extreme Computing Research Center at King Abdullah University of Science and Technology.
[1] R. Abgrall and M. Ricchiuto, High order methods for CFD, in Encyclopedia of Computational Mechanics,
John Wiley & Sons, Ltd, 2017.
[2] S. Abhyankar, J. Brown, E. M. Constantinescu, D. Ghosh, B. F. Smith, and H. Zhang, PETSc/TS:
A modern scalable ODE/DAE solver library, arXiv preprint arXiv:1806.01437, (2018).
[3] S. Balay, S. Abhyankar, M. F. Adams, J. Brown, P. Brune, K. Buschelman, L. Dalcin, A. Dener,
V. Eijkhout, W. D. Gropp, D. Karpeyev, D. Kaushik, M. G. Knepley, D. A. May, L. C. McInnes,
R. T. Mills, T. Munson, K. Rupp, P. Sanan, B. F. Smith, S. Zampini, H. Zhang, and H. Zhang, PETSc
users manual, Tech. Rep. ANL-95/11 - Revision 3.11, Argonne National Laboratory, 2019.

20

[4] P. Bogacki and L. Shampine, A 3(2) pair of runge - kutta formulas, Applied Mathematics Letters, 2 (1989),
pp. 321 – 325.
[5] M. Carpenter, T. Fisher, E. Nielsen, and S. Frankel, Entropy stable spectral collocation schemes for the
Navier–Stokes equations: Discontinuous interfaces, SIAM Journal on Scientific Computing, 36 (2014), pp. B835–
B867.
[6] M. H. Carpenter, M. Parsani, T. C. Fisher, and E. J. Nielsen, Entropy stable staggered grid spectral
collocation for the Burgers’ and the compressible Navier–Stokes equations, NASA TM-2015-218990, (2015).
[7] M. H. Carpenter, M. Parsani, E. J. Nielsen, and T. C. Fisher, Towards an entropy stable spectral
element framework for computational fluid dynamics, in 54th AIAA Aerospace Sciences Meeting, AIAA 20161058, American Institute of Aeronautics and Astronautics (AIAA), 2016.
[8] P. Chandrashekar, Kinetic energy preserving and entropy stable finite volume schemes for compressible Euler
and Navier–Stokes equations, Communications in Computational Physics, 14 (2013), pp. 1252–1286.
[9] J. Crean, J. E. Hicken, D. C. D. R. Fernández, D. W. Zingg, and M. H. Carpenter, Entropy-stable
summation-by-parts discretization of the Euler equations on general curved elements, Journal of Computational
Physics, 356 (2018), pp. 410 – 438.
[10] C. M. Dafermos, Hyperbolic conservation laws in continuum physics, Springer-Verlag, Berlin, 2010.
[11] D. C. Del Rey Fernández, P. D. Boom, and D. W. Zingg, A generalized framework for nodal first derivative
summation-by-parts operators, Journal of Computational Physics, 266 (2014), pp. 214–239.
[12] D. C. Del Rey Fernández, M. H. Carpenter, L. Dalcin, L. Fredrich, A. R. Winters, G. J. Gassner,
S. Zampini, and M. Parsani, Entropy stable p−nonconforming discretizations with the summation-by-parts
property for the compressible Euler equations, Submitted to SIAM Journal of Scientific Computing, (2019).
[13] D. C. Del Rey Fernández, M. H. Carpenter, L. Dalcin, L. Fredrich, A. R. Winters, G. J. Gassner,
S. Zampini, and M. Parsani, Entropy stable p−nonconforming discretizations with the summation-by-parts
property for the compressible Navier–Stokes equations, Submitted to Computer & Fluids, (2019).
[14] D. C. Del Rey Fernández, M. H. Carpenter, L. Dalcin, S. Zampini, and M. Parsani, Entropy stable
h/p non-conforming discretization with the summation-by-parts property for the compressible Euler and Navier–
Stokes equations, Submitted to SN Partial Differential Equations and Applications (2019).
[15] D. C. Del Rey Fernández, J. E. Hicken, and D. W. Zingg, Review of summation-by-parts operators
with simultaneous approximation terms for the numerical solution of partial differential equations, Computers
& Fluids, 95 (2014), pp. 171–196.
[16] D. C. Fernández, M. H. Carpenter, L. Dalcin, L. Fredrich, D. Rojas, A. R. Winters, G. J. Gassner,
S. Zampini, and M. Parsani, Entropy stable non-conforming discretizations with the summation-by-parts property for curvilinear coordinates, NASA TM-2019-, (2019).
[17] T. C. Fisher, High-order L2 stable multi-domain finite difference method for compressible flows, PhD thesis,
Purdue University, 2012.
[18] T. C. Fisher and M. H. Carpenter, High-order entropy stable finite difference schemes for nonlinear conservation laws: finite domains, Journal of Computational Physics, 252 (2013), pp. 518–557.
[19] L. Friedrich, A. R. Winters, D. C. Del Rey Fernández, G. J. Gassner, M. Parsani, and M. H.
Carpenter, An entropy stable h/p non-conforming discontinuous Galerkin method with the summation-byparts property, Journal of Scientific Computing, 77 (2018).
[20] G. J. Gassner, A. R. Winters, and D. A. Kopriva, Split form nodal discontinuous Galerkin schemes
with summation-by-parts property for the compressible Euler equations, Journal of Computational Physics, 327
(2016), pp. 39–66.
[21] G. J. Gassner, A. R. Winters, and D. A. Kopriva, A well balanced and entropy conservative discontinuous
Galerkin spectral element method for the shallow water equations, Applied Mathematics and Computation, 272
(2016), pp. 291 – 308. Recent Advances in Numerical Methods for Hyperbolic Partial Differential Equations.
[22] J. S. Hesthaven and T. Warburton, Nodal discontinuous Galerkin methods: Algorithms, analysis, and
applications, Texts in Applied Mathematics, Springer, 2008.
[23] C. Hirsch, Numerical computation of internal and external flows. Vol. 2 - Computational methods for inviscid
and viscous flows, 1990.
[24] H. Huynh, Z. Wang, and P. Vincent, High-order methods for computational fluid dynamics: A brief review
of compact differential formulations on unstructured grids, Computers & Fluids, 98 (2014), pp. 209 – 220.
[25] M. G. Knepley and D. A. Karpeev, Mesh algorithms for PDE with Sieve I: Mesh distribution, Scientific
Programming, 17 (2009), pp. 215–230.
[26] M. Parsani, M. Carpenter, T. Fisher, and E. Nielsen, Entropy stable staggered grid discontinuous spectral
collocation methods of any order for the compressible Navier–Stokes equations, SIAM Journal on Scientific

21

Computing, 38 (2016), pp. A3129–A3162.
[27] M. Parsani, M. H. Carpenter, and E. J. Nielsen, Entropy stable discontinuous interfaces coupling for
the three-dimensional compressible Navier–Stokes equations, Journal of Computational Physics, 290 (2015),
pp. 132–138.
[28]
, Entropy stable wall boundary conditions for the three-dimensional compressible Navier–Stokes equations,
Journal of Computational Physics, 292 (2015), pp. 88–113.
[29] M. Parsani, M. H. Carpenter, and E. J. Nielsen, Entropy stable wall boundary conditions for the threedimensional compressible Navier–Stokes equations, Journal of Computational Physics, 292 (2015), pp. 88–113.
[30] W. Pazner and P.-O. Persson, Analysis and entropy stability of the line-based discontinuous Galerkin method,
Journal of Scientific Computing, 80 (2019), pp. 376–402.
[31] D. Rojas, R. Boukharfane, L. Dalcin, D. C. Del Rey Fernández, H. Ranocha, D. E. Keyes, and
M. Parsani, On the robustness and performance of entropy stable discontinuous collocation methods for the
compressible navie-stokes equations, (2019). Submitted to Journal of Computational Physics.
[32] G. Söderlind, Digital filters in adaptive time-stepping, ACM Transactions on Mathematical Software, 29
(2003), pp. 1–26.
[33] G. Söderlind and L. Wang, Adaptive time-stepping and computational stability, Journal of Computational
and Applied Mathematics, 185 (2006), pp. 225–243.
[34] M. Svärd and J. Nordström, Review of summation-by-parts schemes for initial-boundary-value-problems,
Journal of Computational Physics, 268 (2014), pp. 17–38.
[35] P. D. Thomas and C. K. Lombard, Geometric conservation law and its application to flow computations on
moving grids, AIAA Journal, 17 (1979), pp. 1030–1037.
[36] J. F. Thompson, Z. U. Warsi, and C. W. Mastin, Boundary-fitted coordinate systems for numerical solution
of partial differential equations - a review, Journal of Computational Physics, 47 (1982), pp. 1 – 108.
[37] M. Vinokur, Conservation equations of gasdynamics in curvilinear coordinate systems, Journal of Computational Physics, 14 (1974), pp. 105 – 125.
[38] M. Vinokur, An analysis of finite-difference and finite-volume formulations of conservation laws, Journal of
Computational Physics, 81 (1989), pp. 1 – 52.
[39] M. Vinokur and H. C. Yee, Extension of efficient low dissipation high order schemes for 3-d curvilinear
moving grids, in Frontiers of Computational Fluid Dynamics, D. A. Caughey and M. Hafez, eds., World Scientific
Publishing Company, 2002, pp. 129–164.
[40] Z. Wang, K. Fidkowski, R. Abgrall, F. Bassi, D. Caraeni, A. Cary, H. Deconinck, R. Hartmann,
K. Hillewaert, H. Huynh, N. Kroll, G. May, P.-O. Persson, B. Leer, and M. Visbal, High-order
cfd methods: current status and perspective, International Journal for Numerical Methods in Fluids, 72 (2012),
pp. 811–845.
[41] J. Zhu, X. Zhong, C.-W. Shu, and J. Qiu, Runge–kutta discontinuous Galerkin method using a new type of
WENO limiters on unstructured meshes, Journal of Computational Physics, 248 (2013), pp. 200 – 220.

22

ρ
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
6.062e-03
1.210e-03
4.024e-04
1.456e-04
1.381e-06
6.974e-08
1.127e-11

0.5
6.062e-03
1.888e-03
7.994e-04
2.982e-04
4.875e-06
3.724e-07
1.186e-10

0.75
6.062e-03
2.610e-03
1.210e-03
4.683e-04
1.193e-05
1.112e-06
5.584e-10

1.0
6.062e-03
3.313e-03
1.633e-03
6.644e-04
2.398e-05
2.506e-06
1.847e-09

(a) Thomas and Lombard metrics [35].

ρ
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
6.062e-03
9.371e-04
1.427e-04
4.993e-05
1.026e-06
6.660e-08
1.110e-11

0.5
6.062e-03
1.212e-03
3.110e-04
1.273e-04
4.388e-06
3.677e-07
1.186e-10

0.75
6.062e-03
1.625e-03
5.664e-04
2.488e-04
1.135e-05
1.109e-06
5.585e-10

1.0
6.062e-03
2.161e-03
9.097e-04
4.199e-04
2.338e-05
2.511e-06
1.847e-09

(b) Optimized metrics.
Table A.5: L2 error norm of the density: propagation of the isentropic vortex in a cubic domain with geometrically
high order perturbed cells.

AppendixA. L2 norm of the error: Isentropic vortex
AppendixA.1. Cubic domain with geometrically high order perturbed cells

23

U1
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.694e-02
4.635e-03
1.146e-03
3.589e-04
6.144e-06
3.691e-07
2.608e-11

0.5
1.694e-02
7.990e-03
2.393e-03
8.494e-04
2.445e-05
1.673e-06
3.024e-10

0.75
1.694e-02
1.170e-02
4.003e-03
1.563e-03
5.768e-05
4.549e-06
1.685e-09

1.0
1.694e-02
1.562e-02
6.003e-03
2.534e-03
1.117e-04
1.022e-05
6.562e-09

(a) Thomas and Lombard metrics [35].

U1
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.694e-02
3.121e-03
6.269e-04
2.267e-04
5.886e-06
3.659e-07
2.606e-11

0.5
1.694e-02
4.322e-03
1.348e-03
6.441e-04
2.364e-05
1.663e-06
3.024e-10

0.75
1.694e-02
6.376e-03
2.537e-03
1.295e-03
5.597e-05
4.543e-06
1.685e-09

1.0
1.694e-02
9.074e-03
4.156e-03
2.180e-03
1.096e-04
1.027e-05
6.562e-09

(b) Optimized metrics.
Table A.6: L2 error norm of the velocity component in x1 : propagation of the isentropic vortex in a cubic domain
with geometrically high order perturbed cells.

24

U2
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.694e-02
4.731e-03
1.279e-03
4.159e-04
6.125e-06
3.406e-07
4.037e-11

0.5
1.694e-02
8.215e-03
2.590e-03
9.325e-04
2.372e-05
1.738e-06
4.686e-10

0.75
1.694e-02
1.207e-02
4.183e-03
1.638e-03
5.962e-05
5.138e-06
2.518e-09

1.0
1.694e-02
1.614e-02
6.158e-03
2.595e-03
1.215e-04
1.162e-05
9.149e-09

(a) Thomas and Lombard metrics [35].

U2
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.694e-02
3.065e-03
7.021e-04
2.107e-04
5.799e-06
3.349e-07
4.039e-11

0.5
1.694e-02
4.053e-03
1.433e-03
5.995e-04
2.285e-05
1.730e-06
4.689e-10

0.75
1.694e-02
5.807e-03
2.612e-03
1.229e-03
5.818e-05
5.148e-06
2.519e-09

1.0
1.694e-02
8.212e-03
4.287e-03
2.107e-03
1.195e-04
1.168e-05
9.151e-09

(b) Optimized metrics.
Table A.7: L2 error norm of the velocity component in x2 : propagation of the isentropic vortex in a cubic domain
with geometrically high order perturbed cells.

25

U3
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
7.813e-03
2.439e-03
1.272e-03
4.767e-04
5.851e-06
3.187e-07
4.049e-11

0.5
7.813e-03
4.468e-03
2.577e-03
1.009e-03
2.218e-05
1.746e-06
4.332e-10

0.75
7.813e-03
6.427e-03
4.051e-03
1.648e-03
5.467e-05
5.195e-06
2.107e-09

1.0
7.813e-03
8.357e-03
5.800e-03
2.448e-03
1.102e-04
1.180e-05
7.318e-09

(a) Thomas and Lombard metrics [35].

U3
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
7.813e-03
1.786e-03
5.711e-04
2.155e-04
4.900e-06
3.089e-07
4.049e-11

0.5
7.813e-03
3.145e-03
1.393e-03
6.000e-04
2.065e-05
1.729e-06
4.333e-10

0.75
7.813e-03
5.057e-03
2.597e-03
1.195e-03
5.241e-05
5.191e-06
2.107e-09

1.0
7.813e-03
7.393e-03
4.170e-03
2.012e-03
1.073e-04
1.183e-05
7.319e-09

(b) Optimized metrics.
Table A.8: L2 error norm of the velocity component in x3 : propagation of the isentropic vortex in a cubic domain
with geometrically high order perturbed cells.

26

T
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
3.038e-03
5.380e-04
1.838e-04
6.521e-05
6.432e-07
3.623e-08
8.778e-12

0.5
3.038e-03
8.319e-04
3.624e-04
1.342e-04
2.329e-06
1.929e-07
9.668e-11

0.75
3.038e-03
1.181e-03
5.555e-04
2.139e-04
5.680e-06
5.686e-07
4.670e-10

1.0
3.038e-03
1.562e-03
7.683e-04
3.095e-04
1.130e-05
1.277e-06
1.575e-09

(a) Thomas and Lombard metrics [35].

T
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
3.038e-03
4.350e-04
7.775e-05
2.859e-05
4.951e-07
3.506e-08
8.735e-12

0.5
3.038e-03
5.648e-04
1.489e-04
6.747e-05
2.121e-06
1.910e-07
9.668e-11

0.75
3.038e-03
7.632e-04
2.584e-04
1.265e-04
5.425e-06
5.669e-07
4.670e-10

1.0
3.038e-03
1.022e-03
4.058e-04
2.094e-04
1.102e-05
1.278e-06
1.575e-09

(b) Optimized metrics.
Table A.9: L2 error norm of the temperature: propagation of the isentropic vortex in a cubic domain with
geometrically high order perturbed cells.

27

AppendixA.2. Cubic domain with a spherical hole and geometrically high order cells

p=2
p=3
p=4
p=7
p=9

ρ
1.264e-03
1.293e-04
2.193e-05
5.360e-08
1.608e-09

U1
6.661e-03
6.434e-04
1.167e-04
5.091e-07
1.762e-08

U2
6.661e-03
6.434e-04
1.167e-04
5.091e-07
1.762e-08

U3
3.507e-03
6.700e-04
6.360e-05
2.593e-07
7.390e-09

T
5.725e-04
5.397e-05
1.208e-05
2.957e-08
7.782e-10

Table A.10: L2 -norm of the errors for the Thomas and Lombard metrics [35]: propagation of the isentropic vortex
in a cubic domain with a spherical hole and geometrically high order cells.

p=2
p=3
p=4
p=7
p=9

ρ
1.155e-03
1.270e-04
2.074e-05
5.149e-08
1.562e-09

U1
6.665e-03
6.311e-04
1.164e-04
5.019e-07
1.742e-08

U2
6.665e-03
6.311e-04
1.164e-04
5.019e-07
1.742e-08

U3
3.079e-03
6.653e-04
6.187e-05
2.496e-07
7.268e-09

T
5.236e-04
5.268e-05
1.189e-05
2.889e-08
7.614e-10

Table A.11: L2 -norm of the errors for the optimized metrics: propagation of the isentropic vortex in a cubic
domain with a spherical hole and geometrically high order cells.

28

ρ
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
3.795e-02
1.673e-02
4.121e-03
1.956e-03
1.244e-04
2.216e-05
1.393e-07

0.5
3.795e-02
2.486e-02
6.915e-03
3.350e-03
2.699e-04
5.799e-05
6.844e-07

0.75
3.795e-02
3.384e-02
9.867e-03
5.118e-03
4.902e-04
1.192e-04
2.249e-06

1.0
3.795e-02
4.267e-02
1.282e-02
7.082e-03
7.852e-04
2.118e-04
5.832e-06

(a) Thomas and Lombard metrics [35].

ρ
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
3.795e-02
1.380e-02
4.014e-03
1.863e-03
1.249e-04
2.217e-05
1.393e-07

0.5
3.795e-02
1.618e-02
6.554e-03
3.125e-03
2.713e-04
5.800e-05
6.844e-07

0.75
3.795e-02
1.906e-02
9.156e-03
4.840e-03
4.919e-04
1.192e-04
2.249e-06

1.0
3.795e-02
2.187e-02
1.168e-02
6.862e-03
7.860e-04
2.117e-04
5.832e-06

(b) Optimized metrics.
Table B.12: L2 error norm of the density: propagation of the viscous shock in a cubic domain with geometrically
high order perturbed cells.

AppendixB. Numerical results: Viscous shock
AppendixB.1. Cubic domain with geometrically high order perturbed cells

29

U1
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.030e-02
2.406e-03
6.446e-04
2.330e-04
1.023e-05
1.529e-06
6.950e-09

0.5
1.030e-02
3.587e-03
9.659e-04
4.228e-04
2.333e-05
4.296e-06
3.633e-08

0.75
1.030e-02
4.915e-03
1.346e-03
6.496e-04
4.458e-05
9.478e-06
1.228e-07

1.0
1.030e-02
6.335e-03
1.769e-03
9.159e-04
7.568e-05
1.777e-05
3.236e-07

(a) Thomas and Lombard metrics [35].

U1
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.030e-02
2.027e-03
6.236e-04
2.122e-04
1.031e-05
1.531e-06
6.950e-09

0.5
1.030e-02
2.530e-03
9.166e-04
3.773e-04
2.366e-05
4.306e-06
3.633e-08

0.75
1.030e-02
3.180e-03
1.271e-03
5.832e-04
4.530e-05
9.496e-06
1.228e-07

1.0
1.030e-02
3.904e-03
1.658e-03
8.344e-04
7.687e-05
1.779e-05
3.236e-07

(b) Optimized metrics.
Table B.13: L2 error norm of the velocity component in x1 : propagation of the viscous shock in a cubic domain
with geometrically high order perturbed cells.

30

U2
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.030e-02
2.406e-03
6.446e-04
2.330e-04
1.023e-05
1.529e-06
6.950e-09

0.5
1.030e-02
3.587e-03
9.659e-04
4.228e-04
2.333e-05
4.296e-06
3.633e-08

0.75
1.030e-02
4.915e-03
1.346e-03
6.496e-04
4.458e-05
9.478e-06
1.228e-07

1.0
1.030e-02
6.335e-03
1.769e-03
9.159e-04
7.568e-05
1.777e-05
3.236e-07

(a) Thomas and Lombard metrics [35].

U2
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.030e-02
2.027e-03
6.236e-04
2.122e-04
1.031e-05
1.531e-06
6.950e-09

0.5
1.030e-02
2.530e-03
9.166e-04
3.773e-04
2.366e-05
4.306e-06
3.633e-08

0.75
1.030e-02
3.180e-03
1.271e-03
5.832e-04
4.530e-05
9.496e-06
1.228e-07

1.0
1.030e-02
3.904e-03
1.658e-03
8.344e-04
7.687e-05
1.779e-05
3.236e-07

(b) Optimized metrics.
Table B.14: L2 error norm of the velocity component in x2 : propagation of the viscous shock in a cubic domain
with geometrically high order perturbed cells.

31

U3
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.030e-02
2.406e-03
6.446e-04
2.330e-04
1.023e-05
1.529e-06
6.950e-09

0.5
1.030e-02
3.587e-03
9.659e-04
4.228e-04
2.333e-05
4.296e-06
3.633e-08

0.75
1.030e-02
4.915e-03
1.346e-03
6.496e-04
4.458e-05
9.478e-06
1.228e-07

1.0
1.030e-02
6.335e-03
1.769e-03
9.159e-04
7.568e-05
1.777e-05
3.236e-07

(a) Thomas and Lombard metrics [35].

U3
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
1.030e-02
2.027e-03
6.236e-04
2.122e-04
1.031e-05
1.531e-06
6.950e-09

0.5
1.030e-02
2.530e-03
9.166e-04
3.773e-04
2.366e-05
4.306e-06
3.633e-08

0.75
1.030e-02
3.180e-03
1.271e-03
5.832e-04
4.530e-05
9.496e-06
1.228e-07

1.0
1.030e-02
3.904e-03
1.658e-03
8.344e-04
7.687e-05
1.779e-05
3.236e-07

(b) Optimized metrics.
Table B.15: L2 error norm of the velocity component in x3 : propagation of the viscous shock in a cubic domain
with geometrically high order perturbed cells.

32

T
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
2.864e-02
5.072e-03
1.190e-03
4.457e-04
1.284e-05
1.576e-06
5.170e-09

0.5
2.864e-02
8.012e-03
1.982e-03
8.996e-04
3.472e-05
5.798e-06
3.352e-08

0.75
2.864e-02
1.142e-02
2.942e-03
1.441e-03
7.484e-05
1.437e-05
1.342e-07

1.0
2.864e-02
1.530e-02
4.102e-03
2.090e-03
1.366e-04
2.818e-05
4.256e-07

(a) Thomas and Lombard metrics [35].

T
η
p=1
p=2
p=3
p=4
p=7
p=9
p = 15

0.25
2.864e-02
4.133e-03
1.077e-03
3.704e-04
1.289e-05
1.573e-06
5.170e-09

0.5
2.864e-02
5.462e-03
1.677e-03
7.448e-04
3.435e-05
5.764e-06
3.352e-08

0.75
2.864e-02
7.282e-03
2.400e-03
1.218e-03
7.336e-05
1.428e-05
1.342e-07

1.0
2.864e-02
9.373e-03
3.250e-03
1.801e-03
1.336e-04
2.803e-05
4.256e-07

(b) Optimized metrics.
Table B.16: L2 error norm of the temperature: propagation of the viscous shock in a cubic domain with
geometrically high order perturbed cells.

33

AppendixB.2. Cubic domain with a spherical hole and geometrically high order cells

p=2
p=3
p=4
p=7
p=9

ρ
1.184e-02
4.587e-03
1.820e-03
1.370e-04
2.176e-05

U1
1.519e-03
4.340e-04
1.340e-04
9.784e-06
1.854e-06

U2
1.519e-03
4.340e-04
1.340e-04
9.784e-06
1.854e-06

U3
1.519e-03
4.340e-04
1.340e-04
9.784e-06
1.854e-06

T
4.269e-03
1.057e-03
3.222e-04
1.054e-05
1.729e-06

Table B.17: L2 -norm of the errors for the Thomas and Lombard metrics [35]: propagation of the viscous shock in a
cubic domain with a spherical hole and geometrically high order cells.

p=2
p=3
p=4
p=7
p=9

ρ
1.169e-02
4.586e-03
1.817e-03
1.370e-04
2.176e-05

U1
1.548e-03
4.352e-04
1.340e-04
9.784e-06
1.854e-06

U2
1.548e-03
4.352e-04
1.340e-04
9.784e-06
1.854e-06

U3
1.548e-03
4.352e-04
1.340e-04
9.784e-06
1.854e-06

T
4.076e-03
1.062e-03
3.205e-04
1.054e-05
1.729e-06

Table B.18: L2 -norm of the errors for the optimized metrics: propagation of the viscous shock in a cubic domain
with a spherical hole and geometrically high order cells.

34

