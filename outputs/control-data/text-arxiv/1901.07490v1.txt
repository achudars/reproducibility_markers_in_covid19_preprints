A New Design of Private Information Retrieval for
Storage Constrained Databases
Nicholas Woolsey, Rong-Rong Chen, and Mingyue Ji

arXiv:1901.07490v1 [cs.IT] 22 Jan 2019

Department of Electrical and Computer Engineering, University of Utah
Salt Lake City, UT, USA
Email: {nicholas.woolsey@utah.edu, rchen@ece.utah.edu, mingyue.ji@utah.edu}

Abstract—Private information retrieval (PIR) allows a user to
download one of K messages from N databases without revealing
to any database which of the K messages is being downloaded.
In general, the databases can be storage constrained where each
database can only store up to µKL bits where N1 ≤ µ ≤ 1 and
L is the size of each message in bits. Let t = µN , a recent work
showed that the capacity of Storage Constrained PIR (SC-PIR)
−1
1
, which is achieved by a storage
is 1 + 1t + t12 + · · · + tK−1
placement scheme inspired by the content placement scheme in
the literature of coded caching and the original PIR scheme. Not
surprisingly,
 this achievable scheme requires that each message
is L = Nt tK bits in length, which can be impractical. In this
paper, without trying to make the connection between SC-PIR
and coded caching problems, based on a general connection
between the Full Storage PIR (FS-PIR) problem (µ = 1) and SCPIR problem, we propose a new SC-PIR design idea using novel
storage placement schemes. The proposed schemes significantly
reduce the message size requirement while still meeting the
capacity of SC-PIR. In particular, the proposed SC-PIR schemes
K−1
require the size of each file to
compared
 be only L = N t
N K
to the state-of-the-art L = t t . Hence, we conclude that PIR
may not meet coded caching when the size of L is constrained.

I. I NTRODUCTION
Recent works have taken an information theoretic approach
to solve the private information retrieval (PIR) problem [1],
[2] originally introduced by Chor et al. [3], [4]. In the PIR
problem, a user desires to privately download one of K
messages from N non-colluding databases. In this context,
privacy means that the identity of the message desired by the
user is not revealed to any database. Ensuring privacy relies
on the concept that a user will request sub-messages from
all K messages as opposed to just the message that the user
desires. To efficiently download the desired message, the user
strategically generates database queries that utilize undesired
but downloaded sub-messages for coding opportunities. The
rate of a PIR scheme is defined as the ratio of desired bits, L,
or the size of each message, to the total number of downloaded
bits, D. The capacity C (optimal rate) is defined as the
maximum achievable rate.
Previously, Sun and Jafar [1] derived the capacity of the
Full Storage PIR (FS-PIR) problem where a user privately
downloads one of K messages from N databases that each
stores all K messages. In this
−1 case, the capacity is C =
1
, which was achieved by a
1 + N1 + N12 + · · · + N K−1
PIR scheme requiring L = N K . This result was further

generalized by Attia et al. [2] for the Storage Constrained
PIR (SC-PIR) problem where each database can only store
µKL uncoded bits where N1 ≤ µ ≤ 1. In this case, both a
storage placement scheme and a PIR scheme (querying and
decoding) need to be designed. Let t = µN , the capacity
−1
1
of SC-PIR is 1 + 1t + t12 + · · · + tK−1
under an uncoded
storage placement constraint and was achieved by a storage
placement scheme inspired by the coded caching problem [5]
and a PIR scheme based on [1]. One of the limitations of this
scheme is the requirement of a large message size, L = Nt tK
[2], which is due to the fact that the storage placement is
designed based on the cache placement in coded caching
problem [5]. Hence, the proposed PIR scheme of [2] can be
impractical for a large number of databases. This achievable
scheme was generalized to the decentralized storage placement
in [6]. Furthermore, Tian et al. [7] use Shannon theoretic
approach to analyze the SC-PIR problem for the canonical
case of K = 2 and N = 2 and proposed the optimal linear
scheme. More interestingly, they also showed that non-linear
scheme can use less storage than the optimal linear scheme.
In this paper, we aim to find SC-PIR schemes that achieve
the capacity of SC-PIR while requiring a significantly smaller
message size L. In order to achieve this goal, for the storage
placement, we abandon the idea of using the cache placement
of coded caching problem and design it from scratch. In fact,
our proposed SC-PIR schemes achieve the capacity and require

only L = N tK−1 , which is significantly less than L = Nt tK
in [2]. More specifically, our contributions are as follows.
Our Contributions:
1) We provide a general design methodology for the SCPIR problem by establishing a generic connection between the FS-PIR and SC-PIR problems. Based on this
connection, a SC-PIR scheme can be readily designed
from any given FS-PIR scheme.
2) We propose a simple storage placement when Nt is an
integer. By adopting the achievable scheme based on
[1], the capacity of SC-PIR can be achieved and L =
N tK−1 . This serves as a base case for the more general
scenario when Nt is not an integer.
3) When Nt is not an integer, we propose a novel storage placement, which in conjunction with the FS-PIR
scheme of [8], achieves the capacity of SC-PIR and only

requires L = N tK−1 . The key to the reduction in L is
achieved using the proposed novel storage placement.
4) We present a set of sufficient conditions under which
the proposed SC-PIR schemes are capacity-achieving.
Notation Convention: We use | · | to represent the cardinality of a set or the length of a vector and [n] := [1, 2, . . . , n].
II. P ROBLEM F ORMULATION
There are K independent messages, W1 , . . . , WK , each of
size L bits. The messages are collectively stored in an uncoded
fashion among N non-colluding databases that each has a
storage capacity of µKL bits, where N1 ≤ µ ≤ 1. We define
Zn as the storage contents of database n ∈ [N ]. Also, we
define t , µN as the average number of times each bit of
the messages is stored among the databases. A user makes a
[k]
request Wk and sends a query Qn , which is independent of
the messages, to each database n ∈ [N ] which then sends an
[k]
answer An such that
[k]
H(A[k]
n |Zn , Qn ) = 0,

∀k ∈ [K].

(1)

Furthermore, given the answers from all the databases, the user
must be able to recover the requested message with a small
probability of error. Therefore,
[k]

[k]

[k]
H(Wk |A1 , . . . , A[k]
n , Q1 , . . . , Qn ) = 0.

(2)

The user generates queries in a manner to ensure privacy
such that no database has insight into which message the user
desires, i.e.,
[k]
I(k; Q[k]
n , An , W1 , . . . , WK , Z1 , . . . , ZN ) = 0.

(3)

1) Storage placement scheme: We split each message as
follows.
n
o
A = aji : i ∈ [2], j ∈ [8]
(5)
n
o
B = bji : i ∈ [2], j ∈ [8]
(6)
n
o
C = cji : i ∈ [2], j ∈ [8] .
(7)
Each database has the storagecapacity of up to 24 bits, or
half of all 3 messages µ = 12 . The storage contents of the
databases are defined to be
n
o n
o n
o
Z1 = Z2 = aj1 : j ∈ [8] ∪ bj1 : j ∈ [8] ∪ cj1 : j ∈ [8]
(8)
n
o n
o n
o
j
j
j
Z3 = Z4 = a2 : j ∈ [8] ∪ b2 : j ∈ [8] ∪ c2 : j ∈ [8] .
(9)
2) PIR Scheme: Each database stores 8 out of 16 bits
of each message. Databases 1 and 2 have the same storage
contents, but do not have any storage contents in common with
databases 3 and 4. Likewise, databases 3 and 4 have the same
storage contents. In this way, we essentially reduce a SC-PIR
problem into two independent FS-PIR problems; one consists
of databases 1 and 2, and the other consists of databases 3
and 4. Subsequently, we can simply adopt the achievable FSPIR scheme of [1] to generate the queries for each pair of
the databases separately. The queries of a user that desires
message A are shown in Table I.
TABLE I
S TORAGE C ONSTRAINED PIR, N = 4, K = 3, µ =

DB1
a51

b81

DB2
c61

a11

b31

DB3
c11

a52

b72

1
2

DB4
c42

a22

b62

c22

Let D be the total number of downloaded bits. Given µ, we
say that a pair (D, L) is achievable if there exists a SC-PIR
scheme with rate R = L/D that satisfies (1)-(3). The SC-PIR
capacity is defined as

a61 + b31

a31 + b81

a12 + b62

a72 + b72

a71 + c11

a81 + c61

a62 + c22

a82 + c42

b61 + c51

b71 + c31

b32 + c62

b82 + c72

C ∗ (µ) = max{R : (D, L) is achievable}.

a21 + b71 + c31

a41 + b61 + c51

a32 + b82 + c72

a42 + b32 + c62

III. T HE PROPOSED SC-PIR

SCHEME WHEN N
t

(4)
∈ Z+

In order to present the proposed scheme, we need to
establish a connection between FS-PIR and SC-PIR problems.
This connection is vital
 to reduce the required minimum size
of messages from Nt tK , as in the state-of-the-art scheme of
[2], to N tK−1 without affecting the optimal rate. We show that
an achievable SC-PIR scheme can be derived from any general
achievable scheme for the FS-PIR problem. Hence, by using
the proposed storage placement, the achievable scheme in [1]
can be used to obtain a new SC-PIR scheme. To illustrate our
idea, we first present an example as follows.
A. A Storage Constrained PIR Example when

N
t

∈ Z+

Consider N = 4 databases labeled as DB1 through DB4.
Collectively the databases store K = 3 messages, denoted by
A, B and C. Each message is comprised of L = 16 bits.

3) Achievable Rate: The total number of downloaded bits
L
is D = 28. Thus, we have for this scheme R = D
= 16
28 =
1
1 −1
4
,
which
achieves
the
capacity
of
(1
+
+
)
=
(1 +
7
t
t2
1
1 −1
4
+
.
Compared
to
the
SC-PIR
scheme
of
[2]
that
)
=
2
22
7 

N K
4 3
requires L = t t = 2 2 = 48 bits, the proposed SC-PIR
requires only L = 16 bits.
4) Privacy Constraint: Privacy is ensured since the FS-PIR
scheme of [1] is used to privately download half of message
A from DB1 and DB2 and the other half from DB3 and DB4.
The query to each database is symmetric such that for each
bit of A that is requested, a bit each from B and C are also
requested. All coded pairs of bits from the 3 messages are
requested an equal number of times. Ultimately, the user can
decode all bits of message A, because downloaded bits of B
and C can be used for decoding (see Table I). In the following,
we will first formalize the connection between the FS-PIR and
SC-PIR problems and then generalize this example.

B. The general connection between the FS-PIR and SC-PIR
+

a vector α = [α1 , . . . , αF ], where F ∈ Z ,
PDefine
F
α
=
1, and αf , ∀f ∈ [F ] is rational number such that
i
i=1
αf L ∈ Z+ . For all k ∈ [K], we divide message Wk into F
disjoint sub-messages Wk = Wk,1 , . . . , Wk,F such that for all
f ∈ [F ], |Wk,f | = αf L bits. For all f ∈ [F ], let
[
Wk,f ,
(10)
Mf ,
k∈[K]

and Nf ⊆ [N ] be a non-empty subset of databases which have
the sub-messages in Mf locally available to them. The storage
contents of database n ∈ [N ] is
Zn = {Mf : f ∈ [F ], n ∈ Nf } ,

(11)

where we have the requirement that for any n ∈ [N ],
X
αf ≤ µ.

(12)

{f :f ∈[F ],n∈Nf }

Given that a user requests file Wθ for some θ ∈ [K],
we do the following. For all f ∈ [F ], using a FS-PIR
scheme, the user generates a query to privately download Wθ,f
from the databases in Nf . In other words, a SC-PIR scheme
can be found by applying a FS-PIR scheme to each set of
databases Nf . Changing the choice of the FS-PIR scheme or
the definitions of Nf will result in new SC-PIR schemes.
The rate of the SC-PIR scheme as a function of the rate
of the implemented FS-PIR scheme is given in the following
theorem.
Theorem 1: Given N, K, F ∈ Z+ and α, split each
of the L-bit messages W1 , . . . , WK into F sub-messages
of size α1 L, . . . , αF L and store them at sets of databases
N1 , . . . , NF ⊆ [N ], respectively. Given a set of FS-PIR
schemes with achievable rates R1 , . . . , RF , the achievable rate
of privately downloading Wθ , θ ∈ [K], from the N storage
constrained databases is
−1

α2
αF
α1
+
+ ···+
.
(13)
R=
R1
R2
RF
Proof: We first count the number of downloaded bits.
α L
For all f ∈ [F ], Rf = Dff where Df is the number of
downloaded bits necessary to privately download Wθ,f of size
αf L bits from the databases in Nf . Therefore, the total number
of bits required to privately download the entirety of Wθ is


α2
αF
α1
.
D = D1 + D2 + · · · + DF = L
+
+ ··· +
R1
R2
RF
Since R =

L
D,

we obtain (13).

C. General Achievable Storage Constrained PIR Scheme
When Nt ∈ Z+
+

1) Storage Placement Scheme: Given N ∈ Z and t ∈
[N ] such that Nt ∈ Z+ , let F = Nt and for each k ∈ [K],
split message Wk into Nt disjoint, equal-size sub-messages,
Wk,1 , . . . , Wk, N . Furthermore, split the N databases into Nt
t

disjoint groups of size t labeled as N1 , . . . , N N . For each
t
 
f ∈ Nt , the sub-messages of
[
Wk,f
(14)
Mf =
k∈[K]

are stored at every database of Nf .
2) PIR Scheme: A user desires to privately download
 
message Wθ for some θ ∈ [K]. For each f ∈ Nt , the
user generates a query using the scheme of [1], to privately
download Wθ,f from the t databases in Nf . The user combines
the downloaded sub-messages, Wθ,1 , . . . , Wθ, N to recover the
t
desired message Wθ .
To implement this SC-PIR scheme, each message is split
into Nt equal-size, disjoint sub-messages. Furthermore, the
adaptation of the FS-PIR scheme of [1] requires that each
sub-message is further split into tK equal-size, disjoint submessages. The resulting SC-PIR requires a total of L =
N
K
K−1
bits. An example of this SC-PIR scheme is
t · t = Nt
described in Section III-A.
3) Achievable Rate: The achievable rate of this scheme is
summarized as follows.


Theorem 2: Given N, K, and µ ∈ N1 , 1 , such that t =
µN ∈ [N ], Nt ∈ Z+ and L = N tK−1 , for a user to privately
download one of K L-bit messages from N databases with a
storage capacity of µKL bits, the achievable rate is
−1

1
1
1
.
(15)
R = 1 + + 2 + · · · + K−1
t
t
t

Moreover, it was shown in [2] that (15) is the capacity of
SC-PIR for t ∈ Z+ . While we do not directly prove Theorem 2
here, in Section V we present a set of sufficient conditions,
which this scheme satisfies, for an SC-PIR scheme to meet
the capacity.
IV. T HE PROPOSED SC-PIR S CHEME

WHEN N
t

∈
/ Z+

In Section III, we established a general connection between
SC-PIR and FS-PIR problems. We showed that by properly
splitting messages and allocating sub-messages to different
groups of databases, a SC-PIR scheme can be derived by
applying a separately designed FS-PIR scheme to each group
of databases. In particular, when choosing the FS-PIR scheme
to be the one in [1], we obtain a SC-PIR scheme that achieves
capacity while requiring Nt ∈ Z+ . In order to remove this
restriction, in this section, we propose a new storage placement
and use it in conjunction with the achievable FS-PIR scheme
of [8] to obtain a new SC-PIR scheme. This scheme achieves
capacity while requiring only L = N tK−1 , which is the same
as the scheme of Section III-C when Nt ∈ Z+ .
A. A Storage Constrained PIR Example when

N
t

∈
/ Z+

In this example, N = 5 databases, labeled DB1 through
DB5, collectively store K = 2 messages, A and B, and each
has a size of L = 15 bits. Each database stores an µ = 53
fraction of the 2-message library (t = µ · N = 3).

1) Storage Placement Scheme: Each message is split as
follows.
n
o
n
o
A = aji : i ∈ [5], j ∈ [3] , B = bji : i ∈ [5], j ∈ [3] .
(16)
By this labeling, we have essentially split the messages in
two phases. The first splitting phase, denoted by the subscript,
determines which databases store these bits. The second splitting, denoted by the superscript, is necessary to perform the
FS-PIR scheme. For all f ∈ [5], define

[  j
af ∪ bjf
(17)
Mf =
j∈[3]

and let the set of databases Nf = [−2 : 0] ⊕N f locally
store the bits of Mf . 1 Note that as opposed to the SC-PIR
scheme described in Section III-A where the sets of databases
{Nf , f = 1, · · · , F } are mutually exclusive, here we allow
them to overlap and hence removing the integer constraint of
N
+
t ∈Z .
As a result, the bits of message A stored at DB n ∈ [5] are
n
o
Zn = aji : i ∈ {[0 : 2] ⊕N n} , j ∈ [3] .
(18)

Message B is stored among the databases in a similar manner.
For instance, DB2 stores all bits aji and bji such that i ∈ [2 : 4]
and DB5 stores all bits aji and bji such that i ∈ {5, 1, 2}.
TABLE II
S TORAGE C ONSTRAINED PIR, N = 5, K = 2, µ =

3
5

DB1

DB2

DB3

DB4

DB5

(1, 2, 3)

(2, 3, 4)

(3, 4, 5)

(4, 5, 1)

(5, 1, 2)

a31

a32

a13

a24

a25

b21

b22

b33

b34

b15

a12 + b22

a33 + b33

a34 + b34

a15 + b15

a21 + b21

a23 + b33

a14 + b34

a35 + b15

a11 + b21

a22 + b22

2) PIR Scheme: The queries of a user that desires to
privately download message A are shown in Table II. The top
row of the table contains database labels and the 3-tuple below
each database label defines the subscripts of the bits that are
locally available to that database. The remaining three rows
of the table show the queries of the user. The user adopts
the FS-PIR scheme of [8] to design queries. For instance,
to obtain bits {aj1 , j ∈ [3]}, the user applies the FS-PIR to
DB1, DB4, and DB5. In the first round, the user obtains a31
from DB1. In the second round, the user can decode a11 from
DB4’s transmission of a11 + b21 because the user had already
received b21 from the first round transmission of DB1 in round
1. Similarly, the user decodes a21 from DB5’s transmission
of a21 + b21 . These transmissions are highlighted in red in
Table II. To ensure privacy, the queries are symmetric and
no bit is requested more than once from any one database.
In this example, D = 20 bits are downloaded and the rate
is R = 34 . Comparing to the state-of-the-art SC-PIR scheme
1 We

impose the following notation: a ⊕N b = (a + b − 1 mod N ) + 1
and [a1 : a2 ] ⊕N b = {a′ ⊕N b : a′ ∈ [a1 : a2 ]}.

of [2], the rate
but L has been reduced from
 is the same,
N K
5 2
K−1
t
=
3
=
90
to
N
t
= 5 · 32−1 = 15.
t
3

/ Z+
B. General Achievable SC-PIR Scheme When Nt ∈
1) Storage Placement Scheme: For each k ∈ [K], message Wk is split into N disjoint equal-size sub-messages
Wk,1 , . . . , Wk,N . For all f ∈ [N ], define a set of sub-messages
Mf = ∪k∈[K] Wk,f which is locally stored at the set of
databases Nf = [−(t − 1) : 0] ⊕N f .
2) PIR Scheme: A user desires to privately download
message Wθ for some θ ∈ [K]. For each f ∈ [N ], the
user generates a query using the scheme of [8], to privately
download Wθ,f from the t databases in Nf . The user combines
the downloaded sub-messages, Wθ,1 , . . . , Wθ, N to recover
t
the desired message Wθ . Furthermore, if desired, to obtain
symmetry across the databases, i.e., each database sends the
same amount of coded bit combinations from each file, the
user can choose database f to start the query process when
privately downloading Wθ,f . For more details on the query
generation process, see [8].
3) Achievable Rate: The achievable rate of this SC-PIR
scheme is summarized in the following theorem.


Theorem 3: Given N, K, and µ ∈ N1 , 1 , such that
t = µN ∈ [N ] and L = N tK−1 , for a user to privately
download one of K L-bit messages from N databases, each
with a storage capacity of µKL bits, the rate is
−1

1
1
1
.
(19)
R = 1 + + 2 + · · · + K−1
t
t
t
The results of Section V demonstrate that this SC-PIR
scheme satisfies the sufficient conditions to meet the capacity.
This proves Theorem 3.
V. S UFFICIENT C ONDITIONS TO ACHIEVE C APACITY FOR
SC-PIR
In this section, we provide two sufficient conditions for a
storage placement scheme to achieve the SC-PIR capacity.
Theorem 4: Given N, K, F ∈ Z+ and α, split each
of the L-bit messages W1 , . . . , WK into F sub-messages
of size α1 L, . . . , αF L and store them at sets of databases
N1 , . . . , NF ⊆ [N ] according to equations (10)-(12). Each
database has a storage capacity of µKL bits, N1 ≤ µ ≤ 1,
where t = µN ∈ [1, N ]. Assume that a user requests file Wθ
for some θ ∈ [K]. A SC-PIR scheme is obtained if for all
f ∈ [F ], the user generates a query to privately download
Wθ,f from the databases in Nf using a capacity-achieving
FS-PIR scheme. The resulting SC-PIR scheme is capacityachieving if the sub-message storage placement satisfies one
of the following two conditions:
(1) If t ∈ Z+ , |Nf | = t for all f ∈ [F ]
(2) If t ∈
/ Z+ , |Nf | ∈ {⌊t⌋, ⌈t⌉} for all f ∈ [F ] such that
X
αf = ⌈t⌉ − t
(20)
f :|Nf |=⌊t⌋

and

X

f :|Nf |=⌈t⌉

αf = t − ⌊t⌋.

(21)

Proof: Define RFS (x) as the rate of a capacity achieving
FS-PIR scheme to privately download one of K messages from
x nodes. Furthermore,
−1

1
1
(22)
RFS (x) = 1 + + · · · + K−1
x
x
as was shown in [1].
For t ∈ Z+ , it follows from Theorem 1 that the rate of the
SC-PIR scheme is

−1
α1
αF
R=
= RFS (t)
(23)
+ ··· +
RFS (t)
RFS (t)

−1
1
1
= 1 + + · · · + K−1
(24)
t
t
which is the capacity of SC-PIR [2].
For t ∈
/ Z+ , it follows from Theorem 1 that

X
X
1
1
R=
αf +
RFS (⌊t⌋)
RFS (⌈t⌉)
f :|Nf |=⌊t⌋

=



f :|Nf |=⌈t⌉

t − ⌊t⌋
⌈t⌉ − t
+
RFS (⌊t⌋) RFS (⌈t⌉)

−1

−1

αf 

(25)
(26)

and thus
−1
−1
R−1 = (⌈t⌉ − t)RFS
(⌊t⌋) + (t − ⌊t⌋)RFS
(⌈t⌉).
(27)

Note that the point t, R−1 issimply an linear interpolation
of

−1
−1
the two points ⌊t⌋, RFS
(⌊t⌋) and ⌈t⌉, RFS
(⌈t⌉) where the
capacity of SC-PIR for t = x is precisely RFS (x). Moreover,

it was shown in [2] that the set of achievable
points
t, R−1 ,


is the lower convex hull of the set points t, Ct−1 : t ∈ [N ] .
Therefore, (26) meets the SC-PIR capacity.

VI. D ISCUSSION

AND

F UTURE W ORK

Recent works on SC-PIR suggest that coded caching meets
PIR [2], [9]; that is, the file placement solutions of coded
caching [5] are useful for the SC-PIR sub-message placement
problem. In this work, we show that coded caching placement
techniques are not necessary for SC-PIR by proposing two
novel sub-message placement schemes which achieve the capacity. In the coded caching problem, assigning different files
to an exponentially large number of overlapping user groups is
necessary to create multicasting opportunities such that a user
can cancel “interference” from a received coded transmission
which also serves other users. The SC-PIR problem is less
complex in that only one user is being served. In fact, as
was demonstrated with our first proposed scheme, it is not
necessary for the sub-message placement groups to overlap at
all. Moreover, the file (or sub-message) placement paradigms
of coded caching and SC-PIR are inherently different. In
coded caching, files are being placed among users that wish to
download content, while in SC-PIR, sub-messages are being
placed among databases which are serving one user’s request.
Therefore, it is not surprising the two problems could have
different solutions for the storage/file placement problem.

The results of Section V show that there exists simple SCPIR solutions for non-integer t. For example, the databases
could be split into two disjoint groups, one in which submessages are assigned to sub-groups of size ⌊t⌋ databases, and
another where sub-messages are assigned to sub-groups of size
⌈t⌉ databases. This is contrary to the solution for non-integer t
of the coded caching problem where the storage of every user
is split into two parts to essentially create two coded caching
networks that both span across all users [5]. While this coded
caching method was proposed to solve the non-integer t SCPIR problem in [2], we have shown that this is not necessary.
This work presents several interesting directions for future
work. First, it remains an open problem to determine the minimum message size L for a given set of SC-PIR parameters.
Using a definition of the retrieval rate that is slightly different
from that of [8], it was shown in [10] that the minimum
L of an FS-PIR problem can be reduced significantly from
N K−1 in [8] to N − 1. The new FS-PIR scheme [10] can be
readily adapted to our proposed SC-PIR to reduce the message
size. Furthermore, the proof techniques therein may be useful
to derive the minimum L for a SC-PIR problem. Second,
another work [6] has considered random placement among
databases where a database stores a bit of a given message
with probability µ. Interestingly, this placement method was
also used in [11] for the coded caching problem. It will be
meaningful to examine alternative random placement strategies
for the SC-PIR problem where messages are split into a finite
number of sub-messages.
R EFERENCES
[1] H. Sun and S. A. Jafar, “The capacity of private information retrieval,”
IEEE Transactions on Information Theory, vol. 63, no. 7, pp. 4075–
4088, 2017.
[2] M. A. Attia, D. Kumar, and R. Tandon, “The capacity of private
information retrieval from uncoded storage constrained databases,” arXiv
preprint arXiv:1805.04104, 2018.
[3] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan, “Private information retrieval,” in Foundations of Computer Science, 1995. Proceedings.,
36th Annual Symposium on. IEEE, 1995, pp. 41–50.
[4] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan, “Private information retrieval,” J. ACM, vol. 45, no. 6, pp. 965–981, 1998.
[5] M. A. Maddah-Ali and U. Niesen, “Fundamental limits of caching,”
Information Theory, IEEE Transactions on, vol. 60, no. 5, pp. 2856–
2867, 2014.
[6] Y.-P. Wei, B. Arasli, K. Banawan, and S. Ulukus, “The capacity
of private information retrieval from decentralized uncoded caching
databases,” arXiv preprint arXiv:1811.11160, 2018.
[7] C. Tian, H. Sun, and J. Chen, “A shannon-theoretic approach to the
storage-retrieval tradeoff in pir systems,” in 2018 IEEE International
Symposium on Information Theory (ISIT), June 2018, pp. 1904–1908.
[8] H. Sun and S. A. Jafar, “Optimal download cost of private information
retrieval for arbitrary message length,” IEEE Transactions on Information Forensics and Security, vol. 12, no. 12, pp. 2920–2932, 2017.
[9] R. Tandon, M. Abdul-Wahid, F. Almoualem, and D. Kumar, “PIR from
storage constrained databases-coded caching meets PIR,” in 2018 IEEE
International Conference on Communications (ICC). IEEE, 2018, pp.
1–7.
[10] C. Tian, H. Sun, and J. Chen, “Capacity-achieving private information
retrieval codes with optimal message size and upload cost,” arXiv
preprint arXiv:1808.07536, 2018.
[11] M. A. Maddah-Ali and U. Niesen, “Decentralized coded caching
attains order-optimal memory-rate tradeoff,” Networking, IEEE/ACM
Transactions on, vol. 23, no. 4, pp. 1029–1040, Aug 2015.

