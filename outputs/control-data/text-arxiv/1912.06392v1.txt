A multimesh finite element method for the Navier-Stokes
equations based on projection methods

arXiv:1912.06392v1 [math.NA] 13 Dec 2019

Jørgen S. Dokkena,b,∗, August Johanssona,c , André Massingd,e , Simon W. Funkea
a

Simula Research Laboratory, Martin Linges vei 25 1364 Fornebu, Norway
Department of Engineering, Cambridge University, Cambridge CB2 1PZ, United Kingdom
c
SINTEF, Forskningsveien 1, Oslo, Norway
d
Department of Mathematical Sciences, Norwegian University of Science and Technology, NO-7491
Trondheim, Norway
e
Department of Mathematics and Mathematical Statistics, Umeå University, SE-90187 Umeå, Sweden
b

Abstract
The multimesh finite element method is a technique for solving partial differential equations on multiple non-matching meshes by enforcing interface conditions using Nitsche’s
method. Since the non-matching meshes can result in arbitrarily cut cells, additional stabilization terms are needed to obtain a stable variational formulation. In this contribution we
extend the multimesh finite element method to the Navier-Stokes equations based on the
incremental pressure correction scheme. For each step in the pressure correction scheme,
we derive a multimesh finite element formulation with suitable stabilization terms. The
overall scheme yields expected spatial and temporal convergence rates on the Taylor-Green
problem, and demonstrates good agreement for the drag and lift coefficients on the TurekSchafer benchmark (DFG benchmark 2D-3). Finally, we illustrate the capabilities of the
proposed scheme by optimizing the layout of obstacles in a channel.
Keywords: Navier-Stokes equations, multimesh finite element method, incremental
pressure correction scheme, Nitsche’s method, projection method
1. Introduction
A variety of physical processes that are relevant in science and engineering can be
described by partial differential equations (PDEs). To find numerical approximations to
the solution of these PDEs, a wide range of discretization methods relies on meshes to
discretize the physical domain. To be able to obtain high quality approximations of the
physical system, high quality meshes are usually required.
∗

Corresponding author
Email addresses: dokken@simula.no (Jørgen S. Dokken), august.johansson@sintef.no (August
Johansson), andre.massing@ntnu.no,andre.massing@umu.se (André Massing), simon@simula.no
(Simon W. Funke)

Preprint submitted to Elsevier

December 16, 2019

Mesh generation is expensive, both computationally and in terms of human resources as
it can require human intervention. For instance the generation of biomedical image data [1],
or complex components used in engineering [2]. This is a particular challenge for problems
where the geometry of the domain is subject to changes during the simulation. This
occurs for instance in fluid-structure interaction problems, where mechanical structures
can undergo large deformations, but also in optimization problems where the shape is
the design variable. When large domain deformations occur, even advanced mesh moving
algorithms might be pushed beyond their limit, and the only resort is a costly remeshing
step. One potential remedy is to decouple the geometric description of the physical domain
from the definition of the approximation spaces as much as possible. This can be done by
using a union of overlapping non-matching meshes to represent the computational domain,
and this technique has been studied in a wide variety of settings.
In the setting of finite volume and finite difference methods, the idea of decoupling
the computational domain was already studied in the 1980s using domain decomposition
techniques [3]. It has later gone under the name of Chimera [4, 5] and Overset [6, 7]
methods. See also e.g. [8, 9] for the finite element setting. A recent overview may be found
in [10].
Several fictitious domain formulations where Lagrange multipliers are used to enforce
boundary and interface conditions have been proposed in literature, see e.g. [11, 12, 13].
In [14], enriched finite element function spaces were introduced to handle crack propagation. This led to the development of XFEM, which has been used for a large variety of
problems [15, 16, 17, 18, 19]. As opposed to enriching the finite element function space as
in XFEM, the method proposed in [20, 21] uses Nitsche’s method [22] for enforcing boundary and interface conditions weakly. For the interface problem, two meshes are allowed to
intersect, meaning that there is a doubling of the degrees of freedom in the so-called cut
cells. These methods would form the basis of CutFEM, see e.g. [23, 24] and references
therein. Worth mentioning is that classical discontinuous Galerkin methods [25], as well as
recent formulations of the finite cell methods [26, 27, 28, 29], also makes use of the Nitsche
based formulation.
There are vast number of other methods for problems where the discretization of the
computational domain is based on non-matching meshes, using either finite differences,
finite volumes and finite elements. For example, there is the classical immersed boundary
method [30, 31, 32], immersed interface methods [33, 34] and the s-version of the finite
element method [35, 36], to name a few. An overview of recent developments can be found
in [37].
For the generality of a method based on overlapping meshes, the placement of the
meshes should be arbitrary. This means that arbitrarily small intersections can occur,
which can fatally influence the discrete stability as well as lead to arbitrarily large condition numbers. One approach to resolve this, is suitable preconditioning [38]. In the
multimesh FEM, which is the method used in this paper, this is addressed by adding suitable stabilization terms over the cut cells. As in CutFEM, continuity over the artificial
interface caused by the intersecting meshes is enforced by Nitsche’s method. In [39, 40] it
is proven that the multimesh FEM is stable both in the sense of coercivity and condition
2

number for the Poisson problem. The Stokes equations have been studied in [41].
Methods using overlapping meshes, such as the multimesh FEM, offer several potential
advantages over standard, single-mesh techniques. First, complex geometries can be broken
down into individual sub-domains which are easier to mesh, and which can be re-used if a
component occurs more than once in the geometry. Second, the sub-domains can be easily
re-arranged during a simulation, which can be helpful both during an initial design face,
as well for automated design optimization at a later design phase. Finally, the overlapping
mesh method is beneficial when mesh-deformation schemes or re-meshing is necessary,
since the deformation or re-meshing can be restricted to those sub-domains that require
treatment. Overall, this results in a reduction of the computational effort, and preserves
the mesh quality longer compared to mesh deformation on the entire geometry [42].
In this paper, we explore the multimesh FEM in the setting of the Navier-Stokes equations. The Navier-Stokes equations are non-linear, transient and the pressure and velocity
have a non-trivial coupling. Because of this complexity, a popular approach is to split the
problem into several simpler equations which are consistent on the operator level. The
original splitting scheme was proposed by Chorin and Témam [43, 44], using an explicit
time stepping. This scheme was later improved by Goda [45] and made popular by Van
Kan [46], adding a correction step for the velocity at each time step, known as the incremental pressure-correction scheme (IPCS). Following [45], an alternative formulation called
the IPCS scheme on rotational form, was proposed by Timmermans et al. [47], avoiding
numerical boundary layers. A thorough overview of error-estimates for these splitting
schemes can be found in [48].
The IPCS scheme is composed of three equations,
• the tentative velocity step, a reaction-diffusion-convection equation,
• the pressure correction step, a Poisson equation,
• the velocity update step, a projection.
In this paper, we present the appropriate multimesh Nitsche and stabilization terms for
these three equations. We present two IPCS schemes for multimesh FEM based on the
second order backward difference and Crank-Nicolson temporal discretization schemes.
The paper is structured as follows. We review the classical IPCS scheme in section 2.1
in the setting of the second order backward difference and Crank-Nicolson temporal discretization schemes. Then, in section 3 we present an equivalent formulation for a domain
decomposed into N disjoint domains. In section 4, we introduce the finite element method
for arbitrary overlapping meshes, called the multimesh FEM. Then, in sections 4.1 to 4.3 we
present the multimesh variational formulation for each of the steps in the IPCS algorithm.
In section 6, we present several numerical results. First, in section 6.1, the multimesh
IPCS scheme is employed to solve the 2D Taylor-Green flow problem. We obtain expected
spatial and temporal convergence rates. Second, in section 6.2 the Turek-Schafer benchmark (DFG benchmark 2D-3) is presented. We compare lift and drag coefficients for the
multimesh IPCS scheme with results from a standard FEM. Finally, in section 6.3, we
3

present an application example considering optimization of the position and orientation of
six obstacles in a channel flow. Concluding the paper, section 7 summarizes and indicates
future research directions.
2. The Navier-Stokes equations and the incremental pressure correction Scheme
This section provides a brief introduction to the incremental pressure correction scheme
(IPCS), which is an operator splitting scheme for solving the Navier-Stokes equations.
This scheme was initially introduced by Goda [45]. We will throughout this paper
restrict us to the setting where the spatial domain Ω is stationary.
We start by considering the Navier–Stokes equations: Find the velocity field u and
pressure field p such that
∂t u + u · ∇u − ν∆u + ∇p = f
∇·u=0
u=g
(ν∇u − p Id) · n = 0
u = u0

in Ω × (0, T ),
in Ω × (0, T ),
on ∂ΩD × (0, T ),
on ∂ΩN × (0, T ),
on Ω × {0}.

(2.1a)
(2.1b)
(2.1c)
(2.1d)
(2.1e)

Here, T > 0 is the end time, ν is the kinematic viscosity and n is the outer normal
vector field on the domain boundary ∂Ω. Vector valued functions are denoted in bold. We
Rpartition as ∂Ω =
R ∂ΩD ∪ ∂ΩN where ∂ΩD ∩ ∂ΩN = ∅. If ∂ΩD = ∂Ω, we also require that
p
dx
=
0
and
g(·, t) · n ds = 0 ∀t ∈ (0, T ).
Ω
∂Ω
2.1. Incremental Pressure Correction Scheme
In this subsection, we present two IPCS variations based on the second order backward
difference (BDF2) and Crank–Nicolson (CN) approximations of the temporal derivative.
IPCS decomposes eq. (2.1) into three, uncoupled equations for the velocity un and pressure
pn for each time step n = 1, . . . , N with tn = t0 + nδt.
We assume that u0 = u0 and p0 = p(·, 0) are given. In case p0 is unknown, it can be
computed from solving
(∇p, ∇q)Ω = (ν∆u − u · ∇u + f , ∇q)Ω

∀q

(2.2)

which result from taking the ∇· of the momentum equation to obtain a Poisson problem for
the initial pressure, exploiting that ∇· ∂t u = 0 thanks to the incompressibility constraint,
then deriving a corresponding weak formulation by multiplying with q and integrating over
Ω. Suitable boundary conditions for eq. (2.2) are not obvious and are discussed for instance
in [49, 50, 51].

4

2.1.1. Second order backward difference scheme (BDF2)
At time-step n, we have the following algorithm.
Step 1 (Tentative velocity step). Find the tentative velocity u∗ solving
3u∗ − 4un + un−1
+ [u∗ · ∇u∗ ]AB − ν∆u∗ + ∇pn = f n+1
in Ω,
2δt
u∗ = g(·, tn+1 ) on ∂ΩD ,
ν∇u∗ · n = pn n
on ∂ΩN ,

(2.3a)
(2.3b)
(2.3c)

where [u∗ · ∇u∗ ]AB is a 2nd order approximation of the non-linear convection term based
on an Adams-Bashforth extrapolation [52]. In this paper, we consider operator splitting
schemes which use either a fully explicit or a semi-implicit linearisation of the convection
term. The fully explicit linearisation is
[u∗ · ∇u∗ ]AB = 2un · ∇un − un−1 · ∇un−1 ,

(2.4)

while for the semi-implicit linearisation, we use
[u∗ · ∇u∗ ]AB = (2un − un−1 ) · ∇u∗ .

(2.5)

In the remaining parts of the section, either linearisation can be employed. In the
numerical results, we will explicitly state which of the Adams-Bashforth approximations
is used. The implicit approximation gives us a linear system that has to be reassembled
at each time-step, as opposed to the explicit scheme. However, the implicit approximation
allows for bigger time-steps, as it performs better with respect to Courant-Friedrichs-Lewy
condition (CFL) [53].
If un−1 is not known, a standard procedure is to perform an initial time-step with IPCS
and implicit Euler discretisation of the time derivative and advection terms.
Step 2 (Projection step). Find un+1 and φ such that
3un+1 − 3u?
= −∇φ
2δt
∇· un+1 = 0
(un+1 − u∗ ) · n = 0
φ=0

in Ω,

(2.6a)

in Ω,
on ∂ΩD ,
on ∂ΩN ,

(2.6b)
(2.6c)
(2.6d)

and set pn+1 = pn + φ. Alternatively, the projection step can be rewritten as a Poisson
problem for the pressure correction and a subsequent update of the velocity. More precisely,
we solve
Step 2a (Pressure correction). Find φ satisfying
−∆φ = −

3
∇· u?
2δt

∇φ · n = 0
φ=0
5

in Ω,

(2.7a)

on ∂ΩD ,
on ∂ΩN ,

(2.7b)
(2.7c)

and set pn+1 = pn + φ.
Step 2b (Velocity update step). Finally, we compute the velocity approximation un+1
at tn+1 by
un+1 = u? −

2δt
∇φ.
3

(2.8)

2.1.2. Second order scheme using Crank-Nicolson (CN)
An alternative second order accurate scheme is obtained by using Crank-Nicolson for
the time discretization:
Step 1 (Tentative velocity step). Find the tentative velocity u∗ solving
u∗ − un
1
1
1
+ [u∗ · ∇u∗ ]AB − ν∆(u∗ + un ) + ∇pn− /2 = f n+ /2
in Ω,
δt
2
u∗ = g(·, tn+1 ) on ∂ΩD ,
1
1
ν∇(u∗ + un ) · n = pn− /2 n
on ∂ΩN ,
2

(2.9a)
(2.9b)
(2.9c)

where [u∗ · ∇u∗ ]AB is an Adams-Bashforth approximation of the convection term that can
be either explicit
1
3
[u∗ · ∇u∗ ]AB = un · ∇un − un−1 · ∇un−1
2
2

(2.10)

3
1
1
[u∗ · ∇u∗ ]AB = ( un − un−1 ) · ∇(u∗ + un ).
2
2
2

(2.11)

or implicit

Step 2a (Pressure correction). Find φ satisfying
−∆φ = −

1
∇· u?
δt

∇φ · n = 0
φ=0

in Ω,

(2.12a)

on ∂ΩD ,
on ∂ΩN ,

(2.12b)
(2.12c)

and set pn+1/2 = pn−1/2 + φ.
Step 2b (Velocity update step). Finally, we obtain the velocity un+1 at tn+1 by
un+1 = u? − δt∇φ.

(2.13)

There are other related splitting schemes, such as the IPCS scheme on rotational form,
proposed by Timmermans et al [47]. The derivations in the following sections applies to
this scheme in the same way.
6

3. Incremental Pressure Correction Scheme for multiple domains
In this section we describe how the IPCS-scheme with BDF2 (eqs. (2.3), (2.7) and (2.8))
and CN (eqs. (2.9), (2.12) and (2.13)) is altered by introducing a decomposition of Ω into
N overlapping domains. The definitions and notation follow [39, 40] but is included here
in brevity for completeness:
b1 = Ω ⊂ Rd be the background predomain. We assume that Ω̂1 has a polygonal
• Let Ω
boundary.
b1 we have polygonal domains Ω
bi , i = 2, . . . , N , placed in an
• In the interior of Ω
b
b
bi the ith
ordering such that we say that Ωj is on top of Ωi if j > i. We call Ω
predomain. Figure 1 illustrates such an ordering for three predomains.
bi , i.e., defined as
• Let Ωi be the visible part of Ω
bi \ ∪N
b
Ωi = Ω
j=i+1 Ωj ,

(3.1)

i = 1, . . . , N − 1.

N
Thus, {Ωi }N
i=1 form a partition of Ω such that Ω = ∪i=1 Ωi and Ωi ∩ Ωj = ∅ if i 6= j.
bN = ΩN .
Also, Ω
bi intersect each other and thus create interfaces. For these interfaces we
The predomains Ω
use the following notation.

• Let the interface Γi be defined by
bi \ ∪N
b
Γi = ∂ Ω
j=i+1 Ωj ,

(3.2)

i = 2, . . . , N − 1.

and let
(3.3)

Γij = Γi ∩ Ωj , i > j
be a partition of Γi .

The corresponding visible domains and interfaces for fig. 1 are visualized in fig. 2. The
Neumann and Dirichlet boundaries are defined on each subdomain as ∂ΩD,i = ∂ΩD ∩ ∂Ωi
and ∂ΩN,i = ∂ΩN ∩ ∂Ωi for i = 1, . . . , N . Further, we denote the normal ni to be the
outer-pointing normal of Ωi .
With these definitions, we now modify the IPCS scheme such that each step is solved
on the visible domains Ωi , i = 1, . . . , N and add interface conditions on Γij to ensure that
the solution is equivalent to applying IPCS to Ω. First, we consider the modified scheme
with the BDF2 time discretization. For the tentative velocity step (2.3), this yields:
3u∗i − 4uni + un−1
i
+ [u∗i · ∇u∗i ]AB − ν∆u∗i + ∇pni = f n+1
2δt
u∗i = g(·, tn+1 )
ν∇u∗i · ni = pni ni
Ju∗ K = 0
Jν∇u∗ · ni K = 0
7

in Ωi ,

(3.4a)

on
on
on
on

(3.4b)
(3.4c)
(3.4d)
(3.4e)

∂ΩD,i ,
∂ΩN,i ,
Γij ,
Γij ,

b3
Ω
b2
Ω
b1
Ω
b1
Ω

b2
Ω

b3
Ω

b1 is placed
Figure 1: Three polygonal predomains placed on top of each other in such an ordering that Ω
b3 highest.
lowest, and Ω

Γ32

Γ31

Γ21
Ω1

Ω2

Ω3

bi from fig. 1 and the corresponding partitioning of the
Figure 2: The visible part of each predomain Ω
artificial interface Γ .

for i, j = 1, . . . , N, j < i. The velocity ui and and pressure pi are functions defined on Ωi ,
and the jump operator is defined as
JvK = vi − vj

(3.5)

j < i.

Similarly, for the pressure correction step, we obtain additional interface conditions
−∆φi = −

3
∇ · u∗i
2δt

∇φi · ni = 0
φi = 0
JφK = 0
J∇φ · ni K = 0

in Ωi ,

(3.6a)

in ∂ΩD,i ,
in ∂ΩN,i .
on Γij
on Γij .

(3.6b)
(3.6c)
(3.6d)
(3.6e)

As in the original IPCS scheme, the pressure is then updated with pn+1
= pni + φi for
i
i = 1, . . . , N . Finally, the tentative velocity update step is
2
uin+1 = u∗i − δt∇φi ,
3
8

(3.7)

for i = 1, . . . , N .
For the IPCS scheme with the Crank–Nicolson time-discretization one obtains identical interface conditions at the artificial interface Γ as above. The details are hence not
presented here explicitly for brevity.
4. Multimesh Finite Element Formulations of the Incremental Pressure Correction Schemes
In this section we explain how to find an approximate solution to the multiple domain
IPCS scheme presented in section 3 with a finite element method using multiple nonmatching overlapping meshes.
We begin with reviewing the notation for defining discrete function spaces spanned by
finite elements on multiple meshes, following [39, 40].
bi with mesh parameter hi = max b diam(T ),
• Let Tbi be a quasi-uniform [54] mesh of Ω
T ∈Ti
i = 1, . . . , N .
• Let
Ti = {T ∈ Tbi : T ∩ Ωi 6= ∅},

i = 1, . . . , N,

(4.1)

be the active meshes. These are of particular importance, since the finite element
spaces will be constructed on these meshes.
• Let
Ωh,i = ∪T ∈Ti T,

i = 1, . . . , N,

(4.2)

denote the active domains, i.e., the domains defined by the active meshes Ti .
Note that Ωh,i typically extends beyond the corresponding domain Ωi , as shown in fig. 3,
since it also includes all elements that are partially visible. To obtain a robust multimesh
finite element scheme, we will need to define stabilization terms on these extensions. We
will use the following notation the denote these extensions:
• Let Oi denote the overlap domain defined by
Oi = Ωh,i \ Ωi ,

i = 1, . . . , N − 1,

(4.3)

and let
Oij = Oi ∩ Ωj = Ωh,i ∩ Ωj , i < j
be a partition of Oi .

9

(4.4)

Inactive cells

Ωh,i

(a)

(b)

Figure 3: Illustration of the active domains for a multimesh consisting of three meshes based on the
predomains in fig. 1. Note that the visible domain Ωi is a subset of the active domain Ωh,i , except for the
topmost domain, where Ωh,3 = Ω3 . (a) illustrates the active domain Ωh,1 of T̂1 . (b) illustrates the active
domain Ωh,2 of T̂2 .

With this notation, we can now define finite element spaces on multiples meshes. First,
we associate with each active mesh Ti the space of continuous, piecewise polynomials of
order k > 1,
k
Vi,h
= {v ∈ C(Ωh,i ) : v|T ∈ Pk (T ) ∀ T ∈ Ti } for i = 1, . . . , N.

(4.5)

Then the corresponding multimesh finite element space is simply defined as the direct sum
of the individual spaces,
k
Vhk = ⊕N
(4.6)
i=1 Vh,i .
If the polynomial order is not important or clear from the context, we simply drop the
superscript k. Now the multimesh function spaces for the velocity and pressure are based on
the multimesh realization of the standard inf-sup stable Taylor-Hood velocity and pressure
spaces [54]:
Qh = Vhk−1 .

Vh = [Vhk ]d ,

(4.7)

Moreover, we adopt the notation Vhg and Vh0 to indicate the incorporation of Dirichlet
data on the physical boundaries in test and trial function space. Similar notation will be
used for the Qh test and trial function spaces.
Since the meshes are not disjoint, multimesh functions are multi-valued in the regions
where the meshes overlap. For this reason, the evaluation of a function q ∈ Qh at a point x
is done in the top-most domain, i.e., we define the inclusion Qh ,→ L2 (Ω) by q(x) = qi (x)
for x ∈ Ωi . A similar definition is made for evaluating the velocities.
Similarly to the jump operator (3.5), we define the average operator as
1
hvi = (vi + vj ),
2

(4.8)

where vi and vj are the finite element solutions represented on the active meshes Ti and
Tj . The jumps and averages on Vh are defined analogously.
10

4.1. Variational form for the multimesh tentative velocity step
Initially, we will describe the variational form for the tentative velocity step using
the BDF2 temporal discretization and an implicit Adams-Bashford approximation, as described in section 2.1.1. Then, we will point to the differences that occur with a CN
discretization (section 2.1.2).
To derive the variational formulation of the tentative velocity step (3.4), we multiply
the equations with test functions v and integrate over the visible domains Ωi , i = 1, . . . , N .
This yields: Find u∗ ∈ Vhg such that for all v ∈ Vh0

N 
X
3u∗ − 4un + un−1
∗
∗ AB
∗
n
+ [ui · ∇ui ] − ν∆u + ∇p , v
(4.9)
2δt
Ωi
i=1
−

N X
i−1
X

n

n−1

( (2u − u

i=2 j=1

∗

) · ni Ju K , hvi)Γij =

N
X

f n+1 , v


Ωi

.

(4.10)

i=1

The convection term in the semi-implicit scheme has been brought into skew-symmetric
form to ensure coercivity of the bi-linear form in the advection driven regime, similar to
Discontinuous Galerkin methods [55].
Next, we integrate the diffusion and pressure terms by parts:

N 
N
X
X
3u∗ − 4un + un−1
∗
∗ AB
+ [ui · ∇ui ] , v
−
(pn , ∇ · v)Ωi
2δt
Ωi
i=1
i=1
Z
N
N
i−1
X
XX
q
 y
+
(ν∇u∗ , ∇v)Ωi +
pni − ν∇u∗ · ni · v ds
(4.11)
i=1

−

i=2 j=1

N X
i−1
X

n

n−1

( (2u − u

i=2 j=1

Γij
∗

) · ni Ju K , hvi)Γij =

N
X

f n+1 , v


Ωi

.

i=1

Note that boundary terms over ∂ΩN vanish due to the Neumann condition, and the boundary terms over ∂ΩD vanish since the test functions are zero at these boundaries. Using the
identity JabK = JaK hbi + hai JbK and the interface-condition eq. (3.4e), we obtain:
a(u∗ , v) = l(v) ∀v ∈ Vh0 ,

(4.12)

with
N
N
X
X

3
∗
(u , v)Ωi +
[u∗i · ∇u∗i ]AB , v Ωi
a(u , v) =
2δt
i=1
i=1
∗

+

N
X

∗

(ν∇u , ∇v)Ωi −

i=1

−

N X
i−1
X
i=2 j=1

N X
i−1
X
i=2 j=1

(hν∇u∗ · ni i , JvK)Γij

( (2un − un−1 ) · ni Ju∗ K , hvi)Γij
11

(4.13)
(4.14)
(4.15)

and
l(v) =
+

N 
X
4un − un−1
i=1
N
X

2δt


,v

+
Ωi

n

(p , ∇ · v)Ωi −

i=1

N
X


Ωi

i=1

N X
i−1 
X
i=2 j=1

f n+1 , v

(4.16)
n

n



(hp ni i , JvK)Γij + (Jp ni K , hvi)Γij .

Using the multimesh finite element method to weakly enforce the interface conditions
over Γ in eq. (3.4) we obtain: Find u∗ ∈ Vhg such that
a(u∗ , v) + aIP (u∗ , v) + aO (u∗ , v) + aM (u∗ , v) = l(v) ∀v ∈ Vh0 ,

(4.17)

with
aIP (u, v) =

N X
i−1
X
i=2 j=1

aO (u, v) =

N
−1
X


− (hν∇v · ni i , JuK)Γij + αt ν hhi−1 JuK , JvK Γij ,

N
X

i=1 j=i+1

aM (u, v) =

N
−1
X
i=1

βt (ν J∇uK , J∇vK)Oij ,

N
X
3βp
(JuK , JvK)Oij ,
2δt
j=i+1

(4.18a)
(4.18b)
(4.18c)

with αt > 0, βt > 0, and βp > 0. Equation (4.18a) weakly enforces the interface conditions
(3.4d),(3.4e) over Γ using the Nitsche approach [22], similar as in a standard symmetric
DG method [25]. The Nitsche interior penalty parameter αt has to be chosen sufficiently
large to obtain a coercive bilinear form if δtν  1. Equation (4.18b) is a stabilization
for the Nitsche-terms on the overlapping domains Oij , which controls the coercivity of the
variational form and the condition number of the arising linear system for arbitrary mesh
intersections. Equation (4.18c) weakly enforces continuity in proximity of the artificial
interfaces in cases where δtν is small, in which case the other stabilization terms may also
be small.
For the Crank–Nicolson scheme (section 2.1.2), one obtains a similar left hand side of
the problem, with different weights on the diffusive, temporal and convection terms, as
shown in section 2.1.2. Further, due to the centered difference of the diffusive term, one
obtains the following additional terms on the right hand side l(v)
!
N
N X
i−1 Z
X
1 X
(−ν∇un , ∇v)Ωi +
J(ν∇un · ni ) · vK ds .
(4.19)
lCN (v) =
2 i=1
Γ
ij
i=2 j=1
Note that the interface integrals over Γij are non-zero, due to the multimesh discretization,
where eq. (3.4e) is enforced weakly.
12

4.2. Variational form for the multimesh pressure correction step
The pressure correction equation (3.6) is a Poisson equation, which has been explored
extensively in the multimesh setting, see [40] for an overview. Therefore we can phrase the
pressure correction step as: Find φ ∈ Q0h such that
a(φ, q) + aIP (φ, q) + aO (φ, q) = l(v),

(4.20)

∀q ∈ Q0h

where
a(φ, q) =

N
X

(4.21a)

(∇φ, ∇q)Ωi ,

i=1

aIP (φ, q) =

N X
i−1
X
i=2 j=1

− (h∇q · ni i , JφK)Γij − (h∇φ · ni i , JqK)Γij + αc hhi−1 JφK , JqK


Γij

,

(4.21b)
aO (φ, q) =

N
−1
X

N
X

i=1 j=i+1

l(q) =

N
X

−

i=1

(4.21c)

βc (J∇φK , J∇qK)Oij ,

3
(∇ · u∗ , q)Ωi .
2δt

(4.21d)

We recognize the traditional Nitsche and overlap enforcement of continuity over multiple
meshes from eqs. (4.18a) and (4.18b). Similarly, the CN-discretization of the pressure
correction equations only have a different scaling of the right hand side, and can be written
on the same form as eq. (4.21).
4.3. Variational form of the multimesh velocity update
The velocity update step eq. (3.7) is solved through the following projection: Find
n+1
u
∈ Vhg
a(un+1 , v) = l(v),

∀v ∈ Vh0 ,

(4.22)

where
a(u

n+1

, v) =

N
X

(u

n+1

, v)Ωi +

i=1

l(v) =

N 
X
i=1

N
−1
X

N
X

i=1 j=i+1

2δt
∇φ, v
u −
3
∗


.

q
y
βp ( un+1 , JvK)Oij

(4.23a)
(4.23b)

Ωi

As for the pressure correction scheme, only the right hand side of the equation changes for
the CN-scheme.
13

5. Implementation and creation holes
The multimesh finite element method is implemented in FEniCS [56, 57]. The code to
reproduce the numerical results is available on Zenodo [58]. In the multimesh implementation in FEniCS, the active domains Ωh,i are denoted with cell-markers on Tbi , as shown in
fig. 3. This implies that we do not alter the meshes, and they include both the active and
inactive cells. The corresponding multimesh function space is built over the whole mesh,
and the inactive degrees of freedom are treated as identity rows in the arising linear systems. A benefit of this approach is that one can change the positioning of the top meshes,
without remeshing the lowermost mesh. Only mesh intersections and new cell-markers has
to be determined.
To be able to efficiently create holes and to simplify the mesh generation, we extend the
b1 (as opposed to Ω = Ω
b1 ). In fig. 5 an example for such
lowermost domain, such that Ω ⊆ Ω
a selection of meshes is visualized, where the top mesh describes a elliptic obstacle, and
the bottom mesh described a channel. Then, by changing the status of the cells that are
overlapped or cut by the obstacle from active to inactive, we obtain the meshes describing
our physical domain. A more detailed description of this process can be found in [42].
6. Numerical Results
This section presents several validations of the multimesh IPCS scheme from section 4.
First, a Taylor-Green flow problem with known analytical solution is used to check spatial
and temporal convergence for the proposed multimesh schemes. Then the results for the
Turek-Schäfer benchmark are presented and relevant numerical quantities are compared to
values obtained with a single mesh implementation in FEATFLOW. Finally, the NavierStokes multimesh method is used in an optimization setting to demonstrate the flexibility
of the proposed method with regards to larger mesh deformations.
6.1. Taylor-Green Flow
This section considers the two dimensional Taylor-Green flow [59], which is an analytical
solution to the Navier-Stokes problem (2.1) given by


2
2
ue = − sin(πy) cos(πx)e−2π νt , sin(πx) cos(πy)e−2π νt ,
(6.1a)

1
2
(6.1b)
pe = − cos(2πx) + cos(2πy) e−4π νt ,
4
fe = (0, 0)T .
(6.1c)
We solve this problem in the domain Ω = [−1, 1]2 , T = 1, a kinematic viscosity ν = 0.01,
and with Dirichlet boundary conditions on the entire boundary,
i.e., u = ue on ∂Ω. To
R
obtain a unique pressure solution, we further require that Ω p dx = 0.
The domain Ω was decomposed into three predomains as shown in fig. 1. The TaylorHood finite element pair P 2 − P 1 was employed if otherwise not stated. For the spatial
convergence analysis, the predomains where meshed with increasing resolution. The cell
14

diameters of the coarsest multimesh are 0.25, 0.177, and 0.259 for the blue, green, and red
predomains, respectively. The resulting mesh is shown in fig. 3. For each spatial refinement
level, denoted as Lx , the cell diameter was halved. Similarly, for the temporal convergence
analysis, we define a sequence of decreasing time-steps. The coarsest time-step used was
δt = 0.1. For each temporal refinement level, denoted as Lt , the timestep was halved. The
stabilization parameters were set to αt = αc = 50 and βp = βt = βc = 10. As in traditional
Nitsche methods, the α parameters scales with k 2 , k being the polynomial degree of the
function space. For the β parameters, 10 is a common choice in literature.
The initial conditions for u0 , u−1 and p0 were obtained by interpolating the analytical
solution at the appropriate time steps t = 0 and t = −δt into the corresponding multimesh
function space. If not otherwise mentioned, we use the Taylor-Hood finite element pair to
represent the velocity and pressure solutions.
The measure the error of the discrete solutions, we define appropriate error norms.
Specifically, we consider the space-time L2 norm ||·||L2 (Ω)×L2 (0,T ) and the H 1 -space L2 time
norm as ||·||H 1 (Ω)×L2 (0,T ) . For the different norms, we expect the following behavior, see [48]:
||u − ue ||L2 (Ω)×L2 (0,T ) . (h3 + δt2 ),

(6.2a)

||u − ue ||H 1 (Ω)×L2 (0,T ) . (h2 + δt),

(6.2b)

||p − pe ||L2 (Ω)×L2 (0,T ) . (h2 + δt).

(6.2c)

0

The convergence rates are computed as followed. Denote ui,j the discrete velocity solution
for the i-th spatial refinement level and the j-th temporal refinement level. Then, the
spatial convergence rate is computed as


||ui,j − ue ||
/ log(2),
(6.3)
eocx = log
||ui+1,j − ue ||
the temporal convergence rate is computed as


||ui,j − ue ||
eoct = log
/ log(2),
||ui,j+1 − ue ||
and the spatial-temporal convergence rate is computed as


||ui,j − ue ||
eocxt = log
/ log(2).
||ui+1,j+1 − ue ||

(6.4)

(6.5)

The resulting space-time errors and convergence rates using the P 2 − P 1 finite element pair and the BDF2-scheme with an implicit Adams-Bashforth approximation of the
convection term, is visualized in Tables 1 to 3.
In Table 1, we observe the spatial convergence rates and errors for the finest temporal
discretization in boldface. The expected convergence rates eocx are obtained for the
first temporal refinements. Similarly, we observe the expected temporal convergence rate
15

for the three first refinements (in italics) for the finest spatial discretization. Similarly,
the combined space time errors and corresponding convergence rates are underlined. We
observe a reduction in order of convergence in both eocx and eoct for fine discretizations,
as the temporal and spatial error is of the same order of magnitude. Similar observations,
matching the expected convergence behavior for the pressure is visualized in Table 2. We
note that the temporal convergence rate of the H01 norm of the velocity in table 3 is heavily
influenced by the spatial discretization.
To eliminate spatial discretization errors, we use the same mesh configuration as above,
but a higher order function space pair, P 4 − P 3. Also, observe larger temporal changes,
we change the temporal discretization to δt = 0.5,T = 6. The errors, and corresponding
convergence rates are visualized in Tables 4 to 6. Here we observe the expected temporal
convergence rate eoct for all temporal refinement levels.
Errors and corresponding convergence rates were also computed for the solution at the
end time, obtaining similar results as the space-time norms.
For the Crank-Nicholson scheme with an implicit Adams-Bashforth approximation, the
same convergence study was preformed, yielding similar results as for the BDF2 scheme.
Note that for explicit Adams-Bashforth approximations, a finer temporal discretization is
needed to obtain a stable solution, as the CFL-condition [53] is stricter for explicit schemes.
Table 1: Errors and convergence rates for the velocity ui,j with t = (0, 1) in the L2 − L2 space-time norm
with P 2 − P 1 elements using the BDF2-scheme with an implicit Adams-Bashforth approximation.

Lt ↓ \Lx → 0
0
5.07 · 10−2
1
5.16 · 10−2
2
5.21 · 10−2
3
5.28 · 10−2
4
5.31 · 10−2
5
5.32 · 10−2
eocx
−
eocxt
−

1
7.67 · 10−3
6.56 · 10−3
6.32 · 10−3
6.24 · 10−3
6.43 · 10−3
6.84 · 10−3
2.96
2.95

2
4.97 · 10−3
1.54 · 10−3
9.78 · 10−4
8.26 · 10−4
7.62 · 10−4
7.70 · 10−4
3.15
2.75

3
5.03 · 10−3
1.29 · 10−3
3.62 · 10−4
1.92 · 10−4
1.37 · 10−4
1.02 · 10−4
2.92
2.35

4
5.07 · 10−3
1.31 · 10−3
3.27 · 10−4
8.95 · 10−5
4.40 · 10−5
2.85 · 10−5
1.84
2.13

5
5 .08 · 10 −3
1 .32 · 10 −3
3 .31 · 10 −4
8 .22 · 10 −5
2 .23 · 10 −5
. · −
1.43
2.05

eoct
−
1 .94
2 .00
2 .01
1 .88
1 .07

Table 2: Errors and convergence rates for the pressure pi,j with t = (0, 1) in the L2 − L2 space-time norm
with P 2 − P 1 elements using the BDF2-scheme with an implicit Adams-Bashforth approximation.

Lt ↓ \Lx → 0
0
3.49 · 10−2
1
3.55 · 10−2
2
3.65 · 10−2
3
3.77 · 10−2
4
3.85 · 10−2
5
3.96 · 10−2
eocx
−
eocxt
−

1
9.01 · 10−3
7.59 · 10−3
7.26 · 10−3
7.18 · 10−3
7.29 · 10−3
7.51 · 10−3
2.40
2.20

2
4.94 · 10−3
2.13 · 10−3
1.68 · 10−3
1.58 · 10−3
1.55 · 10−3
1.55 · 10−3
2.28
2.18

16

3
4.54 · 10−3
1.28 · 10−3
5.28 · 10−4
4.05 · 10−4
3.76 · 10−4
3.65 · 10−4
2.09
2.05

4
4.49 · 10−3
1.18 · 10−3
3.24 · 10−4
1.31 · 10−4
9.94 · 10−5
9.18 · 10−5
1.99
2.03

5
4 .48 · 10 −3
1 .17 · 10 −3
2 .99 · 10 −4
8 .14 · 10 −5
3 .27 · 10 −5
. · −
1.90
2.01

eoct
−
1 .94
1 .97
1 .88
1 .32
0 .41

Table 3: Errors and convergence rates for the pressure ui,j with t = (0, 1) in the H01 − L2 space-time norm
with P 2 − P 1 elements using the BDF2-scheme with an implicit Adams-Bashforth approximation.

Lt ↓ \Lx → 0
0
1.34 · 100
1
1.35 · 100
2
1.33 · 100
3
1.31 · 100
4
1.28 · 100
5
1.27 · 100
eocx
−
eocxt
−

1
3.19 · 10−1
3.31 · 10−1
3.32 · 10−1
3.31 · 10−1
3.30 · 10−1
3.29 · 10−1
1.95
2.02

2
8.27 · 10−2
7.10 · 10−2
7.37 · 10−2
7.41 · 10−2
7.40 · 10−2
7.38 · 10−2
2.16
2.17

3
6.40 · 10−2
1.93 · 10−2
1.58 · 10−2
1.64 · 10−2
1.66 · 10−2
1.66 · 10−2
2.15
2.17

4
6.51 · 10−2
1.59 · 10−2
4.56 · 10−3
3.64 · 10−3
3.79 · 10−3
3.83 · 10−3
2.12
2.11

5
6 .49 · 10 −2
1 .64 · 10 −2
3 .94 · 10 −3
1 .11 · 10 −3
8 .64 · 10 −4
. · −
2.09
2.07

eoct
−
1 .98
2 .06
1 .83
0 .36
−0 .06

Table 4: Errors and convergence rates for the velocity ui,j with t = (0, 6) in the L2 − L2 space-time norm
with P 4 − P 3 elements using the BDF2-scheme with an implicit Adams-Bashforth approximation.

Lt ↓ \Lx → 0
0
4.66 · 10−1
1
1.51 · 10−1
2
4.10 · 10−2
3
1.08 · 10−2
4
3.03 · 10−3
eocx
−
eocxt
−

1
4.65 · 10−1
1.51 · 10−1
4.07 · 10−2
1.04 · 10−2
2.64 · 10−3
0.20
1.63

2
4.65 · 10−1
1.51 · 10−1
4.06 · 10−2
1.04 · 10−2
2.62 · 10−3
0.01
1.89

3
4.65 · 10−1
1.51 · 10−1
4.06 · 10−2
1.04 · 10−2
2.62 · 10−3
0.00
1.96

4
4 .65 · 10 −1
1 .51 · 10 −1
4 .06 · 10 −2
1 .04 · 10 −2
. · −
0.00
1.99

eoct
−
1 .62
1 .89
1 .96
1 .99

Table 5: Errors and convergence rates for the pressure pi,j with t = (0, 6) in the L2 − L2 space-time norm
with P 4 − P 3 elements using the BDF2-scheme with an implicit Adams-Bashforth approximation.

Lt ↓ \Lx → 0
0
2.53 · 10−1
1
7.88 · 10−2
2
2.12 · 10−2
3
5.49 · 10−3
4
1.50 · 10−3
eocx
−
eocxt
−

1
2.53 · 10−1
7.87 · 10−2
2.11 · 10−2
5.42 · 10−3
1.37 · 10−3
0.13
1.68

2
2.53 · 10−1
7.87 · 10−2
2.11 · 10−2
5.42 · 10−3
1.37 · 10−3
0.00
1.90

3
2.53 · 10−1
7.87 · 10−2
2.11 · 10−2
5.42 · 10−3
1.37 · 10−3
0.00
1.96

4
2 .53 · 10 −1
7 .87 · 10 −2
2 .11 · 10 −2
5 .42 · 10 −3
. · −
0.00
1.98

eoct
−
1 .68
1 .90
1 .96
1 .98

6.2. Turek-Schäfer Benchmark (flow around a cylinder)
In this section, we consider the Turek-Schäfer benchmark [60] for unsteady flow around
a cylinder with Reynolds number 100 for a fixed time interval T = [0, 8].
The problem consists of a cylinder with diameter 0.1 is placed in a channel, as shown
in fig. 4. The outlet condition is chosen as the natural boundary-condition eq. (2.1d), the
top and bottom wall has a homogeneous Dirichlet condition, and the inlet condition is:
g(0, y, t) = (4U (t)y(H − y)/H 2 , 0),
where U (t) = 1.5 sin(πt/8). The kinematic viscosity ν = 0.001 and the fluid density ρ = 1.
17

Table 6: Errors and convergence rates for the pressure ui,j with t = (0, 6) in the H01 − L2 space-time norm
with P 4 − P 3 elements using the BDF2-scheme with an implicit Adams-Bashforth approximation.

Lt ↓ \Lx → 0
0
2.47 · 100
1
7.52 · 10−1
2
2.01 · 10−1
3
5.39 · 10−2
4
1.97 · 10−2
eocx
−
eocxt
−

1
2.44 · 100
7.49 · 10−1
2.00 · 10−1
5.11 · 10−2
1.29 · 10−2
0.61
1.72

2
2.43 · 100
7.48 · 10−1
2.00 · 10−1
5.10 · 10−2
1.29 · 10−2
0.00
1.90

3
2.43 · 100
7.48 · 10−1
2.00 · 10−1
5.10 · 10−2
1.29 · 10−2
0.00
1.97

4
2 .43 · 10 0
7 .48 · 10 −1
2 .00 · 10 −1
5 .10 · 10 −2
. · −
0.00
1.98

eoct
−
1 .70
1 .90
1 .97
1 .98

u=0
0.16m
0.41m

0.15m

u=0

0.15m

u=0

(0, 0)

2.2m
Figure 4: Geometrical setup of the Turek-Schäfer Benchmark.

For this problem, we use a multimesh consisting of two meshes, one describing the
channel, and one describing the obstacle, as shown in fig. 6. The cells of the background
mesh that is inside the obstacle is marked as covered cells, as explained in [42]. The total
of active degrees of freedom in the velocity and pressure space is 15,114. There are 1,789
deactivated degrees of freedom, due the the marking of the obstacle, and cells fully covered
by the top mesh. The meshes are visualized in fig. 5. We choose the temporal discretization
δt = 1/1600, similar to [60]. We use the same multimesh stabilization parameters as for
the Taylor-Green problem in section 6.1.

Figure 5: The multimesh used for the Turek-Schäfer benchmark.

For this benchmark, the representative quantities are the the drag and lift coefficients
over the cylinder for the full time interval. Also, the pressure difference between (0.15, 0.2)
and (0.25, 0.2) is common. In two dimensions, the drag and lift coefficient can be written
18

as the following [60].
Z
2
CD (u, p, t, ∂ΩS ) =
(ρνn · ∇utS (t)ny − p(t)nx ) dS,
2
ρLUmean
∂ΩS
Z
2
CL (u, p, t, ∂ΩS ) = −
(ρνn · ∇utS (t)nx + p(t)ny ) dS,
2
ρLUmean
∂ΩS

(6.6a)
(6.6b)

where utS is the tangential velocity component at the interface of the obstacle ∂ΩS , defined
as utS = u·(ny , −nx ), Umean = 1 the average inflow velocity, and L the length of the channel.
The flow and pressure at the final time t = 8 for the implicit Crank-Nicholson scheme
is visualized in fig. 6.

Figure 6: The velocity magnitude and pressure field visualized at the end time for the implicit CrankNicholson scheme. Note that the values of the inactive dofs inside the obstacle is (0, 0) for the velocity
and 0 for the pressure.

We compare our numerical values with those obtained from the FEATFLOW webpage [61]. For this comparison, we consider two schemes:
• The BDF2 scheme with an explicit Adams-Bashforth approximation
• The Crank-Nicholson scheme with an implicit Adams-Bashforth approximation
The computed drag and lift coefficient, and the pressure difference, is shown in fig. 7a,
alongside with the data obtained from Featflow [61]. The absolute error between the
multimesh simulation and the FEATFLOW data is also visualized. We observe that the
lift coefficient has a slight phase shift and a lower amplitude than the Featflow data.
19

(a) Results using a multimesh with 15,114 active spatial degrees of freedoms (dofs) and 1,789
inactive dofs, and a timestep of δt = 1/1600. The reference solution Turek Lv 4 uses 42,016
dofs and a timestep of δt = 1/1600. A phase shift and dampened altitude is observed in the lift
coefficient, while the drag coefficient and pressure difference is matching [60].

20

(b) Results using a multimesh with 32,271 active spatial degrees of freedoms (dofs) and 4,099
inactive dofs. MM CN uses a timestep of δt = 1/1600, while MM BDF2 uses δt = 1/2000 to
ensure stability. The reference solution Turek Lv 4 uses 42,016 dofs and a timestep of δt = 1/1600.
Figure 7: Numerical results of the Turek-Schäfer benchmark for two different multimesh discretizations
(subfigures a and b). For each discretization, we compare the BDF2 multimesh scheme with an explicit
Adams-Bashforth discretization (MM BDF2), a Crank-Nicolson multimesh scheme with an implicit AdamsBashforth discretization (MM CN), and a reference solution computed with FEATFLOW [61] (Turek
Lv 4). The plots visualize the drag coefficient CD , the lift coefficient CL and the pressure difference
∆p = p(0.15, 0.2) − p(0.25 − 0.2) for t ∈ [0, 8], as well as their absolute errors. We observe that the
magnitude of the error in all quantities in fig. 7b are reduced with one order compared to fig. 7a.

21

The multimesh is further refined to closer match the number of degrees in [60]. The
refined problem now contains a total of 32,271 degrees of freedom. Due to the explicit
handling of the convection term in eq. (2.1), a fine time discretization is employed, δt =
1/2000, to ensure that the CFL condition [53] holds. In fig. 7b, we observe that the phase
shift and dampening disappears for both the Crank–Nicolson and BDF2 multimesh scheme.
Also the error decreases with one order of magnitude.
6.3. Positional optimization of six obstacles
In this section, we use the multimesh Navier-Stokes splitting scheme in an optimization
setting to demonstrate the flexibility of the proposed method with regards to larger mesh
deformations. The goal of this section is to find the optimal placement and orientation of
6 obstacles, to maximize the drag coefficient (6.6).
The mathematical formulation of the optimization problem is
Z 1
CD (u, p, t, ∂Ωi ) dt, (6.7a)
max
J(c1 , . . . , cN , θ1 , . . . , θ6 ) =
c1 ,...,c6 ,θ1 ,...,θ6

0.1

subject to eq. (2.1),
||ci − cj ||l2 > dij , i, j = 1, . . . , 6, i 6= j,
(0, 0) < (l, h) ≤ ci ≤ (l + l1 , h + h1 ) < (L, H),
0 ≤ θi ≤ 2π,

(6.7b)
(6.7c)
(6.7d)

where ci denotes the center and θi the orientation of the ith obstacle with boundary ∂Ωi ,
dij denotes the minimal distance between the center of the ith and jth obstacle, [l, l +
l1 ] × [h, h + h1 ] denote the bounded area of the optimization parameters, and L and H the
length and width of the channel, respectively.
For all boundaries but the outlet, we prescribe Dirichlet boundary conditions:
(

πt
t ∈ [0, 0.1)
sin 2·0.1
for (x, y) ∈ ∂Ωin ,
g(y, t) =
1 t ∈ [0.1, 1]
for (x, y) ∈ ∂Ωw

g(y, t) = 0

N
[

∂Ωi .

i=1

Here ∂Ωin denotes the inlet and ∂Ωw denotes the top and bottom wall of the channel.
The optimization problem consists of 6 obstacles, that are free to move within a a
rectangular area in a channel, see fig. 8.
The time discretization parameter δt = 0.01, the kinematic viscosity ν = 0.001, the
source term f = (0, 0) and the multimesh stabilization parameters were the same as in the
previous examples. The domain parameters in our example where set to L = 2, H = 1.5,
l = 0.3, l1 = 0.9, h = 0.4, h1 = 0.7, dij = 0.183 for i, j = 1, . . . , 6, i 6= j. The obstacles are
ellipses with ry = 0.05,ry = 0.025.
We use the multimesh Crank-Nicholson splitting scheme with an implicit AdamsBashforth approximation for the numerical simulation of the state constraint eq. (2.1).
22

Figure 8: The physical domain, a channel including 5 obstacles, described by 8 meshes. The background
mesh (in black) describes the fluid channel, where the inlet is at the left side of the channel, the outlet at
the right hand side, and rigid walls on the top and bottom. The second mesh (in green), visualizes the
area the obstacles (in red) are bounded to.

To solve the optimization problem, we use IPOPT [62]. A finite difference gradient,
with  = 10−3 is supplied to IPOPT. The optimization algorithm was terminated manually
after 40 iterations, as no further increase was observed.
After 40 iterations, the functional value J had increased from 2.64 to 13.09. The IPOPT
iterations are visualized in fig. 9. Note that sometimes the functional value decreases from
one iteration to another, due to a change in the barrier parameters used in IPOPT. The
initial and final configuration of the obstacles are visualized in fig. 10. We observe that no
re-meshing or mesh deformation schemes are needed to update the domain, as they can
move independently of each other.
A breakdown of the time-consumption of a forward simulation is visualized in table 7.
The forward simulation is split into four core components: Each of the steps in the splitting
scheme, and the mesh update procedure. Each of the three steps are then further split into
an assembly and solve step, while the mesh update step is split into the movement of the
meshes, and the re-computation of intersections and marking of degrees of freedom inside
the obstacles. We observe that the first step is the most time-consuming step, as we have
to re-assemble the left hand side of the linear system for each time step with the implicit
Adams-Bashforth approximation. The second-most expensive step is the velocity update
steps, since the velocity function space is higher order than the pressure space. The mesh
update barely takes any time, while the intersection computation, done once per forward
run, takes as much time as solving the pressure correction equation at a single time step.
7. Conclusions
In this paper we have presented two fractional step methods based on the incremental
pressure correction method for finite element methods of non-matching meshes. The two
schemes were based on BDF2 and Crank–Nicolson temporal discretization. We verified
23

14
Functional value

12
10
8
6
4
0

5

10

15

20
25
Ipopt iterations

30

35

40

Figure 9: The functional value for each IPOPT iteration. The sporadic decrease in the functional from
one iteration to another is explained by an increase in the barrier parameter, which are enforcing the
non-collision and box constraints.

Figure 10: The initial and final configuration of the turbines. The final configuration was reached after
terminating IPOPT at 40 iterations. Then the functional had increased from 2.64 to 13.09. The termination
is due to the finite difference approximation of the gradient, who is not discretely consistent without
changing the step since in the finite difference operation.

the implementation by considering the 2D Taylor-Green flow problem with an analytical
solution. The schemes are also verified by considering the Turek-Schafer benchmark for
flow around a cylinder for a fixed time interval. Finally, we presented an application of
24

Operation
One call
Total

Tentative velocity
Assembly (s) Solve (s)
1.55 · 10−1
1.99 · 10−1
3.54 · 101

Pressure correction
Assembly (s) Solve (s)
2.62 · 10−2
1.22 · 10−2
2.67 · 100

Velocity update
Assembly (s) Solve (s)
8.09 · 10−2
1.06 · 10−1
1.16 · 101

Mesh Update
Update (s) Intersections (s)
3.57 · 10−5
1.61 · 10−2
3.22 · 10−3

Table 7: Timings for a forward run of the optimization problem with the implicit Adams-Bashforth
approximation and Crank-Nicholson temporal discretization. Each of the three steps of the splitting
scheme is split into an assemble and a solve operation. The assembly operation generates the linear
system and applies boundary conditions. The solve operation solves the corresponding linear system. The
mesh update step consists of two operations, translating and rotating all of the meshes, and computing the
intersection between the meshes and deactivating the dofs inside the obstacles. The total time corresponds
to the time a full forward simulation with 100 time steps. It is averaged over 5 runs.

multimesh, considering the drag maximization over 6 obstacles subject to their position
and orientation. This example highlighted that each obstacle can be freely translated and
rotated, without the need for mesh deformation or re-meshing.
In this paper, we used a finite difference approximation of the gradient used in the
optimization example. Further studies would have to be conducted to obtain a optimizethen-discretize gradient for the multi domain Navier-Stokes equation.
8. Acknowledgments
The authors would like to acknowledge Kristian Valen-Sendstad and Alban Souche
at Simula Research Laboratory for many fruitful discussions regarding splitting schemes.
This work was supported by the Research Council of Norway through a FRIPRO grant,
project number 251237. André Massing gratefully acknowledges financial support from the
Swedish Research Council under Starting Grant 2017-05038.
References
[1] L. Antiga, J. Peiró, D. A. Steinman, From image data to computational domains, in: Cardiovascular Mathematics, Springer, 2009, pp. 123–175. doi:10.1007/
978-88-470-1152-6_4.
[2] T. J. Hughes, J. A. Cottrell, Y. Bazilevs, Isogeometric analysis: CAD, finite elements,
NURBS, exact geometry and mesh refinement, Computer methods in applied mechanics and engineering 194 (39) (2005) 4135–4195. doi:10.1016/j.cma.2004.10.008.
[3] J. L. Steger, F. C. Dougherty, J. A. Benek, A chimera grid scheme.[multiple overset body-conforming mesh system for finite difference adaptation to complex aircraft
configurations], Advances in grid generation; Proceedings of the Applied Mechanics,
Bioengineering, and Fluids Engineering Conference, Houston, TXw (1983) 59–69.
URL https://ntrs.nasa.gov/search.jsp?R=19840028795
[4] J. Steger, The Chimera method of flow simulation, in: Workshop on applied CFD,
Univ of Tennessee Space Institute, Vol. 188, 1991.
25

[5] F. Brezzi, J.-L. Lions, O. Pironneau, Analysis of a Chimera method, Comptes Rendus
de l’Academie des Sciences Series I Mathematics 332 (7) (2001) 655–660. doi:10.
1016/S0764-4442(01)01904-8.
[6] D. M. Belk, The role of overset grids in the development of the general purpose CFD
code, Surface Modeling, Grid Generation, and Related Issues in Computational Fluid
Dynamic (CFD) Solutions (1995) 193–204.
URL https://ntrs.nasa.gov/search.jsp?R=19950022317
[7] W. Chan, R. Gomez, S. Rogers, P. Buning, Best practices in overset grid generation,
in: 32nd AIAA Fluid Dynamics Conference and Exhibit, 2002. doi:10.2514/6.
2002-3191.
[8] E. Rank, Adaptive remeshing and h-p domain decomposition, Computer Methods
in Applied Mechanics and Engineering 101 (1) (1992) 299 – 313. doi:10.1016/
0045-7825(92)90027-H.
[9] R. Becker, P. Hansbo, R. Stenberg, A finite element method for domain decomposition
with non-matching grids, ESAIM: M2AN 37 (2) (2003) 209–225. doi:10.1051/m2an:
2003023.
[10] G. Houzeaux, J. C. Cajas, M. Discacciati, B. Eguzkitza, A. Gargallo-Peiró, M. Rivero,
M. Vázquez, Domain decomposition methods for domain composition purpose:
Chimera, overset, gluing and sliding mesh methods, Archives of Computational Methods in Engineering 24 (4) (2017) 1033–1070. doi:10.1007/s11831-016-9198-8.
[11] Q. V. Dinh, R. Glowinski, J. He, V. Kwock, T. W. Pan, J. Périaux, Lagrange multiplier
approach to fictitious domain methods: application to fluid dynamics and electromagnetics, in: Fifth International Symposium on Domain Decomposition Methods
for Partial Differential Equations, no. 55, SIAM, 1992, pp. 151–194.
[12] R. Glowinski, T.-W. Pan, J. Periaux, A fictitious domain method for Dirichlet problem
and applications, Computer Methods in Applied Mechanics and Engineering 111 (3)
(1994) 283–303. doi:10.1016/0045-7825(94)90135-X.
[13] R. Glowinski, T.-W. Pan, J. Periaux, A Lagrange multiplier/fictitious domain method
for the Dirichlet problem — Generalization to some flow problems, Japan Journal of
Industrial and Applied Mathematics 12 (1) (1995) 87. doi:10.1007/BF03167383.
[14] N. Moës, J. Dolbow, T. Belytschko, A finite element method for crack growth without
remeshing, International journal for numerical methods in engineering 46 (1) (1999)
131–150. doi:10.1002/(sici)1097-0207(19990910)46:1<131::aid-nme726>3.3.
co;2-a.
[15] A. Gerstenberger, W. A. Wall, An extended finite element method/Lagrange multiplier based approach for fluid–structure interaction, Computer Methods in Applied
26

Mechanics and Engineering 197 (19-20) (2008) 1699–1714. doi:10.1016/j.cma.2007.
07.002.
[16] U. M. Mayer, A. Popp, A. Gerstenberger, W. A. Wall, 3D fluid–structure-contact
interaction based on a combined XFEM FSI and dual mortar contact approach, Computational Mechanics 46 (1) (2010) 53–67. doi:10.1007/s00466-010-0486-0.
[17] L. Cattaneo, L. Formaggia, G. F. Iori, A. Scotti, P. Zunino, Stabilized extended finite
elements for the approximation of saddle point problems with unfitted interfaces,
Calcolo 52 (2) (2015) 123–152. doi:10.1007/s10092-014-0109-9.
[18] K. Agathos, E. Chatzi, S. P. A. Bordas, Multiple crack detection in 3d using a stable
xfem and global optimization, Computational Mechanics 62 (4) (2018) 835–852. doi:
10.1007/s00466-017-1532-y.
[19] L. Formaggia, C. Vergara, S. Zonca, Unfitted extended finite elements for composite
grids, Computers and Mathematics with Applications 76 (4) (2018) 893 – 904. doi:
https://doi.org/10.1016/j.camwa.2018.05.028.
[20] A. Hansbo, P. Hansbo, An unfitted finite element method, based on Nitsche’s method,
for elliptic interface problems, Comput. Methods Appl. Mech. Engrg. 191 (47-48)
(2002) 5537–5552. doi:10.1016/S0045-7825(02)00524-8.
[21] A. Hansbo, P. Hansbo, M. G. Larson, A Finite Element Method on Composite Grids
based on Nitsche’s Method, ESAIM-Math. Model. Num. 37 (3) (2003) 495–514. doi:
10.1051/m2an:2003039.
[22] J. Nitsche, Über ein Variationsprinzip zur Lösung von Dirichlet-Problemen bei Verwendung von Teilräumen, die keinen Randbedingungen unterworfen sind, Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg 36 (1) (1971) 9–15.
doi:10.1007/BF02995904.
[23] A. Massing, M. G. Larson, A. Logg, M. E. Rognes, A stabilized Nitsche overlapping
mesh method for the Stokes problem, Numerische Mathematik 128 (1) (2014) 73–101.
doi:10.1007/s00211-013-0603-z.
[24] E. Burman, S. Claus, P. Hansbo, M. G. Larson, A. Massing, CutFEM: Discretizing geometry and partial differential equations, International Journal for Numerical
Methods in Engineering 104 (7) (2015) 472–501. doi:10.1002/nme.4823.
[25] D. N. Arnold, F. Brezzi, B. Cockburn, L. D. Marini, Unified analysis of discontinuous
Galerkin methods for elliptic problems, SIAM J. Num. Anal. 39 (5) (2002) 1749–1779.
doi:10.1137/S0036142901384162.
[26] J. Parvizian, A. Düster, E. Rank, Finite cell method, Computational Mechanics 41 (1)
(2007) 121–133. doi:10.1007/s00466-007-0173-y.
27

[27] M. Ruess, D. Schillinger, Y. Bazilevs, V. Varduhn, E. Rank, Weakly enforced essential
boundary conditions for nurbs-embedded and trimmed nurbs geometries on the basis
of the finite cell method, International Journal for Numerical Methods in Engineering
95 (10) (2013) 811–846. doi:10.1002/nme.4522.
[28] D. Schillinger, M. Ruess, The finite cell method: A review in the context of
higher-order structural analysis of cad and image-based geometric models, Archives
of Computational Methods in Engineering 22 (3) (2015) 391–455. doi:10.1007/
s11831-014-9115-y.
[29] T. Hoang, C. V. Verhoosel, F. Auricchio, E. H. van Brummelen, A. Reali, Mixed
isogeometric finite cell methods for the stokes problem, Computer Methods in Applied Mechanics and Engineering 316 (2017) 400 – 423, special Issue on Isogeometric
Analysis: Progress and Challenges. doi:10.1016/j.cma.2016.07.027.
[30] C. S. Peskin, The immersed boundary method, Acta Numerica 11 (2002) 479–517.
doi:10.1017/S0962492902000077.
[31] D. Boffi, L. Gastaldi, A finite element approach for the immersed boundary method,
Computers and Structures 81 (8-11) (2003) 491–501. doi:10.1016/S0045-7949(02)
00404-2.
[32] L. Heltai, F. Costanzo, Variational implementation of immersed finite element methods, Computer Methods in Applied Mechanics and Engineering 229-232 (2012) 110 –
127. doi:10.1016/j.cma.2012.04.001.
[33] Z. Li, The immersed interface method using a finite element formulation, Applied
Numerical Mathematics 27 (3) (1998) 253 – 267. doi:10.1016/S0168-9274(98)
00015-4.
[34] Z. Li, K. Ito, The Immersed Interface Method: Numerical Solutions of PDEs Involving Interfaces and Irregular Domains, Frontiers in Applied Mathematics, Society for
Industrial and Applied Mathematics, 2006.
[35] J. Fish, The s-version of the finite element method, Computers & Structures 43 (3)
(1992) 539 – 547. doi:10.1016/0045-7949(92)90287-A.
[36] J. Fish, S. Markolefas, R. Guttal, P. Nayak, On adaptive multilevel superposition of
finite element meshes for linear elastostatics, Applied Numerical Mathematics 14 (1)
(1994) 135 – 164. doi:10.1016/0168-9274(94)90023-X.
[37] S. P. A. Bordas, E. Burman, M. G. Larson, M. A. Olshanskii, Geometrically Unfitted Finite Element Methods and Applications, Vol. 121 of Lecture Notes in Computational Science and Engineering, Springer International Publishing, 2017. doi:
10.1007/978-3-319-71431-8.

28

[38] F. de Prenter, C. Verhoosel, E. van Brummelen, Preconditioning immersed isogeometric finite element methods with application to flow problems, Computer Methods
in Applied Mechanics and Engineering 348 (2019) 604 – 631. doi:10.1016/j.cma.
2019.01.030.
[39] A. Johansson, M. G. Larson, A. Logg, MultiMesh Finite Elements with Flexible Mesh
Sizes, arXiv preprint arXiv:1804.06455 (2018).
URL https://arxiv.org/abs/1804.06455
[40] A. Johansson, B. Kehlet, M. G. Larson, A. Logg, Multimesh finite element methods: Solving PDEs on multiple intersecting meshes, Computer Methods in Applied
Mechanics and Engineering 343 (2019) 672–689. doi:10.1016/j.cma.2018.09.009.
[41] A. Johansson, M. G. Larson, A. Logg, A MultiMesh Finite Element Method for the
Stokes Problem, in: E. H. van Brummelen, A. Corsini, S. Perotto, G. Rozza (Eds.),
Numerical Methods for Flows: FEF 2017 Selected Contributions, Springer International Publishing, 2019. doi:10.1007/978-3-030-30705-9.
[42] J. S. Dokken, S. W. Funke, A. Johansson, S. Schmidt, Shape Optimization Using the
Finite Element Method on Multiple Meshes with Nitsche Coupling, SIAM Journal on
Scientific Computing 41 (3) (2019) A1923–A1948. doi:10.1137/18M1189208.
[43] A. J. Chorin, Numerical solution of the Navier-Stokes equations, Mathematics of Computation 22 (104) (1968) 745–762. doi:10.1090/S0025-5718-1968-0242392-2.
[44] R. Temam, Sur l’approximation de la solution des équations de Navier-Stokes par
la méthode des pas fractionnaires (I), Archive for Rational Mechanics and Analysis
32 (2) (1969) 135–153. doi:10.1007/BF00247696.
[45] K. Goda, A multistep technique with implicit difference schemes for calculating two- or
three-dimensional cavity flows, Journal of computational physics 30 (1) (1979) 76–95.
doi:10.1016/0021-9991(79)90088-3.
[46] J. Van Kan, A second-order accurate pressure-correction scheme for viscous incompressible flow, SIAM Journal on Scientific and Statistical Computing 7 (3) (1986)
870–891. doi:10.1137/0907059.
[47] L. Timmermans, P. Minev, F. Van De Vosse, An approximate projection scheme for
incompressible flow using spectral elements, International Journal for Numerical Methods in Fluids 22 (7) (1996) 673–688. doi:10.1002/(SICI)1097-0363(19960415)22:
7<673::AID-FLD373>3.0.CO;2-O.
[48] J. Guermond, P. Minev, J. Shen, An overview of projection methods for incompressible
flows, Computer Methods in Applied Mechanics and Engineering 195 (44) (2006) 6011–
6045. doi:10.1016/j.cma.2005.10.010.

29

[49] A. Vreman, The projection method for the incompressible Navier–Stokes equations:
The pressure near a no-slip wall, Journal of Computational Physics 263 (2014) 353–
374. doi:10.1016/j.jcp.2014.01.035.
[50] P. M. Gresho, R. L. Sani, On pressure boundary conditions for the incompressible
Navier-Stokes equations, International Journal for Numerical Methods in Fluids 7 (10)
(1987) 1111–1145. doi:10.1002/fld.1650071008.
[51] R. L. Sani, J. Shen, O. Pironneau, P. M. Gresho, Pressure boundary condition for
the time-dependent incompressible Navier–Stokes equations, International Journal for
Numerical Methods in Fluids 50 (6) (2006) 673–682. doi:10.1002/fld.1062.
[52] A. Quarteroni, R. Sacco, F. Saleri, Numerical mathematics, Vol. 37, Springer Science
& Business Media, 2010.
[53] R. Courant, K. Friedrichs, H. Lewy, Über die partiellen Differenzengleichungen der
mathematischen Physik, Mathematische annalen 100 (1) (1928) 32–74. doi:10.1007/
BF01448839.
[54] S. C. Brenner, L. R. Scott, The mathematical theory of finite element methods, 3rd
Edition, Vol. 15 of Texts in Applied Mathematics, Springer, 2008. doi:10.1007/
978-0-387-75934-0.
[55] D. A. Di Pietro, A. Ern, Mathematical aspects of discontinuous Galerkin methods,
Vol. 69, Springer Science & Business Media, 2011.
[56] M. S. Alnæs, J. Blechta, J. Hake, A. Johansson, B. Kehlet, A. Logg, C. Richardson,
J. Ring, M. E. Rognes, G. N. Wells, The FEniCS project version 1.5, Archive of
Numerical Software 3 (100) (2015) 9–23. doi:10.11588/ans.2015.100.20553.
[57] A. Logg, G. N. Wells, DOLFIN: Automated Finite Element Computing, ACM Trans.
Math. Softw. 37 (2) (2010) 20. doi:10.1145/1731022.1731030.
[58] J. S. Dokken, A. Johansson, A. Massing, S. W. Funke, Source code for: A multimesh
finite element method for the Navier- Stokes equations based on projection methods
(2019). doi:10.5281/zenodo.3564206.
[59] C. E. Pearson, A Computational Method for Time-dependant Two-dimensional Incompressible Viscous Flow Problems, Tech. Rep. SRRC-RR-64-17, Sperry Rand Research
Centre (1964).
[60] M. Schäfer, S. Turek, F. Durst, E. Krause, R. Rannacher, Benchmark Computations
of Laminar Flow Around a Cylinder, Vieweg+Teubner Verlag, Wiesbaden, 1996, p.
547–566. doi:10.1007/978-3-322-89849-4_39.

30

[61] S. "Turek, Featflow CFD Benchmarking Project: DFG flow around cylinder benchmark 2D-3, fixed time interval (Re=100), "Accessed date: 2019-07-25" (2019).
URL
"http://www.featflow.de/en/benchmarks/cfdbenchmarking/flow/dfg_
benchmark3_re100.html"
[62] A. Wächter, L. T. Biegler, On the implementation of an interior-point filter line-search
algorithm for large-scale nonlinear programming, Mathematical programming 106 (1)
(2006) 25–57. doi:10.1007/s10107-004-0559-y.

31

