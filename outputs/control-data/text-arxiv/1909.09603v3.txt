A

NOVEL ALGORITHM FOR CONFIDENCE SUB - CONTOUR BOX
ESTIMATION : AN ALTERNATIVE TO TRADITIONAL CONFIDENCE
INTERVALS

arXiv:1909.09603v3 [stat.ME] 8 Oct 2019

A P REPRINT
Daniel Rojas-Diaz.∗
Department of biological science
school of basic science
Universidad Eafit
Medellin, Colombia
drojasd@eafit.edu.co

Alexandra Catano-Lopez.
Department of mathematical science
school of basic science
Universidad Eafit
Medellin, Colombia
acatano@eafit.edu.co

Carlos M. Velez-Sanchez
Department of mathematical science
school of basic science
Universidad Eafit
Medellin, Colombia
cmvelez@eafit.edu.co

October 9, 2019

A BSTRACT
The factor estimation process is a really challenging task for non-linear models. Even whether
researchers manage to successfully estimate model factors, they still must estimate their confidence
intervals, which could require a high computational cost to turn them into informative measures. Some
methods in the literature attempt to estimate regions within the estimation search space where factors
may jointly exist and fit the real data (confidence contours), however, its estimation process raises
several issues as the number of factors increases. Hence, in this paper, we focus on the estimation of
a subregion within the confidence contour that we called as Confidence Sub-contour Box (CSB). We
proposed two main algorithms for CSB estimation, as well as its interpretation and validation. Given
the way we estimated CSB, we expected and validated some useful properties of this new kind of
confidence interval: a user-defined uncertainty level, asymmetrical intervals, sensitivity assessment
related to the interval length for each factor, and the identification of true-influential factors.
Keywords Confidence intervals · Confidence contour · Factor estimation · Sensitivity · Uncertainty

1

Introduction

The development of mathematical models that describe real-life situations plays an important role in basic and applied
research of disciplines as physics, biology, chemistry, engineering, and epidemiology [3][4]. Those models usually
depend on several factors (parameters and initial conditions) whose values are unknown or only known imprecisely
[21]. Hence, the parameter estimation (factor estimation in this paper), as the assignment of values to the factors in a
model to optimize the agreement between the model and real data, and the calculus of its confidence intervals (CI) are
essential when modeling dynamical systems to study relations among variables [4][7]. CI estimation is important for
model validation, risk assessment, uncertainty analysis, and sensitivity analysis [12]. However, for non-linear systems,
CI achievement is a challenge because there may be several sets of factors that meet optimization criteria [22][5]. When
the CI group several sub-intervals where the factors meet optimization criteria, they also enclose potentially wrong
regions, i.e., an overestimation of ranges for the factors that might affect posterior analysis [22]. Thus, we will propose
of a new kind of CI and its achievement for non-linear models focusing in a previous promissory result from factor
estimation, even under uncertainty in real data or identifiability issues.
When proposing a model for factor estimation, the researchers must have some a priori knowledge about the values that
each factor must take [7]; thus, it is likely possible to declare an interval for each parameter. On the other hand, we can
represent any set of factors as a coordinate in a n−dimensional space (space of factors), where each axis represents one
∗

Corresponding author

A PREPRINT - O CTOBER 9, 2019

of the n model factors. Then, through defining factor intervals, we are also creating a n−orthotope that englobes all
feasible sets of factors (search box). Additionally, in real life, there is uncertainty in data; therefore, when we perform
parameter estimation, we are not characterizing which points but regions of the search box are consistent with real data
and prior knowledge, i.e., contours of the search box that encloses real data (confidence contour) [7].
For factor estimation, it is common to apply optimization methods that minimize a least-squares expression (coincidence
between model output and real data) [22]. Thus, it is possible to map each point from search space into least squares
surface, and then, characterize this surface through contours [5]. For linear models, the surface contours would be
ellipsoidal and would have a single global minimum height; while for non-linear models, the contours are not ellipsoidal
but tend to be irregular, perhaps with several local minima and even more than one global minimum [5]. After factor
estimation task, it is highly recommended to estimate the CI to test and generate a hypothesis that helps to understand
the processes underlying the real data [2]. The usual way to CI achievement is to perform a large number of parameter
estimation tasks, and then, to calculate the probability distribution of each factor [5]. However, as discussed previously,
every interval defined separately for each factor defines a n−orthotope, while confidence contour has an ellipsoidal or
irregular form; thereby, the CI may lead to large errors if one is trying to infer a region where the factors may jointly
exist [22].
There are some methods to estimate confidence contours instead of CI [14]. Looking at the confidence contours will
give a better picture of the optimal values for the factors, and their correlation [14]. Unfortunately, the complexity in
the calculus of confidence contours increases as the number of parameters rises [22]. Then, we do not focus on estimate
confidence contours; since with large models, it is not worth, or not even possible to estimate them. On the other hand,
multiple global or local minima may intricate the estimation of both of CI or confidence contour because of its relation
with model identifiability [9]. Thus, there is a problem with gradient search algorithms for factor estimation: since each
initial point in factor estimation task can lead to convergence in a different local minimum, then resultant confidence
intervals may enclose two different regions that fit with real data [22]. Those overestimated confidence intervals can be
non-informative and lead to wrong conclusions, especially for uncertainty and sensitivity analysis [12].
In practice, factor and CI estimation for non-linear models is a difficult task due to the irregular form of confidence
contour and the multiple local or global minima of its least-squares surface. Hence, in the present paper, we
propose a method to calculate a different type of CI for a researcher-selected minimum. We also guarantee that the
resultant n−orthotope is a subregion of the confidence contour for the minimum, therefore we call it the Confidence
Sub-contour-Box (CSB); also, we managed to establish a direct relation between sensitivity concepts and CSB to
achieve a unique box with some useful properties for the general purposes of model validation, risk assessment, and
uncertainty analysis.
The paper is distributed as follows: first, we present a background for factors and confidence intervals; where we explain
the basis of dissimilarity quantification, parameter estimation, and confidence intervals. Then, we present a section of
the construction of a promissory search box, in which we define a threshold criterion to select a sub-contour box. In
Section uncertainty-based confidence interval shrink, we present the algorithm that estimates a confidence sub-contour
box beside its explanation. Finally, we present an application case for the algorithm using the novel GSUA-CSB toolbox
and a dengue spread model.

2

Background for estimation of factors and confidence intervals

In this section, we want to briefly introduce some approaches for dissimilarity quantification among model output
vectors, its relevance for parameter estimation, and its relation with sensitivity analysis. This is important because the
method we will define has its foundation in dissimilarity among model outputs regarding a previously-known nominal
output. Further, we hypothesize that said dissimilarity must state a direct correlation with less feasible values for
sensitive parameters in the model.
Suppose we have a model in the general form (1) on which we want to perform both of the factor and CI estimation
task over k input factors X = { X1 , X2 , ..., Xk }:
Y = f (X, t), t ∈ τ,

(1)

Where Y is the dynamic output, f represents the deterministic model response function, X is the vector of factors, and τ
is the discretized domain of the model. As pointed out in the introduction, we define the search box following the logical
sequence next: Being Xi the i−th factor, then Xi ∈ Ii , Ii = Ii , where Ii is the factor interval and Ii , Ii represents its
lower and upper bounds, respectively. Thus, the search box of the model is given by Ω = { I1 } × ... × { Ik }.
2

A PREPRINT - O CTOBER 9, 2019

Symbol
|·|
N
k
X
Xi
X̂
X̂i
X̂∼i
Ω
Ω̂
Θ
Mi:j,k:l

Table 1: Notations used in the text
Description
Cardinality of argument (·)
Sample size
Number of factors
Vector of input factors (1 × k). Also, it could represent a matrix of (N × k), then X = M
The i−th factor, also, for another vectors, it is the i−th element
Vector of the best estimation for input factors
The value of best estimation for the i−th factor
Vector of the best estimation for all input factors but the i−th factor
Model search space
Promissory model search space
Confidence sub-contour box for X̂
Matricial notation to extract certain rows and columns for a given matrix M . It must be read as:
Select rows from i to j and columns from k to l. end represent the largest possible subindex

Once we define the search box, we need to select a function to assess the agreement between points in search space and
real data (dissimilarity quantification), and then perform an optimization process. Since both model output and real
data are vectors, a general approach to dissimilarity quantification is to define a loss function [14]. It is possible to
identify a general form for common loss functions introducing a parameter whose meaning is the importance of the
distance between the output vector and the nominal one in a discrete point-to-point comparison sense [23]. A general
loss function equation is given in (2), where Y is the output vector obtained when simulating with a specific X, Ŷ is
the output vector associated to the real factors X̂ (real data), α is the introduced distance-penalization factor, and |τ | is
the number of discrete time elements in τ .
|τ |

Err(Y, Ŷ ) =

1 X
Yt − Ŷt
|τ | t=1

α

(2)

The criteria for choosing a loss function must vary according to the study model and researchers goals. However, we
recommend mean-squared error (α = 2) instead of mean-absolute error (α = 1) for most of the cases because of the
outlier penalization of higher α values, as can be seen in Figure 1. We support the above based on some principles of
sensitivity analysis (SA) theory. SA states that the value of the most sensitive parameters almost determines the model
output [13; 12; 17]. Therefore, the more similar are the values for the sensitive input factors, the more similar the model
outputs should be. Then, as we map the search box into the least-squares surface generated by MSE, it would be easier
to identify those factors that cause undesired model behaviors.
Thereby, for factor estimation, we define a new model with scalar output in the following form:
φ(X, t) = Err(f (X, t), Ŷ )

(3)

Where X is the vector to optimize, Err is the loss function (2) and f (X.t) is the deterministic model (1). Thus, (3) is
the quantification of dissimilarity between the real data (Ŷ ) and any other point (X) in the search space. Then, the
factor estimation task has turned into an optimization problem in the form:
minimize φ(X, t)
X∈Ω

(4)

As mentioned in [5], if parameter combinations present several global or even local minima, the estimation algorithm
may converge to unwanted or non-feasible stationary points of the search box. Thus, few factor estimation runs are not
informative yet. It is highly recommended to perform an in-depth exploration of the search box through several factor
estimations tasks starting optimization from different points, and then assess the results looking for the best estimations
(including dissimilarity and other a priori criteria) [14].
Once we get a promissory candidate from the factor estimation methodology (X̂), we might proceed to the estimation
of its CI. Following the general way to CI achievement, we should perform factor estimations and filter its results to get
3

A PREPRINT - O CTOBER 9, 2019

Figure 1: Example of dissimilarity quantification. Suppose we have a model with a given nominal output (black line)
and we want to assess the fit of two different points in the search box (green and red lines) regard to the nominal output.
From a graphic criterion, we may say that the green line has the best fit since it captures the behavior of the nominal
model output over the whole model domain while the red line has the worst fit due to the high values it takes over the
first interval of the model domain. However, if we apply the loss function MAE instead of MSE to assess the fit, we
will get that both of the points in the search box have an equally good fit since the areas between black and colored
curves are the same.
those that converge to X̂. If we assume that minimum values of (3) almost determine X̂, then we may estimate its CI
by choosing the sets of factors that do not exceed in 10% the minimum value we get in (4) and applying them a robust
measure of centrality, as (5).
r


π σi
√
Xi ∈ median(Xi ) ± 1.96
2 n

(5)

Where n is the number of samples (filtered factor estimations), σi the estimated standard deviation for factor Xi , and
median(Xi ) is the median value of filtered values estimated for Xi .
However, CI estimation has several troubles: as exposed previously, CI is an over-estimations of confidence contours
(see for instance Figure 2); its estimation depends on multiple optimization processes of (4); and the presence of global,
or even local minima within the search box increases the CI uncertainty. As an alternative, it is still possible to map the
whole search space into the loss function surface and then, identify the confidence contour for a given Ŷ . However, the
confidence contour is a manifold that resides within search space and its achievement is challenging for large models
[22]. Hence, we propose an alternative way to achieve a n−orthotope inside the confidence contour with some useful
properties. We will call this n−orthotope as the CSB.

3

Construction of promissory search box for estimation of confidence sub-contour box

From the previous section, we know that X̂ is a global minimum candidate inside the confidence contour. To discard
regions of the search box that do not belong to the confidence contour, we can perform an exploration of Ω through
Monte-Carlo simulations drawing scatter-plots of (3) as a function of each parameter. However, since we are assessing
dissimilarity for a given X̂ instead of Ŷ , we will use the following redefinition of (3):
φ(X, t) = Err(f (X, t), f (X̂, t))

(6)

Also, since X̂ produces an error-free model output, we will delimit its confidence contour defining a threshold in the
form:
T hreshold = Err(λf (X̂, t), f (X̂, t))

(7)

where λ represents the CSB uncertainty level. Thus, we say that an arbitrary set X is outside of the confidence contour
for X̂ as long as φ(X, t) > T hreshold. On the other hand, from SA theory in [16][12] we can deduce that sensitive
parameters mostly determine the model output and its non-feasible values should be related to the highest outputs of (6).
Hence, drawing the scatter-plots of most sensitive factors we should be able to identify non-feasible subregions and
4

A PREPRINT - O CTOBER 9, 2019

Figure 2: Here we have a model with dynamic output Y (t) that depends on two input factors (Xi and Xj ). The
confidence contour for some real data with uncertainty is the manifold inside the search box (left picture) such that, as
we simulate each point in the manifold, we gradually clausure the data (right picture). We call to the clausure of the
data as the confidence bands. Since each point within the manifold has a good fit with data, the axis on the left picture
shows the probability distribution of factors Xi and Xj we would get from factor estimation task. Further, whether
we traditionally estimate CI (dotted lines), then we get an overestimation of the confidence contour. Throughout the
present work, we are interested in the estimation of the confidence sub-contour box (red box in the left picture) instead
of the confidence contour or CI.
eliminate them, shrinking the range for those factors. Once we shrink the sensitive factors interval, we can perform
a new Monte-Carlo simulation and then, repeat the whole process until we achieve a k−orthotope where model
outputs are almost within the confidence contour (confidence sub-contour box). Since we shrunk the interval of the
most sensitive factors in each iteration, the sensitivity of other factors must take greater relevance; Hence, from the
perspective of scatter plots, a correlation between factor value and model output must tend to zero. Thus, we also
expect sensitivity indices to tend to be equal for most factors.
However, there are still remarkable troubles that arise when applying the above methodology: Since the model search
box (Ω) is usually much larger than the contour confidence and non-linear models have multiple local (or even global)
minima, then localization of non-feasible regions must be unlikely, unless we have a complete exploration of Ω, i.e., as
the number of samples N tends to infinity.
To avoid the troubles exposed above, we propose the construction of a promissory search box in Algorithms 1 and 2. It
is possible whether we take X̂ as a global minimum: For each factor Xi , we take X̂i as a starting value. Then, keeping
all the other factors fixed (X̂∼i ), we proceed to increase and decrease the X̂i value until the model output falls into the
border of the confidence contour. Thus, we can find a new interval for each factor that defines a new promissory search
space Ω̂. As we use the contribution of each factor alone to reach the bound of the confidence contour, we are also
neglecting the contribution of interactions. Thus, there should be regions related with extreme values of some factors
beyond the confidence contour, i.e., we might expect that as Xi take values closest to its interval bounds in Ω̂, the
model output takes higher values. It is feasible that some local minima remain within Ω̂, nevertheless, taking priority
over X̂ it may be possible to discard those local minima related to specific combinations of factors.

4

Uncertainty-based confidence interval shrink (algorithm)

Following the idea from the previous section for CSB estimation, in this section we will present four algorithms:
Monte-Carlo simulations with Latin-hypercube sampling (Algorithm 3), uncertainty-based factor interval shrink
(Algorithm 4), protection of X̂ (Algorithm 5), and change uncertainty-based shrink parameterization (Algorithm 6).
Also, we will expose the Latin-hypercube sampling and the uncertainty-based interval shrink procedure applying
histograms.
To make easier the presentation of algorithms, we will introduce first the original and most simple form of the Latinhypercube sampling plan for Monte-Carlo simulation purposes [10]: Let N denote the required number of samples and
5

A PREPRINT - O CTOBER 9, 2019

Algorithm 1: Once-At-Time promissory search box
Data: (λ, f, X̂, t, up, down, imax) such that λ is the uncertainty level, f is the objective function, X̂ is the set of
nominal parameters, t is the simulation time, up ∈ [1, 2] is the scalar for upper accelerated search, down ∈ [0, 1]
is the scalar for lower search, and imax is the maximun number of iterations.
Result: Ω̂ as a matrix of |X̂| × 2, where each row represents a side of the n−orthotope (the promissory search box).
begin
 
 

T hreshold ←− Err λf X̂, t , f X̂, t
(ω, ω) ←− (∅, ∅)
for i ∈ { 1, 2, ..., | X̂| } do
(τ, γ, δ, c) ←− (1, up, up, 0)
while c < 2 do  
 

Y ←− Err f { X̂∼i , δ X̂i } , t , f X̂, t
if Y < T hreshold then
δ ←− γ τ +1
else
if Y > T hreshold × 1.1 then
ω ←− Bisection(f, γ, τ, X̂∼i , X̂i , T hreshold, imax)
else
ω ←− δ X̂i
if γ = up then
ωi ←− ω
else
ωi ←− ω

. See Algorithm 2

(τ, γ, δ, c) ←− (0, down, down, c + 1)
τ ←− τ + 1
if τ > imax then
ω ←− δ X̂i
if γ = up then
ωi ←− ω
else
ωi ←− ω
(τ, γ, δ, c) ←− (1, down, down, c + 1)
Ω̂ ←− { ω, ω }
return Ω̂

k the number of factors. A N × k matrix P, in which each of the k columns is a random permutation of 1, 2, ..., N , and
a N × k matrix R of independent random numbers ∼ U (0, 1) are established. These matrices form the sampling plan,
representing by S as:
1
S = (P − R)
(8)
N
Each element of S, Si,j is then mapped according to its target marginal distribution as:
xi,j = Fx−1
(Si,j )
j

(9)

Where Fx−1
is the inverse of the target cumulative distribution function for variable j. Thus, we define the design matrix
j
M as:


xi,1 . . . xi,k

..
..
.. 
M =
(10)
.
.
. 
xN,1 . . . xN,k
Coming back to the main idea of CSB achievement, once we get X̂, we perform an uncertainty analysis through
Monte-Carlo simulations to map X̂ into the loss-function surface (6). We expect non-feasible values for some of the
6

A PREPRINT - O CTOBER 9, 2019

Algorithm 2: Bisection
Data: (f, γ, τ, X̂∼i , X̂i , T hreshold, imax) such that f is the objective function, γ is the scalar for upper or lower
search from Algorithm 1, τ is the current search step, X̂∼i is the vector of the nominal factors but the i−th one,
X̂i is the i−th nominal factor, T hreshold is the limit for uncertainty level, and imax is the maximum number
of iterations allowed.
Result: ω as the desired value for parameter Xi .
begin
a ←− γ τ
b ←− γ τ +1
δ ←− a+b
2
while True do  
 

Y ←− Err f { X̂∼i , δ X̂i } , t , f X̂, t
if T hreshold < Y < T hreshold × 1.1 then
ω ←− δ X̂i
return ω
else
if Y < T hreshold then
a ←− δ
δ ←− a+b
2
else
b ←− δ
δ ←− a+b
2
τ ←− τ + 1
if τ > imax then
ω ←− δ X̂i
return ω

Algorithm 3: Monte Carlo simulation
Data: (f, X̂, Ω̂, N ) such that f is the objective functon, X̂ is the vector of nominal factors, Ω̂ is the promissory search
box, and N is the sample size.
Result: (Y, M ) where Y is the vector of sorted outputs after Monte Carlo simulation and M is the design matrix for
the Monte Carlo simulation
sort is a function that receives a vector [y1 , y2 , ..., yn ] and returns it sorted alongs the sorting order:
[a, b, ...z] | ya ≤ yb ≤ ... ≤ yz
begin
M ←− latinHypercube(Ω̂, N )
for i ∈ { 1, 2, ..., N } do
yi ←− Err(f (Mi,1:end , t), f (X̂, t))
(Y, order) ←− sort([y1 , y2 , ..., yn ])
M ←− M1:end,order
. sorted design matrix according to Y
return (Y, M )

7

A PREPRINT - O CTOBER 9, 2019

Algorithm 4: Uncertainty-based interval shrink


Data: λ, f, Ω̂, X̂, N, imax, η, ξ, ∆ such that λ is the uncertainty level (same as Algorithm 1), f is the objective
function, Ω̂ is the promissory search space from Algorithm 1, X̂ is the vector of nominal factors, N is the
sample size for each iteration, imax is the maximum number of iterations, η is the number of higher outputs
eliminated per iteration, ξ is the threshold for histogram-based cut (see Figure 3), and ∆ is the stop criterion (%).
Result: Θ as a matrix of X̂ × 2, where each row represents a side of the hypercube (The Confidence Sub-contour
Box).
begin

 
 
T hreshold ←− Err λf X̂, t , f X̂, t
η ←− round(η × N )
c ←− 1
Θ ←− Ω̂
while True do
(Y, M ) ←− M onteCarlo(f, X̂, Θ, t, N )
. See Algorithm 3
PN
 ←− i=1 (Yi ≤ T hreshold)
if /N ≥ ∆ then
return Θ
ψ ←− max(, η)
sM ←− M1:ψ,1:end
nBins ←− { x ∈ N : (x divide a N ) ∧ (x ≤ N/10) }
τ ←− 1
recort ←− True
while recort do
for i ∈ { 1, 2, ..., | X̂| } do
θ
i , θi ←−CSBhistogram(sM
1:end,i , nBinsτ , ξ, Θi ) . nBinsτ is the τ −th element of nBins


if θi > X̂i ∨ θi < X̂i then



θi , θi ←− protectCriteria θi , θi , X̂i

Φ ←− { θ, θ }
if Θ = Φ then
(τ, sM, ψ) ←− changeP arameters(ψ, τ, nBins, M, N )
else
Θ ←− Φ
recort ←− False
c ←− c + 1
if c > imax then
return Θ

8

. See Algorithm 5

. See Algorithm 6

A PREPRINT - O CTOBER 9, 2019

most sensitive parameters to cause the model outputs with the highest dissimilarity. Since those non-feasible values
should proceed from closer samples to the interval bounds, thereby we propose the following schema to achieve the X̂
CSB at λ uncertainty level:

Figure 3: Graphical representation of CSBhistogram function for a model that depends on two factors Xi and Xj . The
graph axes represent the promissory search box Ω̂, the red circles in the axes are the nominal factor values (X̂i , X̂j ),
and the black dot is a promissory point (X̂) from factor estimation task on which we want to estimate the CSB. For the
CSB estimation, we perform an uncertainty analysis using a Latin-hypercube sampling; thereby, we guarantee that each
column or row of the grid we have plotted in Ω̂ has the same number of samples. Then we classify the samples as they
overcome (red dots) or not (green dots) a previously defined threshold of dissimilarity and plot them for each factor as a
histogram. From SA theory, we know that non-feasible values for the most sensitive parameters correlate with strange
model outputs. Hence, we develop a shrink criterion based on the form of the histogram: the new CSB candidate for
next iteration is the promissory box resultant from the exclusion of those grid rows that have less frequency than ξ%
of the larger bin in the green histogram. The CSB is fully estimated when at least 95% of the samples are below the
threshold.
1. Perform sampling of Ω̂ where each factor interval is divided into N sub-intervals (same N as the total number
of samples) of equal length, then, the factor is sampled taking a value from each sub-interval in combination
with random permutations of others factors intervals (Latin-hypercube sampling). As a consequence of this
sampling approach, if we split the interval of any factor into r sub-intervals of equal length and r is any divisor
of N , then we will have an equal number of samples in each sub-interval.
2. Simulate the model with the N samples from the previous step and sort the outputs from lower to higher
values. See Algorithm 3.
3. Plot a histogram of r bins for each factor, where r is a divisor of N such that the number of samples in every bin
(given by samples = Nr ) overcomes a defined number. This number would be enough to capture information
about factor contribution and possible interactions. Since each bin has the same number of samples, histogram
must be uniform (see Figure 3).
4. Remove η% of samples linked to the higher model output values from the histogram. From sensitivity analysis
theory, the histogram shape for most sensitive factors must change dramatically, especially for extreme interval
values. For less sensitive factors, histogram shape must remain as uniform. See Figure 3.
5. Remove bins whose number of samples is less than ξ% of the bin with the most of samples. Then, define the
new factor interval with the minimum and the maximum factor value that belongs to some bin.
6. If it is not possible to perform any factor interval shrink, then change r, ξ or eliminate more samples linked to
higher output values. See Algorithm 6.
7. If the procedure above attempts to eliminate some X̂i , then revert the procedure or shrink the i−th interval
forcing the method to keep X̂i . See Algorithm 5.
8. Repeat the above steps until ∆% of model outputs within the confidence contour.
9

A PREPRINT - O CTOBER 9, 2019

Algorithm 5: protectCriteria
Data: (θi , θi , X̂i ) such that θi is the current inferior bound for the i−th factor from Algorithm 4, θi is the current
superior bound for the i−th factor from Algorithm 4, and X̂i is the nominal value for the i−th factor.
Result: (θi , θi ) where θi is an appropriate inferior bound and θi is an appropriate superor bound for the i−th factor.
begin
if θi > X̂i then 

(θi , θi ) ←− X̂i − (X̂i + θi )/2 × 0.1, θi − (X̂i + θi )/2 × 0.1

else


(θi , θi ) ←− θi + (X̂i + θi )/2 × 0.1, X̂i + (X̂i + θi )/2 × 0.1
return (θi , θi )

Algorithm 6: changeParameters
Data: (ψ, τ, nBins, M, N ) such that ψ is the current number of higher outputs to eliminate from Algorithm 4, τ is the
current element of nBins that determine the grid for CSBhistogram (Figure 3), nBins is the vector of N
divisors, M is the design matrix for the current iteration in Algorithm 4, and N is the sample size.
Result: (τ, sM, ψ) As the new parameterization for current Algorithm 4 iteration.
begin
if τ + 1 ≤ |nBins| then
τ ←− τ + 1
else
τ ←− 1
ψ ←− round((ψ/N )1.1 ) × N
sM ←− M1:ψ,1:end
return (τ, sM, ψ)

Step 4 from the previous schema suggests removing η% of samples from higher model outputs, though we implemented
an additional feature in Algorithm 4: the removal of η% until %, η <  of model outputs within the confidence contour,
thenceforth, remove the %. We did this trying to give major precision to the algorithm.

5

Algorithm application case using GSUA-CSB toolbox

To test Algorithms 1 to 6 we implemented and perform both of proposed and traditional routines for factor estimation
and confidence intervals estimation (CSB and CI) fitting an epidemiological model (11) to real data. We managed to
validate the stated CSB properties and exposed new ones through validation with sensitivity and uncertainty analysis.
All the routines we followed are implemented in GSUA-CSB toolbox [11], free available in https://www.mathworks.
com/matlabcentral/fileexchange/72637-gsua-csb.

5.1
5.1.1

Methods
Mathematical model

In this section, we will introduce the model implemented to estimate parameters and its confidence intervals for
the dengue outbreak produced in a municipality of Neiva (Colombia) during 2011-2012. We modified a general
vector-borne disease model, proposed in [20] for describing Zika dynamics, which represents disease transmission in
10

A PREPRINT - O CTOBER 9, 2019

human and mosquitoes populations (see (11)). It is possible to use (11) to describe dengue basic dynamic, because the
same genus mosquitoes may transmit dengue and Zika.
i Ms
− µm Ms
Ṁs = Λv − βm H
H
βm Hi Ms
Ṁi =
−
µ
M
m
i
H
i Hs
−
µh Hs
Ḣs = µh H − βh M
M
i Hs
Ḣi = βh M
−
(µ
+
γ
h
h )Hi
M
Ḣr = γh Hi − µh Hr

(11)

For (11) we assume a total mosquito population variable in time, where M = Ms + Mi , and a total human population
constant as H = Hs + Hi + Hr ≈ const. Also, there are no recovered individuals that lose immunity and neither
horizontal transmission. We list the depended variables and parameters of the model in Table (2)
Table 2: Definition of model state variables and parameters
Factors
Definition
Ms
Number of susceptible mosquitoes
Mi
Number of infected mosquitoes
M
Total number of mosquitoes
Hs
Number of susceptible humans
Hi
Number of infected humans
Hr
Number of recovered humans
H
Total number of humans
Λv
Mosquitoes population recruitment rate
βm
Transmission rate human-mosquito
µm
Mosquito mortality rate
βh
Transmission rate mosquito-human
µh
Human mortality rate
γh
Infected human recovery rate
Also, we chose MSE instead of MAE as a loss function for model 11 basing our decision on the following consideration:
Models of Vector-borne diseases are commonly inferior-bounded since negative outputs for population sizes are
senseless, and further, outputs of infected hosts and vectors represent a small percentage of its respective total
population sizes for the study zone. Thus, strangest output behaviors should belong to some domain [ta , tb ] such that
Yi >> Ŷi , ∀i ∈ [ta , tb ]. Hence, a loss function with a high value for α really must improve the detection of the
strangest curves penalizing said high output values.
5.1.2

Dengue cases data

The municipality of Neiva has its location in the valley of Magdalena between the central and eastern mountain ranges
at 442 masl. Its main temperature is 27◦ C with an average annual total rainfall of 1346mm. These conditions are
favorable to the Aedes aegypti reproduction and maintenance [24; 18], which is related to endemic dengue cases with
occasional epidemic outbreaks. For this study, we implemented the number of dengue cases for the municipality of
Neiva during 2011 and 2012, where the data begins in the 49th epidemiological week in 2011 and ends in the 49th
epidemiological week in 2012 (53 weeks). Neiva health secretariat and SIVIGILA software provided the reported cases
of dengue [8].
5.1.3

Estimation of factors and traditional confidence intervals for dengue model

To identify the proper parameters sets which Hi in (11) fit with real dengue cases, we perform several single-objective
factor estimations implementing the function gsua_pe from GSUA-CSB toolbox with the following tools and methods:
we numerically solved the model using the ode45 function which implements the Dormand-Prince variable-step method
[15], and the function lsqcurvefit to solve the nonlinear curve-fitting problem with a function tolerance of 1 ∗ 10−6 ,
randomly selecting the starting point from the model search box defined in Table 3. To calculate traditional CI, we
apply the filtering strategy and the median estimator exposed in Section 2.
5.1.4

CSB algorithms parameterization in GSUA-CSB toolbox

We estimated multiple times CSB for the same X̂ using the functions gsua_oatr and gsua_uci (Algorithms 1 and 4
respectively) implemented in GSUA-CSB toolbox. For dengue disease, there is high uncertainty in real data that not
11

A PREPRINT - O CTOBER 9, 2019

only comes from measurement but also diagnosis itself [19][6]. Hence, we chose an uncertainty level of λ = 30%. We
set parameters up, down and imax for Algorithm 1 at his default values: 1.5, 0.7, and 100, respectively. For Algorithm
4 we chose a sample size per iteration of N = 1000, a number of maximum iterations of imax = 500, a removal of
higher model outputs of η = 50%, and a confidence level of ∆ = 95%.
5.1.5

Sensitivity analysis routines

The sensitivity analysis (SA) aims to quantify how uncertainty in the output of a model can be apportioned to the
uncertainty of the input factors [13][1]. We performed SA to assess one of the theoretical properties stated for CSB:
since we shrunk the interval of most sensitive factors, all factors must tend to be equally relevant for the model, i.e., all
factors must tend to have the same sensitivity index. For SA procedures, we chose Saltelli indices proposed in [13] and
implemented in gsua_sa function from GSUA-CSB toolbox with default parameterization.
On the other hand, to guarantee informative SA, we perform a convergence analysis of the indices. The convergence
analysis consists of performing several SA increasing the sample size until sensitivity indices stop varying. Since
gsua_sa function provides both of first-order and total-order sensitivity indices, we implement three graphical criteria to
assess convergence: convergence of each total-order index alone, the convergence of summation of total-order index,
and convergence in the sum of first-order sensitivity indices regard the sum of absolute values for the first-order indices.
It is possible to implement the last criterion since the Saltelli estimator for first-order sensitivity indices allows negative
values, but, from the definition, sensitivity indices might not be negative.
Saltelli indices implemented in GSUA-CSB toolbox are estimated on the MSE surface instead of the vectorial model
output, i.e., they are scalar indices for dissimilarity contribution quantification. Hence, it is necessary to provide both X̂
and M , where M is a design matrix as presented for Monte-Carlo simulation. Design matrix M was generated from
the estimation ranges in Table 3. Thereby, we perform convergence analysis for the search box, i.e., the selected sample
size must provide informative SA for any subspace in the search box.
5.2
5.2.1

Results and discussion
Traditional confidence intervals versus confidence sub-contour box

For estimation of traditional CI, we performed 14116 factor estimation tasks on the model (11), and then we applied
the filtering criteria described in Section 5.1.3 to avoid local minima. Thus, we got 3991sets of factors that did not
overcome 10% of the lowest minimum got (52.8 in MSE), as seen in Figure 4. Note that the filtered sets follow the
same trend as real data, unlike the remaining curves. Then, we estimated the nominal curve X̂ through the statistical
median for the ten factors, as well as its traditional CI. We also perform 100 CSB estimations and present the results for
a random one, as seen in Table 3 along with biological ranges for each factor.
From Table 3 we note that median CI are subsets of median CSB, except for βm and βh , where superior bounds for both
intervals almost coincide. Another remarkable result is given in Figure 5, where we perform an uncertainty analysis for
both confidence intervals. Note that although uncertainty analysis for median CI is a subregion of uncertainty analysis
for median CSB, median CI is a robust estimator where the length of the intervals depends on the number of factor
estimations we perform, while for median CSB we can define the uncertainty level we want.
Computational cost is another important topic when looking for methods to estimate confidence intervals. For instance,
we required 14116 factor estimation processes for model (11) to achieve enough information for median CI estimation.
Each factor estimation process requires up to 1000 set of factors evaluations (and requires more than the model gets
larger), then we performed about 14.1 million of model evaluations. On the other hand, a regular CSB estimation
process requires from 100 up to 200 iterations, hence, it represents a cost of 0.1 to 0.2 million of model evaluations.
5.2.2

Uniqueness of the confidence sub-contour box

We have assumed that the CSB estimation determines a unique n−orthotope within the confidence contour. We support
the above since each iteration of intervals shrinking is lead by an approximation equivalent to sensitivity indices
estimation from scatter plots. However, we have noticed that, as the contribution of factors is decreased by the shrink of
its interval, the algorithm likely shrink some intervals on a stochastic way instead of the sensitivity-led way.
To assess the uniqueness condition of the CSB we performed 100 CSB estimations processes, then, we normalize the
got interval bounds for each factor regarding its estimation interval and present the inferior and superior bounds, from
the 100 estimations, as a boxplot in Figure 6. We found that there are stochastic shrinks, however, results are consistent
for most of the factors.
12

A PREPRINT - O CTOBER 9, 2019

Figure 4: Simulations of over 14000 factor estimations; where the red lines correspond to the 3990 best-fitted curves
and blue ones correspond to the misfitted remaining. Some curves were not included because they moved so far away
from the real data that it was no longer possible to observe them.

Table 3: List of the factors estimated for model (11), its estimation ranges (search box) and nominal values (X̂). Also,
we show both of confidence intervals for the dengue model (11), using median distribution (traditional CI) and a regular
CSB estimation.
Estimation
Nominal
Median
Factors
CSB
ranges
values
CI
Ms (0)
0 - 20000000
2110000 2070000 - 2160000 2070000 - 2660000
Mi (0)
0 - 1000
670
660 - 680
650 - 800
Hs (0)
150000 - 400000
281000
279000 - 284000
272000 - 335000
Λv
0 - 20000
7800
7600 - 7900
7400 - 12000
βm
0-4
0.064
0.059 - 0.068
0.054 - 0.066
µm
0 - 0.9
0.1665
0.1664 - 0.1665
0.153 - 0.169
βh
0-4
0.48
0.46 - 0.50
0.44 - 0.49
µh
0 - 0.0009
0.00066
0.00065 - 0.00067
0.00007 - 0.00150
γh
0.5 - 1.8
0.500
0.497 - 0.503
0.466 - 0.518

(a)

(b)

Figure 5: Uncertainty analysis for both of confidence intervals presented in Table 3 with 1000 Monte-Carlo samples. a)
Uncertainty analysis of estimated CSB. b) Uncertainty analysis of traditonal median CI. The nominal output is given in
red color while those outputs that overcomes the defined uncertainty level threshold Λ = 30% are given in light blue
color.

13

A PREPRINT - O CTOBER 9, 2019

Figure 6: Boxplot for superior and inferior bounds of 100 CSB intervals. Each factor has in the same column the
boxplot for both inferior and superior bounds, smaller boxplots indicate high accuracy for the interval, while large
boxplots suggest stochastic shrinks in the factor interval estimation. Note that CSB requires a promissory search box
from Algorithm 1. This new search box could be greater than the original one, hence Algorithm 4 may estimate intervals
that overpasses those in the factor estimation task.

5.2.3

Sensitivity analysis for confidence sub-contour

From convergence results in Figure 7 we chose a sample size (N ) of 3000, which is supported since it meets all the
implemented graphical criteria for convergence. Note that the summation of first-order sensitivity indices Si do not
show a clear convergence to a specific value, however, for N > 2000 there is a high coincidence between Si an absolute
Si summation. From above, even a sample size of 2000 should be enough to get reliable estimations of the sensitivity
indices, which is our real goal.
Figure 8 is the most relevant result from this section of application case. From Figure 8a we know that dissimilarity
contribution in the search box (estimation ranges, Table 3) is principally due to βm and βh factors, i.e., factor estimation
mostly depends on the values for those factors. Thereby, we could expect βm and βh to be precisely estimated.
From Figure 8b we see that even filtering and selecting the best estimation for factors, βm and βh still are the major
contributors to dissimilarity, and moreover, they almost uniquely determine that dissimilarity. Those factors can be
unidentifiable indeed, i.e., they have a correlation that allows model (11) getting a good fit to real data through multiple
values for βm and βh . Further, as we link the results from uncertainty analysis (Figure 5) with SA (Figure 8b) for
traditional CI, we realize that: taking into account the number of factor estimations we selected and the characteristics
of the median as a centrality measure, we should have got an uncertainty analysis with all model outputs closer to the
nominal one, except we have identifiability issues in the model.
From Figure 8c, we realize that there are no strong interactions among factors for the selected uncertainty level
Λ = 30%. It is a little bit contradictory with the model identifiability suggestion from the above paragraph, however,
different intervals for SA provides different results [12]. Note that SA in Figure 8c suggest that two of the ten considered
factors for model (11) have a minimum contribution to dissimilarity. The above does not suggest these factors to be
irrelevant for the model. It suggests that those two factors do not contribute to dissimilarity as much as the other factors,
in the context of the current search box.
In Figure 8d, we present the results of the SA for CSB intervals in Table 3. It is noticeable that as we expected, the
contribution of factors to dissimilarity is more uniform, i.e., it is an increment in the contribution of one of the two
irrelevant factors in Figure 8c. However, there is still a factor that does not contribute to the dissimilarity in the CSB.
At this point, it is necessary to mention a minor issue that is turning itself into relevant information: when applying
Algorithm 1 to get the promissory search box; we noted that the algorithm was not able to find the exact required values
for µh (the irrelevant factor), neither the superior nor the inferior bounds. At the start, we did not pay attention to
this issue because it rises during the bisection search execution (Algorithm 2); which means that the factor can cause
model outputs with dissimilarity beyond the threshold, but it is difficult to find a value that exactly meets the search
criterion. As we analyze the information above and SA for CSB together, we can suggest that µh is a factor that does
not determine the model output but it is still important to define both the model and the search box within the model has
meaning.
14

A PREPRINT - O CTOBER 9, 2019

(a) Convergence analysis for total-order sensitivity indices (STi ) of each factor in
model (11)
2
Sum of STi

STi

1.8
1.6
1.4
500

1000

1500

2000

2500

3000

N
0.7
Sum of Si
Sum of absolute Si

Si

0.6
0.5
0.4
500

1000

1500

2000

2500

3000

N

(b) Convergence analysis for summation of total-order sensitivity indices (STi ), firstorder sensitivity indices (Si ) and absolute value of Si

Figure 7: Three graphical criteria to select a sample size (N ) that guarantee informative SA. Since it is unlikely to
explore the whole space of factors through samples, we recommend as the best criterion the agreement between Si and
absolute Si , it is, a sample size such that the sensitivity estimators are reliable.

6

Final remarks

We managed to propose a novel method for estimation of confidence intervals with acceptable computational cost and
implement it in a Matlab toolbox. It is still necessary to prove the method with large models, synthetic conditions, and
different parameterization; however, from the results presented in Section 5 we identified the following features:
• The CSB successfully defines a n−orthotope within the confidence contour such that ∆% of the model outputs
are below a user-defined dissimilarity threshold.
• Since it is possible to some regions of the confidence contour being outside of the search box, it is likely to
have some regions of the CSB outside the search box.
• The CSB intervals are strongly linked to sensitivity analysis theory; thus, large intervals correspond to less
sensitive factors while small intervals suggest most relevant factors. To compare the length of the intervals,
they should be normalized regarding the search box.
• Those factors that do not meet the same relevance in SA analysis for CSB must be linked to interactions
beyond first-order indices. We suggest that since it is difficult to assess high order interactions from scatter
plots.
15

A PREPRINT - O CTOBER 9, 2019

(8 Factors) = 4.1%

(6 Factors) = 5.73%
H s 0 (6.01%)

h

(39.2%)

h

(11.5%)

m

(53%)

(37.4%)

(37.5%)

m

(a) SA for estimation ranges (search box).

(b) SA for traditional median CI.

(2 Factors) = 4.67%

(2 Factors) = 1.3%

h

h

(13.2%)
m

(11.6%)

h

(13.7%)
M s (0) (8.88%)

m

h

(12.8%)

(12.8%)

H s (0) (12.4%)

M i (0) (11.8%)

v

h

(13.5%)

m

(11.9%)

v

(9.44%)

(11.8%)

H s (0) (12.8%)

m

M s (0) (12.1%)

(12.2%)

M i (0) (12.4%)

(d) SA for CSB.

(c) SA for the promissory search box.

Figure 8: SA for different intervals that take part on the CSB estimation or in traditional median CI estimation. Intervals
given to the gsua_sa method for sensitivity indices calculation are presented in Table 3, except for Figure 8c.

• Close to zero total sensitivity indices should be interpreted as: those non-relevant factors could be still
necessary to define the model, however, they can be fixed at any point within its search interval and it should
not affect the process of factor estimation.
• The uncertainty level for CSB is user-defined, then, researchers can get confidence intervals that meet with
uncertainty in real data.

References
[1] G. E. B. Archer, A. Saltelli, and I. M. Sobol. Sensitivity measures, anova-like techniques and the use of bootstrap.
Statist. Comput. Simul., 58:99–120, 1997.
[2] A. C. Babtie, P. Kirk, and M. P. H. Stumpf. Topological sensitivity analysis for systems biology. Proceedings of the
National Academy of Sciences, 111(52):18507–18512, 2014. ISSN 0027-8424. doi: 10.1073/pnas.1414026112.
[3] J. Barrios, A. Piétrus, G. Joya, A. Marrero, and H. de Arazoza. A differential inclusion approach for modeling and
analysis of dynamical systems under uncertainty: Application to dengue disease transmission. Soft Computing, 17
(2):239–253, 2013. ISSN 14327643 14337479. doi: 10.1007/s00500-012-0889-2.
16

A PREPRINT - O CTOBER 9, 2019

[4] B. Cantó, C. Coll, and E. Sánchez. Estimation of parameters in a structured SIR model. Advances in Difference Equations, 2017(1), Jan. 2017. doi: 10.1186/s13662-017-1078-5. URL https://doi.org/10.1186/
s13662-017-1078-5.
[5] N. R. Draper and H. Smith. Applied Regression Analysis. Wiley and Sons, 1998. ISBN 0471170828. doi:
10.1198/tech.2005.s303.
[6] V. Duong, L. Lambrechts, R. E. Paul, S. Ly, R. S. Lay, K. C. Long, R. Huy, A. Tarantola, T. W. Scott,
A. Sakuntabhai, and P. Buchy. Asymptomatic humans transmit dengue virus to mosquitoes. Proceedings
of the National Academy of Sciences, 112(47):14688–14693, Nov. 2015. doi: 10.1073/pnas.1508114112. URL
https://doi.org/10.1073/pnas.1508114112.
[7] L. Geris and D. Gomez-Cabrero. Uncertainty in biology a computational modeling approach. Springer international publishing Switzerland, 2016. ISBN 978-3-319-21295-1.
[8] Instituto Nacional de Salud. Manual del usuario del software SIVIGILA, 2011. URL https://goo.gl/j1DpX4.
[9] H. Miao, X. Xia, A. S. Perelson, and H. Wu. On identifiability of nonlinear ODE models and applications in viral
dynamics. SIAM Rev Soc Ind Appl Math., 53(1):3–39, 2011.
[10] A. Olsson, G. Sandberg, and O. Dahlblom. On latin hypercube sampling for structural reliability analysis.
Structural Safety, 25(1):47–68, Jan. 2003. doi: 10.1016/s0167-4730(02)00039-5. URL https://doi.org/10.
1016/s0167-4730(02)00039-5.
[11] Rojas-Díaz, Daniel and Vélez-Sánchez, Carlos Mario. drojasd/gsua-csb: Gsua-csb v1.0, 2019. URL https:
//zenodo.org/record/3383316.
[12] A. Saltelli, M. Ratto, T. Andres, F. Campolongo, J. Cariboni, D. Gatelli, M. Saisana, and S. Tarantola. Global sensitivity analysis: The primer. John Wiley & Sons, Chichester, England, 2008. URL
http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470059974.htmlhttp://www.amazon.
es/Global-Sensitivity-Analysis-The-Primer/dp/0470059974https://docs.google.com/file/
d/0BwXJdRHn-Rd6TS1LUDhnQjJtblE/edithttps://www.researchgate.net/publication/25332810.
[13] A. Saltelli, P. Annoni, I. Azzini, F. Campolongo, M. Ratto, and S. Tarantola. Variance based sensitivity analysis
of model output. Design and estimator for the total sensitivity index. Computer physics communications., 181:
259–270, 2010.
[14] G. A. F. Seber and C. J. Wild. Nonlinear regression. John Wiley & Sons, New Jersey, USA, 2003.
[15] L. F. Shampine and M. W. Reichelt. The MATLAB ODE suite. SIAM Journal on Scientific Computing, 18(1):
1–22, Jan. 1997. doi: 10.1137/s1064827594276424. URL https://doi.org/10.1137/s1064827594276424.
[16] I. M. Sobol. On sensitivity estimation for nonlinear mathematical models. Matem. Mod, 2:112–118, 1990.
[17] I. M. Sobol. Global sensitivity indices for nonlinear mathematical models and their Monte Carlo estimates.
Mathematics and computers in simulation, 55:271–280, 2001.
[18] L. T. Takahashi, N. A. Maidana, W. C. Ferreira, P. Pulino, and H. M. Yang. Mathematical models for the Aedes
aegypti dispersal dynamics: Travelling waves by wing and wind. Bulletin of Mathematical Biology, 2005. ISSN
00928240. doi: 10.1016/j.bulm.2004.08.005.
[19] N. T. Toan, S. Rossi, G. Prisco, N. Nante, and S. Viviani. Dengue epidemiology in selected endemic countries:
factors influencing expansion factors as estimates of underreporting. Tropical Medicine & International Health,
20(7):840–863, mar 2015.
[20] N. Tuncer, M. Marctheva, B. LaBarre, and S. Payoute. Structural and practical identifiability analysis of
zika epidemiological models. Bulletin of Mathematical Biology, 80(8):2209–2241, jun 2018. doi: 10.1007/
s11538-018-0453-z. URL https://doi.org/10.1007/s11538-018-0453-z.
[21] H. U. Voss, J. Timmer, and J. Kurths. Nonlinear dynamical system identification from uncertain and indirect
measurements. International Journal of Bifurcation and Chaos, 14(6):1905–1933, 2004.
[22] K. W. Vugrin, L. P. Swiler, R. M. Roberts, N. J. Stucky-Mack, and S. P. Sullivan. Confidence region estimation
techniques for nonlinear regression in groundwater flow: Three case studies. Water Resources Research, 43(3),
Mar. 2007. doi: 10.1029/2005wr004804. URL https://doi.org/10.1029/2005wr004804.
[23] S. Xiao, Z. Lu, and P. Wang. Multivariate global sensitivity analysis based on distance components decomposition.
Risk Analysis, 38(12):2703–2721, July 2018. doi: 10.1111/risa.13133. URL https://doi.org/10.1111/risa.
13133.
[24] H. M. Yang, M. d. L. d. G. Macoris, K. C. Galvani, and M. T. M. Andrighetti. Follow up estimation of Aedes
aegypti entomological parameters and mathematical modellings. BioSystems, 2011. ISSN 03032647. doi:
10.1016/j.biosystems.2010.11.002.
17

