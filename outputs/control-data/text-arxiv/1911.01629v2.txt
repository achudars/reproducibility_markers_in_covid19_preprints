RNN-T FOR LATENCY CONTROLLED ASR WITH IMPROVED BEAM SEARCH
Mahaveer Jain, Kjell Schubert, Jay Mahadeokar, Ching-Feng Yeh,
Kaustubh Kalgaonkar, Anuroop Sriram, Christian Fuegen, Michael L. Seltzer

arXiv:1911.01629v2 [cs.CL] 16 Jan 2020

Facebook AI, USA
ABSTRACT
Neural transducer-based systems such as RNN Transducers
(RNN-T) for automatic speech recognition (ASR) blend the
individual components of a traditional hybrid ASR systems
(acoustic model, language model, punctuation model, inverse
text normalization) into one single model. This greatly simplifies training and inference and hence makes RNN-T a desirable choice for ASR systems. In this work, we investigate
use of RNN-T in applications that require a tune-able latency
budget during inference time. We also improved the decoding
speed of the originally proposed RNN-T beam search algorithm. We evaluated our proposed system on English videos
ASR dataset and show that neural RNN-T models can achieve
comparable WER and better computational efficiency compared to a well tuned hybrid ASR baseline.
Index Terms— RNNT, LC BLSTM, E2E, ASR.
1. INTRODUCTION
Automatic speech recognition (ASR) with Deep Neural Networks (DNN) operates in a hybrid framework using several
models. These models include: DNN acoustic models (AM)
that estimate the posterior probabilities of Hidden Markov
Model (HMM) states, language models (LM) that estimate
probabilities of word sequences, punctuation models and inverse text normalization (ITN) models dealing with number
& date formatting. These models are optimized independently [1] and then combined together using Weighted Finite
State Transducer (WFST) for efficient decoding.
End-2-End(E2E) speech recognition techniques such as
connectionist temporal classification (CTC) [2], listen, attend
and spell(LAS) [3] and RNN-T [4, 5, 6] have become successful because of advances in neural networks to model context and history in audio and text sequences [7]. E2E speech
recognition combines all components of hybrid ASR model
such as AM, LM, punctuation model and ITN into one component and predicts words directly from input acoustics.
E2E simplifies the training process for a new ASR system, but in order to run them in a server-side application they
need to meet the following constraints: 1) streamable with
constrained latency 2) match or improve the computational
efficiency and WER of the baseline hybrid system.

LC BLSTM [8, 9] are widely used to build ASR systems with constrained latency. They achieve this by using
bi-directional context within short audio chunks without consuming the whole utterance. In this work, we use LC BLSTM
for the Audio Encoder of RNN-T to achieve streamable ASR.
Popular hybrid ASR decoding techniques such as static decoder [10] and dynamic decoder [11] use hyper parameters
(beams) to prune hypotheses to improve computational efficiency. Inspired by these works we modify the RNN-T beam
search to make it computationally more efficient. We evaluate our model under various settings for latency control using
‘throughput‘, defined as the number of audio seconds processed per wall clock second on a fixed server CPU architecture, and rtf@40, defined as real time factor at 40 concurrent
audio streams.
The rest of the paper is organized as follows. In Section 2,
we review the RNN-T model and the LC-BLSTM layer. We
present our proposed changes in RNN-T beam search to improve computational efficiency in Section 3. We discuss our
experimental setup and summarize our findings in Section 4.
Finally, we conclude with a discussion of future work in Section 5.
2. RNN TRANDUCER
The framework of RNN-T ASR system is illustrated in Fig. 1.
RNN-T for ASR has three main components: Audio Encoder,
Text Predictor and Joiner. The Audio Encoder encodes audio
frames up to a time t as audio embedding at . The Text Predictor encodes the text history up to index h in reference or
hypothesis as text embedding th . These embeddings are then
fed to the Joiner which combines them to produce a probability distribution over the output units at yt,h . By incorporating
both audio and text for producing probabilities over output
symbols RNN-T can overcome the conditional independence
assumptions of CTC models [2]. In RNN-T, the output units
include a special blank symbol to decide whether to move to
next time frame t + 1 or to emit more output units from same
time frame t for the next Joiner call. After every Joiner call
we either move in time(t) axis to process next audio frame
t + 1 or we update the hypothesis (h) and emit more symbols
from the same time frame t. The former is done when the
Joiner emits a blank symbol, whereas the latter is done for

Fig. 1. RNN Transducer for ASR
non blank emission.
2.1. Latency Controlled BLSTM for RNN-T
Unidirectional Audio Encoder models such as LSTMs base
their predictions only on the audio history to the left and thus
tend to yield worse word error rates than bi-directional encoders that have full left and right context. For live streaming
application, we are constrained to use unidirectional encoders
because transcript should be made available with minimum
possible delay as audio is fed in. However, some applications
permit a certain maximum latency between consuming parts
of the input audio and producing the transcript for it. In such
cases it greatly helps to use some amount of right context in
the Audio Encoder to improve WER. Traditional BLSTM can
not produce a transcript until the whole audio stream is processed. LC BLSTM [9, 8] allows streamable application that
has constrained latency. LC BLSTM (fig 2) has two LSTMs,
left-lstm that runs from left to right in time axis whereas rightlstm runs from right to left in time axis.
In order to run LC BLSTM for RNN-T, the audio sequence is first divided into overlapping chunks of size cs. The
amount of overlap between chunks is equal to the minimum
amount of right context (rc) available to frames in the chunk.
As shown in fig 2, the amount of right context available is
maximum (cs) at the first frame of the chunk and it reduces
linearly to rc at the end of chunk at cs − rc. This allows every frame in the chunk to have some amount of right context
to generate a high-quality audio embedding without delaying
the generation of embedding until the whole audio stream is
ingested.
3. IMPROVING BEAM SEARCH FOR RNN-T
Inspired by speed improvements in decoders such as Kaldi
[10] using pruning, we modify the RNN-T beam search described in [4] to prune unlikely paths early during decoding
to improve ‘throughput‘ and real time factor. Our modified
algorithm is presented in Algorithm 1. We use same symbols
as used in Algorithm 1 from [4].

Fig. 2. LC BLSTM for RNN-T

In order to explain RNN-T beam search let us assume that
hypothesis h at time t has audio embedding at and text embedding th . These embeddings are fed to the Joiner which
combines them to produce probabilities over output units at
yt,h . As explained in section 2 output units include a special
symbol blank (∅) to decide whether to move to the next time
frame t + 1 or to emit more output units from the same time
frame t. In order to ensure that at-least top W (beam size) hypotheses that are being moved to t + 1 have higher probability
than the ones that can still be generated from t, a beam search
is performed using two sets of hypothesises, A and B.
Set A contains hypothesises that are still being considered
for time t whereas hypothesis set B contains hypothesises that
have already emitted a blank symbol at time t, and are now
in time frame t + 1. As soon as B has W hypotheses more
probable than the most probable hypothesis in A the beam
search criterion is met at time t and we can start processing
frame t + 1. During beam search we pick the best hypothesis
in A and expand it either with blank or non blank symbols.
The expansion with blank moves a hypothesis to B whereas
expansions with non blank symbols are put back in A, which
results in a expanded set A at t. We introduce expand beam
to limit number of expanded hypothesises that are added in A.
For a Joiner call at (t,h) that produces yt,h we first compute
the best prob, best prob among non blank output units(yt,h )
and only consider output units(k) that have higher log(P r(k |
y ∗ , t) than log(best prob) − expand beam to be added to A.
We also introduce a state beam and use it as an additional hyper parameter of the beam search. If the best hypothesis in A is worse by more than state beam from the best hypothesis in B in log space, we assume that future expansions
of hypothesises available in A are too unlikely to compete
with already existing hypos in B. We always use the natural
logarithm of numerical value while discussing state beam
and master beam in rest of the paper.
In experimentation section we show that we can improve
‘throughput‘ from 53 to 65 and decrease rtf@40 from .75 to
.60 by using state beam and master beam with negligible
WER impact.

Algorithm 1 Improved RNNT Beam Search
Proposed modifications in Algorithm 1 from [4] are in red.
Initialize: B = {∅}; P r(∅) = 1
for t = 1 to T do
A=B
B = {}
for y in A do P
P r(y)+ = ŷ∈pref (y)∩A P r(ŷ)P r(y | ŷ, t)
end for
while B contains less than W elements more probable
than the most probable in A do
y ∗ = most probable in A
a best prob = max probability in A
b best prob = max probability in B
≥
state beam +
if log(b best prob)
log(a best prob) then
break {meet beam search and break while loop}
end if
Remove y ∗ from A
P r(y ∗ ) = P r(y ∗ )P r(∅ | y, t)
Add y ∗ to B
best prob = maxk∈non blank P r(k | y ∗ , t)
for k ∈ Y do
if log(P r(k | y ∗ , t)) ≥ log(best prob) −
expand beam then
P r(y ∗ + K) = P r(y ∗ )P r(k | y ∗ , t)
Add y ∗ + k to A
end if
end for
end while
Remove all but the W most probable from B
end for
return y with highest log P r(y)/|y| in B

4. EXPERIMENTS
4.1. Dataset
The dataset used for our experiments was sampled from English videos shared publicly on Facebook. The data does not
contain any user-identifiable information and is completely
anonymized . The training set consists of around 1M videos
with 13.7K hours in total. We use two test sets; vid-clean
and vid-noisy. Vid-clean has 1.4K videos (about 20.9 hours)
whereas vid-noisy that is more acoustically challenging has
1.3K videos (about 20.1 hours). More information about our
data sets can be found in [12].
Table 1. Amount of training/test data in hours
dataset
English(hours)
train
13.7k
vid-clean
20.9
vid-noisy
20.1

4.2. Model
The architecture of the RNN-T model (Figure 1) used for the
experiments in this paper is as follows. The Audio Encoder
has two components: a 5-layer LC BLSTM with 704 dimensions and Audio Encoder Linear Projection Layer (AELPL)
of dimension 704 by 704. We use subsampling of 2 across
the time dimension after the first LC BLSTM layer to improve training and inference speed. The LC BLSTM uses a
right context (rc) of 20 frames (200ms) and chunk size (cs) of
240 frames (2400ms) during training. The Text Predictor also
has two components; a 2-layer LSTM of 704 dimensions and
Text Predictor Linear Projection Layer (TPLPL) of dimension 704 by 704. The Joiner uses concatenation of three layers: summation layer, ReLU [13] layer and, a softmax layer
and produces probabilities over output units (yt,h ). We used
a token set consisting of 200 sentence pieces, learnt using the
sentence piece library [14]. The entire model consists of 62M
parameters.
The input to the network consists of globally normalized 80-dimensonal log Mel-filterbank, extracted with 25ms
FFT windows and 10ms frame shifts. We use the Adam
optimizer[15], learning rate of 0.0004, with dropout probability of 0.3 and policy LB of SpecAugmentation[16] during
training. Dropout is applied in all layers of LC BLSTM of
Audio Encoder and LSTM layers of Text Predictor. The
RNN-T training was ran for 25 epochs.
The latency budget can be chosen by setting the Decoding
Threshold (DT ) at inference time. Decoding Threshold(DT )
is defined as the chunk size (in milliseconds) used during inference for LC BLSTM Audio Encoder. If not explicitly specified, we use DT of 800ms for our experiments. We use same
amount of right context (rc) during training and inference.
A beam size of 5, expand beam of 2.3 and state beam of
4.6 were used during inference. INT8 quantization from Pytorch was used during inference to speed up decoding. RNNT is fully neural and does not use an external LM.
The baseline hybrid ASR [12] system consisted of a 5layered LC BLSTM model with 800 hidden units and an external WFST language model trained using transcripts from
the same training data. The hybrid ASR system was trained
using the model and policy described in [12] to minimize the
cross-entropy (20 epochs) loss first, followed by the LF-MMI
criterion (8 epochs) [17]. The hybrid ASR system also used
INT8 quantization during inference time to speed up decoding.
4.3. Impact of expand and state beam on WER and
Throughput
As discussed in Section 3, the introduction of expand beam
and master beam in beam search of RNN-T allows us to
limit the number of hypotheses in the sets A and B at inference time. This boosts the ‘throughput‘ by around 22 percent
and decrease rtf@40 by 20 percent with negligible impact on

WER. We achieve a ‘throughput‘ of 65 and rtf@40 of .60 with
expand beam = 2.3 and state beam = 4.6, compared to a
‘throughput‘ of 53 and rtf@40 of .75 without the improved
beam search. Table 2 shows the WERs for the vid-noisy test
set with different values of these parameters.
Table 2. Impact of beams on WER / Throughput / rtf@40 for
vid-noisy
Expand State
WER Throughput rtf@40
Beam
Beam
1.5
2.3
21.8
68
.58
2.3
4.6
21.0
65
.60
inf
inf
21.0
53
.75
4.4. Comparing Hybrid ASR Model with RNN-T
At 65MB, the RNN-T model is more than 10× smaller than
hybrid ASR baseline model[12], while obtaining a comparable WER. In addition to being larger, the Hybrid ASR model
also requires its various components, such as the acoustic
model, language model, punctuation model and inverse text
normalization to be trained individually. Each of these components has their own data and training pipelines that need to
be maintained separately. The RNN-T model combines these
components into a single model that can be trained end-toend, which simplifies the training and deployment process.
As seen in the Table 3, RNN-T achieves a similar WER
and better ‘throughput‘ and rtf@40 for both test sets compared to hybrid system. DT of 800ms was used both for hybrid and RNN-T ASR system.
Table 3. Comparison of Hybrid model with RNN-T
Test Set System WER Throughput rtf@40
vid-clean hybrid
14.0
55
.70
vid-clean RNN-T 14.0
63
.60
vid-noisy hybrid
20.7
55
.71
vid-noisy RNN-T 21.0
65
.60
4.5. Impact of Decoding Threshold on WER and Throughput
The latency budget of ASR systems varies depending on the
application that they are being used for. Chunk size of LC
BLSTM layer used at inference time can be different from
training chunk size (cs). We defined Decoding Threshold
(DT ) as the chunk size used during inference time in Section
4.2. DT parameter gives us a way to achieve flexible latency
budget. By adjusting the DT parameter at inference time,
we can trade-off the latency (and throughput) of the system
with WER. For larger values of DT , the latency between the
input audio and the produced transcript is larger, but the system can achieve a better WER, because the average amount of
right context available per frame increases. For smaller values of DT , the models needs to perform more computations

per time step as the right context rc of each audio chunk has
to be re-processed for the subsequent chunk, which reduces
throughput.
As seen in table 4, the ‘throughput‘ decreases from 74 to
48 and rtf@40 increases from .53 to .81 when the DT is decreased from 2000 to 300 for the vid-noisy data set. For our
model, the WER increases by 8.9% (relative) for vid-noisy
and 13.3% (relative) for vid-clean when the DT is decreased
from 2000 to 300 as observed in Table 4. We only show
‘throughput‘ and rtf@40 for vid-noisy test in Table 4, vidclean follows a similar pattern.
RNN-T models can also be made streamable by using
only uni-directional LSTMs in the Audio Encoder. However, our best unidirectional RNN-T only achieves a WER
of 16.4% for vid-clean and 23.6% for vid-noisy. Tuning DT
at inference time allows us to get better WERs than with unidirectional models while keeping ASR streamable.
Table 4. WER and computational efficiency for different DT
DT
vid-noisy vid-clean Throughput rtf@40
2000
20.3
13.5
75
.53
1500
20.4
13.5
70
.56
800
21.0
14.0
65
.60
400
21.7
14.8
53
.74
300
22.1
15.3
48
.81
5. CONCLUSION
In this work we show that RNN-T systems is suitable for
streaming ASR with latency constraints. Our experiments
demonstrate that RNN-T can achieve a good trade-off between latency and WER with LC-BLSTM. Our work improves on existing work in two ways: first, the changes we
propose to the beam search procedure improve rtf@40 by
relative 20% without impacting WER; second, we show that
we can achieve a better WER with an RNN-T equipped with
LC-BLSTM layers than one with only unidirectional LSTMs,
while still keeping it streamable. The use of LC-BLSTMs
also allows the latency of the models to be controlled at
inference time. Future directions include using contextual
information for RNN-T.
6. ACKNOWLEDGEMENT
Authors would like to thank Awni Hannun and Yun Wang for
the discussions and suggestions about this work.

References
[1] Geoffrey Hinton, Li Deng, Dong Yu, George Dahl,
Abdel-rahman Mohamed, Navdeep Jaitly, Andrew Senior, Vincent Vanhoucke, Patrick Nguyen, Brian Kingsbury, et al., “Deep neural networks for acoustic mod-

eling in speech recognition,” IEEE Signal processing
magazine, vol. 29, 2012.
[2] Alex Graves, Santiago Fernández, Faustino Gomez, and
Jürgen Schmidhuber, “Connectionist temporal classification: labelling unsegmented sequence data with recurrent neural networks,” in Proceedings of the 23rd international conference on Machine learning. ACM, 2006,
pp. 369–376.
[3] William Chan, Navdeep Jaitly, Quoc Le, and Oriol
Vinyals, “Listen, attend and spell: A neural network
for large vocabulary conversational speech recognition,”
in 2016 IEEE International Conference on Acoustics,
Speech and Signal Processing (ICASSP). IEEE, 2016,
pp. 4960–4964.
[4] Alex Graves, “Sequence transduction with recurrent
neural networks,” arXiv preprint arXiv:1211.3711,
2012.
[5] Kanishka Rao, Haşim Sak, and Rohit Prabhavalkar,
“Exploring architectures, data and units for streaming
end-to-end speech recognition with rnn-transducer,” in
2017 IEEE Automatic Speech Recognition and Understanding Workshop (ASRU). IEEE, 2017, pp. 193–199.
[6] Yanzhang He, Tara N Sainath, Rohit Prabhavalkar, Ian
McGraw, Raziel Alvarez, Ding Zhao, David Rybach,
Anjuli Kannan, Yonghui Wu, Ruoming Pang, et al.,
“Streaming end-to-end speech recognition for mobile
devices,” in ICASSP 2019-2019 IEEE International
Conference on Acoustics, Speech and Signal Processing
(ICASSP). IEEE, 2019, pp. 6381–6385.
[7] Haşim Sak, Andrew Senior, and Françoise Beaufays,
“Long short-term memory recurrent neural network architectures for large scale acoustic modeling,” in Fifteenth annual conference of the international speech
communication association, 2014.
[8] Yu Zhang, Guoguo Chen, Dong Yu, Kaisheng Yaco,
Sanjeev Khudanpur, and James Glass, “Highway long
short-term memory rnns for distant speech recognition,”
in 2016 IEEE International Conference on Acoustics,
Speech and Signal Processing (ICASSP). IEEE, 2016,
pp. 5755–5759.
[9] Shaofei Xue and Zhijie Yan, “Improving latencycontrolled blstm acoustic models for online speech
recognition,” in 2017 IEEE International Conference
on Acoustics, Speech and Signal Processing (ICASSP).
IEEE, 2017, pp. 5340–5344.
[10] Daniel Povey, Arnab Ghoshal, Gilles Boulianne, Lukas
Burget, Ondrej Glembek, Nagendra Goel, Mirko Hannemann, Petr Motlicek, Yanmin Qian, Petr Schwarz,

et al., “The kaldi speech recognition toolkit,” in IEEE
2011 workshop on automatic speech recognition and
understanding. IEEE Signal Processing Society, 2011,
number CONF.
[11] Hagen Soltau, Florian Metze, Christian Fugen, and Alex
Waibel, “A one-pass decoder based on polymorphic linguistic context assignment,” in IEEE Workshop on Automatic Speech Recognition and Understanding, 2001.
ASRU’01. IEEE, 2001, pp. 214–217.
[12] D. Le, X. Zhang, W. Zheng, C. Fuegen, G. Zweig, and
M. L. Seltzer, “From senones to chenones: Tied contextdependent graphemes for hybrid speech recognition,” in
Proc. ASRU, 2019.
[13] Vinod Nair and Geoffrey E Hinton, “Rectified linear
units improve restricted boltzmann machines,” in Proceedings of the 27th international conference on machine learning (ICML-10), 2010, pp. 807–814.
[14] Taku Kudo and John Richardson, “Sentencepiece: A
simple and language independent subword tokenizer
and detokenizer for neural text processing,” arXiv
preprint arXiv:1808.06226, 2018.
[15] Diederik P Kingma and Jimmy Ba,
“Adam: A
method for stochastic optimization,” arXiv preprint
arXiv:1412.6980, 2014.
[16] Daniel S Park, William Chan, Yu Zhang, Chung-Cheng
Chiu, Barret Zoph, Ekin D Cubuk, and Quoc V Le,
“Specaugment: A simple data augmentation method
for automatic speech recognition,”
arXiv preprint
arXiv:1904.08779, 2019.
[17] Daniel Povey, Vijayaditya Peddinti, Daniel Galvez, Pegah Ghahremani, Vimal Manohar, Xingyu Na, Yiming Wang, and Sanjeev Khudanpur, “Purely sequencetrained neural networks for asr based on lattice-free
mmi.,” in Interspeech, 2016, pp. 2751–2755.

