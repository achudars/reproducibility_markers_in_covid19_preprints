Online DCM Trajectory Generation for Push Recovery
of Torque-Controlled Humanoid Robots

arXiv:1909.10403v2 [cs.RO] 14 Oct 2019

Milad Shafiee†,1 , and Giulio Romualdi†,1,2 , Stefano Dafarra1,2 ,
Francisco Javier Andrade Chavez1 and Daniele Pucci1
Abstract— We present a computationally efficient method
for online planning of bipedal walking trajectories with push
recovery. In particular, the proposed methodology fits control architectures where the Divergent-Component-of-Motion
(DCM) is planned beforehand, and adds a step adapter to adjust
the planned trajectories and achieve push recovery. Assuming
that the robot is in a single support state, the step adapter
generates new positions and timings for the next step. The
step adapter is active in single support phases only, but the
proposed torque-control architecture considers double support
phases too. The key idea for the design of the step adapter
is to impose both initial and final DCM step values using an
exponential interpolation of the time varying ZMP trajectory.
This allows us to cast the push recovery problem as a Quadratic
Programming (QP) one, and to solve it online with stateof-the-art optimisers. The overall approach is validated with
simulations of the torque-controlled 33 kg humanoid robot
iCub. Results show that the proposed strategy prevents the
humanoid robot from falling while walking at 0.28 m/s and
pushed with external forces up to 150 Newton for 0.05 seconds.

I. I NTRODUCTION
Bipedal locomotion of humanoid robots remains an active
research domain despite decades of studies in the subject.
The complexity of the robot dynamics, the unpredictability
of its surrounding environment, and the low efficiency of the
robot actuation system are only a few issues that complexify
the achievement of robust robot locomotion. In the large variety of robot controllers implemented for bipedal locomotion,
the Divergent-Component-of-Motion (DCM) is an ubiquitous
concept used for generating walking patterns. In case of
unforeseen disturbances acting on the robot, it is necessary to
adjust the generated pre-planned patterns from preventing the
robot to fall. This paper contributes towards this direction by
presenting algorithms and architectures for achieving bipedal
humanoid robot with real-time push recovery features.
A popular approach to humanoid robot control during the
DARPA Robotics Challenge was to define a hierarchical
architecture consisting of several layers [1]. Each layer
generates references for the layer below by processing inputs
from the robot, the environment, and the outputs of the
previous layer. From top to bottom, these layers are here
called: trajectory optimization, simplified model control, and
whole-body quadratic programming (QP) control.
The trajectory optimization layer often generates desired
foothold locations by means of optimization techniques. To
† Both authors equally contributed to the paper.
1 Dynamic Interaction Control, Italian Institute of Technology, Genoa,
Italy, (e-mail: name.surname@iit.it)
2 DIBRIS, University of Genoa, Genoa, Italy

Fig. 1: iCub reacts to the application of an external force (the red arrow).

do so, both kinematic and dynamical robot models can be
used [2], [3]. When solving the optimization problem associated with the trajectory optimization layer, computational
time may be a concern especially when the robot surrounding
environment is not structured. There are cases, however,
where simplifying assumptions on the robot environment can
be made, thus reducing the associated computational time.
For instance, flat terrain allows one to view the robot as a
simple unicycle [4], [5], which enables quick solutions to the
optimization problem for the walking pattern generation [6].
The simplified model control layer is in charge of finding
feasible center-of-mass (CoM) trajectories and is often based
on simplified models, such as the Linear Inverted Pendulum
Model (LIPM) [7] and the Capture Point (CP) [8], [9]. These
models have become very popular after the introduction of
the Zero Moment Point (ZMP) as a stability criterion [10].
Another model that is often exploited in the simplified model
control layer is the Divergent Component of Motion (DCM)
[11]. The DCM can be viewed as the extension of the capture
point (CP) concept to the three dimensional case.
The whole-body QP control layer generates robot’s joint
torques depending on the available control modes of the
underlying robot. These outputs aim at stabilizing the references generated by the previous layers. It uses whole-body
kinematic and/or dynamical models, and very often instantaneous optimization techniques, namely, no MPC methods
are here employed. Furthermore, the associated optimisation
problem is often framed as a hierarchical stack-of-tasks, with
strict or weighted hierarchies [12], [13].
In recent years, several attempts have been made for
considering robot state feedback for footprints planning.
The new foothold locations can be optimized assuming
constant step timing [14], [15], [16] or adaptive step duration
[17], [18]. These methods have the drawback to consider a

constant Zero Moment Point (ZMP) during the single support
phase. Attempts at relaxing this assumption involve the control of the Centroidal Momentum Pivot (CMP) position [19],
but the pre-planned ZMP is still not used during push recovery. The possibility of having a non-constant pre-planned
ZMP during single support is fundamental for achieving toeoff motion: it indeed contributes towards humanoid robots
with energy efficient and human-like walking [20], [21], [22].
This paper extends and encompasses the control architecture [6], [23] by complementing it with the push recovery
feature. In particular, the proposed methodology fits control
architectures where the DCM is planned beforehand, and
adds a step adapter to adjust the planned trajectories and
achieve push recovery. Assuming the robot in a single
support state, the step adapter generates new positions and
timings for the next step. The step adapter is active in single
support phases only, but the proposed torque-control architecture considers double support phases too. The key idea for
the design of the step adapter is to impose both initial and
final DCM step values using an exponential interpolation of
the time varying ZMP trajectory. This allows us to cast the
push recovery problem as a QP one, and to solve it online
with state-of-the-art optimisers. The approach is validated
with simulations of the torque-controlled 33 kg humanoid
robot iCub. Results show that the proposed strategy prevents
the robot from falling while walking at 0.28 m s−1 and
pushed with external forces up to 150 Newton for 0.05
seconds applied at the robot pelvis.
The paper is organized as follows. Sec. II introduces
notation, the humanoid robot model, and some simplified
models used for locomotion. Sec. III describes each layer of
the control architecture, namely the trajectory optimization,
the simplified model control and the whole-body QP torque
control layer. Sec. IV details the the step timing and position
adaptation algorithm while Sec. V presents the simulation
results on the iCub humanoid robot [24] in push recovery
scenarios. Finally, Sec. VI concludes the paper.
II. BACKGROUND
A. Notation
•
•
•
•

•

•
•
•
•

In and 0n denote the n × n identity and zero matrices;
I denotes an inertial frame;
A
pC ∈ R3 is the vector from the origin of A to the
origin of C expressed with respect to the A orientation;
given A pC and B pC , A pC = A RB B pC + A pB =
A
H B B pC , where A H B is the homogeneous transformations and A RB ∈ SO(3) is the rotation matrix;
given w ∈ R3 the hat operator is .̂ : Rn → so(3),
where so(3) is the set of skew-symmetric matrices and
x̂y = x × y. × is the cross product operator in R3 , in
this paper the hat operator is also indicated by S(.);
given W ∈ so(3) the vee operator is .∨ : so(3) → R3 ;
A
ω B ∈ R3 denotes the angular velocity between the
frame B and the frame A expressed in the frame A;
the subscripts T , LF, RF and C indicates the frames
attached to the torso, left foot, right foot and CoM;
For the sake of clarity, the prescript I will be omitted.

B. Humanoid Robot Model
A humanoid robot is modelled as a floating base multibody system composed of n + 1 links connected by n joints
with one degree of freedom. Since none of the robot frames
has an a priori pose with respect to (w.r.t.) the inertial
frame I, the robot configuration is completely defined by
considering both the joint positions s and the homogeneous
transformation from the inertial frame to the robot frame
(i.e. called base frame B). In details, the configuration
of the robot can be uniquely determined by the a triplet
q = (I pB , I RB , s) ∈ R3 × SO(3) × Rn . The velocity
of the floating system is represented by the triplet ν =
(I v B , I ω B , ṡ). Given a frame attached to a link of the
floating base system, its position and orientation w.r.t. the
inertial frame is uniquely identified by an homogeneous
transformation, I H A ∈ SE(3).
Similarly, the frame velocity w.r.t. theh inertial frame
is
i
>

ω>
uniquely identified by the vector vA = v >
. The
A
A
function that maps ν to the twist vA is linear and its matrix
representation is the well known Jacobian matrix JA (q):
vA = JA (q)ν.

(1)

For a floating based system, the Jacobian can be split into
two submatrices, one multiplies the base velocity while the
other the joint velocities. From (1), one has:
v̇A = JA (q)ν̇ + J˙A (q, ν)ν.
(2)
The dynamics of the floating base system can be described
by the Euler-Poincaré equation [25]:
nc
X
JC>k (q)fk ,
M (q)ν̇ + h(q, ν) = Bτ +
(3)
k=1

where M (q) ∈ R(n+6)×(n+6) represents the mass matrix,
h(q, ν) ∈ Rn+6 is the Coriolis, the centrifugal term and the
gravitational term. On the right-hand side, B is a selector
matrix, τ ∈ Rn is the vector containing the joint torques
and fk ∈ R6 is a vector containing the coordinates of the
contact wrench. nc indicates the number of contact wrenches.
Henceforth, we assume that at least one of the links is in
contact with the environment, i.e. nc ≥ 1.
The centroidal momentum of the robot h is the aggregate
linear and angular momentum of each link of the robot
referred to the robot center of mass (CoM). The centroidal
momentum of the robot is related to the robot velocity ν
through the centroidal momentum matrix Ag (q) as [26]
h = Ag (q)ν.

(4)

The centroidal momentum time derivative is given by:
ḣ = Ag (q)ν̇ + Ȧg (q, ν)ν,

(5)

where Ȧg (q, ν)ν is called centroidal bias acceleration. It is
worth to recall that the rate of change of the centroidal
momentum of the robots can be also expressed by using
the external contact wrenches acting on the system as [13]

nc 
X
I3
03
ḣ =
f + mg.
(6)
S(pCk − pC ) I3 k
k=1

C. Simplified models
The motion of the robot can be viewed considering the
linear momentum dynamics only
ḣl = mẍ =

nc
X

fkl + mg,

(7)

k=1

where x ∈ R3 represents the position of the CoM and fkl the
linear component of the external force acting on the system
and ḣl the rate of change of the linear centroidal momentum.
Now, the DCM is given by [11]:
ξ = x + bẋ,

(8)

where b, in case of constant
p CoM height z0 , is the pendulum
time constant, i.e. b = z0 /g. Using (7) and (8), the DCM
time derivative is given by:
n

c
1
b X
fkl + bg.
ξ˙ = (ξ − x) +
b
m

(9)

k=1

By introducing the virtual repellent point (VRP) as


nc
2
X
b
ḣl b2

rvrp = x −
,
fkl + mg  = x −
m
m

t

ξi (t) = rizmp + e b (ξiios − rizmp ),

(10)

k=1

(12)

ξiios

Eq. (9) can be simplified as:
1
ξ˙ = (ξ − rvrp ).
b

the projection of the DCM on the walking surface, while the
height of the DCM remains constant and equal to the CoM
height. Furthermore, by assuming a constant centroidal angular momentum, the projection of the VRP on the walking
surface coincides with the ZMP [22]. As a consequence, in
this section we consider only the DCM planar dynamics.
Before generating the desired nominal trajectories, the
nominal footstep positions have to be planned. For this, the
humanoid robot is approximated as a unicycle, and the feet
are represented by the unicycle wheels [6]. By sampling the
continuous unicycle trajectory, it is possible to associate each
unicycle pose to a time instant timp . This time instant can be
considered as the time in which the swing foot impacts the
ground. Once the impact time is defined, we decide to use it
as a conditional variable to plan robot feasible footsteps, i.e.
too fast/slow step duration and too long/short step length are
avoided. Once the footsteps are planned, the feet trajectory
is obtained by cubic spline interpolation.
The nominal footsteps position is also used to plan the
nominal DCM trajectory. In details, the DCM is chosen so
as to satisfy the following time evolution:

(11)

III. T ORQUE - CONTROL DCM BASED ARCHITECTURE
This section summarizes a torque-control DCM based
architecture for humanoid robots walking without the push
recovery feature – see Fig. 2. The push recovery feature is
added using the algorithm presented in Sec. IV.
The control architecture is composed of three main layers.
The first is the trajectory optimization, whose main purpose
is to generate desired footstep positions and orientation and
also the desired DCM trajectory using the robot state. The
second layer employs simplified robot models to track the
desired DCM trajectory. The third layer is given by the
whole-body QP block. It has the purpose of ensuring the
tracking of the desired feet positions and orientations and
also the CoM acceleration by generating joint torques.
A. Trajectory Optimization layer
The objective of the trajectory optimization layer is to
evaluate the desired feet and DCM trajectories. In this work,
we divide the trajectory optimization problem into two subtasks. The former aims to generate the nominal footprints
and DCM trajectory without taking into account the current
status of the robot. Then the step adjuster module adjusts the
aforementioned quantities by considering the error between
the nominal and current DCM of the robot.
In the trajectory optimization layer, we assume that the
humanoid robot walks with a constant height between the
CoM and the stance foot. This assumption allows us to
simplify the DCM planning problem by considering only

where i indicates the i-th steps,
is the initial position of
the DCM, rizmp is placed on the center of the stance foot and
t has to belong to the step domain t ∈ [0, tstep
]. Assuming
i
eos
coincides
with the
that the final position of the DCM ξN
−1
ZMP at last step, (12) can be used to to define the following
recursive algorithm for evaluating the DCM trajectory [22]:

zmp
eos

ξN −1 = rN

step
t
zmp
eos
ios
− ib
(13)
ξ
=
ξ
=
r
+
e
(ξieos − rizmp )
i−1
i
i


ξ (t) = rzmp + e bt (ξ ios − rzmp ).
i

i

i

i

As already pointed out in [22], the presented DCM planner
has the main limitation of taking into account single support
phases only. Indeed, by considering instantaneous transitions
between two consecutive single support phases, the ZMP
reference is discontinuous. This leads to the discontinuity
of the external contact wrenches and consequentially of the
desired joint torques. The development of a DCM trajectory
generator that handles non-instantaneous transitions between
two single support phases becomes pivotal [22], [27]. In the
following, we decide to implement the solution proposed by
Englsberger in [22]. In order to guarantee a continuous ZMP
trajectory, the desired DCM trajectory must belong at least
to C 1 class. This can be easily guaranteed by smoothing
two consecutive single support DCM trajectory by means
of a third order polynomial function whose coefficients are
chosen in order to satisfy the boundaries conditions, i.e.
initial and final DCM position and velocities.
B. Simplified model control
The main goal of the simplified model control layer is to
implement a control law based on the simplified model of the
humanoid robot (see Section II-C) to stabilize the unstable
DCM dynamics (11).

Torso Orientation and Adapted Feet Trajectory

Trajectory
Optimization

Adapted DCM
Trajectory

Simplified
Model
Control

Desired Linear Momentum
rate of change

Whole-Body QP
Control

Joint Torques
Robot

DCM Position and Joint values

Fig. 2: The control architecture is composed of three layers: the trajectory optimization, the simplified model control, and the whole-body QP control.

To guarantee the tracking of the desired DCM trajectory
the following control law is chosen:
vrp
rdes

= ξref − bξ˙ref + K ξ (ξ − ξref ).

(14)

By using the control input (14) in (11), one has:
1
˙
˜
ξ˜ = ξ˙ − ξ˙ref = (I3 − K ξ )ξ.
b

∨

>
>
ω̇Tdes = ω̇ ref − c0 ω̂ I RT I Rref
− I RT I Rref
ω̂ ref
T
T




> ∨
− c1 ω − ω ref − c2 I RT I Rref
,
T
(18)

(15)

ξ

The choice of K > I3 guarantees an asymptotically stable
close loop error dynamics.

where c0 , c1 and c2 are positive numbers. The postural task
is encoded in (17) thanks to the second term, which tends to
penalise high joint error by imposing
s̈ des = −Ksd ṡ − Ksp (s − sref ),

C. Whole-body QP control
The whole-body QP control layer aims at the tracking of
kinematic and force quantities. The proposed whole-body
controller computes the desired joint torques using the robot
dynamics (3), where the robot acceleration ν̇ and the contact
wrenches fk are set to desired starred quantities, i.e.:


nc
X
JC>k (q)fk∗  . (16)
τ ∗ = B > M (q)ν̇ ∗ + h(q, ν) −
k=1

What follows evaluates desired generalized robot acceleration ν̇ ∗ and contact wrenches fk∗ that are compatible with the
constraints acting on the system. Then, the torques (16) do
not break the contacts the robot makes with the environment.
1) Desired generalized robot acceleration ν̇ ∗ : the desired
generalized robot acceleration ν̇ ∗ are chosen to track the
CoM acceleration, the torso orientation and the left and right
feet position and orientation. To do so, we use a stack of
task approach, which plays the role of a prioritized inverse
kinematics in the acceleration space. The tracking of the
feet trajectory and the CoM acceleration are considered as
high priority tasks, while the torso orientation as well as
a postural task are considered as low priority tasks. The
control objective is achieved by designing the controller as
a constrained optimization problem with a cost function as:


2
2
1
H(ν̇) =
ω̇Tdes − ω̇T
+ s̈ des − s̈
, (17)
2
ΛT
Λs
where kakΛ indicates the weighted norm of the vector a. The
tracking of the desired torso orientation is attempted via the
first term on the right hand side of (17), with the desired
torso angular acceleration ω̇Tdes . By choosing this desired
acceleration properly, it is possible to guarantee almostglobal stability and convergence of I RT to I RTref [28], i.e.

(19)

where Ksp and Ksd are positive definite matrices. Concerning
the tracking of the feet and the CoM, we have:
J◦ ν̇ = v̇◦des − J˙◦ ν

◦ = {F, C}.

(20)

des
When the foot is in contact, the desired acceleration v̇F
des
is zero. During the swing phase, the angular part of v̇F is
given by (18) where the subscript T is substitute with F,
while the linear part v̇ des is equal to:
ref
ref
d
p
des
v̇F
= v̇ ref
F − Kxf (vF − vF ) − Kxf (pF − pF ). (21)

Here the gains are again positive definite matrices. The CoM
task is achieved by asking for a desired acceleration
v̇Cdes =

1
vrp 
x − rdes
2
b

(22)

vrp
where the desired VRP rdes
is computed by the simplified
model control layer – see (14). It is also worth noting that
when the CoM is considered in (20), the term J˙C is the linear
part of the centroidal momentum matrix scaled by the robot
mass (4). The above hierarchical control objectives can be
summarized into a whole-body optimization problem:


2
2
1
des
∗
des
ν̇ = arg min
ω̇T − ω̇T
+ s̈
− s̈
(23)
2
ΛT
Λs
ν̇
s.t.
s̈des = −Ksd ṡ − Ksp (s − sref )
J◦ ν̇ = v̇◦des − J˙◦ ν ◦ = {LF, RF, C}.

The decision variable is the robot acceleration ν̇. Since
the acceleration v̇◦ depends linearly on ν̇, the optimization
problem can be cast into a QP one and solved efficiently.

2) Desired contact wrenches fk∗ : the desired contact
wrenches are computed to track the desired centroidal momentum. To do so, we developed an optimization problem
where the unknown variable F is a stacked vector of contact
forces fk . More precisely, the main objective of the optimization problem is to minimize the following cost function:


2
1
2
(24)
+kF kΛF .
ḣdes − ḣ
H(F ) =
2
ΛH
The tracking of the desired centroidal momentum rate of
change is attempted thanks to the first term of (24). The
desired linear momentum rate of change is computed from
the desired VRP – see (14) as
m
vrp 
ḣdes
= 2 x − rdes
.
(25)
l
b
On the other hand, the desired rate of change of the angular
momentum is computed by using the Eq. (5), where ν̇ is
substitute with the desired robot acceleration ν̇ ∗ evaluated
by solving the optimization problem (23). The last term of
(24) is used to minimize the required contact wrenches. The
aforementioned optimization problem can be summarized as:


2
1
2
∗
des
F = arg min
ḣ − ḣ
+kF kΛF
(26a)
2
ΛH
F
s.t. Cf F ≤ 0
(26b)


n
c
X
I3
03
ḣ =
f + mg.
S(pCk − pC ) I3 k
k=1

The decision variable is the contact wrenches F . Since the
rate of change of the centroidal momentum depends linearly
on F , the problem (26) can be cast into a QP one.
Once the desired robot acceleration and the desired contact
wrenches are computed, the desired joint torques can be
easily evaluated by using the system dynamics (16).
IV. S TEP A DAPTER
This section complements the architecture presented in
Sec. III – and shown in Fig. 2 – with a push recovery feature.
As sketched in Fig. 3, the trajectory optimisation layer is
augmented with a block called step adapter to provide the
architecture with the push recovery feature.
More precisely, assuming the robot on a single support
state, we propose below a step adjustment strategy that
optimises the next step position and timing while attempting
to follow a nominal DCM trajectory. In particular, we define
an exponential interpolation for the ZMP trajectory as:
t

rzmp (t) = Ae− b + B,

(27)

where A, B ∈ R2 are chosen to satisfy the ZMP boundary
conditions, i.e. rzmp (0) = r1zmp rzmp (T ) = r2zmp , i.e.:
A=

(r2zmp

r1zmp )σ

−
1−σ

,

B=

r1zmp

r2zmp σ

−
1−σ

,

(28)

with T the duration of the single support phase, and
T

σ := e b .

(29)

By substituting (27) into the DCM dynamics (11), the
following ordinary differential equation (ODE) holds:
B
ξ
1
A t
ξ˙ − = − rzmp (t) = − e− b − .
b
b
b
b

(30)

The solution to (30) writes:
#
"Z 
 R
R 1
t
1
B
A
− e− b −
ξ(t) = e b dt
e − b dt dt + C , (31)
b
b
where C ∈ R2 is the vector of unknown coefficients that can
be found by imposing the boundary conditions. Therefore,
we can find these coefficients by solving the problem (31)
either as an initial value problem, namely
ξ(0) = ξ0 =

A
+ B + C0 ,
2

(32)

or as a final value problem:
ξ(T ) = ξT =

T
A −T
e b + B + Cf e b .
2

(33)

To find a DCM trajectory that satisfies both the initial and
the final condition problems, the coefficient C0 must equal
Cf . Thus, by combining (32) and (33), one has:


T
A
A T
ξ0 − − B = ξT − e− b − B e− b .
(34)
2
2
Now, define δ = r2zmp − r1zmp . Then, in view of (29),
substituting (28) to (34) yields:
δ
ξT − (1 + σ) − r1zmp + r2zmp σ − ξ0 σ = 0.
2

(35)

Let rTzmp denote the ZMP position at the beginning of next
step, and γT = ξT − rTzmp the DCM offset. Therefore,
straightforward calculations lead to:


δ
δ
γT + rTzmp + r2zmp − ξ0 −
σ = r1zmp + .
(36)
2
2
The step adjustment problem can be formalized as a
constrained optimization problem where the search variables
are γT , rTzmp and σ, and the cost function be properly defined
to follow nominal trajectory values. It is worth noting that
the desired final DCM position and step timing depend on
γT and σ, respectively. Meanwhile, rTzmp is assumed to be
at the center of the foot at the beginning of next step. Thus,
we can assume this position to be considered as a target for
the next footstep position.
The following cost function is chosen to yield the desired
gait values as close as possible to the nominal ones:
zmp
J = α1 rTzmp − rT,nom

+ α3 |σ − e

Tnom
b

2

+ α2 kγT − γnom k

2

(37)

2

| ,

where α1 , α2 , α3 are positive numbers and the next ZMP
zmp
position rT,nom
, step duration Tnom and next DCM offset
γnom are obtained from the nominal trajectory generator.

Adapted DCM Trajectory

Foot Step
Planner

Nominal Foot Step
Position and Timing
and Orientation

Real DCM Value
Nominal Foot and
DCM Trajectories
DCM Planner

Step Adapter

Adapted Feet Trajectories

Adapted Step Position and Timing

Fig. 3: The trajectory optimization block in Fig. 2 is composed of three sub-modules: the footstep planner, the DCM planner, and the Step Adapter.

We also introduce

I2
02×1
 −I2 02×1

01×2
I1
01×2 −I1

the following inequality constraints:



zmp
rT,max
02  zmp 
rT
 zmp 
−r
02 

 σ  ≤ 
(38)
 T,min  ,
01 
σmax 

γT
01
−σmin

zmp
zmp
where rT,max
, rT,min
∈ R2 and σmax , σmin ∈ R. The
inequality constraints are defined based on the maximum
step length and minimum step duration that are related to the
leg kinematic constraints and maximum realizable velocity,
respectively. Finally, the relation described in (36) is treated
as an equality constraint. It is worth to notice that the
linearity of (36) is ensured by the specific choice of (27),
and this choice also guarantees the boundedness of the ZMP
trajectory. Since the cost function and the constraints depend
quadratically and linearly on the unknown variables, all the
above can be casted as a QP problem. The QP problem
is solved at each control cycle by substituting ξ0 with the
current DCM position and by progressively shrinking the
single support duration as the robot completes the step.
Once the footstep position and the step timing are evaluated as solution to the QP problem, a new DCM trajectory
is generated with the algorithm presented in section III-A.
Fig. 3 sketches the overall architecture for step recovery.
The foot step planner generates the nominal foot step position
and timing, which are inputs of the DCM planner. The
DCM planner generates the nominal DCM trajectory and foot
position. The step adapter module combines nominal values
(foot and DCM trajectories) and measurements (actual DCM)
to evaluate the adapted feet trajectories, footstep position and
timing. The former are as input of the whole-body QP control
layer, while the latter are retrieved by the DCM planner to
evaluate the adapted DCM trajectory.

V. R ESULTS
In this section, we test the step adjustment approach
alongside the architecture presented in Sec III. Although
the methodology presented above encompasses time-varying
ZMP trajectories, the tests presented in this section are for
fixed ZMPs during the single support phase.
More precisely, we present simulation results obtained
with the implementation of the control architecture shown in
Fig. 2 3. We simulate the iCub humanoid robot [29] using
Gazebo simulator [30]. Let us recall that iCub is 104 cm tall
humanoid robot. Its weight is 33 kg and it has a foot length
and width of 19 cm and 9 cm, respectively.

The architecture takes (in average) less than 3 ms for
evaluating its outputs: qpOASES [31] was used to solve the
QP problems. The control modules run on the iCub head’s
computer, i.e. a 4-th generation Intel R Core i7 @ 1.7 GHz.
To validate the performances of the proposed architecture,
we present two main push recovery experiments. First, the
robot walks straight and an external disturbance acts on
the pelvis to the lateral direction – red arrows in Fig 4a.
Secondly, the robot follows a circular path and an external
push is exerted on the pelvis as shown in Fig. 4b. In both
scenarios, the maximum straight velocity is 0.28 m s−1 , and
the external force has a magnitude of 150 N and lasts 0.05 s.
The performances of the control architecture are shown in
the accompanying video1 .
A. Straight walking scenario
Fig. 5 depicts the feet and DCM trajectory. The instant
at which the disturbance acts on the robot is indicated
by green vertical lines. The step adapter compensates the
disturbance effect by step timing and position optimization.
The controller extends the step width with an average of
6 cm, as shown in the Fig. 4a. It reduces the step timing
with an average of 0.12 s with respect to the nominal value
of 0.53 s and, as depicted in the Fig. 6, the foot trajectory
is adapted and step timing is decreased and the foot touches
the ground sooner with respect to the nominal values.
Fig. 4a shows in green and orange the position of the
adapted footstep and the nominal one, respectively. If no
external disturbances act on the robot, the position of the
adjusted footsteps coincides with the nominal one, hand the
footstep is represented by a gray rectangle.
B. Circular path following scenario
In this scenario, the step adaptation algorithm compensates
the external disturbance by extending the step length with an
average of 6 cm, and is applied for circular path walking.
In Fig. 4b, the four disturbances exerted on the robot
are indicated with red arrows. The nominal footprints corresponding to those instances are shown in orange. All the
adjusted footprints are shown in green. When the there is
no disturbance acting on the robot, the footprints generated
by the step adjustment algorithm coincides with the nominal
one, thus are represented by using a gray rectangle. Since the
push has components in both x and y coordinates, it activates
a step adjustment both in sagittal and lateral directions.
1 Video

link: https://youtu.be/DyNG8S6zznI

(a)

(b)

Fig. 4: Foot prints for straight (a) and circle path (b) push recovery scenario. The push is indicated by red arrows.

0.03
0.3
0.2

0.02

0.1

0.01
0

0

-0.1
0

2

4

6

8

10

12

14

16

18

Fig. 5: Trajectory of feet and DCM for lateral push recovery scenario. The
instance that push exerts on the robot is indicated by green vertical lines.

VI. C ONCLUSION AND F UTURE W ORK
This paper contributes towards robust bipedal locomotion
of humanoid robots against external disturbances. The proposed approach fits control architecture where the DCM
is planned beforehand, and allows a time-varying ZMP
trajectory during the single support phase. Thus, applications
of the proposed approach enable the heel to toe motions. The
step adapter presented in this paper optimises step position,
timing, and DCM trajectory, all cast in a single QP problem.
The proposed algorithm is employed in a three-layer DCM
based controller architecture and validated on the simulated
version of the iCub humanoid robot. During the tests, the
robot undergoes perturbations in the form of external forces
with magnitude of 150 N, applied continuously for 0.05 s.
Because of such disturbances, the presented algorithm determines suitable modifications to the pre-planned trajectories
allowing to maintain balance. As a future work, we plan to
validate this architecture also on the real robot.
The efficiency of the presented algorithm relies on simplified DCM models. The cost of such choice is that the
balancing capabilities of the robot may not be fully exploited,
abd larger perturbations may require excessive modifications
to the nominal trajectories. Hence, future work may consider
also the robot angular momentum and its full kinematics.
Another possible improvement would consist in adopting the
push recovery strategy also during the double support phase.

3.5

4

4.5

5

Fig. 6: The z trajectory of the swing foot during step adjustment

R EFERENCES
[1] S. Feng, E. Whitman, X. Xinjilefu, and C. G. Atkeson, “Optimizationbased Full Body Control for the DARPA Robotics Challenge,” J. F.
Robot., vol. 32, no. 2, pp. 293–312, 2015.
[2] H. Dai, A. Valenzuela, and R. Tedrake, “Whole-body motion planning
with centroidal dynamics and full kinematics,” in 2014 IEEE-RAS Int.
Conf. Humanoid Robot. IEEE, 2014, pp. 295–302.
[3] A. Herzog, N. Rotella, S. Schaal, and L. Righetti, “Trajectory generation for multi-contact momentum control,” in Humanoid Robot.
(Humanoids), 2015 IEEE-RAS 15th Int. Conf. IEEE, 2015, pp. 874–
880.
[4] P. Morin and C. Samson, Handbook of Robotics. Springer, 2008, ch.
Motion con, pp. 799–826.
[5] D. Flavigne, J. Pettrée, K. Mombaur, J.-P. Laumond, and Others,
“Reactive synthesizing of human locomotion combining nonholonomic and holonomic behaviors,” in Biomed. Robot. Biomechatronics
(BioRob), 2010 3rd IEEE RAS EMBS Int. Conf. IEEE, 2010, pp.
632–637.
[6] S. Dafarra, G. Nava, M. Charbonneau, N. Guedelha, F. Andradel,
S. Traversaro, L. Fiorio, F. Romano, F. Nori, G. Metta, and D. Pucci,
“A Control Architecture with Online Predictive Planning for Position and Torque Controlled Walking of Humanoid Robots,” in 2018
IEEE/RSJ Int. Conf. Intell. Robot. Syst., 2018, pp. 1–9.
[7] S. Kajita, F. Kanehiro, K. Kaneko, K. Yokoi, and H. Hirukawa, “The
3D linear inverted pendulum model: a simple modeling for biped
walking pattern generation,” Proc. 2001 IEEE/RSJ Int. Conf. Intell.
Robot. Syst., no. October 2016, pp. 239–246, 2001.
[8] J. Pratt, J. Carff, S. Drakunov, and A. Goswami, “Capture point: A
step toward humanoid push recovery,” in Proc. 2006 6th IEEE-RAS
Int. Conf. Humanoid Robot. Humanoids, 2006, pp. 200–207.
[9] A. L. Hof, “The ’extrapolated center of mass’ concept suggests a
simple control of balance in walking,” Hum. Mov. Sci., 2008.
[10] M. Vukobratovic and D. Juricic, “Contribution to the Synthesis of
Biped Gait,” IEEE Trans. Biomed. Eng., vol. BME-16, no. 1, pp. 1–6,
1969.

[11] J. Englsberger, C. Ott, and A. Albu-Schäffer, “Three-Dimensional
Bipedal Walking Control Based on Divergent Component of Motion,”
IEEE Trans. Robot., vol. 31, no. 2, pp. 355–368, 2015.
[12] B. J. Stephens and C. G. Atkeson, “Dynamic Balance Force Control
for compliant humanoid robots,” in Intell. Robot. Syst. (IROS), 2010
IEEE/RSJ Int. Conf., 2010, pp. 1248–1255.
[13] G. Nava, F. Romano, F. Nori, and D. Pucci, “Stability Analysis and
Design of Momentum-based Controllers for Humanoid Robots,” Intell.
Robot. Syst. 2016. IEEE Int. Conf., 2016.
[14] S. Feng, X. Xinjilefu, C. G. Atkeson, and J. Kim, “Robust dynamic
walking using online foot step optimization,” in 2016 IEEE/RSJ
International Conference on Intelligent Robots and Systems (IROS).
IEEE, 2016, pp. 5373–5378.
[15] M. Shafiee-Ashtiani, A. Yousefi-Koma, and M. Shariat-Panahi, “Robust bipedal locomotion control based on model predictive control and
divergent component of motion,” in Proc. - IEEE Int. Conf. Robot.
Autom. IEEE, may 2017, pp. 3505–3510.
[16] H.-M. Joe and J.-H. Oh, “Balance recovery through model predictive
control based on capture point dynamics for biped walking robot,”
Robotics and Autonomous Systems, vol. 105, pp. 1–10, 2018.
[17] M. Khadiv, A. Herzog, S. A. A. Moosavian, and L. Righetti, “Step
timing adjustment: A step toward generating robust gaits,” in 2016
IEEE-RAS 16th International Conference on Humanoid Robots (Humanoids). IEEE, 2016, pp. 35–42.
[18] R. J. Griffin, G. Wiedebach, S. Bertrand, A. Leonessa, and J. Pratt,
“Walking stabilization using step timing and location adjustment on
the humanoid robot, atlas,” in 2017 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS). IEEE, 2017, pp.
667–673.
[19] H. Jeong, I. Lee, J. Oh, K. K. Lee, and J.-H. Oh, “A robust walking
controller based on online optimization of ankle, hip, and stepping
strategies,” IEEE Transactions on Robotics, 2019.
[20] A. D. Kuo, “Energetics of actively powered locomotion using the
simplest walking model,” Journal of biomechanical engineering, vol.
124, no. 1, pp. 113–120, 2002.
[21] Y. Ogura, K. Shimomura, H. Kondo, A. Morishima, T. Okubo,
S. Momoki, H.-o. Lim, and A. Takanishi, “Human-like walking with
knee stretched, heel-contact and toe-off motion by a humanoid robot,”

[22]

[23]

[24]
[25]
[26]

[27]
[28]
[29]

[30]

[31]

in 2006 IEEE/RSJ International Conference on Intelligent Robots and
Systems. IEEE, 2006, pp. 3976–3981.
J. Englsberger, T. Koolen, S. Bertrand, J. Pratt, C. Ott, and A. AlbuSchäffer, “Trajectory generation for continuous leg forces during
double support and heel-to-toe shift based on divergent component of
motion,” in IEEE Int. Conf. Intell. Robot. Syst., 2014, pp. 4022–4029.
G. Romualdi, S. Dafarra, Y. Hu, and D. Pucci, “A benchmarking of
dcm based architectures for position and velocity controlled walking of
humanoid robots,” in 2018 IEEE-RAS 18th International Conference
on Humanoid Robots (Humanoids). IEEE, 2018, pp. 1–9.
L. Natale, C. Bartolozzi, D. Pucci, A. Wykowska, and G. Metta, “iCub:
The not-yet-finished story of building a robot child,” Sci. Robot., 2017.
J. E. Marsden and T. S. Ratiu, Introduction to Mechanics and Symmetry: A Basic Exposition of Classical Mechanical Systems. Springer
Publishing Company, Incorporated, 2010.
D. E. Orin and A. Goswami, “Centroidal momentum matrix of a
humanoid robot: Structure and properties,” in 2008 IEEE/RSJ International Conference on Intelligent Robots and Systems. IEEE, 2008,
pp. 653–659.
J. Englsberger, G. Mesesan, C. Ott, and A. Albu-Schaffer, “DCMBased Gait Generation for Walking on Moving Support Surfaces,”
2019.
R. Olfati-Saber, “Nonlinear Control of Underactuated Mechanical
Systems with Application to Robotics and Aerospace Vehicles,” Ph.D.
dissertation, 2000.
G. Metta, L. Natale, F. Nori, G. Sandini, D. Vernon, L. Fadiga, C. von
Hofsten, K. Rosander, M. Lopes, J. Santos-Victor, A. Bernardino, and
L. Montesano, “The iCub humanoid robot: An open-systems platform
for research in cognitive development,” Neural Networks, 2010.
N. Koenig and A. Howard, “Design and use paradigms for gazebo, an
open-source multi-robot simulator,” in 2004 IEEE/RSJ International
Conference on Intelligent Robots and Systems (IROS) (IEEE Cat.
No.04CH37566), vol. 3, Sep. 2004, pp. 2149–2154 vol.3.
H. J. Ferreau, C. Kirches, A. Potschka, H. G. Bock, and M. Diehl,
“{qpOASES}: A parametric active-set algorithm for quadratic programming,” Math. Program. Comput., vol. 6, no. 4, pp. 327–363, 2014.

