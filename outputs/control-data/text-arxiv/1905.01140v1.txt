Multi-level Dynamic Optimization of Intelligent
LEACH with Cost Effective Deep Belief Network

arXiv:1905.01140v1 [cs.NI] 12 Apr 2019

Muhammad U. Javed, Zaid Bin Tariq, Usama Muneeb, Ijaz Haider Naqvi

Abstract—Energy utilization is a key attribute for energy
constrained wireless sensor networks (WSN) that directly impacts
the life time of the network. LEACH (and its variants) are
considered to be the most common energy efficient routing
protocols for WSN. In this paper, we propose an optimized
modification of LEACH that makes use of multi-hop communication, dynamic cluster boundaries and energy conservation
in routing to maximize lifetime of a network. We propose a
multi-level approach to maximize our gains with regards to
energy conservation i.e., i) Dynamic programming based intracluster optimization technique has been proposed ii) Ant Colony
Optimization is used for energy efficient cluster head connection
with sink node and iii) Voronoi Tessellation are employed for
efficient coverage planning i.e., dynamic formation of cluster
boundaries. In order to accommodate a more flexible adhoc
network, hybrid (reactive and proactive) event monitoring based
on Deep Belief Network has been integrated in distributed nodes
to improve the latency of the system. The results show that the
proposed scheme significantly outperforms the current state of
the art with regards to network lifetime and throughput.
Index Terms—LEACH, Distributed Multi Agent Intelligent Systems, Deep Belief Network, Dynamic Optimization, Ant Colony
Optimization, Internet of things, Wireless Communications

I. I NTRODUCTION
Wireless sensor networks (WSN) consist of autonomous
nodes for monitoring different attributes of an environment.
The basic functions of WSNs include sensing, collecting,
processing and distributing information. WSNs typically consist of static nodes that need to continue working for a
long period of time. Thus, a large number of researchers
focus on the energy consumption and network life time of a
WSN. The sensor nodes are generally battery-powered devices
and thus energy efficient routing directly translates into a
larger life time of a network. In recent years, four different
classes of routing protocols have been evolved with numerous
routing protocols under each category. These classes are
geographical routing protocols, data centric routing protocols,
clustering-based routing protocols and hybrid routing protocol
[1]. Amongst these categories, clustering based hierarchical
routing protocols have been very popular because of their
scalability. The clustering based routing protocols divide the
sensor nodes into groups which are connected to a local
Base Station (BS) or a Cluster head (CH). A large number
of clustering based routing protocols have been proposed
All authors were affiliated with the Lahore University of Management Sciences during this work. (e-mail: 17100136@lums.edu.pk;
zaid.tariq@lums.edu.pk; 17100273@lums.edu.pk; ijaz.naqvi@lums.edu.pk)

in the literature such as LEACH, LEACH-C, KLEACH, sLEACH, EEE-LEACH etc. [1]. Amongst them, LEACH is
the first and most popular clustering based hierarchical routing
protocol for WSNs. LEACH (Low-Energy Adaptive Clustering
hierarchy) is a self-organizing, adaptive clustering protocol
that uses randomization based probability to distribute the
energy load equally to the sensor nodes in the network.
In LEACH protocol, the nodes have the ability to organize
themselves into clusters with one node acting as a CH (or
router) which aggregates data for other nodes. This makes
randomized rotation of the high energy nodes as cluster heads
and thus conserves energy (or battery drain) of all sensor
nodes resulting in an increased network lifetime [2]. LEACH
also performs the data aggregation and data fusion (data
compression) at cluster head level before transmitting data
to sink node, further reducing the energy consumption and
enhancing the network lifetime with application specific data
processing.
There are two phases of LEACH protocol; i) the setup
phase which includes Cluster Head (CH) selection, cluster
setup phase and cluster scheduling and ii) 2) the steady phase
which includes data aggregation, compression and transmission. LEACH is however unstable during setup phase because
of its dependence on the density of the sensor nodes. As multihop communication is not employed, large networks consume
significant energy in transmission of data from nodes farther
from the sink node. The main factors affecting the energy
consumption are: perceptual data, data processing and most
importantly radio (RF) communication. In this paper, instead
of using three levels of routing as in [1], [2], we propose two
levels of clustering and make use of dynamic optimization
and stochastic geometry techniques to improve the energy
consumption of the network. In the following, we list the key
contributions of our work:
1) Maximum Network Lifetime: Multi-hop intra-cluster
event propagation and hybrid (multi-hop and parallel)
event propagation at inter cluster level have been proposed which considerably improve the network lifetime.
2) Coverage Planning: A dynamic coverage range for
clusters has been proposed; the coverage range of clusters and their boundaries are determined using Voronoi
Tessellation.
3) Latency-Flexible Monitoring: Latency or network delay
is the time elapsed between the measurement reading and
the transmission of data to the sink node. The proposed

multi-hop routing approach would impact the latency of
the system. In order to compensate that, we have proposed
Deep Belief Network (DBN) based event monitoring
which switches between proactive and reactive event
monitoring. DBN network reduces the dimensionality of
the input data and allows faster processing resulting in
an improved latency of the system.
4) Distributed Multi agent Intelligence (DMI): A distributed network does not have a single point of failure.
We design a reliable and robust system that does not fail
by the death of a particular sensor node in the field by
dynamic optimization at intra-cluster level. We assume
that the sink node is located outside of the field in a
secure environment with large energy supply.
II. P RIOR A RT AND O UR W ORK
A. Routing Framework
Graph theory based optimization has been used for routing
in wireless sensor networks [3]-[6]. The key objective of
graph theoretic approaches is to minimize the overall power
consumption in a Wireless Sensor Network (WSN) [7, 8]. In
[3], the distributed tree based approach is used for distributed
collision handling but this approach results in a switching
delay and most of the network remains passive. Therefore,
a dynamic approach is required to tackle this problem. Within
the dynamic optimization frameworks, the network agility is
enhanced by exposing low level details of packet collisions
[9]. In [4], Ant Colony Optimization (ACO) has been used for
routing where all routing nodes try to establish a parallel path
to the sink node.
In our proposed framework, rather than connecting all the
cluster heads in parallel to base station, we have used ACO for
minimum cost routing [16] between cluster heads and the sink
node. Furthermore, since energy minimization is the foremost
concern in WSNs, proximity based Voronoi tessellations have
been proposed (rather than hierarchical broadcasting) so as to
keep track of the broadcast and multihop links and provide energy optimization with maximum terrain coverage. The intracluster routing is locally distributed and is based on parallel
computation [5] to form a connected dominating set (CDS)
[6] which does not require separate query handling. In order
to incorporate coverage planning, dynamic cluster boundaries
using Voronoi Tessellations have been used which are centrally
controlled at the sink node [10]-[12]. The comparative analysis
of network lifetime and energy efficiency has been carried out
in [2] and on that basis, we have selected LEACH EEE as a
comparative measure.
B. Assumptions of Network Model
The network consists of large number of randomly distributed nodes. The area is divided into clusters based on
node density. Each cluster has a Cluster Head (CH). In our

implementation, we do not account for message retransmissions caused due to collision, as we are interested in studying
the effective improvement caused by each algorithm. The
following assumptions are made in our network model:
(i) We have a strongly connected network
(ii) Each node with distinct ID would transmit/receive messages along its adjacent links/edges
(iii) Each node is aware if it is a CH or not
(iv) Each node in the network knows the IDs of it’s neighbors
in the graph
(v) Each node can transmit and receive data packets
III. P ROPOSED S OLUTION
We propose a hierarchical network which is divided into
cluster regions by implementing LEACH node proximity algorithm. The designed protocol generates an echo based event
request between connected motes and sink node by two way
communication. It also provides information about the location
of event due to its geometry of strongly connected motes.
Then in order to minimize the cost of broadcast messages at
cluster level (CH to CH), ACO is implemented which identifies
the path to sink node with minimum cost during inter cluster
multi-hop communication. Within each cluster, a random CH
is allocated on the basis of the cost function which helps in
minimizing the overall energy resources for a durable network.
We propose a modified LEACH algorithm which minimizes
the overall energy consumption of the network and at the
same time achieves maximum flow of the network. In order to
achieve our goals, we introduce dynamic cluster boundaries;
the sink node broadcasts beacon signals to every node in
the network in order to come up with a distance vector
based coverage. This allows the sink node to have an idea
about the network and helps it to form optimized cluster
boundaries using Voronoi tessellations. Thus, dynamic cluster
boundaries are formed on the basis of node density and energy
consumptions. Voronoi Tessellations allow us to minimize
energy and maximize the radius of each cluster. Note that in
LEACH, the CH is selected randomly after a certain period of
time. So whenever a new CH is randomly selected, Voronoi
Tessellation is used again at the sink node to reformulate the
cluster boundaries. Veronoi Tessellation algorithm is run at the
sink node from the time of new CH formation up to the time
of convergence of network. Once the cluster boundaries have
been finalized, ACO, which runs at the sink node, is used to
determine the path with minimum cost from the CHs to the
sink in a multi-hop communication model.
Figure 1 summarizes the high level working of the network.
Sink node broadcasts a message to all nodes in the network and
receives back the beacon signals. It approximates the distance
from the sensing node on the basis of the received signal
strength indicator (RSSI). The sink node then forms clusters

of sensing nodes with similar RSSI values and determines the
initial cluster boundaries using Voronoi Tessellation algorithm
such that the radii are maximized. In each cluster, a CH
is selected randomly in the start-up phase. Thereafter, the
sink node generates a random number periodically for cluster
head re-selection. If the number is less than a stochastic
threshold, then on the basis of intra cluster available energy
resources, CHs are re-selected. The sink node informs the the
new CHs through a broadcast message. After cluster head
selection, Voronoi tessellations are updated at sink node while
keeping energy constant and maximizing cluster radii. If the
generated number turns out to be less than the threshold, the
sink node waits for the next campaign for cluster head reselection. Thereafter, in order to conserve the energy required
for transmissions from CHs to the sink node, ant colony
optimization (ACO) is used to find the best path from different
CHs to the sink node. Thus, the network topology consists of
two hierarchical levels: i) centralized CH-Sink node hierarchy
ii) distributed intra-cluster hierarchy.

Start

Base Station (BS)
Broadcasts signals to
nodes and approximates
distance accordingly
BS runs Voronoi
Tesselation for cluster
formation and generate
random cluster heads
Periodically (after every
T seconds), generates
a random number

A. Centralized CH-Sink Node Hierarchy

Less than
a threshold
?

No

Wait for the
next campaign

Yes

The inter cluster network topology in centralized. The sink
node decides with regards to the cluster heads, cluster boundaries as well as about the routing between different clusters.
In the following we explain all these one by one.
1) Selection of Cluster Head: Once the campaign for the
cluster head has started, the sink node finds out the node
with the highest energy reserve with the help of the following
function [2]:

Start campaign
for cluster head

Select node with largest
energy reserve as the
cluster head (CH)
Re-Run Voronoi
Tesselation for optimal
cluster boundaries

CH uses ACO to find
best path to base station

T (n) =

1 − p(r

Fig. 1: High level working of the network

(1)

where 1/p is the total number of nodes in a cluster, r
represents the number of time CHs are being reselected, Eres
is the residual energy of the node and Eo is the initial energy
of the node. The value of the above mentioned function is
computed for all the nodes in the cluster and the node with the
largest T (n) is selected as the cluster head. Once new cluster
heads have been selected, the network is informed about the
new set of CHs through a broadcast message.
2) Dynamic Cluster Boundaries: For a given network with
dmax and dmin be the maximum and minimum inter node
distances respectively, the cluster radius is evaluated based on
distance between each node and sink node (SN) using the
following equation
Rc = 1 − α

Cluster sends data
to base station

Eres
p
mod (1/p)) Eo

dmax − d(ni , SN )
dmax − dmin

(2)

where Rc is the radius of the cth cluster where c ∈
{1, 2, ..., C} with C be the total number of clusters in the
network, α indicates normalized energy per cluster radius and
its value lies between 0 and 1. The algorithm converges when
n
P

α→

Ei

i=1

Ri

.

Algorithm 1 Ant Colony Optimization

B. Ant Colony Optimization
Ant Colony Optimization (ACO) is a swarm based optimization technique that is used to solve combinatorial optimization
problems efficiently. ACO is inspired from the food collecting
patterns of an ant colony in such a way that an ant leaves trail
of pheromone hormones on its path of visit to it’s colleagues in
identifying the objective (food). At each point the ant has two
options, either to explore the objective heuristically or leverage
the pheromone trails left by other colleagues. A set of these
probabilistic rules at each point, helps to minimize the total
cost of visits and optimally find an optimum path through
multiple points. Let an ant be a short term memory based
stochastic path allocator. At each step, in order to find the
minimum path from CH to sink node, an ant applies random
proportional rule to decide which next cluster to visit. The
probability with which an ant currently at cluster i chooses to
go to cluster j is given by the following equation:
α β
Pij = γτij
ηij

(3)

where γ is a normalization constant ranging between 0 and
1, τ indicates pheromone trail, η indicates heuristic value that
is available apriori and finally α and β determine the relative
influence of pheromone trail and heuristic information. If α=0,
closer clusters are more likely to be selected which suggests
a stochastic greedy algorithm. If β=0, only pheromone is
amplified and heuristic approach is not used. The heuristic
value for two adjacent cluster heads i and j is defined by the
following equation
λ !

d(j, s)
(4)
ηij = ∆ 1 +
d(i, s)
Ei
represents the energy utilization from i to
where ∆ = d(i,j)
j and is normalized through i to j distance, λ are the control
parameters representing the norm and s represents the alternate
cluster head choices connecting i to j. Further, pheromone trail
updates stochastically after an ant has constructed its tour. This
is done by first lowering the pheromone value on all arcs by
a constant factor and then adding pheromone on the arcs the
ant has crossed. The pheromone is updated in the following
manner:

τij (t + 1) = (1 − p)τij (t) + δpτij (t + 1, t)

(5)

Ei +Ej
d2 (i,j)

1
where δ =
and p = Nres
represents the pheromone
evaporation rate which enables negative reinforcements where
Nres is the number of resolved nodes for minimum path
to sink. The summary of ACO working is summarized in
algorithm 1.

C. Distributed Intra Cluster Topology
Within each cluster, our nodes work in a distributed manner.
Event detection is primarily done at intra cluster level so in
order to accommodate an infrastructure for both proactive
and reactive event monitoring, a margin is defined which

For each CH
if Sink Node then
Go to next CH node
end if
Place ANTS
Search for hops
Manage generated paths
Take best path for a CH and visited nodes
Update pheromone

is used to select the type of clustering algorithm and for
handling model complexity and latency trade off. We assume
a TDMA scheduling for both inter and intra cluster routing.
Within each cluster, the nodes form an undirected connected
graph for extensive coverage. If G denotes the given cluster
at time t, then in order to traverse the graph, a cost factor
is associated to monitor each link . For this purpose, the
cost factor accommodates link quality indicator, energy and
coverage. The idea is to determine trade-offs between the cost
factors and react accordingly. Let there be N number of nodes
in a cluster and after the choice of cluster head we need to
efficiently increase linking of intra cluster nodes with cluster
heads and reduce packet collisions. For this purpose, we adopt
a dynamic method of graph optimization based on TDMA
scheduling.
1) Cost Function: We introduce a cost function which is
based on the link quality indicator (Lqi ) at transmitter side,
residual node energy and coverage diameter (based on node
density and competitive radius). Here, Lqi may be affected
either by a bad wireless channel or with an actual event
specially in the networks where RSSI is used as a sensor
measurement. Hence, Lqi at the transmitter is affected by
residual energy and event detection. So in order to minimize
coverage and maximize event detection, the cost function
incorporates user defined control parameters so as to form a
more scalable model depending on type of event and node as
shown below:
Cmin,µp = pDc + (1 − p)[µLqi + (1 − µ)Eres ]

(6)

where p = 1/Nc is the reciprocal of the number of
connections of each mote Nc , Dc is the sum of the RSSI
values of each connected mote, µ is defined as the tradeoff
between Lqi and Eres and depends on transmitter parameters.
Thus it is a normalized (user defined) control parameter for
cost determination at the transmitter side (linked to event
probability), Eres is the residual energy at a node.
2) Comparison of Routing Algorithms: Floyd-Warshall
solves all-pairs shortest path problem while Dijkstra’s and
Bellman-Ford algorithms are used for the single-source shortest path problem. Table I shows the comparison of these algorithms helping us to decide which algorithm to use. We make
use of the extended version of Floyd Warshal algorithm for

Algorithm 2 Extended Floyd Warshal Path Reconstruction
Record the visited nodes
Crawl up to head node
if multiple node requests then
select the branch with maximum nodes linked
else
Pass the branch
end if
Algorithm 3 Intra Cluster Energy Efficient Distributed Routing and Monitoring

the red branch represents the path with minimum cost and maximum node
traversal

K-Class Clusters

iBIRCH Clustering

Gibbs Sampler

Hidden Layer 3

Hidden Layer 2

Reactive Monitoring (By passing Hidden Layers and sampler)

Hidden Layer 1

distributed nodes. The algorithm 2 summarizes this extended
version as it has the least complexity of all.

Fig. 2: Representation of distributed intra cluster routing with 4 nodes;

Feature Space

For all nodes in the Cluster
Broadcast link to all neighboring nodes
Calculate cost function and choose path of minimum cost
if hard margin then
Do Reactive monitoring
else
Do Proactive monitoring
end if
Do extended Floyd-Warshall Optimization

DBN for Proactive Event Monitoring

D. Intra-cluster Design
The resultant final algorithm for intra cluster distributed
routing is summarized in algorithm 3. The implementation of
distributed intra cluster routing with 4 nodes is demonstrated
in the Figure 2. Each node in distributed cluster forms a branch
(multiple links) from different nodes to CH. The CH selects
a branch with minimum cost and maximum node traversal
as indicated by the red branch in the Figure 2. Since it is
a strongly connected graph, there is link from each node
to other node, so in order to improve the network flow, we
only need to select one branch at a time. In this way for
reducing the overhead in communication, we dig up an optimal
dynamic route from connecting all the nodes in the cluster and
communicate the information to the CH. The resultant final
algorithm for intra cluster distributed routing is summarized
in algorithm 3. The implementation of distributed intra cluster
routing with 4 nodes is demonstrated in the Figure 2. Each
node in distributed cluster forms a branch (multiple links)
from different nodes to CH. The CH selects a branch with
minimum cost and maximum node traversal as indicated by
the red branch in the Figure 2. Since it is a strongly connected
graph, there is link from each node to other node, so in order
to improve the network flow, we only need to select one
branch at a time. In this way for reducing the overhead in
communication, we dig up an optimal dynamic route from
connecting all the nodes in the cluster and communicate the
information to the CH.

Fig. 3: The modified form of the Deep Belief Network with three hidden
layer; these layers are bypassed in case of reactive monitoring

E. Modified Deep belief network for hybrid event monitoring
The event monitoring needs to be flexible to accommodate
instances with both proactive and reactive event monitoring.
For this purpose, a user defined margin is integrated within
the event clustering algorithm so that we can switch between
two degrees of freedom. But using two different clustering
techniques within the same framework increases the visit time
(data aggregation and processing time at a node). Therefore,
we make use of a modified implementation of Deep Belief
Network [18], [19], [20] with 3 hidden layers and online
Gibbs sampling for proactive monitoring. All of this would be
bypassed in case of user defined event thresholds are crossed
as shown in the Figure 3.
In order to minimize noise data, a stochastic framework to
reconstruct inputs from unsupervised data has been used which
makes event decision utilizing incremental balanced iterative
reducing cluster hierarchy (iBIRCH). In our implementation,
Stacked Restricted Boltzmann Machines accompanied with
Gibbs sampling and iBirch are used for clustering in generative
deep belief network. Maximum likelihood is derived from
data values and is passed for prior selection after bottom up
pass, sampling and bottom down pass to shape the posterior
distribution and selection of hidden nodes. A layer is learnt
greedily before fine tuning of parameter in above layer. After

Sparse graph with -ive edge weights
Johnsons Algorithm
O(n2 log n)

Sparse graph with non -ive edge weights
Dijkstras Algorithm
O(n2 log n)

Dense Graph
Floyd Warshall
O(n3 )

Dense Graph
Extended Floyd Warshall
O(n2 )

TABLE I: Comparison of complexities of different routing algorithms

fine tuning, the parameters in lower layer are set by back
propagation algorithm. We have developed Gaussian-Bernoulli
Restricted Boltzman Machines (RBM) based DBN with visible
F
real-valued RSSI values v ∈ RD and transformed h ∈ {0, 1}
as stochastic binary hidden variables. The energy of the joint
state {v, h} of the Gaussian RBM is defined as:
E(v, h; θ) =

D
X
i=1

2

D X
F
X

F
X

(vi − bi)
vi
−
Wij hj −
aj hj
2σi2
σ
i
i=1 j=1
j=1
(7)

where θ = {W, a, b, σ 2 } are the model parameters. Wij
represents the symmetric interaction term between visible
variable vi and hidden variable hj ,and bi and aj are bias terms.
The joint distribution over the visible and hidden variables is
defined by:
P (v, h; θ) =

1
exp(−E(v, h : θ))
Z(θ)

(8)

where Z(θ) is known as the partition function or normalizing
constant. The model then assigns the marginal distribution over
the visible vector v, which takes the following form:
X
exp(−E(v, h; θ))
R P
P (v; θ) =
(9)
0
h exp(−E(v, h; θ))dv
v0
h

From Equation 7, derivation of the following conditional
distributions is straightforward:
!
P
−(x − bi − σi j hj Wij )2
1
p(vi = x|h) = √
exp
2σi2
2πσ 2
(10)
X
vi
(11)
p(hj = 1|v) = g(hj ) +
Wij
σi
i
1
where g(x)= 1+exp(−x)
is the logistic function. Each visible
unit is modeled by a Gaussian distribution whose mean
is shifted by the weighted combination of the hidden unit
activations. Given a set of observations {vn }N
n=1 , the derivative
of the log-likelihood with respect to the model parameters Wij
takes the following form:




vi hj
vi hj
∂ log P (v; θ)
= EPdata
− EPmodel
(12)
∂Wij
σi
σi

where EPdata [.] denotes an expectation with respect to the
data distribution
P Pdata (h, v; θ) = P (h|v; θ)Pdata (v), where
Pdata (v) = n δ(v−vn ) represents the empirical distribution,
and EPmodel [.] is an expectation with respect to the distribution
defined by the model, as in Equation 8.
Exact maximum likelihood learning in this model is
intractable because exact computation of the expectation
EPmodel [.] takes time that is exponential in min(D, F ), i.e.,

the number of visible or hidden variables. So, learning is done
by following an approximation to the gradient of a different
objective function, called the Contrastive Divergence (CD)
algorithm.
∆W = α(EPdata [vhT ] − EpT [vhT ])

(13)

where α is the learning rate and PT represents a distribution
defined by running a Gibbs chain initialized at the data for T
full steps. The special bi-partite structure of RBMs allows for
an efficient Gibbs sampler that alternates between sampling
the states of the hidden variables and giving the states of the
visible variables independently. The DBN model here uses an
incremental Gibbs sampler, an extension of [19] where we use
a set of topics (features dimensioned to fit in the hidden layers)
from the feature space of sensor outputs. The conditional PDF
of the topic variables is given as:
dj
j
P (zj |zi , wi ) ∝ nw
zij + Θnzij + γ

(14)

where
Θ
and
γ
are
tuning
parameters,
{z1 , .., zj−1 , zj+1 , .., zN } are the samples of the the
topic variables. The topic assignment of word j is sampled
according to its conditional distribution given above where wi
w
is the size of the feature space i, nzijj is the number of times
dj
is the number of
feature wj is assigned to topic zj and nzij
times a row entry dj is assigned to topic zj .
IV. E VALUATION
The proposed optimized sensor network has been simulated
in MATLAB. The rounds (the time lapse between the request
generated by sink node and the data received by all CH i.e.,
complete round trips) have been normalized and are fixed for
the evaluation of proposed and existing designs. The formal
and proposed topologies have been given same initial length
and width of the network area, same initial energy of each
node, same energy required for transmission of each bit and
same energy required for reception of each bit.
A. Inter-cluster Optimization
In order to check our method of inter cluster optimization,
we implemented a network of 200 nodes from which 20 nodes
were selected as cluster heads. The resultant coverage based
on Voronoi tessellation depending on node density is shown in
Figure 4. Higher the node density, more will be the coverage
area of the cluster. After setting up clusters, ACO is used for
optimal routing among the CH to decide between multi hop
and parallel data retrieval by sink node.

B. Intra Cluster Optimization
100

80

y

60

40

20

0
0

20

40

60

80

100

x

Fig. 4: Simulation of inter cluster optimization
Hidden Units per layer
12-12-12
20-15-12
20-20-15
20-20-20

Total Units
36
47
55
60

Error rate (%)
2.78
2.33
2.13
2.45

TABLE II: Performance improvement with different units of hidden layers
in DBN; the error rate gets significantly reduced with the proposed strategy

In Figure 4, yellow dots indicate the cluster heads (CH) and
the red dot indicates the sink node. As a result of ACO, cost
convergence indicates optimal routing of cluster heads, which
calculates energy cost function minimization in 100 iterations
at sink node. At a system level, the performance metric used
is number of packets sent to the sink node, the number of
dead nodes and energy decay versus number of iterations or
rounds. We have compared our algorithm implementation with
LEACH and LEACH-EEE as shown in Figures 5 and 6.
Figure 5 and 6 show the comparison of the results of our
optimized method and state of the art LEACH EEE protocol.
Figure 5(a) shows that our model has a throughput of almost
6 times greater than LEACH-EEE and has notably higher
throughput over a longer network lifetime. Figure 5(b) shows
that the first dead node appears after approximately 160 rounds
whereas in each LEACH-EEE, a mote is dead (energy below
threshold) appears after only 10 rounds (see Figure 6(b)).
Note that the quantitative numbers here are normalized for
comparison to give an overall network behavior. It can also
be seen from Figure 5(c) and 6(c) that the rate at which the
total energy of the overall network drains is lower for our
optimized method than LEACH-EEE. The energy drainage
rate of LEACH-EEE is approximately ten times to that of
proposed LEACH EEE. Note that we assume the network to
be dead when half of the motes in the network are dead (100
in this case). Here, it is important to note that staircase decay
of nodes indicates that though the overall total energy of the
system is going to decay i.e., dead nodes will increase with
time but the energy distribution is randomized and is “managed
optimally” i.e., the stairs in the graph represents the optimal
management of total system energy (as in Figure 5(a)).

For intra cluster optimization, we investigated different partitioned clustering algorithms on the obtained data including
EM, Farthest First, Density based, OPTICS and simple Kmeans, however agglomerative iBRICH algorithm showed
higher performance once trained. This reactive monitoring is
event triggered. For more complex proactive monitoring of
multiple physical factors, a proactive deep belief network is
used which further reduced the error rate on test data as shown
in the Table II. The results show a performance improvement
with different units of hidden layers in DBN; the error rate gets
significantly reduced with the proposed strategy and lies in the
range of 2.1 to 2.8 whereas with only iBRICH clustering, the
error rate is around 5%.
V. C ONCLUSION
In this paper, we propose a modified LEACH algorithm
which minimizes the overall energy consumption of the
network and at the same time achieves significantly better
throughput. The proposed solution forms optimized cluster
boundaries using Voronoi tessellations. Thus dynamic cluster
boundaries are formed on the basis of node density and energy
consumptions. Voronoi Tessellations allow us to minimize energy and maximize the radius of each cluster. Once the cluster
boundaries have been finalized, Ant Colony Optimization is
used to determine the path with minimum cost from the CHs
to the sink in a multi-hop communication model. With in a
cluster, dynamic optimization is used to minimize the cost.
The result show that the proposed optimized LEACH has a
throughput of almost 6 times greater than the state of the art
and that too with much better network life time (an order of
magnitude better).
R EFERENCES
[1] K. Singh, “WSN LEACH based protocols: A structural analysis” Computing and Communication (IEMCON), 2015 International Conference
and Workshop on, Vancouver, BC, 2015, pp. 1-7.
[2] A. Bharti, C. Devi and V. Bhatia, “Enhanced Energy Efficient LEACH
(EEE- LEACH) Algorithm using MIMO for Wireless Sensor Network”
2015 IEEE International Conference on Computational Intelligence and
Computing Research (ICCIC), Madurai, 2015, pp. 1-4.
[3] J. Badarinath, S. Radhakrishnan, V. Sarangan and V. Mahendrana, “Distributed Sink Tree Construction in Wireless Sensor Networks with Promiscuous Learning” 2014 IEEE 80th Vehicular Technology Conference
(VTC2014-Fall), Vancouver, BC, 2014, pp. 1-5.
[4] Z. W. Shen, Y. H. Zhu, X. Z. Tian and Y. P. Tang, “An Ant Colony
System Based Energy Prediction Routing Algorithms for Wireless Sensor
Networks” 2008 4th International Conference on Wireless Communications, Networking and Mobile Computing, Dalian, 2008, pp. 1-4.
[5] A. Gagarin, S. Hussain and L. T. Yang, “Distributed Search for Balanced
Energy Consumption Spanning Trees in Wireless Sensor Networks”
Advanced Information Networking and Applications Workshops, 2009.
WAINA ’09. International Conference on, Bradford, 2009, pp. 1037-1042.

Number

of

packet

sent

to

BS

vs.

round

Number

of

dead

node

vs.

round

Sum

45

12000

of

energy

of

nodes

vs.

round

50

40

45

35
40

30

6000

sum of energy

8000

# of dead nodes

# of packets sent to BS nodes

10000

25

20

35

30

25
4000

15

20
10
2000
15

5

0

0
0

100

200

300

400

500

10
0

100

200

Round

300

400

500

0

100

200

Round

300

400

500

Round

Fig. 5: The performance with the proposed Optimized LEACH vs iteration or rounds (a) Number of transmitted packets (b) Number of Dead Nodes (c)
Sum of energy of nodes

Number

of

packet

sent

to

BS

vs.

round

1600

Number

of

dead

node

vs.

round

Sum

100

50

90

45

80

40

70

35

of

energy

of

nodes

vs.

round

1000

800

sum of energy

1200

# of dead nodes

# of packets sent to BS nodes

1400

60

50

30

25

40

20

30

15

20

10

600

400

200
10

0

5

0
0

50

100

150

200

250

300

0
0

50

100

Round

150

200

250

300

Round

0

50

100

150

200

250

300

Round

Fig. 6: The performance with LEACH-EEE

[6] S. Hussain and M. I. Shafique, “Energy Efficient Routing in Wireless
Sensor Networks through Virtual Backbone” Communication Networks
and Services Research Conference, 2009. CNSR ’09. Seventh Annual,
Moncton, NB, 2009, pp. 452-454.

[13] S. Chakraborty, S. Chakraborty, S. Nandi and S. Karmakar, “A TreeBased Local Repairing Approach for Increasing Lifetime of Query Driven
WSN” Computational Science and Engineering (CSE), 2011 IEEE 14th
International Conference on, Dalian, 2011, pp. 475-482.

[7] A. Das and S. Das, “Power conservation in Wireless Sensor Networks:
A graph-theoretic approach” Information Sciences and Systems (CISS),
2011 45th Annual Conference on, Baltimore, MD, 2011, pp. 1-6.

[14] Q. Bian, Y. Zhang and Y. Zhao, “Research on Clustering Routing Algorithms in Wireless Sensor Networks” Intelligent Computation Technology
and Automation (ICICTA), 2010 International Conference on, Changsha,
2010, pp. 1110-1113.

[8] M. Moshtaghi, C. Leckie, S. Karunasekera, J. C. Bezdek, S. Rajasegarar
and M. Palaniswami, “Incremental Elliptical Boundary Estimation for
Anomaly Detection in Wireless Sensor Networks” 2011 IEEE 11th
International Conference on Data Mining, Vancouver,BC, 2011, pp. 467476.

[15] W. Zhao and Y. Liang, “Kernel-based Markov random fields learning
for wireless sensor networks” Local Computer Networks (LCN), 2011
IEEE 36th Conference on, Bonn, 2011, pp. 155-158.

[9] Y. Yu, B. Hong and V. K. Prasanna, “Communication Models for
Algorithm Design in Networked Sensor Systems” 19th IEEE International
Parallel and Distributed Processing Symposium, 2005, pp. 207b-207b.

[16] N. Shigei, H. Miyajima, H. Morishita, M. Maeda, “Centralized and
Distributed Clustering Methods for Energy Efficient Wireless Sensor
Networks” International MultiConference of Engineers and Computer
Scientists 2009 Vol I IMECS 2009, March 18 - 20, 2009, Hong Kong

[10] M. H. Shazly, E. S. Elmallah and J. Harms, “On Breach Path Detection
Reliability of Wireless Sensor Grids” 2012 21st International Conference
on Computer Communications and Networks (ICCCN), Munich, 2012,
pp. 1-7.

[17] M. A. T. Laksono, Y. Purwanto and A. Novianty, “DDoS detection using
CURE clustering algorithm with outlier removal clustering for handling
outliers” Control, Electronics, Renewable Energy and Communications
(ICCEREC), 2015 International Conference on, Bandung, 2015, pp. 1218.

[11] E. Onur, C. Ersoy and H. Delig, “Finding sensing coverage and
breach paths in surveillance wireless sensor networks” Personal, Indoor
and Mobile Radio Communications, 2004. PIMRC 2004. 15th IEEE
International Symposium on, 2004, pp. 984-988 Vol.2.

[18] M. Z. Alom, V. Bontupalli and T. M. Taha, “Intrusion detection
using deep belief networks” 2015 National Aerospace and Electronics
Conference (NAECON), Dayton, OH, 2015, pp. 339-344.

[12] M. Elmorsy and E. S. Elmallah, “Breach path to target area detection
reliability in Wireless Sensor Networks” 39th Annual IEEE Conference
on Local Computer Networks, Edmonton, AB, 2014, pp. 253-261.

[19] K. R. Canini, L. Shi, T. L. Griffiths “Online Inference of Topics
with Latent Dirichlet Allocation” International Conference on Artificial
Intelligence and Statistics (AISTATS) 2009, Clearwater Beach, Florida,
USA. Volume 5 of JMLR: W&CP 5.

[20] G. E. Hinton, S. Osindero and Y. W. Teh, “A Fast Learning Algorithm
for Deep Belief Nets” Neural Computation, vol. 18, no. 7, pp. 1527-1554,
July 2006.

