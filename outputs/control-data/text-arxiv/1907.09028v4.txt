Tropical optimization technique in bi-objective
project scheduling under temporal constraints

arXiv:1907.09028v4 [math.OC] 9 Jul 2020

N. Krivulin∗†

Abstract
We consider a project that consists of a set of activities performed
in parallel under constraints on their start and ﬁnish times, including
start-ﬁnish precedence relationships, release start times, release end
times, and deadlines. The problems of interest are to decide on the
optimal schedule of the activities to minimize both the maximum ﬂowtime over all activities, and the project makespan. We formulate these
problems as bi-objective optimization problems in the framework of
tropical mathematics which investigates the theory and applications
of algebraic systems with idempotent operations and has various applications in management science and operations research. Then, the
use of methods and techniques of tropical optimization allows to derive
complete Pareto-optimal solutions of the problems in a direct explicit
form ready for further analysis and straightforward computation. We
discuss the computational complexity of the solution and give illustrative examples.
Key-Words: decision analysis, multiple criteria evaluation, maxplus algebra, tropical optimization, time-constrained project scheduling.
MSC (2020): 90C24, 15A80, 90C29, 90B50, 90B35

1

Introduction

Tropical optimization deals with optimization problems that are formulated
and solved in terms of tropical (idempotent) mathematics which concentrates on the theory and applications of algebraic systems with idempotent
operations. Methods and techniques of tropical mathematics ﬁnd application in operations research, management science and other ﬁelds, where
∗
Faculty of Mathematics and Mechanics, Saint Petersburg State University, 28 Universitetsky Ave., St. Petersburg, 198504, Russia, nkk@math.spbu.ru.
†
This work was supported in part by the Russian Foundation for Basic Research (grant
No. 20-010-00145).

1

tropical optimization allows to provide new eﬃcient solutions to both known
and novel optimization problems of practical importance.
Since the pioneering works by [26, 5, 10, 15, 31] on tropical mathematics in the early 1960s, optimization problems have served to motivate and
illustrate the study. Further research in succeeding decades were often concerned with the analysis and solution of optimization problems as well. The
results obtained in the area are presented in a number of contributed papers
and books, among which are monographs by [1, 16, 11, 8, 14, 12, 9].
Many tropical optimization problems consist in minimizing or maximizing functions deﬁned in the tropical mathematics setting on vectors over
idempotent semiﬁelds (semirings with idempotent addition and invertible
multiplication). In some cases, but not infrequently, the problems can be
solved analytically to provide a complete direct solution in an explicit form
under rather general assumptions. For other problems only numerical techniques are known, available for a speciﬁc semiﬁeld, in the form of computational algorithms that oﬀer a particular solution or indicate that no solution
exists. A brief overview of the tropical optimization problems under consideration and their solutions can be found, e.g., in [18].
Applications of tropical mathematics include project scheduling problems, which appear in various settings in many publications from the early
works by [26, 5, 10] to more recent papers [4, 13, 28] and books [1, 14, 12].
Models and methods of tropical optimization proved to be well suited for
solving deterministic, pure temporal project scheduling problems, also referred to as time-dependent, time-constrained or resource-unconstrained
problems (see, e.g., [6, 25, 30]). These problems involve temporal constraints
(precedence relations, release times, due dates, deadlines) and temporal criteria (makespan, maximum deviation from due dates, maximum ﬂow-time),
and do not entail direct cost dependencies and resource requirements.
While general project scheduling problems are normally NP -hard, the
temporal problems, due to the lack of cost and resource constraints imposed, can normally be formulated as linear programs or graph (network)
optimization problems. As a result, they are numerically solved by appropriate computational procedures of polynomial computational complexity,
such as the Karmarkar and Floyd-Warshall algorithms.
In contrast to the algorithmic solutions, the tropical optimization approach can oﬀer complete, direct solutions to the problems, which are obtained in a compact vector form ready for further analysis and straightforward computations. Examples of temporal project scheduling problems and
their direct analytical solutions in the framework of tropical optimization
are provided, e.g., in [17, 19, 21, 20].
Multi-objective project scheduling where two or more conﬂicting criteria
have to be met [29, 2] allows the decision-maker to make more realistic and
reasonable choice and thus is of particular importance. The common way to
handle multi-objective problems is to obtain the best compromise solutions
2

which constitute a set of non-dominated or Pareto-optimal solutions where
no objective can be improved without degrading another one (see, e.g., [7,
23, 24, 3]). For some bi-objective problems, a solution can be obtained
analytically through the derivation of the Pareto frontier which is deﬁned
as the image of the Pareto-optimal set in the plane of objectives. The
analytical description of the Pareto frontier is then used to ﬁnd all Pareto
optimal solutions [27]. A natural approach to deal with multi-objective
temporal project scheduling problems is to reduce them to multi-objective
linear programs, which are then solved by appropriate numerical procedures
like multiple objective variants of the simplex algorithm and the Benson
algorithm.
In this paper we consider a project that consists of a set of activities performed in parallel under constraints on their start and ﬁnish times, including
start-ﬁnish precedence relationships, release start times, release end times,
and deadlines. The problems of interest are to develop a schedule that minimizes both the the maximum ﬂow-time over all activities and the project
makespan, which present common objectives in project scheduling. We formulate and solve the problems in the framework of tropical mathematics as
a tropical bi-objective optimization problem.
To handle the problem, we follow the approach developed in [17, 18, 19]
to solve ordinary single objective problems and then applied to bi-objective
problems in [22]. The approach oﬀers tropical optimization techniques that
involve the introduction of parameters to represent the optimal values of objective functions and hence to reduce the optimization problem to a system
of parametrized vector inequalities. We exploit the existence conditions for
solutions of the system to evaluate the parameters and then to describe the
Pareto frontier of the problem. The complete solution of the system, which
corresponds to the parameters given by the Pareto frontier is taken as a
Pareto-optimal solution of the initial bi-objective problem. We apply this
result to solve the project scheduling problems of interest in a direct explicit
form suitable for both formal analysis and numerical implementation. We
discuss the computational complexity of the solution and give illustrative
examples.
The paper is organized as follows. In Section 2 we provide a formal
description of the bi-objective temporal project scheduling problems of interest. Section 3 includes a brief overview of basic facts about tropical
algebra, which are used in the subsequent solution of a bi-objective tropical
optimization problem. The main result which provides a complete Paretooptimal solution to the optimization problem in an exact analytical form
is given in Section 4. We apply the result obtained to solve the project
scheduling problems and present illustrative examples in Section 5.

3

2

Bi-objective project scheduling problems

We start with a formal description of bi-objective temporal project scheduling problems that serve to motivate and illustrate the solution obtained
below in the framework of tropical optimization. In order to facilitate formulation of the problems in terms of tropical algebra, we use rather general model and notation which are slightly diﬀerent from those commonly
adopted in the literature on project scheduling (see, e.g., [6, 25, 29, 30]).
Consider a project which consists of n activities (jobs, tasks, operations)
to be performed in parallel under certain temporal constraints. The problem
is to construct a schedule for the activities, which can be considered optimal
in the sense of the best compromise solutions with respect to two diﬀerent
criteria to be described later.
For each activity i = 1, . . . , n, we denote the unknown start time by xi
and ﬁnish time by yi , and assume these variables to be subject to constraints
imposed due to some technological, organizational or other limitations of
the project. First, we suppose that the start time may be bounded by a
range given by speciﬁed release start time (ready or arrival time) gi and
release deadline (release end time or time limit) hi , which yields the double
inequality constraints
gi ≤ xi ≤ hi ,

i = 1, . . . , n.

Furthermore, the minimum allowed time lag aij between the start of
activity j and the ﬁnish of i is given to specify the start-ﬁnish constraints
by the inequalities
aij + xj ≤ yi ,

i, j = 1, . . . , n,

where we take aij = −∞ if the lag aij is not deﬁned. Note that the diﬀerence
between the ﬁnish and start times of activity i is bounded from below by
the value of aii , which is normally assumed to be non-negative and presents
the duration of the activity when no other activities are taken into account.
Moreover, we assume that each activity ﬁnishes immediately as soon
as all its related start-ﬁnish constraints are satisﬁed, which results in the
equalities
max (aij + xj ) = yi ,
i = 1, . . . , n.
1≤j≤n

Finally, the ﬁnish time of activity i may be bounded from above by a
given deadline fi to satisfy the constraints
yi ≤ fi ,

i = 1, . . . , n.

To develop an optimal schedule, we consider two optimality criteria
which are frequently used in project scheduling and involve the minimization
of the maximum ﬂow-time of activities and the minimization of the project
4

makespan. The ﬂow-time (shop or cycle time) is deﬁned for activity i as
the diﬀerence yi − xi between its ﬁnish and start times, and may directly
or indirectly reﬂect the expenditure incurred to perform the activity. The
maximum ﬂow-time over all activities is given by
max (yi − xi ).

1≤i≤n

The project makespan which is the overall project duration presents
a commonly used measure of schedule eﬃciency to be minimized. This
measure is calculated as the diﬀerence between the maximum ﬁnish time
and the minimum start time of activities, it is not less than the maximum
ﬂow-time and represented as
max yi − min xi = max yi + max (−xi ).

1≤i≤n

1≤i≤n

1≤i≤n

1≤i≤n

The problems of interest are formulated to ﬁnd the start and ﬁnish times
for all activities to minimize both the maximum ﬂow time and the makespan
under the release time, release deadline, start-ﬁnish and deadline constraints.
By combining the objective functions with the release and start-ﬁnish constraints, we arrive at the bi-objective problem of project scheduling in which,
given numbers aij , gi and hi such that gi ≤ hi for all i, j = 1, . . . , n, one
needs to obtain the unknown xi and yi to


minimize
max (yi − xi ), max yi + max (−xi ) ;
1≤i≤n

subject to

1≤i≤n

1≤i≤n

(1)

max (aij + xj ) = yi ,

1≤j≤n

gi ≤ xi ≤ hi ,

i = 1, . . . , n.

Another problem which takes into account the deadline constraints fi
instead of the release deadlines hi is formulated as follows:


minimize
max (yi − xi ), max yi + max (−xi ) ;
1≤i≤n

subject to

1≤i≤n

1≤i≤n

(2)

max (aij + xj ) = yi ,

1≤j≤n

gi ≤ xi ,

yi ≤ fi ,

i = 1, . . . , n.

Below, we apply methods and techniques of tropical optimization to
represent bi-criteria optimization problems (1) and (2) in compact vector
form, and then to derive complete direct Pareto-optimal solutions of the
problems.

3

Preliminary definitions, notation and results

In this section, we oﬀer an overview of basic deﬁnitions, notation and preliminary results of tropical (idempotent) algebra to provide an appropriate
5

analytical framework for compact formulation and complete solution of a
tropical optimization problem in the next section. Further details on the
theory and applications of tropical mathematics can be found, e.g., in the
monographs and textbooks by [1, 16, 11, 14, 12].

3.1

Idempotent semifield

Let X be a set closed under two associative and commutative operations,
addition ⊕ and multiplication ⊗, which have neutral elements, zero 0 and
unit 1. Addition is idempotent, that is, x ⊕ x = x for any x ∈ X. Multiplication distributes over addition, has 0 as absorbing element and is invertible
to endow each x 6= 0 with the inverse x−1 such that x ⊗ x−1 = 1. The
system (X, 0, 1, ⊕, ⊗) is normally referred to as the idempotent semiﬁeld.
Integer powers are introduced in the standard way to represent iterated
products as 0n = 0, xn = x ⊗ xn−1 and x−n = (x−1 )n for any x 6= 0 and
natural n. Moreover, the semiﬁeld is assumed algebraically complete in the
sense that the equation xn = a is uniquely solvable in x for any a ∈ X and
natural n, which makes rational exponents well deﬁned. The multiplication
symbol ⊗ is henceforth omitted to save writing.
Idempotent addition deﬁnes a partial order on X by the rule that x ≤ y
if and only if x ⊕ y = y. In terms of this order, addition and multiplication
are monotone in both operands, that is, the inequality x ≤ y results in the
inequalities x ⊕ z ≤ y ⊕ z and xz ≤ yz for x, y, z ∈ X. Inversion is antitone,
which means that for all x, y 6= 0 the inequality x ≤ y yields x−1 ≥ y −1 .
Addition has an extremal property (the majority law) that the inequalities
x ≤ x ⊕ y and y ≤ x ⊕ y hold for any x, y ∈ X. Moreover, the inequality
x ⊕ y ≤ z is equivalent to the system of two inequalities x ≤ z and y ≤ z.
In what follows, the partial order is assumed extended to a consistent total
order to make the semiﬁeld linearly ordered.
For any x, y ∈ X and non-negative integer m, the idempotent analogue
of binomial identity is given by (x ⊕ y)m = xm ⊕ xm−1 y ⊕ · · · ⊕ y m .
It follows from the identity with m = 2 that the inequality (xy)1/2 ≤ x⊕y
is valid as an idempotent analogue of the relation between geometric and
arithmetic means of two positive numbers. This inequality readily extends
to any integer m > 0 and x1 , . . . , xm ∈ X in the form (x1 · · · xm )1/m ≤
x1 ⊕ · · · ⊕ xm .
An example of the idempotent semiﬁeld under consideration is the real
semiﬁeld Rmax,+ = (R∪{−∞}, −∞, 0, max, +) which is frequently called the
max-plus algebra. In the semiﬁeld, the addition ⊕ is computed as calculation of maximum and the multiplication ⊗ as arithmetic addition; the zero
0 is deﬁned as −∞ and the unit 1 as the arithmetic zero 0. Furthermore, for
any x ∈ R, there exists the inverse x−1 which corresponds to the opposite
number −x in conventional algebra. The power xy coincides with the arithmetic product yx which is deﬁned for all x, y ∈ R. The order induced by
6

idempotent addition conforms with the natural linear order on R ∪ {−∞}.
As another example, consider Rmin,× = (R+ ∪ {∞}, ∞, 1, min, ×) where
R+ is the set of positive reals. In the semiﬁeld, the operations are deﬁned
as ⊕ = min and ⊗ = ×, and the neutral elements as 0 = ∞ and 1 = 1. The
multiplicative inverses and exponents are interpreted as usual, whereas the
order produced by addition is opposite to the natural linear order on R+ .

3.2

Algebra of matrices and vectors

Denote the set of matrices over X with m rows and n columns by Xm×n . A
matrix that has all entries equal to 0 is the zero matrix. If a matrix has no
zero columns, it is called column-regular.
Addition and multiplication of matrices as well as multiplication of matrices by scalars follow the standard rules where the arithmetic addition and
multiplication are replaced by ⊕ and ⊗.
The transpose of a matrix A is denoted AT . The multiplicative conjugate transpose of a nonzero (m × n)-matrix A = (aij ) is the (n × m)-matrix
−
−1
−
A− = (a−
ij ) with the entries aij = aji if aji 6= 0, and aij = 0 otherwise.
The properties of scalar addition and multiplication, which are associated
with the order relation induced by idempotent addition extend to the matrix
operations where the inequalities are considered entry-wise.
A square matrix that has all diagonal entries equal to 1 and all oﬀdiagonal entries to 0 is the identity matrix denoted by I. Natural powers of
a square matrix A are given by A0 = I and An = An−1 A for any natural
n.
Let A = (aij ) be a square matrix of order n. The trace of the matrix
A is calculated as tr A = a11 ⊕ · · · ⊕ ann . For any matrices A and B of
appropriate dimensions, and scalar x, the following equalities hold:
tr(A ⊕ B) = tr A ⊕ tr B,

tr(AB) = tr(BA),

tr(xA) = x tr A.

Consider a function that maps any matrix A ∈ Xn×n to the scalar
Tr(A) = tr A ⊕ · · · ⊕ tr An .
Provided that Tr(A) ≤ 1, one can deﬁne the matrix (also known as the
Kleene star matrix) given by
A∗ = I ⊕ A ⊕ · · · ⊕ An−1 .
Any matrix that consists of a single column (row) forms a column (row)
vector. In the following, all vectors are taken as column vectors unless
otherwise indicated. The set of column vectors of size n is denoted Xn .
A vector without zero components is called regular. The zero vector and
the vector with all components equal to 1 are denoted by 0 = (0, . . . , 0)T
and 1 = (1, . . . , 1)T .
7

The conjugate transpose of a nonzero column vector x = (xi ) is the row
−
−1
vector x− = (x−
if xi 6= 0, and x−
i ) where xi = xi
i = 0 otherwise.
n
A vector y ∈ X is linearly dependent on x1 , . . . , xm ∈ Xn if there exist
scalars c1 , . . . , cm ∈ X such that y = c1 x1 ⊕ · · · ⊕ cm xm . A vector y is
collinear with x if y = cx for some c.
A scalar λ is an eigenvalue of a square matrix A ∈ Xn×n if there exists a
nonzero vector x ∈ Xn that satisﬁes the equation Ax = λx. The maximum
eigenvalue is referred to as the spectral radius and calculated as
λ = tr A ⊕ · · · ⊕ tr1/n (An ).
For any matrix A ∈ Xn×n and vector x ∈ Xn , idempotent analogues of
matrix and vector norms are given by
kAk = a11 ⊕ · · · ⊕ ann = 1T A1,

3.3

kxk = x1 ⊕ · · · ⊕ xn = 1T x = xT 1.

Vector inequalities

Suppose that, for given matrix A ∈ Xm×n and vector d ∈ Xm , one needs to
solve, with respect to the unknown vector x ∈ Xn , the inequality
Ax ≤ d.

(3)

A solution to inequality (3) is described as follows (see, e.g., [1, 14, 17]).
Lemma 1. For any column-regular matrix A and regular vector d, all solutions to inequality (3) are given by the inequality x ≤ (d− A)− .
Now assume that, given a matrix A ∈ Xn×n and vector b ∈ Xn , the
problem is to ﬁnd regular vectors x ∈ Xn to satisfy the inequality
Ax ⊕ b ≤ x.

(4)

The next result obtained in [18] oﬀers a direct solution.
Theorem 2. For any matrix A, the following statements hold:
1. If Tr(A) ≤ 1, then all regular solutions to (4) are given by x = A∗ u
where u ≥ b.
2. If Tr(A) > 1, then there is only the trivial solution x = 0.

3.4

Binomial identities for matrices and traces

We conclude the overview of preliminary results with some useful matrix
formulas. We start with a binomial identity that is valid for any matrices
A, B ∈ Xn×n and integer m ≥ 0 in the following form (see also [19]):
(A ⊕ B)m = Am ⊕

m
M

M

k=1 i0 +i1 +···+ik =m−k
i0 ,i1 ,...,ik ≥0

8

Ai0 (BAi1 · · · BAik ).

In the case when B = pq− where p, q ∈ Xn are vectors, this identity
becomes
− m

(A ⊕ pq )

m

=A ⊕

m
M

M

(q − Ai1 p · · · q − Aik−1 p)Ai0 pq− Aik ,

k=1 i0 +i1 +···+ik =m−k
i0 ,i1 ,...,ik ≥0

(5)
where we assume q− Ai1 p · · · q − Aik−1 p = 1 if k = 1.
After taking trace of (5) and summing up the traces over all m =
1, . . . , n, we apply properties of trace to rearrange the terms and obtain
−

Tr(A ⊕ pq ) =

n
M

k

tr A ⊕

k=1

n−k
n M
M

M

(q− Ai1 p · · · q− Aik p). (6)

k=1 m=0 i1 +···+ik =m
i1 ,...,ik ≥0

Suppose that Tr(A ⊕ pq − ) ≤ 1. Then, the evaluation of the sum of (5)
over all m = 0, . . . , n − 1 and rearrangement of terms yield the identity for
the Kleene matrix
(A⊕pq − )∗ = A∗ ⊕

n−1 n−k−1
M
M

M

(q− Ai1 p · · · q − Aik−1 p)Ai0 pq− Aik .

k=1 m=0 i0 +i1 +···+ik =m
i0 ,i1 ,...,ik ≥0

(7)

4

Bi-objective tropical optimization problem

We are now in a position to formulate and solve a new bi-objective tropical
optimization problem which is used in the next section to solve the project
scheduling problems of interest. For the sake of compactness and generality
of presentation, we describe here the tropical optimization problem and its
solution in terms of a general idempotent semiﬁeld (X, 0, 1, ⊕, ⊗).
Suppose that, given a nonzero square matrix A ∈ Xn×n and nonzero
vectors p, q, g, h ∈ Xn where g ≤ h, we need to ﬁnd regular vectors x ∈ Xn
that provide solutions to the bi-objective optimization problem
minimize

{x− Ax, x− pq − x};

subject to g ≤ x ≤ h.

(8)

To solve this tropical optimization problem, we apply the solution technique developed in [22] for bi-criteria decision-making problems. We reduce
problem (8) to a system of parameterized vector inequalities, where the
parameters are used to describe the Pareto frontier of the problem. The
existence conditions for solutions of the system serve to derive the Pareto
frontier, whereas all corresponding solutions of the system give the Paretooptimal solutions of (8).
9

4.1

Parametrization of problem

We start with a description of the Pareto frontier on the border of the
image of the set of feasible solutions in the plane of criteria. We denote the
minimum values of the scalar objective functions x− Ax and x− pq − x in the
Pareto frontier of problem (8) by α and β, and note that α, β > 0 for any
regular x. Then, all solutions are deﬁned by the system of inequalities
x− Ax ≤ α,

x− pq − x ≤ β,

g ≤ x ≤ h.

By using Lemma 1, we solve the ﬁrst inequality with respect to Ax and
the second to pq − x to obtain the equivalent system
α−1 Ax ≤ x,

β −1 pq− x ≤ x,

g ≤ x ≤ h,

which can then be combined into one double inequality
(α−1 A ⊕ β −1 pq− )x ⊕ g ≤ x ≤ h.

(9)

According to Theorem 2, regular solutions of the left inequality at (9)
exist if and only if the condition Tr(α−1 A ⊕ β −1 pq − ) ≤ 1 is valid, under
which all solutions are given through a vector of parameters u by
x = (α−1 A ⊕ β −1 pq− )∗ u,

u ≥ g.

Furthermore, to provide the right inequality at (9), the vector u must
satisfy the inequality (α−1 A ⊕ β −1 pq− )∗ u ≤ h. We apply Lemma 1 to this
inequality and obtain an upper bound on u, which together with the lower
bound g gives the inequality
g ≤ u ≤ (h− (α−1 A ⊕ β −1 pq − )∗ )− .
The set of vectors u deﬁned by this double inequality is not empty if the
inequality g ≤ (h− (α−1 A ⊕ β −1 pq− )∗ )− holds, which is, due to Lemma 1,
equivalent to the condition h− (α−1 A ⊕ β −1 pq− )∗ g ≤ 1.
By collecting the existence conditions and combining the bounds on u,
we ﬁnally conclude that inequality (9) has regular solutions if and only if
both inequalities
Tr(α−1 A ⊕ β −1 pq − ) ≤ 1,

(h− (α−1 A ⊕ β −1 pq − )∗ )g ≤ 1.

(10)

are satisﬁed, and all solutions are given in parametric form by the relations
x = (α−1 A ⊕ β −1 pq − )∗ u,

g ≤ u ≤ (h− (α−1 A ⊕ β −1 pq− )∗ )− .

10

(11)

4.2

Determination of parameters

To derive the Pareto frontier for the problem, we examine the conditions at
(10). We consider the ﬁrst condition and use identity (6) for calculating
−1

Tr(α

A⊕β

−1

−

pq ) =

⊕

n
M

α−k tr Ak

k=1
n
n−k
M
M
−k

M

β

k=1

α−m (q − Ai1 p · · · q− Aik p),

m=0 i1 +···+ik =m
i1 ,...,ik ≥0

which allows to expand the condition as follows
n
M

−k

α

k

tr A ⊕

k=1

n
M

β

−k

n−k
M

M

α−m (q − Ai1 p · · · q − Aik p) ≤ 1.

m=0 i1 +···+ik =m
i1 ,...,ik ≥0

k=1

We replace the last inequality by the equivalent system of inequalities
α−k tr Ak ≤ 1,
β

−k

n−k
M

M

α−m (q − Ai1 p · · · q − Aik p) ≤ 1,

k = 1, . . . , n.

m=0 i1 +···+ik =m
i1 ,...,ik ≥0

After rearranging terms to isolate powers of α and β on the right-hand
side and taking roots, we rewrite the system as
tr1/k (Ak ) ≤ α,
n−k
M

M

α−m/k (q− Ai1 p · · · q− Aik p)1/k ≤ β,

k = 1, . . . , n.

m=0 i1 +···+ik =m
i1 ,...,ik ≥0

Aggregating the inequalities for α and then for β yields the system
α≥

n
M

β≥

n M
n−k
M

tr1/k (Ak ) = λ,

k=1

M

α−m/k (q − Ai1 p · · · q − Aik p)1/k ,

k=1 m=0 i1 +···+ik =m
i1 ,...,ik ≥0

where λ denotes the spectral radius of the matrix A.
To simplify the sum on the right-hand side of the second inequality,
consider that part of this sum, which corresponds to k = 1 and takes the
form
n−1
n−1 M
M
M
α−i (q− Ai p).
α−m (q− Ai1 p) =
m=0 i1 =m

i=0

11

Let us verify that the rest of the sum is dominated by this part and thus
can be eliminated. Indeed, with the condition that i1 + · · · + ik = m where
1 < k ≤ n and 0 ≤ m ≤ n − k, we apply the tropical inequality between
geometric and arithmetic means to obtain
α−m/k (q− Ai1 p · · · q− Aik p)1/k = (α−i1 (q − Ai1 p) · · · α−ik (q − Aik p))1/k
≤ α−i1 (q− Ai1 p) ⊕ · · · ⊕ α−ik (q − Aik p) ≤

n−1
M

α−i (q− Ai p).

i=0

It follows from this inequality that the sum of all terms corresponding
to k > 1 satisﬁes the condition
n M
n−k
M

M

α−m/k (q − Ai1 p · · · q − Aik p)1/k ≤

k=2 m=0 i1 +···+ik =m
i1 ,...,ik ≥0

n−1
M

α−i (q − Ai p),

i=0

and hence can be dropped without aﬀecting the entire sum.
As a result, we obtain the system of inequalities in the reduced form
α≥

n
M

tr

1/k

k

(A ),

β≥

n−1
M

α−k (q− Ak p).

(12)

k=0

k=1

Next, we examine the second condition at (10). Application of identity
(7) to the Kleene star matrix, followed by the multiplication of the result
by h− on the left and by g on the right puts this condition into the form
h− g ⊕

⊕

n−1
M
k=1

n−1
M

β −k

α−k (h− Ak g)

k=1
n−k−1
M

M

α−m (q − Ai1 p · · · q − Aik−1 p)h− Ai0 pq− Aik g ≤ 1.

m=0 i0 +i1 +···+ik =m
i0 ,...,ik ≥0

We solve this inequality for α and β in the same way as before. First
note that the condition g ≤ h yields h− g ≤ 1, and hence the term h− g can
be eliminated. Next, we take the other two terms to replace the inequality
by a system of two inequalities.
After solving these inequalities and combining the solutions in the same

12

way as above, we rewrite the system as
α≥

β≥

n−1
M
(h− Ak g)1/k ,
k=1
n−2
M

M

α−m (h− Ai p)(q− Aj g)

m=0 i+j=m
i,j≥0

⊕

n−1 n−k−1
M
M

M

α−m/k ((q− Ai1 p · · · q− Aik−1 p)h− Ai0 pq − Aik g)1/k ,

k=2 m=0 i0 +i1 +···+ik =m
i0 ,...,ik ≥0

where two sums on the right-hand side of the second inequality are obtained
by separating all summands which correspond to k = 1 from the others.
By coupling the last inequalities for α and β with the corresponding
inequalities from (12), we form the system
α≥

β≥

n
M

k=1
n−1
M

tr

1/k

n−1
M
(A ) ⊕
(h− Ak g)1/k ,
k

k=1

α−k (q− Ak p) ⊕

n−1 n−k−1
M
M

α−m (h− Ai p)(q− Aj g)

m=0 i+j=m
i,j≥0

k=0

⊕

n−2 M
M

M

α−m/k ((q− Ai1 p · · · q− Aik−1 p)h− Ai0 pq − Aik g)1/k .

k=2 m=0 i0 +i1 +···+ik =m
i0 ,...,ik ≥0

To simplify the right-hand side of the second inequality, we verify that the
ﬁrst two sums on this side dominate the third sum. By using the inequality of
geometric and arithmetic means once again, we obtain for all k = 2, . . . , n−1,
m = 0, . . . , n − k − 1 and i0 + i1 + · · · + ik = m, the inequalities
α−m/k ((q− Ai1 p · · · q− Aik−1 p)h− Ai0 pq − Aik g)1/k
≤ (α−i1 (q− Ai1 p) ⊕ · · · ⊕ α−ik−1 (q− Aik−1 p)) ⊕ α−(i0 +ik ) (h− Ai0 pq − Aik g)
≤

n−1
M

−i

−

i

α (q A p) ⊕

i=0

n−2 M
M

α−l (h− Ai p)(q − Aj g),

l=0 i+j=l
i,j≥0

which show that each summand of the third sum is not greater than the
ﬁrst two sums, and hence the third sum can be eliminated.

13

As a result, the system of inequalities for α and β takes the form
α≥

n
M

tr1/k (Ak ) ⊕

k=1

n−1
M
(h− Ak g)1/k ,
k=1
n−1
M

β ≥ q − p ⊕ h− pq− g ⊕

α−k (q− Ak p) ⊕

n−2
M

α−k

k=1

k=1

M

(h− Ai p)(q− Aj g).

i+j=k
i,j≥0

(13)

4.3

Derivation of Pareto frontier

We now examine the system at (13) to derive a representation for the Pareto
frontier in terms of the parameters α and β. To simplify further formulas,
we use the notation
λ=

n
M

tr1/k (Ak ),

µ=

n−1
M
(h− Ak g)1/k ,

ν = q − p ⊕ h− pq− g, (14)

k=1

k=1

and introduce the functions
G(s) =

n−1
M

s−k (q − Ak p) ⊕

k=1

H(t) =

n−1
M
k=1

n−2
M

s−k

k=1

t

−1/k

−

k

1/k

(q A p)

⊕

M

(h− Ai p)(q − Aj g),

s > 0;

i+j=k
i,j≥0
n−2
M

t−1/k

k=1

M

(h− Ai p)1/k (q− Aj g)1/k ,

t > 0.

i+j=k
i,j≥0

(15)
We note that both functions are monotone decreasing. Furthermore, it
is not diﬃcult to verify by direct calculation that the inequalities
G(s) ≤ t,

H(t) ≤ s

are equivalent in the sense that all solutions of the ﬁrst inequality with
respect to s are represented by the second inequality and vice versa (see,
also, [22]).
Finally, with the new notation, we represent the system (13) in the form
α ≥ λ ⊕ µ,

β ≥ ν ⊕ G(α).

(16)

Consider the area of points (α, β), which is given by the system of inequalities at (16). To determine the Pareto frontier as the image of the
set of Pareto optimal solutions, we need to examine the boundary of this
area because each interior point apparently corresponds to a solution that
is dominated and hence is not Pareto-optimal.
14

The area is bounded from the left by the vertical line α = λ⊕µ, from the
lower left by the curve β = ν ⊕ G(α) and from below by the horizontal line
β = ν. Since the function G(α) is monotone decreasing, the Pareto frontier
for the problem is a segment of the curve that lies right of the vertical
and above the horizontal lines, or a single point if the curve lies below the
intersection of these lines, as shown in Fig. 1.
To describe the Pareto frontier and related Pareto-optimal solutions, we
examine two cases. First, we assume that the following condition holds:
λ ⊕ µ ≥ H(ν).
Under this condition, it follows from the inequality α ≥ λ ⊕ ν that the
inequality α ≥ H(ν) is satisﬁed. Solving the last inequality with respect to
ν yields ν ≥ G(α). As a result, system (16) becomes
α ≥ λ ⊕ µ,

β ≥ ν,

which gives the Pareto frontier reduced to a single point (α, β) where
α=λ⊕µ=

n
M

tr

1/k

n−1
M
(h− Ak g)1/k ,
(A ) ⊕
k

β = ν = q − p ⊕ h− pq − g.

k=1

k=1

An example of the Pareto frontier in terms of the semiﬁeld Rmax,+ (maxplus algebra) for this case is shown in Fig. 1 (left) by the thick dot in the
intersection of the lines α = λ ⊕ µ and β = ν.
α=λ⊕µ

α=λ⊕µ

β

β
β=ν
β=ν
H(ν)

H(ν)

β = G(α)

β = G(α)
α

α

Figure 1: Examples of Pareto frontiers in terms of Rmax,+ in the form of a
point (left) and a segment (right).
Now suppose that the opposite condition is valid in the form
λ ⊕ µ < H(ν).
15

Then, system (16) deﬁnes an area which is given by the conditions
λ ⊕ µ ≤ α ≤ H(ν),

β ≥ ν ⊕ G(α),

with its lower left boundary deﬁned by λ ⊕ µ ≤ α ≤ H(ν) and β = ν ⊕ G(α).
Let us verify that, under the condition λ ⊕ µ ≤ α ≤ H(ν), we have
G(α) ≥ ν, and hence the last equality can be reduced to β = G(α).
Since G(α) is a monotone decreasing function of α, it is suﬃcient to
verify that G(α) ≥ ν for α = H(ν). We consider the equality
H(ν) =

n−1
M

(q− p ⊕ h− pq− g)−1/k (q− Ak p)1/k

k=1

⊕

n−2
M

(q− p ⊕ h− pq− g)−1/k

k=1

M

(h− Ai p)1/k (q− Aj g)1/k ,

i+j=k
i,j≥0

and note that this equality is valid in two cases.
For the ﬁrst case, we assume that there exists an index m such that
H(ν) = (q − p ⊕ h− pq− g)−1/m (q − Am p)1/m .
Then, under the assumption that α = H(ν), we obtain
G(α) =

n−1
M

−k

α

−

k

(q A p) ⊕

n−2
M
k=1

k=1

≥

n−1
M

M

α−k

(h− Ai p)(q − Aj g)

i+j=k
i,j≥0

α−k (q− Ak p) ≥ α−m (q− Am p) = q− p ⊕ h− pq − g = ν.

k=1

The other case involves the condition that for some m the following
equality holds:
M
H(ν) = (q− p ⊕ h− pq − g)−1/m
(h− Ai p)1/m (q − Aj g)1/m ,
i+j=k
i,j≥0

which with setting α = H(ν) yields
G(α) ≥

n−2
M
k=1

α−k

M

(h− Ai p)(q− Aj g)

i+j=k
i,j≥0

≥ α−m

M

(h− Ai p)(q − Aj g) = q− p ⊕ h− pq − g = ν.

i+j=m
i,j≥0

16

Since G(α) ≥ ν in both cases, the description of the Pareto frontier can
be reduced to the system
λ ⊕ µ ≤ α ≤ H(ν),

β = G(α).

This case is illustrated in Fig. 1 (right) where the Pareto frontier is
depicted by a thick segment that is cut by the vertical line α = λ ⊕ µ and
horizontal line β = ν from the curve β = G(α).

4.4

Pareto-optimal solution

We are now in a position to summarize the obtained results by the next
statement.
Theorem 3. For any nonzero matrix A, nonzero vectors p, q, g and h
such that h− g ≤ 1, with the notation (14)–(15) the following statements
hold:
1. If λ ⊕ µ ≥ H(ν), the Pareto frontier for problem (8) degenerates into
the single point (α, β) with α = λ ⊕ µ and β = ν.
2. Otherwise, the Pareto frontier is the segment given by the conditions
λ ⊕ µ ≤ α ≤ H(ν),

β = G(α).

All Pareto-optimal solutions are represented in parametric form as
x = (α−1 A ⊕ β −1 pq − )∗ u,

g ≤ u ≤ (h− (α−1 A ⊕ β −1 pq − )∗ )− .

We now brieﬂy discuss the computational complexity of the solution
obtained. First, we note that the computational time required to obtain a
solution vector depends on the time spent on calculating values of λ, µ, G
and H, and evaluating the matrix (α−1 A ⊕ β −1 pq − )∗ . As it easy to see,
the most computationally demanding task involved is obtaining the ﬁrst n
powers of the matrices A and α−1 A⊕β −1 pq − . Since direct multiplication of
two matrices of order n takes at most O(n3 ) operations, the time to obtain
these powers can be estimated O(n4 ). Similar reasoning shows that both
functions G and H can be computed in the same time. As a result, the
overall computational complexity of the solution is no more than O(n4 ).
We also note that the compact vector form of the solution obtained,
which involves a ﬁxed number of simple matrix and vector operations, makes
the result easily scalable to high-dimensional problems and oﬀers a strong
potential for eﬃcient implementation on parallel computing platforms.

17

5

Application to bi-objective project scheduling
problems

Consider the bi-objective project scheduling problem at (1), and note that
the representation of both the objective functions and the constraints involves only the arithmetic operations of maximum, addition and additive
inversion (subtraction). As a consequence, we can rewrite (1) in the maxplus algebra setting by changing the operation symbols to obtain a tropical
optimization problem that is to


n
n
n

M
M
M
−1
−1
;
xj
yi
y i xi ,
minimize


subject to

j=1

i=1

i=1

n
M

aij xj = yi ,

j=1

gi ≤ xi ≤ hi ,

i = 1, . . . , n.

Furthermore, we introduce the following matrix and vectors:
A = (aij ),

x = (xi ),

y = (yi ),

g = (gi ),

h = (hi ),

and represent the problem in the vector form
 −
minimize
x y, x− 11T y ;
subject to Ax = y,

g ≤ x ≤ h.

After substitution y = Ax into the objective functions, we obtain a
problem in the form of (8) where p = 1 and q − = 1T A. We now exploit
Theorem 3 to describe a complete Pareto-optimal solution to the problem.
To rewrite the statement of Theorem 3 in terms of the problem under
study, we ﬁrst observe that x− 1 = kx− k and 1T Ax = kAxk. Then, problem (8) takes the form
minimize

{x− Ax, kx− kkAxk};

subject to g ≤ x ≤ h.

(17)

Furthermore, we reﬁne the notation (14) as
λ=

n
M
k=1

tr

1/k

k

(A ),

µ=

n−1
M

(h− Ak g)1/k ,

k=1

18

ν = kAk ⊕ kh− kkAgk,

and the notation (15) as
G(s) =

n−1
M

s

−k

kA

k+1

k⊕

k=1

H(t) =

n−1
M

n−2
M

s−k

k=1

t

−1/k

kA

k+1 1/k

k

⊕

M

i+j=k
i,j≥0
n−2
M

t−1/k

k=1

k=1

kh− Ai kkAj+1 gk,

M

kh− Ai k1/k kAj+1 gk1/k .

i+j=k
i,j≥0

The solution given by Theorem 3 turns into the next result.
Corollary 4. For any matrix A and vectors g and h such that h− g ≤ 1,
the following statements hold:
1. If λ ⊕ µ ≥ H(ν), the Pareto frontier for problem (17) degenerates into
the single point (α, β) with α = λ ⊕ µ and β = ν.
2. Otherwise, the Pareto frontier is the segment given by the conditions
λ ⊕ µ ≤ α ≤ H(ν),

β = G(α).

All Pareto-optimal solutions are represented in parametric form as
x = (α−1 A ⊕ β −1 11T )∗ u,

g ≤ u ≤ (h− (α−1 A ⊕ β −1 11T )∗ )− .

To demonstrate application of the result obtained, we oﬀer an example of
solution of a three-dimensional problem, which, in particular, shows that the
Pareto frontier may be a segment rather than a single point. Although the
example deals with a somewhat artiﬁcial problem, it clearly demonstrates
the proposed computational technique which involves a ﬁxed number of simple matrix-vector operations and hence allows natural scalability to handle
problems of high dimension.
Example 1. Consider a project that performs n = 3 activities under startﬁnish, release start and release end time constraints given by the following
matrix and vectors:
 

 

1
1 2 2
0
h =  2 .
A =  1 1 2 ,
g =  0 ,
2
0
0 0 1
To ﬁnd an optimal schedule by minimizing both the maximum ﬂow-time
of activities and the project makespan, we apply Corollary 4 in the maxplus algebra setting. By convention, we represent the numerical constants
(including negative integer and rational numbers) in the ordinary notation,
whereas all algebraic operations are considered in terms of max-plus algebra.
19

First, we form the matrices




4 5 5
3 3 4
A3 =  4 4 5  ,
A2 =  2 3 3  ,
2 3 3
1 1 2




1 2 2
11T A =  1 2 2  ,
1 2 2

and then obtain
tr A = 1,

tr A2 = 3,

tr A3 = 4,

kA2 k = 4,

kAk = 2,

kA3 k = 5.

Next, we calculate the vectors
h− =

−1 −2 −2



,

h− A =

0 1 1



,




2
Ag =  2  ,
1


4
A2 g =  3  ,
2

which allow us to ﬁnd the scalars
kh− k = −1,

kh− Ak = 1,

h− Ag = 1,

h− A2 g = 3,

kA2 gk = 4.

kAgk = 2,
Using the above results yields

λ = tr A ⊕ tr1/2 (A2 ) ⊕ tr1/3 (A3 ) = 3/2,

µ = h− Ag ⊕ (h− A2 g)1/2 = 3/2,

ν = kAk ⊕ kh− kkAgk = 2.
Finally, we derive the functions
G(s) = s−1 (kA2 k ⊕ kh− AkkAgk ⊕ kh− kkA2 gk) ⊕ s−2 kA3 k
= 4s−1 ⊕ 5s−2 ,
H(t) = t−1 (kA2 k ⊕ kh− AkkAgk ⊕ kh− kkA2 gk) ⊕ t−1/2 kA3 k1/2
= 4t−1 ⊕ (5/2)t−1/2 .
Observing that the following equalities hold:
λ ⊕ µ = 3/2,

H(ν) = 4ν −1 ⊕ (5/2)ν −1/2 = 2,

we see that λ ⊕ µ < H(ν). Thus, by Corollary 4, the Pareto frontier for the
problem is the set of points (α, β) given by the conditions 3/2 ≤ α ≤ 2 and
β = 4α−1 ⊕ 5α−2 .
Note that for all α ≥ 3/2 the inequalities 4α ≥ 11/2 > 5 hold, which
yields 4α−1 > 5α−2 . As a result, we can reduce the above conditions to
those in the form
3/2 ≤ α ≤ 2,
β = 4α−1 .
A graphical illustration of the Pareto frontier is given in Fig. 2 (left).
20



To describe all Pareto-optimal solutions of the problem, we consider the
matrix
α−1 A ⊕ β −1 11T A = α−1 A ⊕ (−4)α11T A.
By applying the condition 3/2 ≤ α ≤ 2, we represent this matrix and
derive its square in the form




3α−2
0
4α−2
1α−1 2α−1 2α−1
 −1
 1α−1 (−2)α 2α−1  ,
0
0 .
2
(−3)α (−2)α (−2)α
−1 (−2)α
0
Evaluation of the Kleene star matrix yields


0
2α−1 4α−2
(α−1 A ⊕ β −1 11T A)∗ =  1α−1
0
2α−1  .
−1 (−2)α
0
After calculating the vector
h− (α−1 A ⊕ β −1 11T A)∗ =

−1 1α−1 3α−2

we obtain the solution of the problem in the form


0
2α−1 4α−2
0
2α−1  u,
u′ ≤ u ≤ u′′ ,
x =  1α−1
−1 (−2)α
0



,

3/2 ≤ α ≤ 2,

where u = (u1 , u2 , u3 )T is the vector of parameters with bounds given by
 


1
0
u′ = g =  0  ,
u′′ = (h− (α−1 A ⊕ β −1 11T A)∗ )− =  (−1)α  .
0
(−3)α2
To simplify the solution, we note that the last two columns in the Kleene
star matrix are collinear, and hence this matrix can be factored as follows:
 




0
2α−1
0
2α−1 4α−2
0 0
0
−1
−1



 1α−1
1α
0
0
2α
=
,
0 0 2α−1
−1 (−2)α
0
−1 (−2)α
where we use the notation 0 = −∞.
We introduce a new vector of parameters v = (v1 , v2 )T by the equality


0 0
0
v=
u.
0 0 2α−1
After turning from u to v, the solution takes the simpler form


0
2α−1
 v,
0
x =  1α−1
v ′ ≤ v ≤ v ′′ ,
3/2 ≤ α ≤ 2,
−1 (−2)α
21

where the bounds for v are derived from u′ and u′′ to be




0
1
′
′′
v =
,
v =
.
2α−1
(−1)α
Moreover, it follows from the two-sided bounds
0 ≤ v1 ≤ 1,

2α−1 ≤ v2 ≤ (−1)α

that 1α−1 v1 ≤ 2α−1 ≤ v2 and (−1)v1 ≤ 0 ≤ (−2)αv2 , which allows to write
x2 = 1α−1 v1 ⊕ v2 = v2 ,

x3 = (−1)v1 ⊕ (−2)αv2 = (−2)αv2 .

As a result, we represent the Pareto-optimal solution of the problem in
the form






0 2α−1
0
1
 v,
0
x= 0
≤v≤
, 3/2 ≤ α ≤ 2.
2α−1
(−1)α
0 (−2)α
(18)
Note that the vectors v ′ and v ′′ provide the bounds for x, given by




1
4α−2
x′′ =  (−1)α  .
x′ =  2α−1  ,
0
(−3)α2
We conclude this example by calculating the solutions which correspond
to two extreme and one inner points of the Pareto frontier.
First, consider the point (α, β) where α = 3/2 and β = 4α−1 = 5/2,
which corresponds to the best solution with respect to the minimum of the
maximum ﬂow time. Then, the solution at (18) becomes






0 1/2
0
1
≤v≤
x= 0
0  v,
.
1/2
1/2
0 −1/2
It is not diﬃcult to verify that in this case we have


1
x = x′ = x′′ =  1/2  ,
0
and thus the Pareto-optimal solution is the single vector with components
x1 = 1,

x2 = 1/2,

x3 = 0.

Next, we examine the solution corresponding to α = 2 and β = 4α−1 = 2,
which is the best with respect to the project makespan. The solution takes
the form


 
 
0 0
0
1


x=
0 0
v,
≤v≤
.
0
1
0 0
22

In scalar form, the solution obtained can be represented as
x 1 = v1 ⊕ v2 ,

x 2 = x 3 = v2 ,

0 ≤ v1 , v2 ≤ 1,

or, equivalently, using only one parameter v, as
v ≤ x1 ≤ 1,

x2 = x3 = v,

0 ≤ v ≤ 1.

Finally, consider the inner point of the Pareto frontier with α = 5/3 and
β = 4α−1 = 7/3. We have the solution






0 1/3
0
1
x= 0
0  v,
≤v≤
.
1/3
2/3
0 −1/3
In scalar form, the solution is written as
x1 = v1 ⊕ (1/3)v2 ,

x 2 = v2 ,

x3 = (−1/3)v2 ,

where 0 ≤ v1 ≤ 1 and 1/3 ≤ v2 ≤ 2/3.
Another equivalent representation with one parameter v takes the form
(1/3)v ≤ x1 ≤ 1,

x2 = v,

x3 = (−1/3)v,

1/3 ≤ v ≤ 2/3,

which can also be rewritten in the usual notation as
v + 1/3 ≤ x1 ≤ 1,

x2 = v,

x3 = v − 1/3,

1/3 ≤ v ≤ 2/3.

The optimal solutions obtained are shown in Fig. 2 (right). The thick
dot and the big shaded triangle represent the solutions which correspond to
the extreme points of the Pareto frontier with α = 3/2 and α = 2, whereas
the small triangle indicates the solution for the inner point for α = 5/3.
We now apply Theorem 3 to solve problem (2), which can be rewritten
in terms of max-plus algebra as



 M
M
M
−1
minimize
x
yi x−1
,
y
i
j ;
i

1≤j≤n
1≤i≤n
1≤i≤n
M
subject to
aij xj = yi ,
1≤j≤n

gi ≤ xi ,

yi ≤ fi ,

i = 1, . . . , n.

With an additional vector y = (yj ), the problem is represented in vector
form as
 −
minimize
x y, x− 11T y ;
subject to Ax = y,
23

g ≤ x,

y ≤ f.

β

1

α = 3/2
4
3

x3

β=2

2
H(2)

1

β = G(α)
0

0

1

2

3

x1

4

α

1

1
0

x2

Figure 2: The Pareto frontier (left) and solutions sets (right) in Example 1.
We substitute y = Ax into the objective functions and the last inequality
constraint to eliminate the unknown vector y. Next, we assume the matrix
A to be column-regular (to have no zero columns), and the vector f to be
regular (positive). After application of Lemma 1 to replace the inequality
Ax ≤ f by the inequality x ≤ (f − A)− , the problem becomes
{x− Ax, kx− kkAxk};

minimize

subject to g ≤ x ≤ (f − A)− .

(19)

To adjust Theorem 3 to handle the problem under consideration, we
modify the notation (14) as
λ=

n
M

tr

1/k

k

(A ),

µ=

k=1

n−1
M

(f − Ak+1 g)1/k ,

ν = kAk⊕kf − AkkAgk,

k=1

and the notation (15) as
G(s) =

n−1
M

s−k kAk+1 k ⊕

n−1
M

t−1/k kAk+1 k1/k ⊕

k=1

H(t) =

k=1

n−2
M

s−k

k=1

M

kf − Ai+1 kkAj+1 gk,

i+j=k
i,j≥0
n−2
M

t−1/k

M

kf − Ai+1 k1/k kAj+1 gk1/k .

i+j=k
i,j≥0

k=1

We now have the next result.
Corollary 5. For any column-regular matrix A, nonzero vector g and regular vector f such that f − Ag ≤ 1, the following statements hold:
24

1. If λ ⊕ µ ≥ H(ν), the Pareto frontier for problem (19) degenerates into
the single point (α, β) with α = λ ⊕ µ and β = ν.
2. Otherwise, the Pareto frontier is the segment given by the conditions
λ ⊕ µ ≤ α ≤ H(ν),

β = G(α).

All Pareto-optimal solutions are represented in parametric form as
x = (α−1 A ⊕ β −1 11T )∗ u,

g ≤ u ≤ (f − A(α−1 A ⊕ β −1 11T )∗ )− .

Example 2. Consider a project with the start-ﬁnish relationships, release
start and release end time constraints deﬁned by the following matrix and
vectors:


 
 
1 1 2
0
3
A =  2 1 0 ,
g =  0 ,
f =  3 .
0 1 1
0
2
To apply Corollary 5, we ﬁrst perform similar calculations as in the
previous example to evaluate matrix powers and vectors involved. Then, we
obtain
λ = 5/3,
µ = 3/2,
ν = 2,
and dervive the functions
G(s) = 4s−1 ⊕ 5s−2 ,

H(t) = 4t−1 ⊕ (5/2)t−1/2 .

Further calculation yields λ⊕µ = 5/3 and H(ν) = 4ν −1 ⊕(5/2)ν −1/2 = 2,
which show that λ ⊕ µ < H(ν). Therefore, the Pareto frontier is the set of
points (α, β) given by the conditions 5/3 ≤ α ≤ 2 and β = 4α−1 ⊕ 5α−2 .
Since 4α ≥ 17/3 > 5 for all α ≥ 5/3, the inequality 4α−1 > 5α−2 is also
valid, and thus the above conditions for the Pareto frontier reduce to
5/3 ≤ α ≤ 2,

β = 4α−1 .

To describe all Pareto-optimal solutions, we form the Kleene star matrix


0
3α−2 2α−1
(α−1 A ⊕ β −1 11T A)∗ =  2α−1
0
4α−2  .
(−2)α −1
0
After decomposition of the matrix in the form
 




0
3α−2
0
3α−2 2α−1
0 0 2α−1
 2α−1
0 
0
4α−2  =  2α−1
,
0 0
0
(−2)α −1
0
(−2)α −1
25

we ﬁnally represent the solution of the problem as


0
3α−2
0  v,
x =  2α−1
5/3 ≤ α ≤ 2,
(−2)α −1
where the vector of parameters satisﬁes the condition




(−1)α
2α−1
.
≤v≤
1
0
It follows from the bounds for the vector v that v1 ≥ 2α−1 ≥ 3α−2 ≥
3α−2 v2 and (−2α)v1 ≥ 0 ≥ (−1)v2 , which allows to write
x1 = v1 ⊕ 3α−2 v2 = v1 ,

x3 = (−2)αv1 ⊕ (−1)v2 = (−2)αv1 .

As a result, the Pareto-optimal solution becomes


0
0
x =  2α−1 0  v,
(−2)α 0
where v and α are given by the same conditions as before.
Using scalar representation yields the solution in the form
x 1 = v1 ,

x2 = 2α−1 v1 ⊕ v2 ,

x3 = (−2)αv1 .

Finally, turning to the usual notation, we rewrite the solution as
x 1 = v1 ,

x2 = max{v1 − α + 2, v2 },

x3 = v1 + α − 2,

where 2 − α ≤ v1 ≤ α − 1, 0 ≤ v2 ≤ 1 and 5/3 ≤ α ≤ 2.

6

Conclusions

Bi-objective project scheduling problems without cost dependencies and resource requirements have been considered. Given temporal constraints that
include start-ﬁnish precedence relations, release start times, release end
times and deadlines, the problems are to develop a schedule that minimizes
both the maximum ﬂow-time over all activities and the project makespan.
The solution of such problems can be used as an auxiliary tool in solving
more general project scheduling problems, and is of independent interest.
We have represented the problems as a bi-objective optimization problem in terms of tropical (idempotent) mathematics which concerns with
the theory and applications of idempotent semirings and semiﬁelds. By
using methods of tropical optimization, we have obtained complete Paretooptimal solutions of the problems in an exact analytical form suitable for
formal analysis and computations with polynomial time.
26

The results obtained demonstrate that application of tropical optimization techniques allows one to obtain analytic solutions to real-world problems that, in practice, are solved numerically by using various computational
procedures and do not have exact explicit solutions available. The proposed
solutions may eﬃciently serve to complement and supplement the existing
numerical approaches, and become the only solution when the algorithmic
solutions are infeasible or impossible to implement.
Further investigation can include the derivation of solutions to bi-objective
and multiobjective problems with new criteria, including minimum deviation of the ﬁnish times of activities from due dates, minimum deviation of
start or ﬁnish times of activities, as well as with additional constraint, such
as due-dates, start-start and ﬁnish-start precedence relationships.

References
[1] F. L. Baccelli, G. Cohen, G. J. Olsder, and J.-P. Quadrat. Synchronization and Linearity. Wiley Series in Probability and Statistics. Wiley,
Chichester, 1993.
[2] F. Ballestı́n and R. Blanco. Theoretical and practical fundamentals. In C. Schwindt and J. Zimmermann, editors, Handbook on
Project Management and Scheduling. Vol.1, International Handbooks
on Information Systems, pages 411–427. Springer, Cham, 2015.
doi:10.1007/978-3-319-05443-8_19.
[3] H. P. Benson. Multi-objective optimization: Pareto optimal solutions,
properties. In C. A. Floudas and P. M. Pardalos, editors, Encyclopedia of Optimization, pages 2478–2481. Springer, 2 edition, 2009.
doi:10.1007/978-0-387-74759-0_426.
[4] J.-L. Bouquard, C. Lenté, and J.-C. Billaut.
Application
of an optimization problem in max-plus algebra to scheduling problems.
Discrete Appl. Math., 154(15):2064–2079, 2006.
doi:10.1016/j.dam.2005.04.011.
[5] R. A. Cuninghame-Green. Describing industrial processes with interference and approximating their steady-state behaviour. Oper. Res.
Quart., 13(1):95–100, 1962. doi:10.2307/3007584.
[6] E. L. Demeulemeester and W. S. Herroelen. Project Scheduling, volume 49 of International Series in Operations Research and Management
Science. Springer, New York, 2002. doi:10.1007/b101924.
[7] M. Ehrgott. Multicriteria Optimization. Springer, Berlin, 2 edition,
2005. doi:10.1007/3-540-27659-9.

27

[8] M. Fiedler, J. Nedoma, J. Ramı́k, J. Rohn, and K. Zimmermann. Linear
Optimization Problems with Inexact Data. Springer, Boston, MA, 2006.
doi:10.1007/0-387-32698-7.
[9] M. Gavalec, J. Ramı́k, and K. Zimmermann. Decision Making and Optimization, volume 677 of Lecture Notes in Economics and Mathematical
Systems. Springer, Cham, 2015. doi:10.1007/978-3-319-08323-0.
[10] B. Giﬄer.
Scheduling general production systems using schedule algebra.
Naval Res. Logist. Quart., 10(1):237–255, 1963.
doi:10.1002/nav.3800100119.
[11] J. S. Golan. Semirings and Affine Equations Over Them, volume 556
of Mathematics and Its Applications. Kluwer Acad. Publ., Dordrecht,
2003. doi:10.1007/978-94-017-0383-3.
[12] M. Gondran and M. Minoux. Graphs, Dioids and Semirings, volume 41
of Operations Research/ Computer Science Interfaces. Springer, New
York, 2008. doi:10.1007/978-0-387-75450-5.
[13] H. Goto.
Robust MPL scheduling considering the number of
in-process jobs.
Eng. Appl. Artif. Intell., 22(4):603–607, 2009.
doi:10.1016/j.engappai.2008.11.007.
[14] B. Heidergott, G. J. Olsder, and J. van der Woude. Max Plus at
Work. Princeton Series in Applied Mathematics. Princeton Univ. Press,
Princeton, NJ, 2006.
[15] A. J. Hoﬀman. On abstract dual linear programs. Naval Res. Logist.
Quart., 10(1):369–373, 1963. doi:10.1002/nav.3800100131.
[16] V. N. Kolokoltsov and V. P. Maslov. Idempotent Analysis and Its Applications, volume 401 of Mathematics and Its Applications. Kluwer
Acad. Publ., Dordrecht, 1997. doi:10.1007/978-94-015-8901-7.
[17] N. Krivulin. Extremal properties of tropical eigenvalues and solutions
to tropical optimization problems. Linear Algebra Appl., 468:211–232,
2015. arXiv:1311.0442, doi:10.1016/j.laa.2014.06.044.
[18] N. Krivulin.
A multidimensional tropical optimization problem with nonlinear objective function and linear constraints.
Optimization,
64(5):1107–1129,
2015.
arXiv:1303.0542,
doi:10.1080/02331934.2013.840624.
[19] N. Krivulin.
Direct solution to constrained tropical optimization problems with application to project scheduling.
Comput. Manag. Sci., 14(1):91–113, 2017.
arXiv:1501.07591,
doi:10.1007/s10287-016-0259-0.
28

[20] N. Krivulin. Tropical optimization problems in time-constrained project
scheduling. Optimization, 66(2):205–224, 2017. arXiv:1502.06222,
doi:10.1080/02331934.2016.1264946.
[21] N. Krivulin. Tropical optimization problems with application to project
scheduling with minimum makespan. Ann. Oper. Res., 256(1):75–92,
2017. arXiv:1403.0268, doi:10.1007/s10479-015-1939-9.
[22] N. Krivulin. Using tropical optimization techniques in bi-criteria
decision problems.
Comput. Manag. Sci., 17(1):79–104, 2020.
arXiv:1810.08662, doi:10.1007/s10287-018-0341-x.
[23] D. T. Luc. Pareto optimality. In A. Chinchuluun, P. M. Pardalos, A. Migdalas, and L. Pitsoulis, editors, Pareto Optimality, Game
Theory and Equilibria, pages 481–515. Springer, New York, 2008.
doi:10.1007/978-0-387-77247-9_18.
[24] K. Miettinen. Introduction to multiobjective optimization: Noninteractive approaches.
In J. Branke, K. Deb, K. Miettinen,
and R. Slowiński, editors, Multiobjective Optimization: Interactive
and Evolutionary Approaches, pages 1–26. Springer, Berlin, 2008.
doi:10.1007/978-3-540-88908-3_1.
[25] K. Neumann, C. Schwindt, and J. Zimmermann. Project Scheduling
with Time Windows and Scarce Resources. Springer, Berlin, 2 edition,
2003. doi:10.1007/978-3-540-24800-2.
[26] S. N. N. Pandit. A new matrix calculus. J. SIAM, 9(4):632–639, 1961.
doi:10.1137/0109052.
[27] S. Ruzika and M. M. Wiecek. Approximation methods in multiobjective programming. J. Optim. Theory Appl., 126(3):473–501, 2005.
doi:10.1007/s10957-005-5494-4.
[28] M. Singh and R. P. Judd.
Eﬃcient calculation of the
makespan for job-shop systems without recirculation using maxplus algebra.
Internat. J. Prod. Res., 52(19):5880–5894, 2014.
doi:10.1080/00207543.2014.925600.
[29] V. T’kindt and J.-C. Billaut. Multicriteria Scheduling. Springer, Berlin,
2 edition, 2006. doi:10.1007/b106275.
[30] M. Vanhoucke.
Project Management with Dynamic Scheduling.
Springer, Berlin, 2012. doi:10.1007/978-3-642-40438-2.
[31] N. N. Vorobjev. The extremal matrix algebra. Soviet Math. Dokl.,
4(5):1220–1223, 1963.

29

