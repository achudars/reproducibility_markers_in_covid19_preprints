Variational Path Optimization of Linear Pentapods with a Simple Singularity
Variety∗

arXiv:1910.04810v1 [math.OC] 10 Oct 2019

Arvin Rasoulzadeh† and Georg Nawratil‡

Abstract. The class of linear pentapod with a simple singularity variety is obtained by imposing architectural
restrictions on the design in such a way that the manipulator’s singularity variety is linear in orientation/position variables. It turns out that such a simplification leads to crucial computational
advantages while maintaining the machine’s applications in some fundamental industrial tasks such
as 5-axis milling and laser cutting. We assume that a path between a given start- and end-pose
of the end-effector is known, which is singularity-free and within the manipulator’s workspace. An
optimization process of this initial path is proposed in such a way that the parallel robot increases
its distance to the singularity loci while the motion is being smoothed. In our case the computation
time of the optimization is improved as we are dealing with pentapods having simple singularity
varieties allowing a closed form solution for the local extrema of the singularity-distance function.
Formally, this process is called variational path optimization which is the systematic optimization of
a path by manipulating its variations of energy and distance to the obstacle, which in this case is
the singularity variety. In this process some physical limits of the mechanical joints are also taken
into account.
Key words. Linear pentapods, Singularity variety, Variations of energy, Non-linear optimization, Mechanical
joints.
AMS subject classifications. 00A20

Nomenclature
Name
Real numbers
Algebraic variety
Generalized cylinder
Pentapod’s singularity variety
Cost function
Objective function
Initial guess i-th coordinate
Pose i-th coordinate
pedal points with respect to the breakpoint pi on Σ/Q-variety
Object-oriented metric
Orthogonal projection with respect to object-oriented metric
Orthogonal projection with respect to Euclidean metric
Number of breakpoints
Number of pedal points with respect to the breakpoint p
∗

Symbol
R
V
Γ
Σ
C
C0
pi
ui
q i /qi
d
π
Pr
n
mp

Submitted to the editors DATE.
Funding: The first author was funded by the Doctoral College “Computational Design” of TU Wien and the
second author is supported by Grant No. P 30855-N32 of the Austrian Science Fund FWF.
†
Center for Geometry and Computational Design, TU Wien.
(rasoulzadeh@geometrie.tuwien.ac.at).
‡
(nawratil@geometrie.tuwien.ac.at).
1

2

ARVIN RASOULZADEH AND GEORG NAWRATIL

1. Introduction. A linear pentapod is a five degree-of-freedom parallel robot consisting of
five identical spherical-prismatic-spherical legs, where five platform anchor points are aligned
along the motion platform `. Note that the prismatic joints are active while the spherical ones
are passive. Within the paper at hand we only meet this type of manipulators possessing a
planar base; i.e. the base anchor points are located on a plane (cf. Fig. 1). The pose of the
−
line ` is uniquely characterized by a position vector →
p ∈ R3 and an orientation unit-vector
→
−
3
i ∈ R along `. Additionally the platform anchor points’ coordinate vectors are defined
→
−
−
by the equation mi = →
p + ri i while the coplanar base anchor points are free to acquire
Mi = (xi , yi , 0) coordinates for i = 1, ..., 5.
Linear pentapods are capable of performing some fundamental industrial tasks such as
5-axis milling and cutting. Few years ago, the company Metrom developed such a machine
which, with the aid of a rotary table, is capable of full 5-sided machining [17].
Kinematic singularities have an important role to play in path-planning. These singular
configurations are critical poses occurred by gaining some uncontrollable degree-of-freedom or
the loss of stiffness in certain directions. The actuator forces may also become very large and
cause the breakdown of the system. Therefore it is of crucial importance in the path-planning
process not only to avoid singularities but also their neighborhoods. In this paper we are only
dealing with linear pentapods possessing simple singularity varieties (i.e. they are linear in
position/orientation variables), which were determined by the authors in [15].
Under the assumption that a singularity-free path between a given start- and end-pose
of the end-effector is known within the manipulator’s workspace, our goal is to reshape this
initial path iteratively by increasing its distance to the singularity loci while smoothing the
path. This so-called variational path optimization does not only take the variations of energy
and distance to the singularity variety (with respect to a reasonable metric) into account, but
also some physical limits of the mechanical joints.
The paper is organized as follows: First, a review on the previous works is given in Section
1.1. Since the materials used here are heavily dependent on [15, 16], most of the review is
associated with the findings regarding the class of linear pentapods with simple singularity
varieties and the computation of singularity-free balls. In the next step, the required algebraic
geometric and differential geometric settings are given in Section 2 and 3, respectively. Section 4 presents the optimization of the initial curve under some physical restrictions, caused
by joint limits. After that the algorithmic structure of the variational path optimization is
discussed in Section 5 and its results are presented in Section 6. In addition, a flowchart is
provided in the Appendix by which the reader can track the detailed explanation of each
section of the variational path optimization algorithm.
1.1. Review. From the line-geometric point of view (cf. [9]) a linear pentapod is in a
singular configuration if and only if the five carrier lines of the legs belong to a linear line
congruence [13]; i.e. the Plücker coordinates of these lines are linearly dependent. From this
latter characterization the following algebraic one can be obtained (cf. [14]):
There exists a bijection between the configuration space of a linear pentapod and all points
(u1 , u2 , u3 , u4 , u5 , u6 ) ∈ R6 located on the singular quadric Γ : u1 2 + u2 2 + u3 2 = 1, where
→
−
−
i = (u1 , u2 , u3 ) determines the orientation of the linear platform ` and →
p = (u4 , u5 , u6 ) its
position. Then the set of all singular robot configurations is obtained as the intersection of Γ

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

`

m01

3

`0
m02

m1

m03

m04

m2
m3
m4

m05

m5

M2
M1

M4
M5

M3

Figure 1. Illustration of a linear pentapod with a planar base. From a geometrical point of view, the value
of Eq. 1.3, for the two poses of the planar pentapod, is equal to 1/5 of the sum of the squared lengths of the
dashed lines between two platforms configurations.

with a cubic 5-dimensional variety Σ of R6 , which can be written as Σ : det (S) = 0 with


(1.1)





S=





1
0
0
r2
r3
r4
r5

u1
u4
0
x2
x3
x4
x5

u2 u3
u5 u6
0 0
y2 0
y3 0
y4 0
y5 0

u4
0
u1
r2 x2
r3 x3
r4 x4
r5 x5


u5 u6
0
0 

u2 u3 

r2 y2 0 
,
r3 y3 0 

r4 y4 0 
r5 y5 0

(according to [3]) under the assumption that x1 = y1 = z1 = r1 = 0. Note that this assumption can always be considered without loss of generality as the fixed/moving frame can be
chosen in a way that the first base/platform anchor point is its origin. Furthermore, to relax
the computations even more, the authors proved that it is possible to assume M1 = (0, 0, 0),
M2 = (x2 , 0, 0) and M3 = (x3 , y3 , 0) where x2 y3 6= 0 and r2 = 1 hold [15].
In [15], the authors demonstrated the necessary and sufficient conditions for a linear pentapod to be linear in orientation/position variables. The linearity in orientation variables,
which from now on is named LO-property or LO-case, is fulfilled for the following three types
of linear pentapods which are depicted in Fig. 2. In fact, it is revealed that one can obtain
all singular configurations of pentapods with LO-property in using one of the three classes, as
they are equivalent with respect to ∆-transforms mentioned in [4]. For the linearity in position variables, the so-called LP-property or LP-case, authors demonstrated that a pentapod
possesses this property iff there exists a singular affine map

4

ARVIN RASOULZADEH AND GEORG NAWRATIL

Figure 2. Illustrations of LO-case pentapods. The geometric characterization of LO-cases is as follows:
1st-LO: M2 , M3 , M4 , M5 are collinear (left), 2nd-LO: m1 = mi and Mj , Mk , Ml are collinear with pairwise
distinct i, j, k, l ∈ {2, 3, 4, 5} (middle), 3rd-LO: m1 = mi = mj with pairwise distinct i, j ∈ {2, 3, 4, 5} (right).

κ : (xi , yi ) 7−→ ri = αxi + βyi ,

(1.2)
with x2 =

1
α

and i = 1, . . . , 5.

Definition 1.1. A linear pentapod possessing a singularity variety linear in orientation/position variables is called a “simple pentapod”.
It is noteworthy to emphasis that due to findings in [15], simple pentapods must be with a
planar base.
In [16], the computation of the maximum singularity-free balls for linear pentapods is thoroughly investigated. As the configuration space of the end-effector equals the space of oriented
line-elements, we can adopt an object-oriented metric discussed in [11] for our mechanical device as follows:
5

(1.3)

1X
0 2
d(`, ` ) :=
kmj − mj k ,
5
0

2

j=1

0

where ` and `0 are two configurations and mj and mj denote the coordinate vectors of the
corresponding platform anchor points (cf. Fig. 1).
From [14] it was already known that the determination of the local extrema of the singularitydistance function is a polynomial problem of degree 80, which can be relaxed to a problem
of degree 28 by expanding the transformation group from Euclidean to equiform motions by
omitting the normalizing condition Γ. As the obtained distance of the relaxed problem is less
or equal to the distance of the original problem, it can be used as the radius of a guaranteed
singularity-free ball. Moreover in [16] it was shown for the class of simple pentapods that the
algebraic degree of this distance computation problem drops from 10 to 3 (cf. Table 1). The
resulting closed form solution offers interesting new concepts and strategies concerning path
optimization and singularity avoidance.
2. Algebraic Geometric Setup. Before plunging into the detailed optimization of the
singularity-free paths, some remarks and definitions are of necessity to wrap up the mathematical structures of the pentapod’s singularity locus.

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

5

Generic case

LP case

LO case

80
28

10
3

10
3

Object-oriented metric case
Object-oriented metric case without normalizing condition

Table 1
Generic number of pedal points under different metric conditions: “Generic case” refers to the general
pentapod (not necessarily with a simple singularity variety). Note that they are computed over the field of
complex numbers and hence the real solutions might be lower. The red coloured cells indicate that these numbers
are just experimental while the green ones are mathematically proven (cf. Theorem 3.5).

2.1. Σ - Variety.
Definition 2.1. The locus of the singularity polynomial of a “simple pentapod” is called a
“Σ-variety”.
Now, tidying up the known information through definitions makes it possible to take a look
at the structure of the Σ-varieties of both LO and LP-cases.
Lemma 2.2. The Σ-variety of the LO-cases is the zero set of the following polynomial:
(2.1)

Σ : u6 [u6 (αu1 + βu2 ) − u3 (αu4 + βu5 − 1)] = 0,

where α and β are real numbers and α2 + β 2 6= 0 (cf. [15]).
Proof. It can be shown by a series of ∆-transforms (cf. [4]), that the singularity loci of all
three cases are identical. Now, by substituting the relations between architecture parameters
of one of the cases (e.g. 3rd-case identified by pairwise distinct indices i, j, k ∈ {3, 4, 5}) into
det (S) (cf. Eq. 1.1):
(2.2)

x2 :=

1
,
α

xi :=

1 − βyi
,
α

rj = rk := 0,

one obtains Eq. 2.1.
Lemma 2.3. The Σ-variety of the LP-case is the zero set of the following polynomial:
(2.3)

Σ : u3 [u6 (αu1 + βu2 − 1) − u3 (αu4 + βu5 )] = 0.

Proof. From [15], it is known that LP-case is generated whenever there is a singular affine
map κ : (xi , yi ) −→ ri , where ri = αxi + βyi . Substituting this relation into det (S) and
factorizing, one obtains Eq. 2.3.
Later on, during the process of singularity-free path optimization, a projection of a point in R6
onto the variety is needed. Hence, a more detailed understanding of the Σ-variety is helpful.
In the following theorem the properties of Σ-variety in the real space are investigated.
Theorem 2.4. The Σ-variety has the following properties:
a) Σ-variety is an algebraic variety formed by the union of a hyperplane Σ1 , and a hyperquadric
Σ2 , in R6 ,
b) Σ2 = Σ3 ∪· M , where Σ3 is the set of singular points of Σ2 and M is a smooth manifold,

6

ARVIN RASOULZADEH AND GEORG NAWRATIL

M0
Σ1 ∩ Σ2
Σ1

Σ2
Figure 3. One way to have an imaginative illustration of the Σ-variety isto consider a case with a certain
similarity in R3 . In order to do so, consider the variety V z (x2 − y 2 − z 2 ) which is in fact the union of a
plane Σ1 and a hyperbolic paraboloid Σ2 . In that way, the Σ1 ∩ Σ2 will be of co-dimension 2 while Σ1 and Σ2
are tangent at a 0 dimensional subvariety. Note that due to the fact that in this example we are restricted to
R3 it is impossible to show the 2-dimensional singular set on Σ2 as it is of co-dimension 4.

c) Σ1 ∩ Σ2 is a 4-dimensional algebraic variety, consisting of the union of two 4-planes A and B,
d) Σ1 is tangent to Σ2 at a 3-dimensional smooth manifold M 0 ⊂ Σ1 ∩ Σ2 ,
e) Σ3 is a 2-plane and is contained in A ∩ B ⊂ Σ1 ∩ Σ2 ,
Finally, having in mind that V (f1 , · · · , fn ) is the set of solutions to the system of polynomial
equations hf1 , · · · , fn i, the details are summarized below:
– LO-case :
Σ1 = V(u6 ),
Σ2 = V (u6 (αu1 + βu2 ) − u3 (αu4 + βu5 − 1)),
Σ3 = V(αu1 + βu2 , u3 , αu4 + βu5 − 1, u6 ).
– LP-case:
Σ1 = V(u3 ),
Σ2 = V (u6 (αu1 + βu2 − 1) − u3 (αu4 + βu5 )),
Σ3 = V (αu1 + βu2 − 1, u3 , αu4 + βu5 , u6 ).
Proof. Although the proof is not complex, it might be perceived to be distinct from the
rest of the paper. Consequently the interested reader can find the proof and related details in
Appendix A.
In Fig. 3, an imaginative geometric depiction of Σ-variety in R6 is described in such a way that
the there is a correspondence between the co-dimension of its properties and of the properties
listed in Theorem 2.4.
3. Differential Geometric Setup. In this section, the nice motion is revisited in a more
rigorous format. Mathematically, the features of this motion are strongly connected to the
concept of variations of energy and consequently to the arc length and curvature. Since these
topics are classified as differential geometry, a separate section is dedicated to them (as indeed
we are viewing the problem from a different angle).
Evidently, to do differential geometric calculations an inner product is required. Such an inner
product should be in a way that one can derive kinematic information from. It turns out that
it is possible to define a metric tensor (and consequently an inner product) in such a way
that it implies the metric described in [14] (see Eq. 1.3). Having access to the inner product
it is possible to calculate the geodesic energy (or simply just energy as it is more common in

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

7

differential geometry texts) and bending energy.
3.1. Metric Tensor. Here, the goal is to frame-up the settings of differential geometry in
order to be able to carry out the required computations on manifolds. The key element is to
equip each tangent space (of the manifolds under study) with an inner product that varies
smoothly on the corresponding manifold. Such an inner product is obtained by computing
the metric tensor at one point of the manifold.
Definition 3.1. The“object-oriented metric tensor” relative to the canonical basis of R6 is
defined by the following matrix:


R

(3.1)






g=
 J




J

R

J
R
1

J
J




J 





1

1

,

6×6

where R = 15 (r12 + r22 + r32 + r42 + r52 ) and J = 15 (r1 + r2 + r3 + r4 + r5 ).
The following remark clarifies the relation between the object-oriented metric tensor and the
object-oriented metric:
Remark 3.2. Consider the object-oriented metric d, Eq. 1.3, and the object-oriented metric
tensor g. For two points of R6 (two poses of the pentapod), namely, u = (u1 , u2 , u3 , u4 , u5 , u6 )
and p = (p1 , p2 , p3 , p4 , p5 , p6 ) one obtains (for more details cf. [2]):
(3.2)

d(p, u)2 = C T .g.C,

where C T = (u1 − p1 , u2 − p2 , u3 − p3 , u4 − p4 , u5 − p5 , u6 − p6 )T .
Note that the right hand side of Eq. 3.2 serves as the desired inner product:
(3.3)

h−, −i : R6 × R6 −→ R,

(3.4)

(X, Y ) 7−→ X T .g.Y,

Then the pose space of the pentapod equipped with the inner product of Eq. 3.4 forms the
Riemannian manifold R6 , g .
3.2. Orthogonal Projection. One of the fundamental tools in the variational path optimization approach is the orthogonal projection.
Definition 3.3. Let M be a non-empty subset of the metric space Rd . The orthogonal projection into M , is the relation π ⊂ Rd × M such that for each p ∈ Rd we have
(3.5)

π (p) := {q ∈ M : d (p, q) = % (p, M )},

where d is the metric of Rd and % (p, M ) := inf q∈M d(p, q).
The fact that π is defined as a relation rather than a map is due to the fact that it might not
be a function [8].

8

ARVIN RASOULZADEH AND GEORG NAWRATIL

3.2.1. Computation of Pedal Points. Definition 3.3 gives an intuition toward the nature
of the orthogonal projection but does not provide a computational tool. In fact there can be
several ways to calculate π for a sample point p ∈ R6 . But for reasons that will be cleared
later the Lagrange multiplier method is chosen.
Definition 3.4. Consider the “Lagrange equation” L := f + λ1 Φ1 + ... + λn Φn , where f is
the smooth “distance function” on a manifold N . Moreover a certain subset S of N is given
as the zero-set of the polynomials Φ1 , . . . , Φn and their corresponding “Lagrange multipliers”
are denoted by λ1 , . . . , λn . Then the solutions of the system of equations
(3.6)

∇L = 0

and

Φi = 0

for

i = 1, ..., n

are called “pedal points”, as these points of S to the given configuration (N = R6 ) of the linear
pentapod cause local extrema of the distance function.
Note that for p ∈ R6 , the set π (p) is a subset of pedal points.
Previously the authors had announced that for an arbitrary point in R6 , the number of
corresponding pedal points on the Σ-variety is 3 (cf. [16]). In this section, the goal is to
obtain closed-form information on the procedure to compute these pedal points.
Theorem 3.5. Consider an arbitrary point p in R6 . Then with respect to the object-oriented
metric, Eq. 3.2, the corresponding number of pedal points on the Σ-variety is up to 3 and the
pedal point coordinates can be obtained in a closed form.
Proof. In Theorem 2.4, it is shown that the Σ-variety decomposes into the hyperplane Σ1
and the hyperquadric Σ2 . Trivially, one of the pedal points is located on Σ1 , namely, the
closest point (with respect to the distance function) to the arbitrary point p. Now, knowing
this fact it is possible to focus on Σ2 for retrieving the pedal points information. Consider the
following Lagrange equation
(3.7)

L := d2 (p, u) + λ.f

where λ is the Lagrange multiplier, f is the singularity polynomial of Σ2 and d is the objectoriented metric describing the distance between the point p and a sample point u on Σ2 with
symbolic coordinates (u1 , u2 , u3 , u4 , u5 , u6 ). Then, computing
(3.8)

I := h

∂L ∂L
∂L ∂L
,
,...,
,
i
∂u1 ∂u2
∂u6 ∂λ

results in a system of polynomial equations, where ∂L/∂u1 , . . . , ∂L/∂u6 are linear in the pose
variables. These pose variables depend on λ. By solving them for λ and substituting them in
∂L/∂λ one obtains a univariable polynomial quadratic in λ. Since this polynomial is of degree
2 it shows that for the arbitrary point p there will be at most 2 pedal points on Σ2 . Finally,
the pedal point coordinates are obtained through solving the quadratic polynomial for λ and
back-substituting its value.
3.2.2. Distance to Σ-variety & Modified Orthogonal Projection. Obtaining the closed
form pedal point coordinates, enables one to compute the vector field of normals to Σ-variety
at these points. Assuming a pose point p ∈ R6 , the natural way of increasing distance to

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

9

the Σ-variety is to move on the line spanned by p and the closest pedal (from now on called
gradient lines). However, this natural primary idea needs to be modified as the following cases
may occur:
• Pedal points on Σ3 :
Despite the fact that, based on Definition 3.3, there is no restriction for the closest
point to any specific subset of the Σ-variety, if such a point is located on Σ3 , Definition 3.4 does not reveal it. The reason behind it is that the Lagrange multiplier
technique nourishes from the tangency of the distance function and the constraint at
the pedals. In another word, such minimizer is found whenever the corresponding
gradients of the distance function and the constraint are linearly dependent. On the
other hand, at singular points of the constraint the gradient vanishes which results the
incapability of the Lagrange multipliers in identifying pedals on Σ3 . One might try
to overcome this hardship through redefining the pedal points as the solutions to the
system of polynomials obtained by calculating the derivatives of the distance function
with respect to parameters of Σ2 . In such a method one obtains the pedals on Σ3
at the cost of expensive symbolic computation of non-linear systems. Though this
technique is not reasonable, resolving this issue is not hard as one can find the closest
point on Σ3 separately. Hence, from now on we loosely call this point a pedal point
as well (for details of Σ3 cf. Appendix A).
• Pose points on cut locus:
By Theorem 3.5 and previous case, we know that p can be located on up to 3 gradient
lines plus a line connecting p to the pedal point on Σ3 . A natural question would
be which line to go along with to increase the distance to Σ. One idea would be to
consider taxi along the the lines connecting pose point to the closest pedal. But if the
pose point is located on the cut locus of Σ then more than one closest point already
exist (for definition and properties of cut locus see [5]). On the other hand, as pose
point updating is discrete, with respect to a step-size, it may create problems such
as overshooting over the cut locus. Such overshooting happens due to a “jump” of
the corresponding closest pedal. In order to resolve both issues at once and create a
smooth update of the pose point, a weight factor is introduced in such a way that it
considers the effect of the pedal points in dependence of their distances to the pose p.
Due to the reasons mentioned above, we modify Definition 3.3 into the following shape:
Definition 3.6. The orthogonal projection with respect to object-oriented metric is a relation
π ⊂ Σ × R6 , such that for each p ∈ R6 we have
(3.9)

π (p) := {closest point on Σ1 } ∪ V (I) ∪ {closest point on Σ3 },

where I is Eq. 3.8.
Note that in a generic case, π (p) is finite and yields four pedal points (one on Σ1 , two on Σ2
and one on Σ3 ).
Remark 3.7. Note that, it is not immediately known whether the non-real complex pedal
points or double pedal points exist or not. Calculating Eq. 3.8 for the case of a parabola as an

10

ARVIN RASOULZADEH AND GEORG NAWRATIL

obstacle shows that the pedal points are not always distinct real points.
Definition 3.8. Assume p ∈ R6 and π to be an orthogonal projection relation mentioned
above. Additionally, assume mp to be the number of pedal points on Σ with respect to the
point p. Now, the goal is to find a preferred direction such that if point p travels along with,
it can increase its distance to the Σ-variety. Assuming u to be the update of p, the following
function fulfils the goal:
D (p, u) := −

(3.10)

mp
X
i=1

wi h

p − πi (p)
, u − p i.
kp − πi (p)k

where the wi := H/d (p, qi ) are the “positive weights” and H given by
Qm p
d (p, qi )
Q
H := Pmp i=1
k6=j d (p, qk )
j=1

(3.11)

Pmp
is the “regulation factor” implying i=1
wi = 1.
→ on the three gradient lines plus the line
Eq. 3.10 refers to a weighted projection of vector −
pu
connecting p to the closest pedal on Σ3 . As it can be inferred from Eq. 3.11, these weights
are disproportional to the corresponding distance to pedals and their sum is equal to one.
In another word, if p is far away from a pedal then the projection of movement direction,
−
→ on that gradient is a smaller vector (going away from that pedal is less important). On
pu,
→ would be mainly along that
the contrary, if p is close to a pedal then the projection of −
pu
gradient (it will repel the point p with more efficiency). In Fig. 4-left an example regarding
such weighted factors is depicted.
3.3. Variations of Energy.
Definition 3.9. Let c : [a, b] −→ N be piecewise smooth curve on a Riemannian manifold
N . A “variation” of c is a continuous mapping f : (−, ) × [a, b] −→ N such that
a) f (0, t) = c(t), t ∈ [a, b],
b) there exists a subdivision of [a, b] by points a = t1 < ... < tn−1 < tn = b in a way that the
restriction of f to each (−, ) × [ti , ti+1 ] is differentiable [5].
A variation is said to be proper if f (s, a) = c (a) and f (s, b) = c (b) for all s ∈ (−, ) [5].
Considering a smooth variation (smooth f ), the geodesic energy E and bending energy B of
the variation f for s ∈ (−, ) are defined as follows:
Z
(3.12)

E (s) =
a

b

∂f
k
(s, t) k2 dt,
∂t

Z

b

k

B (s) =
a

∂2 f
(s, t) k2 dt.
∂ t2

Later it will be shown that an update of the initial curve is discretely done and depends on a
predefined step size (also known as learning rate). Hence, a modification of Eq. 3.12 into our
discrete setting is necessary.

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

11

−
→
up

p
q1

q2
q3

Figure 4. Left: The green vector shows the optimized direction for the vector u − p. The projection on
the 1st, 2nd and 3rd gradient lines are indicated by red, pink and cyan respectively. Note that, one can check
the correctness of the optimized move as the green direction refers to moving closer to the medial axis and
increasing distance to the parabola eventually. Right: Depending on the geometrical structure of the obstacle,
geodesic and bending weight factors, the algorithm may not have a final result. The initial path (blue) variates
(green) along the parabola’s medial axis till infinity under zero geodesic and bending weight inputs.

3.3.1. Geodesic Energy & Bending Energy. For the sake of simplicity of notations, we
restrict ourselves to the case of the piecewise smooth curve in R6 .
Definition 3.10. Assume that c : [a, b] −→ R6 is a “piecewise smooth” curve with a finite
partition, a = t1 < ... < tn−1 < tn = b, then the “discrete geodesic energy” E and “discrete
bending energy” B of the curve c are as follows (cf. [13]):
(3.13) E (c) =

n
X

2

kc (ti )−c (ti−1 ) k ,

B (c) =

i=2

n−1
X

k (c (ti+1 ) − c (ti ))−(c (ti ) − c (ti−1 )) k2 .

i=2

while “discrete length” and “discrete total curvature” are respectively given by (cf. [5, 10]):
(3.14) L (c) =

n
X
i=2

kc (ti ) − c (ti−1 ) k,

τ (c) =

n−1
X

k (c (ti+1 ) − c (ti )) − (c (ti ) − c (ti−1 )) k.

i=2

Finally, it is noteworthy to emphasize that the variations under study in this paper are proper
as we require the motions to remain between a fixed start- and end-pose.
3.4. Cost Function. In order to find the nice motion the idea is to use gradient descent
which is a first-order iterative optimization algorithm to find the local minimum of a cost
function. Though in many similar applications, especially in the context of machine learning,
the step size (learning rate) is considered a constant small number, here it will not be accurate
enough and hence a more intelligent step should be taken for that purpose. Additionally, the
function whose descent per iterations is monitored is slightly different with the original cost
function and will be introduced under the name of objective function.

12

ARVIN RASOULZADEH AND GEORG NAWRATIL

Definition 3.11. Assume that an initial singularity-free curve between start-pose a0 and
end-pose b0 is given, while it is discretized into a “piecewise smooth” curve with the set of
n breakpoints {a0 = p1 , p2 , ..., pn = b0 } in R6 . Assuming uj to be the update of pj , the cost
function, subject to optimization, is defined as follows:
n−1

(3.15)

C (p, u) :=

X

η (n − 2)
1
λ (n − 1)
E
(u)
+
B
(u)
−
D pj , uj ,
0
0
2L
2τ
(n − 2)
j=2

where D is the function of Eq. 3.10, λ and η are real numbers called “geodesic weight” and
“bending weight”, respectively and L0 and τ 0 are the discrete length and discrete total curvature obtained from previous iteration (at the first iteration they are substituted by the corresponding values of the initial curve). Finally, we have uT := (u2 )T , ..., (un−1 )T and
pT := (p2 )T , ..., (pn−1 )T .
Geodesic and bending weights increase/decrease the geodesic energy and bending energy by
blocking/unblocking their increase when substituted by high/low values.
Remark 3.12. In the absence of the coefficients 1/L0 and 1/τ 0 in Eq. 3.15, the geodesic
energy and bending energy terms which are the sum of the squared values would heavily
outgrow the distance term containing the projection on the gradient lines which is single
valued (cf. Fig. 5). This fact forces the cost function to be heavily dependant on the number
of chosen breakpoints. Consequently, the existence of these coefficients are necessary.
Remark 3.13. It is noteworthy that the coefficients of the geodesic and bending energy
terms in Eq. 3.15 are multiplied by a factor involving the number of break points while the
projection term’s coefficient plays the role of a mean value for the number of breakpoints.
These coefficients are designed in this way to reduce the effect of the number of breakpoints
on the shape of the optimized curve. This is important as later it is shown that the number
of break points may vary at different iterations of the optimization algorithm.
The cost function, C, is a quadratic polynomial in 6 (n − 2) variables. Optimizing Eq. 3.15
requires solving the following equation
∇ C = 0,

(3.16)

for u ∈ R6 (n−2) which is equivalent to solving a linear system.
3.5. Step Size. The idea is to calculate two step sizes, namely s1 and s2 , in such a way
that they yield ± growth % of variations of geodesic and bending energy respectively. If we
define the geodesic energy of the updated breakpoints by:
(3.17)

P (s1 ) :=

n
X



k pi + s1 ui − pi−1 + s1 ui−1 k2 ,

i=2

and its bending energy by
(3.18)

Q(s2 ) :=

n−1
X
j=2




k pj−1 + s2 uj−1 + pj+1 + s2 uj+1 − 2 pj + s2 uj k2 ,

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

b0

13

Σ

a0

Figure 5. Left: Illustration of the pull effect of geodesic energy on the breakpoints. The pattern of the breakpoints
preserves a regular shape after variation. Right: A geometrical visualization of the errors. The blue boxes describe the
calculated value for the geodesic energy before variation, while the green ones depict this energy after the variation. The
red arrows connect a breakpoint to its corresponding update. One way to realize the error’s occurrence would be through
assigning physical units to the calculations, namely cm. In that way the the value computed for the geodesic energy will
be of physical dimension cm2 while the distance is cm. Both figures are created for the case of the variation of an initial

curve t 7→ t + 1.25, t3 + 2 where t ∈ [ −1, 1] with respect to a parabola and with λ = η = 10 as weight factors.

and having the previous geodesic energy E 0 and previous bending energy B 0 , then the real
roots of the following equations will guarantee ±growth% variation in energies:
P (s1 ) − (1 ±

(3.19)

growth 0
) E = 0,
100

Q(s2 ) − (1 ±

growth 0
) B = 0.
100

Finally, the step size is chosen as the minimum of the positive real roots of Eq. 3.19 and 1.
3.6. Objective Function. Now, in order to monitor the descent of the cost function with
respect to iteration we propose a slightly different function called objective function.
Definition 3.14. Assume u to be the vector obtained by solving the linear system (cf. Section 3.4) and π the orthogonal projection into the Σ-variety. Then the “objective function” for
monitoring the gradient descent is
(3.20)

n−1
X

λ (n − 1)
η (n − 2)
1
C (u, p) :=
E (u) +
B (u) −
d uj , π pj .
2L
2τ
(n − 2)
0

j=2

Note that, as we have the updated curve breakpoint coordinates it is possible to compute
length and total curvature now. Hence, the terms 1/L and 1/τ replace the terms 1/L0 and
1/τ 0 from Eq. 3.15 respectively. Additionally, since the goal is to increase the distance to
the Σ-variety, the corresponding terms are replaced by the sum of distances to corresponding
closest pedals.
3.7. Remarks on the Curve’s Energies. Let c : (a, b) −→ Rn be a curve parametrized
by arc length s. Since the tangent vector c0 (s) has unit length, the norm kc00 k of the second
derivative measures the rate of change of the angle which neighboring tangents make with the

14

ARVIN RASOULZADEH AND GEORG NAWRATIL

tangent at s. kc00 k gives, therefore, a measure of how rapidly the curve pulls away from the
tangent line at s, in the neighborhood of s (namely, the curvature κ (s))[7]. Consequently, in
the discrete case, if {a0 = p1 , p2 , ..., pn = b0 } is a sequence of breakpoints defining a piecewise
smooth curve, it is natural to consider the angle θi between
vectors pi+1 − pi and pi − pi−1
Pn
as the curvature at the breakpoint pi and the sum P
i=1 θi as the total curvature [10]. In
fact in this way one can define the bending energy by ni=1 θi2 , but Definition 3.10 is slightly
different. Due to the fact that the measure of a central angle and the arc it intercepts are
equal in value, in the case that the curve is parametrized by arc length the two definitions
are equivalent. However, such values obtained may differ if the curve under consideration is
not arc length parametrized (i.e. consider a line not possessing arc length parametrization,
then based on Definition 3.10 the bending energy is not zero). But such a deviation creates
a computational advantage as otherwise a denominator containing the norms of every two
adjacent edges would appear in the bending energy term B of the cost function (Eq. 3.11).
This denominator then diminishes bending energy term being a quadratic polynomial and
consequently denying the advantage of possessing a linear system after derivation. Finally,
the geodesic energy term contributes significantly to resolving this issue as it creates a pull
effect which preserves a regular distribution of breakpoints across the curve after variation
(see Fig. 5-right).
3.8. Orthogonal projection into the configuration space. In the process of updating
breakpoints, by obtaining the preferred direction and step size (cf. Eq. 3.19), one may end
up with a curve not necessarily belonging to the cylinder Γ. Having in mind that Γ is the
set of all performable motions for the pentapod, it is important to find an update restricted
to it. In order to resolve it, one immediate idea is to keep the update of each breakpoint p
restricted to its corresponding tangent space Tp (Γ) to the cylinder Γ. In the next step, the
updated curve is orthogonally projected into the cylinder.
3.8.1. Projection on Cylinder’s Tangents. For a breakpoint p we are interested in its update u belonging
to Tp (Γ). The following lemma creates the first step in building a systematic

update of p2 , . . . , pn−1 on T Γ.
Lemma 3.15. Let f be a smooth function on a Riemannian manifold N . Let M be a
submanifold of N . Then the gradient of the map f restricted to M at a point p ∈ M , (∇f |M )p ,
is the orthogonal projection of (∇f )p onto Tp (M ).
Proof. If g is the Riemannian metric on N then g|M (∇f |M , X) = X (f |M ) for all X ∈
X (M ) denoting the set of all smooth vector fields on M (cf. [12]). Now, considering the
decomposition at the point p ∈ M , (∇ f )p = vo + vt where vt ∈ Tp (M ) and vo ∈ Tp (M )⊥ we
have 1
g|M (∇f |M , X) = X (f |M ) = X (f ) = g (∇ f, X) = g (vo + vt , X) =
g (vo , X) + g (vt , X) = g (vt , X) .
which gives
(3.21)
1

g (∇ f |M , −) = g (vt , −) .

In the following equation the subscript p is dropped intentionally.

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS
R6

15

R6

R3

Σ

Γ

T

Σ

Γ

j

j

j

p1 ,p2 ,p3



S2



Tpj (Γ)

pj

uj

Figure 6. Imaginative illustration of the “generalized cylinder” Γ ⊂ R6 . Left: The blue curve indicates the
initial path while the green one stands as the updated curve (not necessarily belonging to Γ). The red dots are
in fact the possible imaginative pedal points on the singularity surface Σ. Middle: The projection of the updated
curve into the the tangent space. Right: A “realistic” interpretation of such projections in the orientation space.
The blue vector shows the original orientation of the pose pj and the green vector depicts the orientation after
update. The cross, x, stands as the back-projection into the “tangent to sphere at pj ”, while the red vector
describes the final accepted motion after back-projection from the tangent to sphere.

Each breakpoint of the piecewise smooth curve is located in the ambient space R6 . Define
(3.22)

p̂ =



p

T
2
6×1

T
3
6×1

, p

, ··· , p


n−2 T
6×1

T
6(n−2)×1

,

where p i6×1 denotes the 6-dimensional coordinate vector of the i-th breakpoint of the piecewise
smooth curve. In this way the point p̂ ∈ R 6(n−2) stands for the piecewise smooth curve.
Defining the updated breakpoint u in exactly the same fashion we have
(3.23)

û =



u

T
2
6×1

T
3
6×1

, u

, ··· , u


n−1 T
6×1

T
6(n−2)×1

.

Now, using the above terminology one trivially finds that the vector û − p̂ is in fact the (∇C)p̂
on the level sets of the cost function in R 6(n−2) .
Lemma 3.16. Assume p̂ ∈ Γn−2 ⊂ R6(n−2) . Then
(3.24)

(∇C|Γ (n−2) )p̂ =



U

T
2
6×1

, U

T
3
6×1

, ··· , U


n−1 T
6×1

T
6(n−2)×1

− p̂,

where ∀i, 2 ≤ i ≤ n − 1 we have
(3.25)

U

T
i
6×1


T

= Pr(pi ,pi ,pi ) ui1 , ui2 , ui3 , ui4 , ui5 , ui6 ,
1

where Pr(pi ,pi ,pi ) : R3 −→ T(pi ,pi ,pi ) S
1 2 3
1 2 3

gent plane at pi1 , pi2 , pi3 .


2

2

3

is the orthogonal projection onto the sphere’s tan-

16

ARVIN RASOULZADEH AND GEORG NAWRATIL

Nr i p i

Nri−1 pi−1


pi



Nri+1 pi+1

pi+1

Nri+1 pi+1

pi−1





pi+1

pi

Figure 7. Imaginative illustration of minimal singularity-free cover of the curve. Left: If a segment is not
fully covered by singularity-free balls then a breakpoint will be added in the mid of the uncovered part. Right:
If two adjacent singularity-free balls are covering a breakpoint that breakpoint is removable. Note that such a
removal should be in such a way that it does not alter the cover for adjacent to the neighboring breakpoints.

Proof. Γ is a regular submanifold of R6 . This implies Γn−2 being a regular submanifold
of R 6(n−2) . Now, using Lemma 3.15 we have (∇C|Γ (n−2) )p̂ = Prp̂ (∇C)p̂ = Prp̂ (û − p̂) where

Prp̂ : R 6(n−2) −→ Tp̂ Γn−2 is the orthogonal projection into the tangent of Γn−2 at p̂. This
results in
(3.26)



Prp2 u2

 T

, Prp3 u3

 T

, · · · , Prpn−1 un−1

 T T
6(n−2)×1

− p̂,

where Prpi : R6 −→ Tpi (Γ) is the orthogonal projection onto the tangent space at pi ∈ Γ.
Now having in mind that:
(3.27)
(3.28)

T(p21 , p22 , p23 )


Tp̂ Γn−2 ∼
=
= Tp2 (Γ) × Tp3 (Γ) × . . . Tpn−1 (Γ) ∼



2
2
3(n−2)
2
,
S × T(p31 , p32 , p33 ) S × . . . T(pn−1 , pn−1 , pn−1 ) S × R
1

2

3

one deduces that orthogonal projections of Eq. 3.26 are merely the orthogonal projection on
the sphere and hence Eq. 3.24 is fulfilled (Fig. 6 illustrates the steps of the proof).
3.8.2. Projection from Cylinder’s Tangents to the Cylinder. In the final step we desire
the projection of the updated piecewise smooth curve from the cylinder’s tangents to the
cylinder. Such projection is easily done through normalization of the orientation variables,
namely by the following map (cf Fig. 6-right):


u1
u2
u3
(u1 , u2 , u3 , u4 , u5 , u6 ) 7−→
,
,
, u4 , u5 , u6 .
ku21 + u22 + u23 k ku21 + u22 + u23 k ku21 + u22 + u23 k

3.9. Finite Singularity-free Cover. The obtained variation of the initial path is compact
in R6 and hence has a finite open cover. This leads one to the idea of a finite singularity-free
cover. Such a cover is consisted of singularity-free balls which are extensively discussed in
[16]. In this context we approach the concepts of inclusion and exclusion of breakpoints. In
the following discussions, ri stands for the distance to the closest pedal point
 with respect to
i
i
breakpoint p , guaranteeing the existence of the singularity-free ball Nri p .

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

17

safe zone

(uk − pk )

T̂pk
Q-variety

Npk

q

k

pk

parallel tangent space
tangent to Q-variety
Figure 8. Left: Illustration of a simple pentapod with the LP-property in addition to a magnified view of the
base spherical joints. Base joint limit is modelled by a cone with an axis orthogonal to the base plane. Right:
Imaginative illustration of the projection on a tangent of a Q-variety.

3.9.1. Inclusion of Breakpoints. For each two consecutive breakpoints, namely
pi and

i−1
i
cover the
the algorithm checks whether singularity-free balls Nri p and Nri−1 p
segment in between. If the segment is not fully covered the algorithm implements a new
breakpoint in exactly the midway of uncovered part of the segment as depicted in Fig. 7-left.
pi−1 ,

3.9.2. Exclusion of Breakpoints. While the previous step assures one of singularity freeness of the curve, it is adequate not to have excessive included breakpoints. The initial idea is
to exclude a breakpoint pi if it is covered by the adjacent balls Nri−1 pi−1 and Nri+1 pi+1
(cf. Fig.7-right). However,
one should be mindful of the fact that the breakpoint pi itself cre
ates the ball Nri pi which along with Nri+2 pi+2 play the role of the cover for pi+1 . Deleting
pi then may cause the removal of its corresponding ball and hence a blown possible cover for
pi+1 . In order to avoid such an undesirable situation the algorithm first labels the breakpoints which
covered
by adjacent balls (a point pi is doubly covered if it belongs to
 are doubly

i−1
i+1
Nri−1 p
∩ Nri+1 p
, see Fig. 7-right). Then the algorithm groups such breakpoints into
packs based on the number of consequent occurrence of double covers. Calling the number of
breakpoints in each pack the size of the pack, the algorithm takes the following strategy:
• Packs of size 1 are deleted,
• In the packs of size bigger than 1 the breakpoints with odd numbers are removed.
Finally, the algorithm repeats these steps till no pack can be found 2 . Naturally, in the above
process the start- and end-pose are entirely neglected.
4. Joint Analysis. From the computational kinematics point of view, feasibility of optimized motion by the joint and linkages is of utmost importance. These physical limits
restrict the end-effector movements and are of two types, namely, spherical joint limits and
prismatic joint limits. It turns out that dealing with these restrictions can be translated into
the language of variational path optimization. In fact, as it will be described in the com2

In practice, due to computational reasons the algorithm is set to keep 6 number of breakpoints at least.

18

ARVIN RASOULZADEH AND GEORG NAWRATIL

ing subsections, it is possible to think of these restrictions as hypersurfaces in R6 . One last
remark before plunging into the details, would be regarding the design of the pentapod. In
the theorems to come within this section, it is not necessary to restrict ourselves to simple
pentapods since they are valid for general linear pentapods in which the base anchors belong
to R3 . Hence, the findings in this section are more general and can be considered for a more
general framework as well.
4.1. Prismatic Joint Limits. In the position space a point on the prismatic extendible
part can be located within two spheres with radii ρmin and ρmax . Considering this setting in
pose space R6 results the following theorem:
Theorem 4.1. Assume a “general linear pentapod” with minimum possible prismatic length
ρmin > 0 and maximum ρmax , then the set of all feasible poses with ρmin ≤ ρ ≤ ρmax forms a
“smooth hyperquadric” in R6 .
Proof. Writing down the equations of the sphere with the radius ρmin ≤ ρ ≤ ρmax around
a base spherical joint with coordinates (xi , yi , zi )T gives
(4.1)

fp := (ri u1 + u4 − xi )2 + (ri u2 + u5 − yi )2 + (ri u3 + u6 − zi )2 − ρ2

once again by considering fp ∈ C [u1 , u2 , u3 , u4 , u5 , u6 ], Eq. 4.1 describes a quadric hypersurface
in pose space R6 . Calculating ∇fp = 0, one observes that it vanishes on V (fp ) iff ρ = 0.
Hence V (fp ) is a smooth algebraic variety.
4.2. Base Spherical Joint Limits.
Theorem 4.2. Assume a “planar” pentapod with similar base spherical joints as depicted
in Fig. 8-left, then the set of all poses resulting in the maximum freedom of movement of the
i-th leg with respect to the i-th base joint limit forms a “hyperquadric” in R6 .
Proof. The base spherical joints located on the plane allow motions inside a cone of revolution with vertical axis. The implicit equation of such a cone with apix angle θ and base
anchor coordinates (xi , yi , 0)T is:
 h
i
2
2 θi
(4.2)
fbc = (u6 + ri u3 ) − cot
(u4 + ri u1 − xi )2 + (u5 + ri u2 − yi )2 .
2
One may think of Eq. 4.2 as a polynomial in C [u1 , u2 , u3 , u4 , u5 , u6 ]. Hence, the i-th base cone
with an apix limit of θi forms a hyperquadric in R6 . Calculating ∇fbc = 0, one observes that
it vanishes on V (fbc ) iff the platform anchor point collapse with its corresponding base anchor
point. It is noteworthy that due to the fact that ρmin 6= 0 such a collapse is unreachable.
Now, the idea is to implement new terms into the cost function in such a way that if a
pentapod’s leg is at
• its maximum/minimum extent,
• its maximum angular limit with respect to base cones,
the algorithm allows a slide of the end-effector at the maximum/minimum extent or angular
limit. Geometrically, this means that if a breakpoint pk is located on one of the hyperquadrics

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

19

(from now on called Q-variety), mentioned in Theorems 4.1/4.2, in such a way that if the
update of pk is going out of the Q-variety then the algorithm permits an update of it on
Tpk (Q). Naturally, due to practical reasons, the algorithm must consider such breakpoint
already located on Q if the breakpoint is closer than a certain positive real value  to it (cf.
Fig. 8-right). Hence in such a terminology the projection on the tangent will happen only if
huk − pk , pk − qk i < 0, where qk is the corresponding closest pedal to pk on Q-variety.
6 and a Q-variety,
Definition 4.3. Assume a breakpoint pk of a piecewise
 smooth path in R
k
+
as mentioned in Theorems 4.1/4.2, such that d p , Q <  where  ∈ R . If uk is the corresponding point to pk after variation and if qk is the orthogonal projection of pk on Q then
define

T̂pk := (uk − pk ) − h(uk − pk ), Npk i Npk ,

(4.3)


where Npk := pk − qk /kpk − qk k. Then the k-th breakpoint’s update should be replaced by
T̂pk .
Remark 4.4. In the variational path optimization process it often happens that a breakpoint pk breaches the  vicinity of more than one Q-variety (e.g. by almost reaching the
maximum extent of more than one leg). In such a situation the vector (uk − pk ) should be
projected on the intersection of the corresponding tangent spaces.
5. Variational Path Optimization Algorithm’s Manual. This section represents a short
manual of using the variational path optimization algorithm. The manual is accompanied by
an algorithm’s flowchart given in Appendix B.
5.1. Input. The algorithm will ask for two main sets of inputs namely, design parameters
and optimization parameters.
5.1.1. Design parameters. These variables define the architectural structure of the pentapod and hence its singularity variety. These variables of r, X and Y stand as the defining
parameters of the base and platform anchor points while the parameters α and β describe
either the pattern of platform anchor points (in the LP-case) or the co-linearity of certain number of base anchor points (in LO-cases). In a more general terminology, the design parameters
inform the algorithm on building up the geometric obstacle (i.e. Σ-variety).
5.1.2. Optimization parameters. These variables globally control the variations of the
initial curve. These parameters are read as follows:
•
•
•
•

n: the number of breakpoints required for the piecewise smooth curve,
λ: the geodesic weight,
η: the bending weight,
growth: is a percentage value indicating the maximum and minimum permitted variation of the curve at each iteration. Experimentally, it is fixed to be ±5%.

5.2. Process I. The main task of process I is to create a data collection of the inputs. In
fact, these are the calculations that the algorithm needs to do to have an initial understanding
of the situation of the initial path and the singularity variety (obstacle). This process is done

20

ARVIN RASOULZADEH AND GEORG NAWRATIL

only once per run. During this process the manipulator will not perform any action and hence
the clock will not tic.
1. Retrieving the data on the given singularity-free initial path within the joint limits.
2, 3. The algorithm evaluates the situation of the initial curve with respect to the Σ-variety
(obstacle) by obtaining the corresponding pedal points on the Σ-variety (obstacle).
This act is done in the fashion of the following consecutive steps:
• finding the real pedal points (cf. Section 3.2.1),
• finding distances corresponding to the real pedal points,
• sorting the real pedal points with respect to their distance in such a way that
the closest pedal point is labelled as the first.
4. The algorithm calculates the minimal singularity-free cover by including/excluding
breakpoints (upon user’s request).
5. At this point, the algorithm runs a check on joint rate limits. Additionally, the safe
zone breaches are flagged (upon user’s request).
6. The objective function is evaluated. In the coming iterations one must expect the
monotonic descent of the objective function per iteration till convergence at a possible
local minimum.
5.3. Decision I. Though Decision I could be written as a while loop, due to
imposing more control over the outcomes by the user (i.e. user can call a result before
the final convergence) it is presented as a for loop (cf. Appendix B). Additionally, by
the start of Decision I, the clock ticks to measure the elapsed time.
5.4. Process II. The core of the algorithm is located within the Process II.
1. By solving the linear system, the preferred direction u − p is obtained.
2. The algorithm monitors whether the safe zone of Q-varieties is breached or
not. If the answer is positive then the update of breakpoints responsible for
the breach is done in the fashion of Eq. 4.3 (cf. Remark 4.4).
3, 4, 5. Computing the step size as explained in Section 3.5.
6. Having the step size, the curve’s new pose is updated as follows:
up ( 2 : n − 1 , : ) = p ( 2 : n − 1 , : ) + ( s t e p s i z e ) ∗ ( u ( 2 : n − 1 , : ) ) ;

7, 8. Back-projection into Γ as explained in Section 3.8.
9. As we project the result into Γ there is no guarantee for the minimal singularityfree cover to remain intact. Hence, based on the two algorithms described in
Section 3.9, the inclusion and exclusion should be redone.
10. The cost function is calculated for the current iteration label i + 1.
5.5. Decision II. The new cost function, cost function(i + 1) is compared with the previous one, namely cost function(i). Since by the gradient descent it is expected of the cost
function per iteration to decrease, in Decision II a while loop is commenced. As long as the

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

21

2nd cone

1st leg

Figure 9. Illustration of the paths in R6 and their corresponding pedals as vector fields along paths in
R . Top-left: Initial path (blue) and its corresponding pedals (purple), Top-right: Final path (green) and its
corresponding pedals (red) (blue objective curve), Bottom-left: Modification of the final path under 1st prismatic
leg’s safe-zone breach (cyan objective curve), two golden sphere’s portions depict the minimum contraction and
maximum extension of the first leg, Bottom-right: Modification of final path under 2nd base cone’s safe-zone
breach (magenta objective curve).
3

cost function is not descending and the value of step size is not zero (this can be changed by
user to a small number such as 10−6 for being real-time preservation) the algorithm executes
the while loop.
5.6. Process III. At each iteration of the while loop the algorithm halves the step size
and reruns Process II. This gives the opportunity for the preferred direction to find the proper
direction to a local minimum.
5.7. Output. The coordinates of the final curve, the plot of the optimized motion and
the objective function per iteration diagram are printed.
6. Results & Discussions. Finally, the results are demonstrated in the form of the following two example.

22

ARVIN RASOULZADEH AND GEORG NAWRATIL

6.1. Example. Consider a simple pentapod of the
following architecture matrix (cf. Eq. 1.1):
 

0
r2 x2 y2 z2
 r3 x3 y3 z3   0
 

(6.1)
 r4 x4 y4 z4  =  5
9
r5 x5 y5 z5

3rd-LO type (cf. Fig. 2-right) with the

5 0
0 5
8 3
12 12


0
0 
.
0 
0

Additionally, the second base cone’s apex angle (resembling the physical limits of base spherical joints) is set at 108◦ while the range of the first leg’s prismatic joint varies in the closed
interval [5.1, 16]. The initial singularity-free path is given by the curve
(6.2)
(6.3)

α : [2, 5] −→ Γ ⊂ R6 ,


x + 10 x2 + 10 x3
x 7−→ sin (θ) cos (φ) , sin (θ) sin (φ) , cos (θ) ,
,
,
+ 5.333 ,
3
3
30

where

(6.4)

θ
φ



5−x
=
3



0.4 π
6.8 π



x−2
+
3



0.25 π
2π


.

The illustrated cases are computed for 30 breakpoints with the geodesic weight λ = 0.001 and
the bending weight η = 0.05. Furthermore, the curve’s growth is given by growth = 5% and
safe zone’s vicinity is given by  = 0.4 (cf. Definition 4.3).
Finally, the development of the motion curve are depicted in Fig. 9 and the geometric details
of the final optimized motion is given in Table 2 while Fig. 10-left shows the descent of the
related objective functions per iteration.

Figure 10. Illustration of the objective curves corresponding to motions in Fig. 9 (left) and Fig. 11 (right).
Note that the sharp changes of the objective functions are due to the inclusion/exclusion of breakpoints (right).

6.2. Example. Preserving the architectural and optimization parameters mentioned in
Example 6.1 and allowing the minimal singularity-free cover to take place, the result will be
as depicted in Fig. 11. It is noteworthy that the final number of breakpoints will be 6. Finally,

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

Length
Total curvature
Elapsed time

23

Top left

Top right

Bottom left

Bottom right

11.1822
0.2379
-

26.5303
5.3926
1.6314 s

14.3375
1.9030
3.9546 s

23.8307
4.8903
6.7991 s

Table 2
Length and total curvature are computed for the final curve in R6 with respect to “object oriented metric”
while the elapsed time gives simply the amount of the passed time for the algorithm to find the final curve.

Figure 11. Illustration of the vector field of motions with finite singularity-free cover (cf. Section 3.9).
Once again the corresponding objective functions are blue (left), cyan (middle) and magenta (right).

the geometric details of the motion is found in Table 3 and the related objective function per
iteration descent in Fig. 10-right. The algorithm used to produce these results is a Matlab first
implementation and can be subject to further improvements, especially through recoding in
C++.

Length
Total curvature
Elapsed time
Final number of breakpoints

Left

Middle

Right

20.6106
12.9031
2.3237 s
7

15.7346
10.5039
3.3512 s
6

16.8231
11.7041
3.7472 s
6

Table 3
Length and total curvature are computed for the final curve in R6 with respect to “object oriented metric”,
the elapsed time gives the amount of the passed time for the algorithm to find the final curve. Final number of
breakpoints indicate the number of remaining breakpoints by the end of optimization process.

6.3. Conclusion & Future Research. We demonstrated that simple pentapods imply a
reduction in the number of pedal points in addition to their closed-form coordinates (cf.
Section 3.2.1). We studied the geometric properties of simple pentapod’s loci (cf. Section 2).
Since the main purpose of the paper was to optimize a given singularity-free path between
two fixed poses, we setup a cost function involving energy terms and distance to the Σ-variety
(cf. Section 3). Obtaining the local minimum of the cost function by imploring the gradient

24

ARVIN RASOULZADEH AND GEORG NAWRATIL

descent method resulted in an optimized motion with the following properties:
• increased distance to the Σ-variety,
• smoothness,
while considering the extension/contraction limits of prismatic joints and angular limits of the
base spherical joints. Finally, the details of the algorithm along with a flowchart are given in
Section 5 and Appendix B.
Though the problem of feasible motions with respect to physical limits of the base spherical
joints and prismatic joints yields rather simple surfaces, namely, hyperquadrics in R6 , the
problem of leg collision avoidance and angular limits of platform spherical joints implore
a more sophisticated situation as they yield hyperquartics in R6 . Consequently, obtaining
pedals on such varieties gets more complex as even the Gröbner basis approach does not
yield a solution in the general case. One idea to ameliorate this problem is by resorting to a
numerical method such as homotopy continuation method performed by Bertini [1] which will
be subject to a future research. In addition, we plan to investigate the initial singularity-free
path planning problem in more detail which can be based on the special structure of the
Σ-variety (cf. Theorem 2.4).
Appendix A. Proof of Theorem. 2.4. Since proving the theorem for one of the LP/LO
cases can easily be repeated for the other case, without loss of generality, we prove the theorem
for the “LO-case”:
a) Using Lemma 2.2 and basic properties of algebraic varieties (cf. [6]) results in:
(A.1)

Σ = V(u6 ) ∪ V( u6 (α u1 + β u2 ) − u3 ( α u4 + βu5 − 1 ) ) = Σ1 ∪ Σ2 .

∂f
b) The set of all singular points of Σ2 are the solutions of h ∂u
, ∂f , ∂f , ∂f , ∂f , ∂f , f i
1 ∂u2 ∂u3 ∂u4 ∂u5 ∂u6
where f ∈ C[u1 , u2 , u3 , u4 , u5 , u6 ]. If f is Eq. 2.1 then

(A.2)

Σ3 = V ( u6 , 1 − (αu4 + βu5 ), u3 , α u1 + β u2 ) .

Considering the following evidently smooth maps
(A.3)
(A.4)

(A.5)
(A.6)

(A.7)
(A.8)

h1 : R5 \ V ( α u1 + β u2 ) −→ R6 ,


u3 (αu4 + βu5 − 1)
(u1 , u2 , u3 , u4 , u5 ) 7−→ u1 , u2 , u3 , u4 , u5 ,
,
α u1 + β u2
h2 : R5 \ V ( 1 − (αu4 + βu5 ) ) −→ R6 ,


u6 (α u1 + β u2 )
, u4 , u5 , u6 ,
(u1 , u2 , u4 , u5 , u6 ) 7−→ u1 , u2 ,
α u4 + β u5 − 1
h3 : R5 \ V ( u3 ) −→ R6 ,


α u1 u6 + β u2 u6 − β u3 u5 + u3
(u1 , u2 , u3 , u5 , u6 ) 7−→ u1 , u2 , u3 ,
, u5 , u6 ,
u3 α

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

(A.9)
(A.10)

25

h4 : R5 \ V ( u6 ) −→ R6 ,


α u3 u4 − β u2 u6 + β u3 u5 − u3
, u2 , u3 , u4 , u5 , u6 ,
(u2 , u3 , u4 , u5 , u6 ) 7−→
u6 α

gives 5-dimensional smooth manifolds Mi := graph (hi ) ⊂ R6 whose intersection with
Σ3 is empty. Moreover, taking an element in Σ2 and noting the structure of hi domains
implies one of the following two possibilities:
• if it satisfies Eq. A.2 then it belongs to Σ3 ,
• otherwise it belongs to at least one of the Mi s.
S
Hence, by naming M := 4i=1 Mi we get the required result.
c) Substituting u6 = 0 in the defining equation of the hypersurface gives
(A.11)

Σ1 ∩ Σ2 = V (u3 ) ∪ V(αu4 + βu5 − 1) = A ∪ B,

which upon observing that hypersurface equation and Eq. A.11 are two constraints for
pose variables or through direct computation (i.e. using HilbertDimension command
in Maple) reveals that Σ1 ∩ Σ2 is a union of two 4-dimensional planes.
d) Assuming f1 and f2 to be the defining polynomials of Σ1 and Σ2 , to obtain the tangency
one has to check the points of Σ1 ∩ Σ2 in which ∇f1 and ∇f2 are collinear. Doing so
yields M 0 with the following parametrization:
(A.12)
(A.13)

R3 \ V ( α v1 + β v2 ) −→ R6 ,


1 − β v3
(v1 , v2 , v3 ) 7−→ v1 , v2 , 0,
, v3 , 0 ,
α

for the LO-case which trivially yields a 3-dimensional smooth manifold.
e) The parametrization of Σ3 for LO-case is:
(A.14)



β v1
1 − β v2
(v1 , v2 ) 7−→ −
, v1 , 0,
, v2 , 0 .
α
α

Using the above parametrization (or through direct manipulation of the corresponding
implicit equations) one finds that Σ3 is a 2-dimensional plane and a subset of Σ1 ∩
Σ2 . Additionally, by observing Eq. A.11, one deducts hu3 , (α u4 + β u5 − 1)i includes
hu3 (α u4 + β u5 − 1)i which results in Σ3 ⊂ A ∩ B.
Appendix B. Flowchart. For downloading the implementation in Matlab plus tools for
plotting results in Maple visit http://www.geometrie.tuwien.ac.at/rasoulzadeh/. The implemented algorithm might be subject to minor updates in future releases.
The flowchart is modelled according to the current standard ISO 5807. Finally, due to the
fact that the variational path optimization algorithm, in its presented shape here, can be used
for different optimization goals involving a path and an obstacle to avoid, the flowchart is
presented as general as possible. The items exclusively related to the variational path optimization of the simple pentapods are labelled by (∗). By disregarding these lines one would
be able to use the same techniques for other optimization goals such as the optimization of a
path with respect to a parabola in R2 (cf. Fig. 5) or similar goals in different Rn spaces.

26

ARVIN RASOULZADEH AND GEORG NAWRATIL

Input
1. design parameters: r, X, Y, α, β (∗),
2. optimization parameters: initial curve, n,
λ, η.

start

Process I
1.
2.
3.
4.
5.
6.

p := initial curve,
compute real sorted pedals (p),
compute all real distances (p, real sorted pedals),
do necessary inclusion or exclusion,
joint limit analysis (∗),
compute cost function (1).

Decision I
for i = 1 : number of iterations

False
Process II
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.

True

solve linear system,
joint limit analysis (∗),
compute geodesic growth: geodesic candidate,
compute bending growth: bending candidate,
choose step size: step size = min(geodesic candidate, bending candidate) ,
update piecewise smooth curve: up = p + step size ∗ u,
projection into cylinder’s tangents (∗),
projection into cylinder (∗),
do necessary inclusion or exclusion,
compute cost function(i + 1).

Decision II
while cost function (i + 1) > cost function (i)

False

Process III
1.
2.
3.
4.
5.
6.

True

step size = step size/2
update piecewise smooth curve: up = p + step size ∗ u,
projection on cylinder’s tangents (∗),
projection into cylinder: projection cylinder(up) (∗),
do necessary inclusion or exclusion,
compute cost function(i + 1).

Output
final curve := p

stop

VARIATIONAL PATH OPTIMIZATION OF LINEAR PENTAPODS

27

REFERENCES
[1] D. J. Bates, J. D. Hauenstein, A. J. Sommese, and C. W. Wampler, Numerically solving polynomial
systems with Bertini, vol. 25, SIAM, 2013.
[2] W. M. Boothby, An introduction to differentiable manifolds and Riemannian geometry, vol. 120, Academic press, 1986.
[3] J. Borràs and F. Thomas, Singularity-invariant leg substitutions in pentapods, in Intelligent Robots
and Systems (IROS), 2010 IEEE/RSJ International Conference on, IEEE, 2010, pp. 2766–2771.
[4] J. Borras, F. Thomas, and C. Torras, Singularity-invariant leg rearrangements in Stewart–Gough
platforms, Advances in Robot Kinematics: Motion in Man and Machine, (2010), pp. 421–428.
[5] M. P. d. Carmo, Riemannian geometry, Birkhäuser, 1992.
[6] D. Cox, J. Little, and D. O’shea, Ideals, varieties, and algorithms, vol. 3, Springer, 1992.
[7] M. P. Do Carmo, Differential Geometry of Curves and Surfaces: Revised and Updated Second Edition,
Courier Dover Publications, 2016.
[8] E. Dudek and K. Holly, Nonlinear orthogonal projection, in Annales Polonici Mathematici, vol. 59,
Instytut Matematyczny Polskiej Akademii Nauk, 1994, pp. 1–31.
[9] J.-P. Merlet, Singular configurations of parallel manipulators and Grassmann geometry, The International Journal of Robotics Research, 8 (1989), pp. 45–56.
[10] J. W. Milnor, On the total curvature of knots, Annals of Mathematics, (1950), pp. 248–257.
[11] G. Nawratil, Point-models for the set of oriented line-elements–a survey, Mechanism and Machine
Theory, 111 (2017), pp. 118–134.
[12] B. O’neill, Semi-Riemannian geometry with applications to relativity, vol. 103, Academic press, 1983.
[13] H. Pottmann and J. Wallner, Computational line geometry, Springer Science & Business Media, 2009.
[14] A. Rasoulzadeh and G. Nawratil, Rational parametrization of linear pentapod’s singularity variety
and the distance to it, in Computational Kinematics, Springer, 2018, pp. 516–524.
[15] A. Rasoulzadeh and G. Nawratil, Linear pentapods with a simple singularity variety–part i: Determination and redundant designs, in IFToMM World Congress on Mechanism and Machine Science,
Springer, 2019, pp. 689–698.
[16] A. Rasoulzadeh and G. Nawratil, Linear pentapods with a simple singularity variety–part ii: Computation of singularity-free balls, in IFToMM World Congress on Mechanism and Machine Science,
Springer, 2019, pp. 699–708.
[17] M. Weck and D. Staimer, Parallel kinematic machine tools–current state and future potentials, CIRP
Annals-Manufacturing Technology, 51 (2002), pp. 671–683.

