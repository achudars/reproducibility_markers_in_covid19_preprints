Computing Equilibria in Binary Networked Public Goods Games
Sixie Yu1 ∗ and Kai Zhou1 ∗ and P. Jeffrey Brantingham2 and Yevgeniy Vorobeychik1

arXiv:1911.05788v2 [cs.GT] 19 Nov 2019

1

Department of Computer Science and Engineering, Washington University in St. Louis, {sixie.yu,zhoukai,yvorobeychik}@wustl.edu
2
Department of Anthropology, University of California, Los Angeles, branting@ucla.edu
∗ Equal Contribution

Abstract
Public goods games study the incentives of individuals to contribute to a public good and their behaviors in equilibria. In this
paper, we examine a specific type of public goods game where
players are networked and each has binary actions, and focus
on the algorithmic aspects of such games. First, we show that
checking the existence of a pure-strategy Nash equilibrium
is NP-Complete. We then identify tractable instances based
on restrictions of either utility functions or of the underlying
graphical structure. In certain cases, we also show that we
can efficiently compute a socially optimal Nash equilibrium.
Finally, we propose a heuristic approach for computing approximate equilibria in general binary networked public goods
games, and experimentally demonstrate its effectiveness.

1

Introduction

Public goods games have been a major subject of inquiry
as a natural way to model the tension between individual
interest and social good [14, 20]. In a canonical version of
such games, individuals choose the amount to invest in a
public good, and the subsequent value of the good, which
is determined by total investment of the community, is then
shared equally by all. A number of versions of this game have
been studied, including variants where players are situated
on a network, with individual payoffs determined solely by
the actions of their network neighbors [3].
An important variation of networked public goods games
treats investment decisions as binary [11]. One motivating
example is crime reporting, known to vary widely, with
the general observation that crime is considerably underreported [19]. In a game theoretic abstraction of crime reporting, individuals choose whether or not to report crimes,
and benefits accrue to the broader community, for example,
causing a reduction in overall crime rate. Another example
of binary public goods games is vaccination. In this example, parents decide whether to vaccinate their children, with
herd immunity becoming the public good. To keep terminology general, we will refer to the binary decision whether or
not to invest in a public good (thus, reporting a crime and
vaccinating are forms of such investment).
A special case of binary public goods games (BNPGs),
commonly known as best-shot games, has received some
Copyright c 2020, Association for the Advancement of Artificial
Intelligence (www.aaai.org). All rights reserved.

prior attention [7, 11, 15, 17]. However, best-shot games
make a strong assumption about the structure of the player
utility functions. While Levit et al. [17] recently showed that
equilibria for best-shot games can be computed in polynomial time by best response dynamics, these may fail to find
social welfare-optimal equilibria, and nothing is known about
BNPGs more generally.
We study the problem of computing pure strategy Nash
equilibria in general binary public goods games on networks.
We provide examples to show that a pure strategy Nash equilibria is not guaranteed to exist for general BNPGs. Furthermore, we show that even determining if a pure strategy Nash
equilibrium exists is hard in general. However, while pure
strategy equilibria need not in general exist, and are hard to
compute, we exhibit a number of positive results for important special cases. One class of special cases pertains to binary public goods games for completely connected networks
(communities), in which case an equilibrium can be found
efficiently if it exists. Similarly, we can efficiently find a pure
strategy equilibrium in general BNPGs when the graph is a
tree. If we further restrict the externalities to have an identical
impact on all players (we call this the homogeneous case), we
can characterize all pure strategy equilibria, and efficiently
compute a socially optimal equilibrium. Moreover, if both
investment costs and externalities are identical (termed the
fully homogeneous case), we can characterize all pure strategy equilibria for arbitrary networks. Finally, we present
a heuristic approach for finding approximate equilibria to
tackle general BNPGs, and experimentally demonstrate that
it is highly effective. Our algorithmic results are summarized
in Table 1.
Related Work Our work relates to the broad literature on
graphical games, a succinct representation of games in which
utilities exhibit local dependences captured by a graph [13].
[9, 8, 12] studied the complexity of computing (mixedstrategy) equilibria in graphical games with utilities defined
in the matrix form, and proposed efficient algorithms to find
equilibria on graphs with restricted topologies.
Networked public goods games can be regarded as a special class of graphical games where the utilities are functions
of the accumulated efforts of individuals. A number of model
variations have been proposed to study public goods in different fields such as economics, innovation diffusion, and

medical research [10, 22, 5]. Our model is closely related to
that proposed by Bramoullé and Kranton [3]. The two qualitative distinctions are that (a) we consider binary investment
decisions, in contrast to Bramoullé and Kranton, who focus
on the more traditional continuous investment model, and
(b) Bramoullé and Kranton assume homogeneous concave
utilities, while we consider a more general setting.
Other related variations of graphical games include supermodular network games [18] and best-shot games [7, 11, 15,
17]. The latter are a special case of BNPGs, and Levit et
al. [17] recently showed that these are potential games with
better response dynamics converging to a pure strategy equilibrium in polynomial time. No other algorithmic results are
known for either of these special classes of graphical games.

heterogeneous
homogeneous
fully-homogeneous
fully-homogeneous + convex g

general

complete graph

tree

hard
hard
hard
poly

poly
poly
poly
poly

poly
poly
poly
poly

Table 1: An overview of our results.

2

Model

A Binary Networked Public Goods game (henceforth BNPG
game) is characterized by a graph G = (V, E), where the
node set V = {1, 2, · · · , n} denotes the players and E =
{(i, j)|i, j ∈ V } represents the interdependencies among
the players’ payoffs, a binary strategy space xi ∈ {0, 1} for
each player i (we can think of these as decisions whether
to invest in a public good), and a collection of utility functions Ui (x1 , . . . , xn ). These utility functions have special
structure, which we now describe, and we use the running
example of crime reporting to illustrate the intuition behind
this structure.
Let Ni = {j 6= i|(j,
P i) ∈ E} be the set of neighbors
of i, and define ni = j∈Ni xj , or equivalently, ni is the
number of i’s network neighbors who choose to invest (note
the implicit dependence of ni on the strategies of i’s neighbors). Thus, in the crime reporting scenario, ni represents
the number of i’s neighbors who report crimes. We assume
that each player gains whenever more people invest (report
crimes), for example, because as a result crime rate drops. On
the other hand, reporting crime is costly (time consuming, or
even dangerous). We capture the latter feature by introducing
a cost ci which is incurred whenever i invests in a public
good. Player i’s utility function is then defined as
Ui (xi , ni ) = gi (xi + ni ) − ci xi ,

(1)

where gi (xi + ni ) ≥ 0 captures the positive externality of
investment choices by i’s neighbors, such as the benefits to
an individual when their neighbors report crimes. The only
restriction we impose on gi (x) at this point is that they are
non-decreasing functions in x (e.g., higher reporting reduces
crime rate). Our definition of gi (·) generalizes the one given
by Bramoullé and Kranton 2007, who assume that gi (·) is
a twice differentiable strictly concave function. There are

many scenarios these assumptions are violated. For example,
studies of incentives in P2P systems entail natural models
in which gi (·) is an S-shaped function [4]; commonly considered best-shot games model gi (·) as a step function [11];
and gi (·) may be convex as in models of social unrest [6].
However, our definition of gi (·) is flexible enough to model
the aforementioned scenarios. Note that the size of BNPG
representation is O(n2 ) for an arbitrary gi (·). A useful observation is that player i chooses to invest if and only if
Ui (1, ni ) ≥ Ui (0, ni ), which can be rewritten as
∆

ci ≤ gi (ni + 1) − gi (ni ) = ∆gi (ni ).

(2)

As each player has a different mapping function gi (·), we
henceforth call the general version of this game a heterogeneous BNPG game. We will study several important special
cases. The first is when the externality function g(·) is the
same for all players, which we term a homogeneous BNPG
game. The second is a further restriction of a homogeneous
game where all players have identical costs ci = c; we term
this a fully homogeneous BNPG game. The best-shot games,
which received some prior attention, are a special case of
homogeneous BNPGs with gi (xi + ni ) = min{K, xi + ni }
for some integer K.
We use (G, U) to parametrize a BNPG game with underlying graph G and a set of utility functions U = {Ui }i∈V .
We seek pure-strategy Nash Equilibria (PSNE) x∗ =
(x∗1 , . . . , x∗n ) of the game. Let x denote the action profile
for all players, and let x−i denote the joint actions of all the
players other than player i.
Definition 2.1. In a BNPG game (G, U), a pure-strategy
Nash Equilibrium is a vector x∗ ∈ {0, 1}n P
satisfying
Ui (x∗i , n∗i ) ≥ Ui (xi , n∗i ) for any xi , where n∗i = j∈Ni x∗j .

3

Heterogeneous BNPG Games

Existence and Complexity
We begin by asking basic questions about BNPG games: is
a PSNE guaranteed to exist, and if not, is it hard to check
whether one exists?
Existence of PSNE We first show that a PSNE need not exist
even if the network is a complete graph. Consider a game with
two players A and B. Let UA (xA , xB ) = gA (xA + xB ) −
cA xA and UB (xB , xA ) = gB (xB + xA ) − cB xB be the
utilities of A and B, respectively. A sufficient condition under which PSNE does not exist is that UB (0, 0) < UB (1, 0)
and UA (0, 1) < UA (1, 1) and UB (1, 1) < UB (0, 1) and
UA (1, 0) < UA (0, 0). This condition can be achieved by
choosing gA (·) and gB (·) such that ∆gA (0) = cA − ,
∆gA (1) = cA + , ∆gB (0) = cB + , and ∆gB (1) = cB − ,
where  is a positive constant. A possible configuration is that
gA (0) = , gA (1) = cA , gA (2) = 2cA + , and gB (0) = ,
gB (1) = cB + 2, gB (2) = 2cB + , where  ≤ cA and
 ≤ cB , ensuring that both gA and gB are non-decreasing.
Complexity Next, we show that determining the existence
of PSNE is hard.
Theorem 1. Determining the existence of a pure-strategy
Nash equilibrium in a BNPG game is NP-Complete.

Proof. Given an action profile, it takes polynomial time to
check if it is a PSNE, so the problem is in NP. We construct a
reduction from the I NDEPENDENT S ET (IS) problem. Given
a graph G, the IS problem is to decide whether there is an
independent set S of size at least k in G.
Given an instance of IS (i.e., a graph G = (V 0 , E) and an
integer k), we construct a new graph H = (V, E) by adding
an additional node t and connecting t to every node in G, that
is V = V 0 ∪ {t}. We define the best-response policy of the
players as the following:


1, 0 < nt < k
0, nt = 0 or nt ≥ k.
(3)
Note that by choosing different functions gi , the bestresponse policy above are always realizable. A heterogeneous
BNPG is defined on the graph H, with the best-response policies defined above. We now show that finding an independent
set of size at least k in graph G is equivalent to finding a
PSNE of the game.
First, suppose we have found an independent set S of size
k. Then node t is not in S since t connects to every node in
G. We check the remaining nodes in V \ S and iteratively
add into S those nodes that have no connections to any node
in S, which results in Ŝ. Note that Ŝ is maximal and its size
is at at least k. We argue that all nodes in Ŝ choosing 1 and
the rest of the nodes choosing 0 is an equilibrium. For a node
in Ŝ, it will not deviate since none of its neighbors chooses 1.
For node t, it will not deviate since it has at least k neighbors
that choose 1. For a node u ∈ V \ Ŝ, it must connect to at
least one node in Ŝ; otherwise Ŝ is not maximal. Thus u will
also not deviate.
Second, suppose we have found an equilibrium. There
must be some nodes choosing 1 in the equilibrium, otherwise
for any node in G it has no investing neighbor and it would
deviate to choose 1. If the equilibrium is that all nodes choose
1, we have nt < k since t chooses 1. Because t connects to
all nodes in G, which indicates that nt = |V | < k. So the
equilibrium cannot be that all nodes choose 1. Suppose in
the equilibrium the nodes are divided into two sets S and T
where nodes in S choose 1 and nodes in T choose 0. Further
note that t cannot be in S. Because another node in S would
prefer to choose 0 as it connects to t. Thus, the nodes in S
form an independent set. For a node u in T , it must be true
that u connects to at least one node in S since u chooses 0.
Furthermore, t choosing 0 means that the size of S is at least
k. Thus, the set S is an independent set of G with size at least
k.
i ∈ V 0 : xi =

1, ni = 0
and xt =
0, ni 6= 0



Since determining existence of a PSNE is hard in general
BPNG games, we next consider tractable special cases.
Games on Complete Graphs Consider the case where G is
a complete graph. Remarkably, despite the fact that a PSNE
need not exist even in this special case, we now show that
we can find one (if it exists) or confirm non-existence in

polynomial time. Define α(k) and β(k) as follows:

α(k) := i|ci < ∆gi (k − 1)

β(k) := i|ci > ∆gi (k − 1)

(4)

0 < k ≤ n,
where α(k) (resp. β(k)) is the number of players who will
always invest (resp. not invest) if the total of k players invest.
The following proposition is then immediate.
Proposition 2. There exists a PSNE if and only if there exists
0 < k ≤ n such that α(k) ≤ k ≤ n − β(k).
The condition in Prop. 2 suggests the following algorithm
to compute a PSNE, or prove that one doesn’t
 exist. When
k = 0, there is a PSNE if and only if the set i|ci < ∆gi (0)
is empty, which and can be checked in O(n) time. When
k 6= 0, for each integer k = 1, . . . , n, check if the condition
in Prop. 2 holds, which takes O(n2 ) time. Thus, the full
algorithm has running time of O(n2 ).
Games on Trees Another important special case is when G
is a tree. We now present a polynomial-time algorithm to
compute a PSNE on trees (or conclude one does not exist).
Suppose an action profile x = (x1 , . . . , xn ) is given. Consider a sub-tree denoted by GT = (VT , ET ). Observe that x
is a PSNE if and only if the actions restricted to the sub-tree,
namely {x∗i |i ∈ VT }, form a (local) PSNE of the BNPG
played on GT . This indicates that a PSNE on G can be constructed from those (local) PSNE on sub-trees. Our algorithm,
TreePSNE, is inspired by TreeNash Kearns, Littman, and
Singh 2013, but unlike the latter, it computes an exact PSNE
(rather than an approximate mixed Nash equilibrium) in polynomial time, as formalized by the following theorem.
Theorem 3. When G is a tree, it takes O(dmax · |V | + |E|)
time to compute a PSNE or conclude that one does not exist,
where dmax is the maximum degree of G.
Proof. We give a constructive proof of Theorem 3. Given
a tree G, we denote its root by R (the choice of the root is
arbitrary). Suppose G is an inverted tree, where the root R is
at the bottom and the leaves at the top. The nodes in G are
categorized into three classes: leaf nodes, internal nodes, and
the root. Our algorithm consists of two passes: a downstream
pass and an upstream pass. In the downstream pass we traverse the nodes in a depth-first order (start with the leaves
and end at the root). Each leaf or internal node passes a table
to its parent. We call the table conditional best-response table
since it contains the best responses of a node conditioned on
its parent’s actions and equilibrium actions of its children.
Before presenting the algorithm, we define n0Y =1 (resp.
n0Y =0 ) as the number of node Y ’s children that invest in a
PSNE of the associated subtree given that Y invests (resp.
not invests). Let W and Y be a pair of nodes, where W is
the parent of Y . Denote their action profile as (xW , xY ). The
necessary condition that (xW , xY ) is part of a PSNE is in
Eq. (5), where the “” is “≥” if xY = 1 and “≤” otherwise.
∆gY (n0Y =xY + xW )  cY ,
|
{z
}
=nY

(5)

Suppose Y is a leaf node and W is its parent. Since Y
does not have any child, n0Y is always zero no matter what
Y ’s decision is. Thus, computing the table is equivalent to
identify the action profiles (xW , xY ) such that they satisfy
Eq. (5), which takes O(1) time since there are at most four
combinations of (xW , xY ). If no (xW , xY ) satisfies Eq. (5),
we conclude a PSNE does not exist for the game. The procedure to compute the conditional best-response table for a leaf
node Y is summarized in Algorithm 1.

xUi = 0) given xY = 0. This step takes O(dmax ). Note that
n1Y =0 + n0Y =0 ≤ k, since Y has k children. Thus, the possible values of n0Y =0 are {n1Y =0 , n1Y =0 + 1, . . . , k − n0Y =0 }.
We obtain possible values of n0Y =1 given xY = 1 using the
similar procedure. Finally, we substitute the four combinations of (xW , xY ), as well as the corresponding values of
n0Y that condition on xY , into Eq.(5), which identifies the
(xW , xY ) that can be part of a PSNE. If no (xW , xY ) satisfies Eq. (5), we conclude a PSNE does not exist for the game.
The procedure to compute the conditional best-response table
for an internal node Y is summarized in Algorithm 2.

Algorithm 1 Compute conditional best-response table TY
for a leaf node
Algorithm 2 Compute conditional best-response table TY
1: Input: ∆gY (·), cY
for an internal node
2: Initialize: TY
1: Input: ∆gY (·), cY , k and conditional best-response ta3: for (xW , xY ) in (0, 0), (0, 1), (1, 0), (1, 1) do
bles TUi , . . . , TUk
4:
if xY = 0 then
5:
If ∆gY (xW ) ≤ cY then put (xW , xY ) into TY end if 2: Initialize: T1Y
3: Compute nY =0 , n0Y =0 , n1Y =1 , n0Y =1
6:
else if xY = 1 then
7:
If ∆gY (xW ) ≤ cY then put (xW , xY ) into TY end if 4: for (xW , xY ) in (0, 0), (0, 1), (1, 0), (1, 1) do
5:
if xY = 0 then
8:
end if
6:
for n0Y =0 in {n1Y =0 , . . . , k − n0Y =0 } do
9: end for
7:
if ∆gY (n0Y =0 + xW ) ≤ cY then
10: if TY = ∅ then
8:
Put (xW , xY ) into TY
11:
Return No PSNE exists
9:
end
if
12: else
10:
end for
13:
Return TY
11:
else if xY = 1 then
14: end if
12:
for n0Y =1 in {n1Y =1 , . . . , k − n0Y =1 } do
13:
if ∆gY (n0Y =1 + xW ) ≥ cY then
14:
Put (xW , xY ) into TY
...
15:
end if
U1
Uk
16:
end for
xY = 1 → xU = 1
17:
end if
xY = 1 → xU = 0
xY = 1 → xU = 0
Y
18: end for
xY = 0 → xU = 1
xY = 0 → xU = 1
19: if TY = ∅ then
20:
Return No PSNE exists
W
21: else
22:
Return TY
Figure 1: Conditional best-response table for internal nodes
23: end if
U1 , . . . , Uk .
k

1

k

1

k

Now we consider an internal node Y . Suppose its parent
is W and it has k children U1 , . . . , Uk . For the purpose of
induction, suppose the conditional best-response tables of
U1 , . . . , Uk have been passed to Y . An example is showed
in Figure 1, where the two tables beside U1 and Uk indicate
the best responses of the two nodes conditioned on their
parent node Y ’s actions. We need to check if there is a an
action profile (xW , xY ) satisfying Eq. (5), which requires
us to compute n0Y . Note that there may be ties, where a
player is indifferent between investing and not investing given
its parent’s action. For example, in Figure 1 the right table
indicates that node Uk is indifferent between xUk = 1 and
xUk = 0, given xY = 1.
Let dmax be the maximum degree of G. When xY = 0,
we denote the number of Y ’s children that always choose
to invest (resp. not invest) as n1Y =0 (resp. n0Y =0 ). To compute n1Y =0 (resp. n0Y =0 ), we iterate through the conditional
best-response tables of U1 , . . . , Uk and count the number
of children that have unique best response xUi = 1 (resp.

We can compute the best response table of R in O(dmax )
using a slightly modified version of Algorithm 2.; if the
table is empty, we can conclude that no PSNE exists. Thus,
computing the conditional best-response tables for all nodes
takes O(dmax |V |) time. In addition, it takes O(|V | + |E|) to
obtain the depth-first order. Thus, the downstream pass takes
O(dmax |V | + |E|) time.
In what follows we show that the downstream pass does
not miss any PSNE if there is one, by an inductive argument.
Suppose there is a PSNE that is missed by the downstream
pass. Then we must wrongly conclude that no PSNE exists
at some node Y as we move downward. First, the node Y
cannot be a leaf node, since we exhaustively check the four
possible action profiles of Y and its parent. Next, suppose the
PSNE is not missed until an internal node Y . Since the PSNE
is not missed by any child of Y , we must miss an action
profile (xY , xW ) of Y and its parent that satisfies Eq. (5).
However, we check all combinations of n0Y , xY , and xW ,
so we cannot miss such an action profile, which leads to a
contradiction. The same argument applies for the root R.

In the upstream pass we traverse G in a reversed depth-first
order (start at the root and end the leaves). We first select
the action of the root. If both xR = 0 and xR = 1 are R’s
best responses, we arbitrarily pick one. Next, we sequentially
determine each node’s action based on its parent’s action and
the conditional best-response table passed to the parent. This
pass takes O(|V |) time. In conclusion, the total running time
of TreePSNE is O(dmax |V | + |E|) (see the Appendix for the
detailed algorithm).
Games on Arbitrary Graphs Finally, we present a heuristic algorithm to find approximate PSNE for general BNPG
games. An approximate PSNE is defined as follow:
Definition 3.1. In a BNPG game an -PSNE is a vector
x∗ ∈ {0, 1}n such that:
Ui (x∗i , n∗−i ) +  ≥ Ui (xi , n∗−i ),
P
∀i ∈ {1, 2, · · · , n}, where n∗i = j∈Ni x∗j and 0 ≤  ≤ 1.
The heuristic algorithm is composed of two subroutines.
The first one is termed as Asynchronous-BR, which is
based on the idea of best-response dynamics. In one execution of Asynchronous-BR, each player will sequentially
update her action with the best-response to all other players,
in an asynchronous manner. The second subroutine is termed
Evolve, and will execute Asynchronous-BR k times
and pick the minimum  such that in the associated action
profile x, every player has achieved an -PSNE. In this way,
Evolve finds the approximate PSNE with the best quality through best-response dynamics. Due to limited space,
the Asynchronous-BR and Evolve are provided in the
supplement. The heuristic algorithm to find an approximate
PSNE is given in Algorithm 3. The input δ is the stopping
criterion. When the distance d of two consecutive profiles is
small enough (< δ) the algorithm converges.
Algorithm 3 Heuristic to find approximate PSNE
1: Input: k, δ
2: Initialize: d = M
. M : a large positive number
3: x ← Random initializatioin
4: if x is a PSNE then return x
5: while d > δ do
6:
x0 ← Evolve(x, k)
7:
if x0 is a PSNE then
8:
return x0
9:
else
10:
d ← ||x0 − x||p
11:
end if
12: end while
13: return x0

4

Homogeneous BNPG Games

Next, we consider homogeneous BNPG games where all the
players share the same function g. We begin by showing that
even in homogeneous BNPG games, a PSNE need not exit.

Existence of PSNE
We present a homogeneous game for which a PSNE does
not exist. This game has three players {1, 2, 3} and nodes
corresponding to the players form a simple path with player
2 in the middle. Specifically, c1 = 1, c2 = 2, and c3 = 3.
We set ∆g(0) = 1.5, ∆g(1) = 3.5, and ∆g(2) = 0.5, corresponding to a certain function g that we can select arbitrarily.
There are a total of 8 possible action profiles of the game and
an action profile is a PSNE if and only if a specific set of
inequality constraints are satisfied. For example, the action
profile (1, 0, 1) is a PSNE if and only if c1 ≤ ∆g(0) and
c2 > ∆g(2) and c3 ≤ ∆g(0). By exhaustively checking all
8 profiles, it is not difficult to verify that none of the 8 sets of
inequality constraints is satisfied, meaning that a PSNE does
not exist in this game.
Complexity Next, we show that checking if a PSNE exists
for a homogeneous BNPG is hard. The hardness result follows from Theorem 10, where we show that determining the
existence of a PSNE in a special case of the homogeneous
BNPG is NP-complete.
Theorem 4. Determining the existence of a PSNE in a homogeneous BNPG game is NP-Complete.
Next, we consider further restrictions that enable strong
positive algorithmic results—far stronger than for the general
BNPG games.

Games on Complete Graphs
Computing a PSNE We now show that there always exists
a PSNE in homogeneous BNPG games on complete graphs,
and it can be computed in time O(n log n), in contrast to the
O(n2 ) algorithm for the general case.
Theorem 5. Every homogeneous BNPG game on a complete graph has a PSNE, which can be computed in time
O(n log n).
Proof. Our proof is constructive. Without loss of generality,
suppose c1 ≤ c2 ≤ · · · ≤ cn (we can start by sorting players
in this order). If ∆g(0) < c1 , we immediately obtain an equilibrium where no player invests, since ci > ∆g(0) for every
i. If cn ≤ g(n − 1), every player invests is an equilibrium.
If neither of the two cases holds, we initialize x to all-zeros.
Since c1 ≤ ∆g(0), we set x1 = 1. For a subsequent player
i, we set xi = 1 if ci ≤ ∆g(ni ). Note that ni in this case
is the number of players (who choose to invest) with index
smaller than i. We repeat this process for each player in ascending order of ci until we found a certain player m such
that cm > ∆g(nm ). We then set the decisions of player m
and her subsequent players to 0. We argue that the resulting
action profile is a PSNE.
Note that in the above process, we have for player (m − 1),
cm−1 ≤ ∆g(nm−1 ) = ∆g(m − 2), since nm−1 is the number of investing players preceding player (m − 1). For player
m, we have cm > ∆g(nm ) = ∆g(m − 1). Now, for any
player i with i ≤ m − 1, we have ci ≤ ∆g(m − 2) since
ci ≤ cm−1 . Thus, player i will not deviate from her current
decision, which is xi = 1. For any player j with j ≥ m,
we have cj > ∆g(m − 1). That is, player j would not deviate from her current decision xj = 0. The resulting action

profile is then a pure-strategy Nash equilibrium. The proof
implies that the complexity of finding a PSNE is O(n log n),
dominated by the time to sort players in order of ci .
The proof of Theorem 5 is constructive and gives an algorithm to find a PSNE. We term this algorithm SimpleSort.
In fact, SimpleSort outputs an equilibrium with a special
structure, where the first k players (in ascending order of
ci ) will invest and the rest will not, for some k determined
by the algorithm. As this equilibrium is not unique, we next
characterize all PSNE of this game.
Characterizing all PSNE In order to characterize all equilibria, we classify these based on the number of players who
choose to invest in an equilibrium. For an equilibrium x∗ ,
let k be the number of player who choose to invest. We term
such an equilibrium a k-PSNE.
Let I(cond(ci )) be the index set of the players whose
associated ci satisfies a certain condition cond(ci ). Given
a k-PSNE, for a player i who has chosen 1, we have ci ≤
∆g(k − 1) based on the condition in Eqn. (2). For a player
i who has chosen 0, we have ci > ∆g(k). Equivalently, if
ci > ∆g(k − 1) (respectively, ci ≤ ∆g(k)), we know that
player i has chosen 0 (respectively, 1). Based on this, given
any k, we can characterize all possible k-PSNE.
Proposition 6. When ∆g(k) > ∆g(k − 1), a k-PSNE exists
if and only if: (1) there is no ci such that ∆g(k − 1) <
ci ≤ ∆g(k) and (2) |I(ci ≤ ∆g(k − 1))| = k. The resulting
unique k-PSNE is that all players in the set I(ci ≤ ∆g(k −
1)) invest.
We introduce some notation. Let I+ = I(ci ≤ ∆g(k)),
I× = I(∆g(k) < ci ≤ ∆g(k − 1)), and I− = I(ci >
∆g(k − 1)). Let k+ = |I+ |, k× = |I× |, and k− = |I− |.
Proposition 7. When ∆g(k) ≤ ∆g(k − 1), k-PSNE exists
if and only if k× + k+ ≥ k and k+ ≤ k. Specifically, let I×+
be an arbitrary subset of I× with cardinality k − k+ . Then a
k-PSNE is that all players in the set I×+ ∪ I+ invest.
Proof. Consider a k-PSNE for a fixed integer k, where there
are k players decided to invest. Recall from Eqn. (2) that a
player i decides to report if and only if ci ≤ ∆gi (ni ), where
ni is the number of i’s neighbors who decide to invest. As
the underlying graph is complete, ni is the total number of
investing players in the game excluding i. Note that for a
player i who decides to invest, ni = k − 1 while for a player
i who decides not to invest, ni = k. Then it is sufficient
to compare ci associated with each player to ∆g(k) and
∆g(k − 1).
Based on the investing condition in Eqn (2), we have ci ≤
∆g(k − 1) for the player i who decided to invest in a kPSNE. For a player i who decided not to invest, we have
ci > ∆g(k). Equivalently, for an arbitrary player i, we have
two observations:
• if ci > ∆g(k − 1), player i has decided to not to invest;
• if ci ≤ ∆g(k), player i has decided to invest.
Then to check the existence of k-PSNE, it is sufficient
to examine the above two conditions and check whether
there are exactly k players chosen to invest. We divide

the discussion into two cases: ∆g(k) > ∆g(k − 1) and
∆g(k) ≤ ∆g(k − 1), which corresponds to Proposition 5
and Proposition 6, respectively.
Case 1: When ∆g(k) > ∆g(k − 1), if there is a player
i such that ∆g(k − 1) < ci ≤ ∆g(k), a k-PSNE does not
exist. Moreover, a k-PSNE exists only if there are exactly k
players whose associated ci satisfies ci ≤ ∆g(k − 1). And
that k players reporting is a k-PSNE. This proves Proposition
5.
Case 2: When ∆g(k) ≤ ∆g(k − 1), the two values ∆g(k)
and ∆g(k − 1) divide the players into three sets based on ci :
I+ = I(ci ≤ ∆g(k)), I× = I(∆g(k) < ci ≤ ∆g(k − 1)),
and I− = I(ci > ∆g(k − 1)). Let k+ = |I+ |, k× = |I× |,
and k− = |I− |. Then if a k-PSNE exists, all players in I+
will invest and all players in I− will not invest. Furthermore,
to ensure that there are exactly k players investing, there
should be exactly (k − k+ ) players in the set I× choosing to
invest. Thus, a k-PSNE exists if and only if k× + k+ ≥ k
and k+ ≤ k. This proves Proposition 6.
By considering all k from 0 to n, Proposition 6 and Proposition 7 can fully characterize all possible PSNE in polynomial time. We note that Proposition 7 shows that for a given
k, the number of possible k-PNSE could be exponential in
k× . However, we can pick one k-PNSE by arbitrarily (e.g.,
randomly) selecting a subset I×+ from I+ .
The above two propositions also characterize the structure
of the equilibrium action profiles x∗ , which is illustrated in
Fig. 2. Specifically, if we sort the players in ascending order
of ci , an equilibrium x∗ is divided into three regions. The
first (respectively, third) region corresponds to players who
choose 1 (respectively, 0) and the second region is a mixed
zone where some of the players choose 1 and others 0.
invest

mix zone

not invest

Figure 2: Structure of pure-strategy equilibria. Dark squares
denote investing players.
Social Welfare Social welfare is defined as the sum of utilities of all players:
∆

SW(x) =

n
X

Ui (xi , ni ).

(6)

i=1

A common goal is to seek the PSNE with maximum
social welfare—the socially optimal PSNE. Although the
SimpleSort algorithm can always find a PSNE, it is not
necessarily socially optimal. We now use the results in Propositions 6 and 7 to efficiently find a socially optimal PSNE.
For a specific k-PSNE, we have x∗i + n∗i = k, the same
for all players. Thus, the social welfare in a k-PSNE, denoted

as SW(x∗ ; k), can be rewritten as a linear function of x:
∗

SW(x ; k) = n · g(k) −

n
X

ci x∗i .

(7)

i=1

For a fixed k, there are two possible cases, i.e., ∆g(k) >
∆g(k − 1) or ∆g(k) ≤ ∆g(k − 1). For the first case, we can
efficiently compute a unique PSNE based on Proposition 6 if
it exists. For the second case, Proposition 7 states that in an
equilibrium, there are exactly (k − k+ ) players in the index
set I× choosing to invest. As SW(x∗ ; k) is linear in x, it is
maximized when we pick the top-(k − k+ ) players in the set
I× in ascending order of ci and set the corresponding decision
variables xi to 1. That is, for any k, we can either confirm that
a k-PSNE does not exist or efficiently compute the socially
optimal k-PSNE for that fixed k. Thus, by considering k from
0 to n, we can efficiently compute the socially optimal PSNE.

Fully Homogeneous Games on Arbitrary Graphs
In this section, we discuss equilibrium computation in BNPG
games with arbitrary graph structure. As demonstrated in
the counterexample above, a PSNE need not exist even if g
is homogeneous. We now consider the question for a more
restricted class of fully homogeneous BNPG games, where
all players share the parameters c. Further, we restrict g to be
strictly convex. In this case, we show that equilibria always
exist, and all equilibria can be computed efficiently.1 For this
discussion, let D be the maximum degree in G.
Since g is strictly convex, we have ∆g(0) < ∆g(1) <
· · · < ∆g(D). When c ≤ ∆g(0), all players investing is
a unique PSNE. When c > ∆g(0), there is a PSNE with
no one investing; however, other equilibria might exist. To
distinguish, we term the equilibria x∗ = 0 and x∗ = 1 as two
trivial equilibria, and others where at least one player (but not
all) invest are termed non-trivial. The non-trivial equilibria
are closely-related to a k-core of a graph. Specifically, a kcore of a graph G is a maximal induced subgraph H of G,
where each node in H has degree at least k. We have the
following lemma from Bickle [2] charactering the k-core of
a graph.
Lemma 4.1 (Bickle [2]). Given an arbitrary graph G and
an integer k, if a k-core of G exists, it is unique.
The following theorem characterizes the relationship between a non-trivial PSNE and a k-core of the graph G.
Theorem 8. In a fully-homogeneous BNPG game with
strictly convex function g, let x be an action profile and
H be the subgraph of G induced from the nodes corresponding to the investing players in x. If x is a non-trivial PSNE,
then H is a k-core of G.
Proof. If x∗ is a non-trivial PSNE, then we have ∆g(k −
1) < c ≤ ∆g(k) for some integer k ∈ {1, 2, · · · , D}. Thus,
for an arbitrary player who chooses to invest in the equilibrium x∗ , she must be connected to k other players who also
choose to invest. This holds for any player who invests in
1

In this case, the game is a supermodular game [21, 18]. While
supermodular games always have a PSNE, computing one is not
necessarily efficient.

the equilibrium. As a result, the induced subgraph H has
minimum node degree at least k. Now, for any other node
v not in H, it represents a player who decides not to invest.
By the definition of equilibrium, the v must be connected to
fewer than k nodes in H; otherwise, the corresponding player
will change her action to invest. That is, adding v to H will
violate the condition that each node in H has at least degree
k, meaning that H is maximal. Thus, H is a k-core of G.
Note that Theorem 8 does not guarantee the existence of
a non-trivial PSNE. It only states that if a non-trivial PSNE
exists, the corresponding induced subgraph is a k-core of G.
Thus, it provides a guideline to find a non-trivial PSNE for a
specific game – finding the k-core of the underlying graph.
Fortunately, a simple pruning algorithm can efficiently find
the k-core of a given graph provided that it exists. Specifically,
given a graph G and an integer k, the pruning algorithm will
remove all the nodes that have degree less than k iteratively
until no more nodes can be removed. If the remaining set of
nodes is not empty, the resulting subgraph is a k-core; otherwise, a k-core does not exist. Moreover, if a k-core exists, the
corresponding non-trivial PSNE is unique from Lemma 4.1.
Now we are able to fully characterize the equilibria in a fully
homogeneous BNPG game.
Corollary 9. For a fully homogeneous BNPG game parameterized by (c, g), where g is strictly convex, we have:
• when c ≤ ∆g(0), x∗ = 1 is a unique trivial PSNE;
• when c > ∆g(D), x∗ = 0 is a unique trivial PSNE;
• otherwise, there is always one trivial PSNE x∗ = 0 and
possibly one non-trivial PSNE corresponding to the unique
k-core of graph G, where k satisfies ∆g(k − 1) < c ≤
∆g(k).
The algorithm to find all possible equilibria is then straightforward. Given a fully homogeneous game, we can check if
there is an integer k such that ∆g(k − 1) < c ≤ ∆g(k). If
it is the case, we can use the pruning algorithm to find the
k-core of graph G (if it exists), corresponding to a non-trivial
PSNE. For the other two special cases, we can find the two
trivial PSNE. As there are at most two PSNE of the game,
we can easily identify the socially optimal equilibrium. Finally, we show that convexity of g(·) is necessary to find all
equilibria of this game in polynomial time.
Theorem 10. In a fully-homogeneous BNPG game with general function g, determining the existence of a PSNE is NPComplete.
Proof. Given an action profile x it takes polynomial time to
certify if it is a PSNE, so the problem is in NP. When x = 0
or 1 it takes polynomial time to check if it is a PSNE. Thus,
we consider the problem to determine if there is a non-trivial
x (x 6= 0 and 1) such that it is a PSNE. We construct a
reduction from the K - CLIQUE (KC) problem. Given a graph
G = (V 0 , E 0 ), the KC problem asks if there is a clique of
size at least k in G. For an arbitrary instance KC(G, k), we
construct a graph H = (V, E). First, we add a clique of size
M to H, where M is a large integer satisfying M  |V 0 |.
The M nodes are denoted by a set T . For every node i ∈ T
we connect it to every node in V 0 .

5

1e 2

1.5
1.0
0.5
0.0

0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9

Figure 3: Averaged  of the approximate PSNE (in % units).
Facebook network The experimental results are shown in
Figure 3, where we vary γ. Each bar is the averaged  of the
approximate PSNE computed using Algorithm 3. We omit
the two corner cases of γ = 0 and γ = 1 because in all of
these instances our algorithm returned an exact PSNE. The
main takeaway from these results is two-fold: first, that even
when populations are mixed so that a PSNE is not guaranteed
to exist, there is usually an approximate PSNE with a small
 (maximum benefit from deviation), and second, that our
heuristic algorithm finds good approximate PSNE (observe
that even outliers have  < 0.02).
1.0
0.8
0.6
0.4
0.2
0.0 0.1

1.2
1.5
2.0

0.3 0.5 0.7 0.9 1.0

1.0
0.8
0.6
0.4
0.2
0.0 0.1 0.3 0.5 0.7 0.9 1.0

investing ratio

where the player is indifferent between investing and not
investing when ni = k − 1 + M . The best-response policy
above is realizable, for example, by a function g(x) satisfying
∆g(x) = c when x = k − 1 + M and ∆g(x) = α when
x 6= k − 1 + M , where 0 < α < c.
Suppose a k-clique in G is given. Denote the players in
this k-clique by S. We claim that letting the players in S ∪ T
invest and others not invest is a non-trivial PSNE. For a player
i ∈ S, she is connected to the M investing players in T , as
well as the other k − 1 investing players in S, which means
ni = k − 1 + M and she will not deviate. Similar argument
shows that for any player t ∈ T she will not deviate because
nt = k − 1 + M . For a player j ∈ V 0 \ S, the number nj
of her investing neighbors falls into one of the three cases:
nj > k − 1 + M , nj = k − 1 + M , and nj < k − 1 + M ,
so she will not deviate.
Another direction is to show that given a non-trivial PSNE
x, there is a clique of size at least k in G. First, there must
be at least one investing player since the PSNE is non-trivial.
Next, we argue there must be at least one investing player
in T . If all the players in T were not investing, then for any
player i ∈ V 0 we have ni < k − 1 + M , so all players in
V 0 ∪ T would not invest, which contradicts the fact that x is
a non-trivial PSNE. Furthermore, We claim that all players
in T are investing players. Suppose the set T is partitioned
into two disjoint sets T = S1 ∪ S0 , where players in S1
invest while players in S0 not. Then for any player i ∈ S1
we have ni = k − 1 + M . Since M is a large integer, S0
must be an empty set, otherwise the player i cannot have
enough investing neighbors. Due to the best-response policy
in Eq. (8), there are exactly k investing players in V 0 , which
are denoted by S. For any player i ∈ S we know ni =
k − 1 + M , so the player i must be connected to the other
k − 1 players in S, which shows that S is a k-clique.

with concave and convex gi . This mix is determined using a
parameter γ ∈ [0, 1], which is the probability that a particular
player i’s gi is concave; consequently, higher γ implies a
larger fraction of the population with convex utility functions.
For each value of γ we simulated 1000 BNPG games. We
first conduct experiments on a Facebook network [16], which
is a connected graph with 4093 nodes and 88234 edges. Then,
we experiment on synthetic networks to study the impact of
network topologies on the fraction of players reporting in
PSNE.

investing ratio

Next, we specify a homogeneous BNPG on H. Let the
players in T ∪ V 0 share the same cost c. For each player
i ∈ T ∪ V 0 the best-response policy is

1, ni = k − 1 + M
xi = 0, ni = k − 1 + M
(8)

0, otherwise,

1.2
1.5
2.0

Figure 4: Ratio of investing players when γ = 0 (left) and
γ = 1 (right).

Experiments

In this section we conducted experiments to show the effectiveness of Algorithm 3 for finding approximate PSNE in
general BNPG games. The parameters ci are sampled from
the uniform distribution on [0, 1]. In our experiments we assume gi = λi hi where λi is sampled uniformly at random
on [0, 1], and hi are either convex or concave, corresponding
to strategic substitutes and complements, respectively [11].
If gi (x) is convex, it is sampled from a set of convex functions {−α log (x + 1)β } by uniformly at random sampling
α and β from {0.1, 0.3, 0.5, 0.7, 0.9} and {1.2, 1.5, 2.0}, respectively. Similarly, if gi (x) is concave it is sampled from a
set of concave functions {−αxβ } by sampling α and β from
the same sets. We normalize the values of the utility functions
Ui to [0, 1] when evaluating the approximation quality of an
-PSNE. In each simulated game, we feature a mix of players

Next, we study the impact of our three parameters, α, β,
and γ, on the fraction of players reporting in PSNE. Figure 4
presents the results for γ = 0 (left) and γ = 1 (right) (these
are the two cases where we can compute the exact PSNE, as
mentioned above). We can note that in both cases, increasing α or β leads to increasing fraction of investing players.
This is because higher values of either increase the rate of
change of the utility function as more players invest, and consequently network effects lead to higher overall investment.
The most dramatic difference, however, is between γ = 0
and γ = 1. In the former case, a relatively small fraction
ultimately invest, whereas γ = 1 leads to a great deal of equilibrium investment, particularly for sufficiently large α and β.
This is because convex gi imply that as more players invest,
the marginal benefits to investment increase, and therefore

exponent r
local clustering coeff.

BA-1

BA-2

BA-3

2.7167

2.2789

2.0374

SW-1

SW-2

SW-3

0.3667

0.3893

0.4070

Table 2: Details about the BA and SW networks.
The experimental results on BA networks are showed in
Figure 5. The columns from left to right correspond to results
on BA-1, BA-2, and BA-3. Note that as r decreases it is more
likely to have high-degree nodes. The top row (resp. bottom
row) is the case where γ = 0 (resp. γ = 1). At the bottom
row, when α and β are fixed, there are more high-degree
nodes as r decreases, thus the investing decisions of these
high-degree nodes can encourage more nodes to invest, which
results in an overall increasing trend to invest. The results at
the top row have the opposite trend, where more free riders
occur due to the increase of high-degree nodes, which leads
to an overall decreasing trend to invest. The experimental
results for SW networks are showed in Figure 6. The columns
from left to right correspond to results on SW-1, SW-2, and
SW-3. Note that a larger local clustering coefficient leads to
denser local structures. Intuitively, when γ = 1, an investing
player’s decision can encourage more neighbors to invest
as the local structure becomes denser. On the other hand,
when γ = 0, a denser local structure can also lead to more
free riders. This intuition is supported by the overall trend
exhibited in Figure 6.

6

Conclusion

We study binary networked public goods games from an algorithmic perspective. We show that pure strategy equilibria
may not exist even in highly restricted cases, and checking equilibrium existence is computationally hard in general.
However, we exhibit a number of important special cases in

1.0

1.0

1.0
0.8
0.6
0.4
0.2
0.0 0.1

1.2
1.5
2.0

0.8
0.6
0.4
0.2
0.0 0.1

0.3

0.5

0.7

0.9

0.5

0.7

0.9

investing ratio

0.9

1.0

1.0
1.2
0.8
1.5
0.6
2.0
0.4
0.2
0.0 0.1 0.3

0.5

0.7

0.9

1.0

investing ratio

0.7

investing ratio
0.5

1.0
1.2
0.8
1.5
0.6
2.0
0.4
0.2
0.0 0.1 0.3

investing ratio

investing ratio
investing ratio

1.0
1.2
0.8
1.5
0.6
2.0
0.4
0.2
0.0 0.1 0.3

1.0

1.0
0.8
0.6
0.4
0.2
0.0 0.1

0.5

0.7

0.9

1.0

1.2
1.5
2.0

0.3

0.5

0.7

0.9

1.2
1.5
2.0

0.3

0.7

0.9

1.0

1.0

1.0
0.8
0.6
0.4
0.2
0.0 0.1

1.2
1.5
2.0

0.3

0.5

0.7

0.9

0.5

0.7

0.9

investing ratio

0.5

1.0
1.2
0.8
1.5
0.6
2.0
0.4
0.2
0.0 0.1 0.3

1.0

1.0
1.2
0.8
1.5
0.6
2.0
0.4
0.2
0.0 0.1 0.3

0.5

0.7

0.9

1.0

investing ratio

1.0
0.8
0.6
0.4
0.2
0.0 0.1

investing ratio

1.0
1.2
0.8
1.5
0.6
2.0
0.4
0.2
0.0 0.1 0.3

investing ratio

investing ratio

Figure 5: Ratio of investing players when γ = 0 (top row)
and γ = 1 (bottom row) on BA networks. From left to right:
BA-1, BA-2, and BA-3.

investing ratio

equilibrium may be seen as a cascade of investment decisions
that ultimately captures most of the community.
Synthetic networks We conduct experiments on two types
of synthetic networks. The first type is the Barabasi-Albert
network (BA) [1]. BA is characterized by its power-law degree distribution, where connectivity is heavily skewed towards high-degree nodes. The power-law degree distribution,
P (k) ∼ k −r , gives the probability that a randomly selected
node has k neighbors. We consider three variants of the BA
network with different exponents r. We also experiment on
Small-World (SW) network [23]. The Small-World network
is well-known for balancing shortest path distance between
pairs of nodes and local clustering in a way as to qualitatively
resemble real networks. We consider three variants of the SW
network, where they differ in the local clustering coefficients.
The details about BA and SW networks are listed in Table 2.
We use the same experimental setup as the one for Facebook
network. Note that we only consider γ = 0 and γ = 1, where
a PSNE can always be found by Algorithm 3. When γ = 1, a
player has higher incentive to invest as more neighbors invest,
while the incentive structure is the opposite when γ = 0.

1.0

1.0
0.8
0.6
0.4
0.2
0.0 0.1

0.5

0.7

0.9

1.0

1.2
1.5
2.0

0.3

0.5

0.7

0.9

1.2
1.5
2.0

0.3

Figure 6: Ratio of investing players when γ = 0 (top row)
and γ = 1 (bottom row) on Small-World networks. From left
to right: SW-1, SW-2, and SW-3.
which such equilibria exist, can be efficiently computed, and
even where socially optimal equilibria can also be efficiently
found. Finally, we presented a heuristic approach for approximately solving such games, shown to be highly effective in
our experiments.

Acknowledgments
This work was partially supported by the National Science
Foundation (grant IIS-1903207) and Army Research Office
(MURI grant W911NF1810208).

References
[1] Barabási, A.-L. 2009. Scale-free networks: a decade and
beyond. science 325(5939):412–413.
[2] Bickle, A. 2010. The k-cores of a graph.
[3] Bramoullé, Y., and Kranton, R. 2007. Public goods in
networks. Journal of Economic Theory 135(1):478–494.
[4] Buragohain, C.; Agrawal, D.; and Suri, S. 2003. A game
theoretic framework for incentives in p2p systems. In
Proceedings Third International Conference on Peer-toPeer Computing (P2P2003), 48–56. IEEE.
[5] Burt, R. S. 1987. Social contagion and innovation:
Cohesion versus structural equivalence. American journal
of Sociology 92(6):1287–1335.
[6] Chwe, M. S.-Y. 2000. Communication and coordination in social networks. The Review of Economic Studies
67(1):1–16.
[7] Dallasta, L.; Pin, P.; and Ramezanpour, A. 2011. Optimal equilibria of the best shot game. Journal of Public
Economic Theory 13(6):885–901.

[8] Daskalakis, C.; Goldberg, P. W.; and Papadimitriou, C. H.
2009. The complexity of computing a nash equilibrium.
SIAM Journal on Computing 39(1):195–259.
[9] Elkind, E.; Goldberg, L. A.; and Goldberg, P. 2006.
Nash equilibria in graphical games on trees revisited. In
Proceedings of the 7th ACM Conference on Electronic
Commerce, 100–109. ACM.
[10] Feick, L. F., and Price, L. L. 1987. The market maven:
A diffuser of marketplace information. The Journal of
Marketing 83–97.
[11] Galeotti, A.; Goyal, S.; Jackson, M. O.; Vega-Redondo,
F.; and Yariv, L. 2010. Network games. The review of
economic studies 77(1):218–244.
[12] Gottlob, G.; Greco, G.; and Scarcello, F. 2005. Pure
nash equilibria: Hard and easy games. Journal of Artificial
Intelligence Research 24:357–406.
[13] Kearns, M.; Littman, M. L.; and Singh, S. 2013.
Graphical models for game theory. arXiv preprint
arXiv:1301.2281.
[14] Kollock, P. 1998. Social dilemmas: The anatomy of
cooperation. Annual review of sociology 24(1):183–214.
[15] Komarovsky, Z.; Levit, V.; Grinshpoun, T.; and Meisels,
A. 2015. Efficient equilibria in a public goods game. In
IEEE/WIC/ACM International Conference on Web Intelligence and Intelligent Agent Technology, 214–219.
[16] Leskovec, J., and Mcauley, J. J. 2012. Learning to
discover social circles in ego networks. In Advances in
neural information processing systems, 539–547.
[17] Levit, V.; Komarovsky, Z.; Grinshpoun, T.; and Meisels,
A. 2018. Incentive-based search for efficient equilibria
of the public goods game. Artificial Intelligence 262:142–
162.
[18] Manshadi, V. H., and Johari, R. 2009. Supermodular
network games. In Communication, Control, and Computing, 2009. Allerton 2009. 47th Annual Allerton Conference
on, 1369–1376. IEEE.
[19] Morgan, R. E., and Truman, J. L. 2017. Criminal victimization. Technical report, Bureau of Justice Statistics.
[20] Santos, F. C.; Santos, M. D.; and Pacheco, J. M. 2008.
Social diversity promotes the emergence of cooperation
in public goods games. Nature 454(7201):213.
[21] Sundararajan, A. 2007. Local network effects and
complex network structure. The BE Journal of Theoretical
Economics 7(1).
[22] Valente, T. W. 1996. Network models of the diffusion
of innovations. Computational & Mathematical Organization Theory 2(2):163–164.
[23] Watts, D. J., and Strogatz, S. H. 1998. Collective dynamics of ‘small-world’networks. nature 393(6684):440.

Appendix
Algorithms for Asynchronous-BR and Evolve
Algorithm 4 Asynchronous-BR
1: Input: x
2: for i = 1, · · · , n do
3:
if ∆gi (ni ) ≥ ci then
4:
xi = 1
5:
else
6:
xi = 0
7:
end if
8: end for
Algorithm 5 Evolve
1: Input: x, k
2: Initialize: 0 = M, x0 = 0
3: for i = 1, · · · , k do
4:
 ← MAX E PSILON(x)
5:
if  = 0 then return x end if
6:
if  < 0 then 0 =  and x0 = x end if
7:
x ← Asynchronous-BR(x)
8: end for
9: return x0

. M : a large positive number
. MAX E PSILON(x): maximum deviation of x from being a PSNE
. Found a PSNE

Algorithm TreePSNE
Algorithm 6 TreePSNE
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:

Input: a BNPG game (G, U).
Initialize: TR
Compute a Depth-first order O (start with leaves and end with the root)
for Y in O do
if Y is the root then
Compute n0R conditioned on xR .
Compute the best responses of the root by a modified version of Algorithm 2.
else if Y is a leaf node then
Compute the conditonal best-response table TY by Algorithm 1.
Pass TY to its parent
else Y is an internal node
Compute the conditonal best-response table TY by Algorithm 2.
Pass TY to its parent
end if
end for
Let Ô be the reversed Depth-first order.
for Y in Ô do
if Y is the root then
Choose an action xR ∈ TR .
Determine the actions of its children by the best-responses tables passed from them.
else if Y is a leaf node then
Pass
else Y is an internal node
Determine the actions of its children by the best-responses tables passed from them.
end if
end for
Return: A PSNE consists of the actions of the nodes.

