LaserTank is NP-complete

arXiv:1908.05966v1 [cs.CC] 16 Aug 2019

Per Alexandersson1[0000−0003−2176−0554] and Petter Restadh1[0000−0002−3411−8766]
KTH The Royal Insitute of Technology, 100 44 Stockholm, Sweden
per.w.alexandersson@gmail.com
petterre@kth.se

Abstract. We show that the classical game LaserTank is NP-complete, even when
the tank movement is restricted to a single column and the only blocks appearing
on the board are mirrors and solid blocks. We show this by reducing 3-SAT instances to LaserTank puzzles.
Keywords: NP-completeness · LaserTank · 3-SAT

1 Introduction
From Wikipedia: “LaserTank (also known as Laser Tank) is a computer puzzle game
requiring logical thinking to solve a variety of levels”. It was first released on the Windows platform in 1995, and a similar game was released in 1998 for the graphing calculator Texas Instruments Ti-83, under the name Laser Mayhem1 . To our knowledge,
the complexity of LaserTank has not been studied before, while several other classical
games have been shown to be NP-complete, NP-hard or PSPACE-complete. For example, Sokoban [2], Tetris [3], Rush Hour [4], and Minesweeper [5] to list a few.
In this short note, we prove the following.
Theorem 1. LaserTank is NP-complete.
It should be noted that one can perhaps apply more general meta-theoretical approaches for puzzle games and planning games in particular, to prove NP-completeness.
It is likely that the framework by G. Viglietta [6] — which can be applied to games such
as Boulder Dash, Pipe Mania and Starcraft — can successfully be applied to LaserTank as well. We opted for a self-contained hands-on approach where 3-SAT is reduced
to LaserTank. Furthermore, we only use a small subset of the available pieces in the
original game, as well as restrict the movement of the tank in two directions. These
restrictions have the benefit that they imply that the Laser Mayhem variant is also NPcomplete.
1.1 Short background on 3-SAT
A 3-SAT expression 𝐸 is a conjunction of clauses, where each clause involves exactly
three distinct literals. A literal is either a boolean variable, or its negation. The 3-SAT
problem states: Determine if 𝐸 is satisfiable — that is, there is an assignment of truth
1

https://www.ticalc.org/archives/files/fileinfo/95/9532.html

2

P. Alexandersson, P. Restadh

values to the variables that makes 𝐸 true. For example, 𝐸 = (𝑥∨𝑦∨¬𝑧)∧(¬𝑥∨¬𝑦∨¬𝑧)∧
(𝑥 ∨ ¬𝑦 ∨ 𝑧) is such a conjunction, and the assignment 𝑥, 𝑧 = 𝚝𝚛𝚞𝚎, 𝑦 = 𝚏𝚊𝚕𝚜𝚎 shows
that 𝐸 is satisfiable. Determining satisfiability of a 3-SAT expression is an NP-complete
problem [1].

2 LaserTank
LaserTank is a turn-based single-player puzzle game played on a 2-dimensional grid
(the board), where in each turn, the player either moves the tank, or fires a laser from
the tank. The laser interacts with different pieces on the board, and the goal is to hit
a certain piece with the laser. The pieces2 we use are mirrors {◺, ◹, ◿, ◸}, solid
⨁
blocks ■, movable blocks ⊡, the tank ⌲, and the goal . The tank is the only piece
directly controlled by the player, and the laser exits the tank from the front, which is the
pointy end of ⌲. In our version, the tank is restricted to sideways movement only, see
Example 1 The tank can fire a laser from the front. If the laser hits a mirror on a slanted
edge it is reflected. When a mirror is hit on one of the two (non-reflective) short edges
by the laser, the mirror is pushed in the direction of the laser. A movable block is pushed
one step if it is hit by the laser. A movable block or a mirror is only pushed if the tile
directly behind it is empty. The aim of the puzzle is to hit the goal piece with the laser.
The solid blocks do not allow lasers or the tank to pass through and they do not move
when hit by the laser. The following example shows all game mechanics in action.
Example 1. Here is a small instance of the problem, with a step-by-step solution. The
tank fires a laser which moves a mirror (1), then takes one step sideways, (2). It then
shoots a laser at the movable block (3), and finally moves in position to have a clear shot
of the goal (4).
■■■■■
■■■■■
■■■■■
■■■■■
■■■■■
⌲◸
◹
⌲
◸
◹
◸
◹
◸
◹
◸ ⨁
◹
(1)
(2)
(3)
(4)
⨁
⨁
⨁
⨁
←←←←←→
←
←←←←←→
← ⌲ ⊡
←←←←←→
← ⌲
←
⊡
⊡
⊡ ←←←←←→
⊡
◿
◿
◿
◿
⌲ ◿
■■■■■
■■■■■
■■■■■
■■■■■
■■■■■
⤑

Our goal is now to construct puzzles which imitates an instance of 3-SAT. We employ so called gadgets that emulate boolean operations. Below, we let ⤑, indicate the
inputs to the gadgets (considered as boolean variables), and {⤑∗, } indicate inputs that
are always available as clear shots from the tank. The latter are used for producing the
output of the gadget.
The and gadget. The configuration in Figure 1a serves as our and-gadget. We need
to shoot through both 𝐴 and 𝐵 in order to allow for 𝐴 ∧ 𝐵 = 𝑋 as output. Notice that
the two movable blocks can only be moved up, right and down. If we want the gadget to
produce an output through 𝑋, all movable blocks must be moved out of the way. This
can only be accomplished if the movable block must have been moved to the right via
activation from both 𝐴 and 𝐵, which shows that the gadget is indeed an and-gadget. The
and-gadget can easily be generalized to more than two inputs.
⤑∗

2

For a complete list of pieces available in the official game,
https://lasertanksolutions.blogspot.com/p/in-my-opinionlaser-tank-is-best-logic.html

see

LaserTank is NP-complete

𝐶
■
◸■
→𝑋
◿■
■
■■

(b) THREE-OR

■■
𝑋 ⤑∗◹
■
¬𝑋⤑∗⊡
■
■◺
■■

■■
■■
■ ◸ →¬𝑋
◿■
■■
→𝑋
■■

⤑∗

⤑

𝐴
𝐵
■
■
■
■◸■◸■
■
⤑∗
⤑∗
◿
⤑∗◿ ■ ■ ■
⤑

■
→𝑋
■
■
■
■
■
■
■

⤑

■■
■◸
■
𝐵 ⤑⊡
■
𝐴 ⤑⊡
■
⤑∗◿
■■

3

■◹
𝑋 ⤑
◸◿
↓
(d) SWITCH

(c) LITERAL

(a) AND

Fig. 1. The and-gadget, three-or-gadget, literal-gadget, and switch-gadget.

The three-or gadget is depicted in Figure 1b. If either of the inputs 𝐴, 𝐵 or 𝐶 are
available, then 𝑋 allows for output. The only way to produce output from 𝑋 is to move
a ◸ to the same row as 𝑋. The ◸ can only be moved into that row from above and thus
we must have some input from 𝐴, 𝐵 or 𝐶 in order for a laser to pass out through 𝑋. Thus
the three-or gadget works the way intended.
The literal gadget is depicted in Figure 1c. This gadget emulates a literal, with
two different mutually exclusive outputs depending on the choice of value of the literal.
To unlock 𝑋 as output, fire once through ¬𝑋 first. This moves the movable block out of
the way but prevents ¬𝑋 from being available as output. Similarly for ¬𝑋.
The switch gadget is depicted in Figure 1d. The switch-gadget is our main building block for encoding an instance of a 3-SAT problem. It allows for the input 𝑋 to be
available first as output to the right, then redirected down. This allows 𝑋 to be used in
multiple or-clauses.
Example 2. In the puzzle in Figure 2, only a single “input”, 𝑋, is available. However,
with the switches we can redirect input 𝑋 to activate the and gadget. Notice the two ◹
pieces that are required to activate the switches and that the rightmost switch gadget
must be used first in order to solve the puzzle. This is also true in the general setup,
where switches should be used from right to left.
2.1 The reduction
A 3-SAT expression may now be encoded as a LaserTank puzzle as follows. There is one
literal-gadget for each variable appearing in the expression, a three-or-gadget for
each or-clause, and a single and-gadget with multiple inputs is used to bind all together.
The puzzle is designed such that the output of the and-gadget is the only way to hit the
goal. The general layout of such a puzzle is shown in Figure 2. For each three-or-clause in
the 3-SAT expression, three switches are placed on the board corresponding to the three
literals involved. In other words, the clauses of the 3-SAT expression are encoded via
switch-gadgets. The switches can always be activated via the ◹ pieces at the top of the
board as in Figure 2. As a concrete example, the expression (𝐴 ∨ 𝐵 ∨ ¬𝐶) ∧ (𝐴 ∨ ¬𝐵 ∨ 𝐶)
is encoded as the puzzle shown in Figure 3.

𝙾𝚁

𝙰𝙽𝙳

⋱
𝙾𝚁
𝙾𝚁

𝑋𝑛

⋮

𝑋2

𝑋1

■■■■■
◹■■
■
■
■
■◹
■
■
◸◿
■
■
■
■■■
⊡
◹■
■
■
■
⨁
■■
■
■■■■■

⌲

■■■■■■
⌲
◹
■■■
■■■■◹
𝑋 ⤑∗
■■■◸◿
◹■
■
■
■
■◺
⊡
■■■
■
■
■■■■■■

⨁

P. Alexandersson, P. Restadh

◹
◹◹
◹
◹◹

4

Fig. 2. Left: A small puzzle showing the use of two switch-gadgets and one and-gadget. Right:
Layout of a general 3-SAT puzzle. Above each or-gadget are three switches, corresponding to the
three literals involved on the or-clause.

The following lemma shows that solving LaserTank puzzles can be done in polynomial time with a non-deterministic Turing machine. Hence LaserTank is in NP.
Lemma 1. A solution consisting of 𝑘 steps to a LaserTank puzzle on a board of size 𝑛
can be verified in time 𝑂(𝑘𝑛).
Proof. It is straightforward to show that the laser movement is time-reversible. This
implies that it is impossible for a laser shot by the tank to end up in an “infinite loop”
while being reflected by mirrors. Remember also that the laser stops as soon as it hits a
solid block, a movable block, or moves a mirror. It follows that after firing the laser, it
takes less than 4𝑛 steps before the laser finds its final destination, where 𝑛 is the number
of tiles on the board. Simulating a sequence of 𝑘 moves thus requires 𝑂(𝑘𝑛) time.
From our construction, it is a straightforward calculation to see that given a 3-SAT
expression with 𝑉 variables and 𝐶 clauses gives a puzzle contained on a board with size
(7𝑉 + 9𝐶 + 4)(7𝐶 + 9). This is evidently polynomial in the size of the expression.
Proof (of Theorem 1). A 3-SAT problem can be converted to a LaserTank puzzle in
polynomial time since the board size is a polynomial in the number of variables and
clauses. Furthermore, a solution to such a LaserTank puzzle can easily be translated back
to a solution of the original 3-SAT problem in polynomial time, by simply performing
all the steps. Note that a LaserTank puzzle solution might not decide the truth value
of some variables (see caption of Figure 3), in which case, one may simply let these
values be true. According to Lemma 1, the translation of a puzzle solution to a 3-SAT
solution only requires a polynomial time in the input (number of steps). This shows that
LaserTank is at least as hard as 3-SAT. Finally, Lemma 1 shows that a solution can be
verified in polynomial time and hence LaserTank is NP-complete.
Notice that in both the and– and literal-gadget, each movable block can be replaced with a ◸-mirror without changing the behavior of the gadget. Thus Theorem 1 is

◸◿■■■■■
⨁
■◸
■
■
■■■
⊡
■
■
■
■
■
■
■
■■
■
◸■■
■
⊡
■
◿■■
■
◿
■■
■
◿■■■■■■
■
◿■
■■■
■■■■■■■■■■■■■■■■■■■■■■■■

■◹

5

■■■■■■■■■■■■■■■■■
⌲
◹
◹
◹
◹
◹
■■■■
𝐴
⤑◹■■
■
■◸
¬𝐴 ⤑ ⊡
◿■
■
■■
■◹
■◹
■◺
■■■■
◸◿
◸◿
■■■■
𝐵
⤑◹■■
■◹
■
■◸
¬𝐵 ⤑ ⊡
◿■
◸◿
■
■■
■◹
■◺
■■■■
◸◿
■■■■
𝐶
⤑◹■■
■◹
■
■◸
¬𝐶 ⤑ ⊡
◿■
◸◿
■
■■
■◺
■■■■
■
■
■
■
■◸■◸■◸■
■
◿■
◿
■
◿■■■■■
■
■
■
■◸■◸■
■

■■■■■■■
◹

LaserTank is NP-complete

Fig. 3. The puzzle corresponding to the expression (𝐴 ∨ 𝐵 ∨ ¬𝐶) ∧ (𝐴 ∨ ¬𝐵 ∨ 𝐶). Note that if
𝐴 = 𝚝𝚛𝚞𝚎, the expression is satisfied. Thus this particular puzzle can be solved without deciding
truth values for the variables 𝐵 and 𝐶, and the movable blocks in the 𝐵 and 𝐶 variable gadgeds
do not need to be moved.

valid even in the case when restricting to puzzles without movable blocks. Furthermore,
we can extend Theorem 1 to the case where the tank can turn and move in all four directions. To do so, we need to make sure the tank only has access to the same inputs as
in the previous setup. This can be done by inserting additional rows in the puzzle such
that every other row is empty, and then inserting two columns in with the pattern ◹◸
◺◿
between the initial position of the tank and the rest of the board. We leave the details to
the reader.

References
1. Cook, S.A.: The complexity of theorem-proving procedures. In: Proceedings of the Third Annual ACM Symposium on Theory of Computing. pp. 151–158. STOC ’71, ACM, New York,
NY, USA (1971). https://doi.org/10.1145/800157.805047
2. Dor, D., Zwick, U.: SOKOBAN and other motion planning problems. Computational Geometry 13(4), 215–228 (Oct 1999). https://doi.org/10.1016/s0925-7721(99)00017-6
3. Erik D. Demaine, S.H., Liben-Nowell, D.: Tetris is hard, even to approximate. Tech. Rep. MITLCS-TR-865, MIT, Cambridge (2002), https://arxiv.org/abs/cs/0210020
4. Flake, G.W., Baum, E.B.: Rush Hour is PSPACE-complete, or “Why you should generously
tip parking lot attendants”. Theoretical Computer Science 270(1-2), 895–911 (Jan 2002).
https://doi.org/10.1016/s0304-3975(01)00173-6
5. Kaye, R.: Minesweeper is NP-complete. The Mathematical Intelligencer 22(2), 9–15 (Mar
2000). https://doi.org/10.1007/bf03025367
6. Viglietta, G.: Gaming is a hard job, but someone has to do it! Theory of Computing Systems
54(4), 595–621 (Aug 2013). https://doi.org/10.1007/s00224-013-9497-5

