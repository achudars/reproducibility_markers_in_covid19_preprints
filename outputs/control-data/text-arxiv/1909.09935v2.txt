1

Strapdown Attitude Computation: Functional
Iterative Integration versus Taylor Series Expansion
Yuanxin Wu and Yury A. Litmanovich

Abstract— This paper compares two basic approaches to solving ordinary differential equations, which form the basis for attitude
computation in strapdown inertial navigation systems, namely, the Taylor series expansion approach that was used in its low-order form
for deriving all mainstream algorithms and the functional iterative integration approach developed recently. They are respectively
applied to solve the kinematic equations of major attitude parameters, including the quaternion, the Rodrigues vector and the rotation
vector. Specifically, the mainstream algorithms, which have relied on the simplified rotation vector without exception, are considerably
extended by the Taylor series expansion approach using the exact rotation vector and recursive calculation of high-order derivatives.
The functional iterative integration approach is respectively implemented on both the normal polynomial and the Chebyshev polynomial.
Numerical results under the classical coning motion are reported to assess all derived attitude algorithms. It is revealed that in the
relative frequency range when the coning to sampling frequency ratio is below 0.05-0.1 (depending on the chosen polynomial truncation
order), all algorithms have the same order of accuracy if the same number of samples are used to fit the angular velocity over the iteration
interval; in the range of higher relative frequency, the group of Quat/Rod/RotFIter algorithms (by the functional iterative integration
approach combined with the Chebyshev polynomial) perform the best in both accuracy and robustness, thanks to the excellent numerical
stability and powerful functional representation capability of the Chebyshev polynomial.
Index Terms—Attitude reconstruction, Chebyshev polynomial, Functional iterative integration, Taylor series

I. INTRODUCTION
Attitude information is vitally important for moving objects in many areas including unmanned vehicle navigation and control,
virtual/augmented reality, satellite communication, robotics, and computer vision [1]. Integrating gyroscope-measured angular
velocity information is an essential and self-contained way to acquire the attitude, rotation or orientation [2-5]. A number of
orientation parameters have been used for attitude computation, including but not limited to the Euler angle, the rotation vector,
the direction cosine matrix and the quaternion. Attitude computation is in essence to numerically solve the ordinary differential

The first author of the paper was supported in part by National Key R&D Program of China (2018YFB1305103) and National Natural Science
Foundation of China (61673263). A short version will be presented at IEEE/ION Position Location and Navigation Symposium (PLANS) in
2020.
Authors’ address: Yuanxin Wu, Shanghai Key Laboratory of Navigation and Location-based Services, School of Electronic Information and
Electrical Engineering, Shanghai Jiao Tong University, Shanghai, China, 200240, E-mail: (yuanx_wu@hotmail.com); Yury A. Litmanovich,
Central Scientific and Research Institute “Elektropribor”, Saint Petersburg, Russia, 197046, E-mail: (yulitman@mail.ru).

2
equations of these attitude parameters. In the early years of strapdown inertial navigation systems, Savage [6] tried the Picard-type
iterative technique to integrate the direction cosine rate equation, and the NASA technical report [7] made the angular velocity
polynomial approximation from a sequence of gyroscope outputs and then integrated the direction cosine matrix rate by the RungeKutta method. Shortly after in the 1970s, the modern-day strapdown attitude algorithm structure was established on the Taylor
series expansion approach by Jordan and Bortz [8, 9], which, without exception, has relied on the approximate rotation vector for
incremental attitude update [10-17]. In parallel, a number of related fields employ the quaternion to deal with attitude computation,
e.g., robotics [18, 19], space applications [20] and computational mathematics [21-23], where the structure-preserving attribute of
geometric integration is mostly concerned.
It has long been believed that the modern-day attitude algorithm is already good enough for applications [2, 13, 15]. However, the
present-day dynamic applications and the future precision gyroscopes [24, 25] demand more accurate attitude algorithms, in view
of the pratically limited gyroscope output rate and the fundamental approximation of modern-day algorithms. In principle, the
recent advances in [26-32] have shown that higher attitude accuracy can be achieved by dealing with better or exact rate forms of
attitude parameters and using high-order numerical integration methods [33-35]. For instance, the impact of commonly-neglected
third term in the rotation rate vector was evaluated in [36] and it was partially incorporated in the algorithms to gain significant
accuracy in dynamic applications [27, 37]. The Rodrigues vector and the quaternion were used for attitude computation by way of
functional iterative integration and Chebyshev polynomial approximation [29-31]. The functional iterative integration approach
combined with Chebyshev polynomial approximation was developed independently in the navigation community [29-31, 38-41],
and lately found to closely resemble the so-called Picard-Chebyshev method that was dated back to as early as 1960s [42]. In the
1980s-1990s and even quite recently, it was employed and advanced by researchers in the field of astrodynamics for orbital
determination [43-46]. The Picard iterative technique actually originated from the Picard–Lindelöf theorem that has been
commonly used to prove the existence and uniqueness of numerical solutions of ordinary differential equations [47], but it has
been hardly exploited in engineering applications because the repeated computation of integrals are often conceived to be
inconvenient and tedious [48]. The Taylor series method experiences a similar story [48] in that it is conceptually easy to work
with but the high-order derivatives are taken as being tedious and complicated to calculate. To avoid the need for high-order
derivatives, the Runge-Kutta methods were thus devised while attempting to retain the accuracy of the Taylor series approximation
[33]. The seminal paper by Miller [10] used a low-order Taylor series with low-order angular velocity approximation to solve the
approximate rotation vector rate equation. Very recently, the Taylor series approach is employed to directly solve the direction
cosine matrix rate equation [28], kind of a retrospective work into the early attempt [7].
Another trend of intensive investigation in the strapdown attitude research was the ad-hoc algorithm optimization by means of
special tuning of the algorithm coefficients to reduce the coning drift under the assumed motions such as the classical/generalized

3
coning motion, the regular precession and the stochastic angular motion [10-12, 17, 36, 49, 50]. The cost one should pay is that
the optimized algorithms rank below the corresponding original algorithms in accuracy in practically irregular angular motions,
say maneuvers [16]. Needless to say it is desirable for algorithms to exhibit the same order of accuracy regardless of input attitude
motions.
It should be noted that the angular velocity polynomial approximation from a sequence of gyroscope outputs is an integral part of
both approaches [7, 10, 16, 33, 34, 36, 37], explicitly or implicitly. Hereby in this paper we consider zero and single integral of
angular velocity as gyroscope measurements because they are common in real systems, although multiple integrals could also be
accounted for as done in [36, 37, 51]. The purpose of this paper is to investigate the problem of strapdown attitude computation
from the general perspective of solving the differential equations involved, so as to make a comprehensive approach comparison
from the accuracy standpoint. It was motivated by a long fruitful discussion of the two authors about the actual superiority of the
functional iterative approach over the traditional Taylor expansion approach.
The technical contribution of the paper is multiple-folded. Specifically, the Taylor-based method is substantially extended using
the exact rotation vector and recursive calculation of high-order derivatives; the functional iteration method is further implemented
by using the normal polynomial; the approach superiority in the previous works is refined as an immediate result of the extended
Taylor-based method. The remainder of the paper is organized as follows: Section II briefly reviews two basic approaches to solve
the ordinary differential equations, namely, the Taylor series expansion and the functional iterative integration. Section III
discusses angular velocity approximation by the normal polynomial and the Chebyshev polynomial, and then Sections IV-VI make
use of the two basic approaches to solve the kinematic equations of major attitude parameters including the quaternion, the
Rodrigues vector and the rotation vector. Specifically, Sections V-VI both rely on the functional iterative integration, yet with the
normal polynomial and the Chebyshev polynomial, respectively. Section VII comprehensively assesses all derived algorithms
under the classical coning motion. A brief summary is given in the last section of the paper.
II. GENERAL APPROACHES TO SOLVE ORDINARY DIFFERENTIAL EQUATION
Without the loss of generality, consider an ordinary differential equation over a time interval

0 t 

y  f  y , t 

(1)

where f  y,t  is an infinitely smooth function and the initial value of y is given by y  0  .
The solution to (1) could be obtained by the Taylor series expanded at t  0

y  t   y  0   y  0  t  
y  0


t2
tj
    y j  0
2!
j!
j 0

(2)

4
in which y 

j

 0   y  j   t  t 0 , that is, the value of the i-th derivative at

t  0 . The series is infinite and keeping terms up to the

m-th order leads to a Taylor series approximation as follows [33]
m

y t    y j  0
j 0

tj
t m 1
 y  m 1  
,   0 t 
j!
 m  1!

(3)

The second term on the right side characterizes the error of the m-th order Taylor series approximation. It is commonly conceived
that the calculation of high-order derivatives involved is time-consuming and tedious, though conceptually straightforward [33].
In fact, the high-order derivatives share the common property that only their values at t  0 are required and thus we need not
know the analytic forms of the derivatives. The values of the high-order derivatives could be recursively computed by making use
of

the

calculus

y j  0   y t  u t 

rule

of

 j 1

  y  t  u  t   y  t  u  t  

t 0

elementary

functions

[34,

 j  2
t 0

48].

For

example,

assume

f  y ,t   y  t  u  t  ,

then

j 1
 j  1  i 
m
 j 1 i 
   
 0  , where   denotes the number
 y  0 u
i 0  i 
k

of combinations taking k elements from m elements. It means that high-order derivatives at some instant can be represented by
low-order derivatives at the same instant, which provides an economical way to compute the Taylor series approximation [34, 48].
Furthermore, the solution to (1) could alternatively be obtained by the Picard iteration or a kind of functional iterative integration
as [48]

y j  t   y  0    f  y j 1  t  , t  dt ,
t

0

j  1, 2,

(4)

where the initial function over the integration interval could be set to y 0  t   y  0  . It can be proved that the difference between
the (m-1)-th and the m-th iterations [48]

y m  t   y m 1  t   W Lm 1

if the function

f

tm
m!

(5)

is bounded by W, namely W  max f  y,  , and satisfies the Lipschitz continuity condition
  0 t 

f  y, t   f  z, t   L y  z . The right side of (5) is a term of the Taylor series for e Lt up to a scale. By the Weierstrass M-Test
[52], the above sequence

y 



j

j 0

converges uniformly to the true solution. The practical drawback of (4) is the repeated

computation of integrals. It was surmounted in practice, for the first time to our best knowledge, by the Chebyshev polynomial
approximation of the function f in [42]. Of course, the normal polynomial could alternatively be used.
It should be highlighted hereby that the Taylor series approximation in (3) is in itself of the normal polynomial, while the Picard
iteration in (4) naturally accommodates any kind of polynomial.

5
III. ANGULAR VELOCITY POLYNOMIAL FITTED FROM GYROSCOPE MEASUREMENTS
The above two basic approaches in last section requires f  y,t  to be analytically known, but for the attitude computation under
investigation, only the equally-spaced discrete gyroscope measurements are available. A common practice is to approximate the
angular velocity by a polynomial fitted from the discrete gyroscope measurements [7, 10, 16, 33, 34, 36, 37]. Note that the content
of this section has been presented in previous works [29-31] and is repeated here for easy reference.
Assume discrete measurements (or called samples) of angular velocity ω k or angular increment θ k are available by a triad
of gyroscopes at time instants tk  kT ( k  1, 2,  N ), where T denotes the sampling interval.

A. Normal Polynomial
The angular velocity can be approximated by a normal polynomial as
n

ω t    dit i , n  N  1

(6)

i 0

where the coefficient di is determined using the discrete angular velocity or angular increment measurements. The derivatives
of the fitted angular velocity can be readily obtained as ω

j

 0 

j !d j for j  n and ω

j

 0  0

otherwise.

For the case of angular velocity measurement, the coefficients di satisfy the equation

1 t1

1 t2
 

1 t N

 t1n  dT0   ω1T 
   
 t2n  d1T   ωT2 

       
   
 t Nn  dTn  ωTN 

(7)

And for the case of angular increment measurement instead, the coefficients satisfy


 t1


 t2  t1

 

t  t
 N N 1

t12
2
2
t2  t12
2

t N2  t N2 1
2

t1n 1 

n 1   T   T 
θ1
d0
n 1
n 1
t2  t1   T   T 
θ 2 

 d1
n  1     

 


 T   T 
  d   θ 
t Nn 1  t Nn 11   n   N 

n  1 


(8)

B. Chebyshev Polynomial
The Chebyshev polynomial is a sequence of orthogonal polynomial bases and has better numerical stability than the normal
polynomial [35]. The Chebyshev polynomial of the first kind is defined over the interval  1 1 by the recurrence relation as

F0  x   1, F1  x   x, Fi 1  x   2 xFi  x   Fi 1  x 

(9)

6
where Fi  x  is the ith-degree Chebyshev polynomial of the first kind. For any j , k  0 , the Chebyshev polynomial of first kind
satisfies the equality [35]

Fj   Fk   





1
Fj  k    F j k   .
2

In order to apply the Chebyshev polynomial, the actual time interval

0

(10)

t N  is mapped onto  1 1 by letting t  1    tN 2 .

Then, the angular velocity over the mapped interval is fitted by the Chebyshev polynomial, given by
n

ω     ci Fi  , n  N  1

(11)

i0

The coefficient c i is determined for the case of angular velocity measurement by solving the equation as follows:

1 F1 1   Fn 1   cT0   ω1T 

 T   T 
1 F1  2   Fn  2   c1    ω2 



      

 T   T 
1 F1  N   Fn  N   c n  ω N 

(12)

According to the integral property of the Chebyshev polynomial [35], we have

Gi , k 1  k 

 iFi 1  k   k Fi  k    iFi 1  k 1   k 1 Fi  k 1  


 2

, i  1
i 1   i2 1
i 1
 i 1

  Fi   d  
 k 1
2
2
 k   k 1

i 1
,


2
k

(13)

With the aid of (11) and (13), the angular increment is related to the fitted angular velocity by
tk

t 

θtk   ω dt 
tk 1

tN
2

k



ω d 

k 1

tN
2

n

k

 c 
i 0

i

k 1

Fi   d 

tN
2

n

 c G 
i 0

i

i,

k 1  k



(14)

Then, the coefficient c i in (11) is determined for the case of angular increment measurement by solving the following equation:

 G0, 0 1 

 G0,1  2 



G
 0, N 1  N 

G1, 0 1 
G1,1  2 

G1, N 1  N 

Gn , 0 1   cT 
 0
 Gn ,1  2   c1T  2
 
  


    tN
T
 Gn , N 1  N   c n 



 θ1T 
 T
 θ 2 
  
 T
 θ N 

(15)

The linear equations (7), (8), (12) and (15) could be well solved by the common least-square method.
IV. ATTITUDE ALGORITHMS BY TAYLOR SERIES EXPANSION
This section will apply the Taylor series expansion to solve the kinematic equations of quaternion, Rodrigues vector and rotation
vector for attitude computation, by employing recursive calculation of high-order derivatives.

7
A. QuatTaylor by Quaternion
The attitude quaternion kinematic equation is related to the angular velocity as [4]

1
q  q  ω
2

(16)

Attitude quaternion q is represented as a four-dimensional column vector of unit magnitude, i.e., q   s

T

ηT  , where s is the

scalar part and η is the vector part. If the scalar and vector parts are regarded as a scalar quaternion and a vector quaternion,
respectively, then quaternion can be alternatively written as q  s  η . The product of two quaternions is given by
s
q1  q 2   1
 η1


 η1T   s2  
s1 s2  η1T η2
   
 . Denote the Euler rotation axis and the Euler rotation angle by e and
s1 I 3  η1    η2   s1 η2  s2 η1  η1  η2 

 respectively, the quaternion can be alternatively expressed as q  cos


2

 e sin


2

. ω is the angular velocity vector quaternion

with zero scalar part, formed by the three-dimensional angular velocity vector.
The j-th order derivative of the quaternion can be recursively computed as

q j   0  

Explicitly, q

0

 0  q  0

1
j 1
 q  ω  
2

t 0



1 j 1  i  1  j 1i 
   q  0   ω i   0 
2 i 0  j 



(17)



1
1 1
1
 2
 0
, q  0  q  0  d0 and q  0   q  0   d0  q  0   d1 , etc.
2
2

Then, the Taylor series approximation (3) can be explicitly written as

q t  

tj
1 m  j 1  i  1  j 1i 
 0  ωi   0 
 

q
2 j  0  i 0  j 
 j!

(18)

B. RodTaylor by Rodrigues Vector
The Rodrigues vector rate equation is related to the angular velocity as [1, 16]

1
1
g  ω  g  ω  ggT ω
2
4
The Rodrigues vector, g  2 tan  2  e , is transformed to the attitude quaternion by q 

(19)
2g
4 g

2

. Note that it is now used for

incremental attitude update, i.e., g  0   0 . The j-th order derivative of the Rodrigues vector can be recursively computed as

8
1
1


g  j   0    ω  g  ω  ggT ω 
2
4



 j 1
t 0

i
T
i
1  j  1  j 1i 
1 j 1  j  1
 ω j 1  0    
 0   ωi   0      g j 1i   0     gi  k   0  ω k   0 
g
2 i 0  i 
4 i 0  i 
k 0  k 
j 1
j 1 i
T
 j  1 i 
1  j  1  j 1i 
1
 ω j 1  0    
 0   ωi   0        g j 1i   0  gi  k   0  ω k   0 
g
2 i 0  i 
4 i  0 k  0  i  k 
j 1









(20)

Substituting into (3) yields the Taylor series approximation of the Rodrigues vector
m

g  t    g

j

 0

j 0

tj
j!

(21)

C. RotTaylor by Rotation Vector
The rotation vector’s rate equation is related to the angular velocity by [9]

σ sin σ 
1
1 
1
σ  ω  σ  ω  2 1 
 σ  σ  ω  ω  σ  ω  A σ  σ  σ  ω


2
2
σ  2 1  cos σ  
The rotation vector, σ  e , is transformed to the attitude quaternion by q  cos

σ



2

for incremental attitude update as well, i.e., σ  0   0 . The scalar coefficient A  σ



(22)

σ
σ
for nonzero σ , typically used
sin
σ
2

is a trigonometric function of the rotation

vector’s magnitude and is singular at zero σ . The A’s odd-order derivatives are all zeros and the leading even-order derivatives
at t  0 (equivalently at zero σ ) can be readily obtained from its Taylor series expansion as

A σ  

2

4

6

8

10

σ
σ
σ
691 σ
1 σ






12 720 30240 1209600 47900160 1307674368000

(23)

A  0   1 12, A 2  0   1 360, A 4  0   1 1260

(24)

A 6  0   1 1680, A8  0   1 1188, A10  0   691 360360,
Using (22), the j-th order derivative of the rotation vector can be recursively computed as
1


σ  j   0    ω  σ  ω  Aσ   σ  ω  
2



 j 1
t 0

j 1
i
k
 j  1
i
k 
1  j  1  j 1i 
 ω j 1  0    
 0   ωi   0      A j 1i   0     σi  k   0      Cks σ k  s   0   ω s   0 
σ
2 i 0  i 
i 0  i 
k 0  k 
s 0  s 
j 1
j 1 i
k
 j  1 i  k 
1  j  1  j 1i 
 ω j 1  0    
 0   ωi   0        A j 1i   0  σi  k   0   σ  k  s   0   ω s   0 
σ
2 i 0  i 
i  0 k  0 s  0  i  k  s 
j 1







(25)



Substituting into (3) yields the Taylor series approximation of the rotation vector
m

σ  t    σ j   0 
j 0

tj
j!

(26)

9
The algorithm presented in [36] is a special case of RotTaylor for N = 3 that exactly considers up to the fifth-order derivatives of
the rotation vector. Of special interest are two approximate rotation vectors, overwhelmingly used by the mainstream attitude
algorithms [10-15] and related to the angular velocity by

1
1
σ  ω  σ  ω or σ  ω 
2
2

  ω dt   ω
t

0

(27)

For the above approximate rotation vectors, the j-th order derivative of the first one is simply the sum of the first two terms in (25),
i.e.,

σ

j

1
 0   ω  σ  ω 
2



 j 1

 ω

j 1

t 0

1

 j  1  j 1i 
 0  ωi   0
σ
i
i 0 

j 1

 0   
2

(28)

And the j-th order derivative of the second one is

σ

j



 0   ω  0 ω dt
2

1

t




ω


 j 1

 ω
t 0

j 1

1

 j  1  j  2  i 
 0  ωi   0
ω
i 0  i 
j 1

 0   
2

(29)

Thus, the Taylor series approximation of the rotation vector (26), with derivatives given by (28) or (29), is particularly named
as RotTaylor-T2 or RotTaylor-T2s (hereby ‘s’ means further simplification). These approximations are of special interest in that
RotTaylor-T2/T2s encompass almost all of the mainstream attitude algorithms in the literature that are founded on the approximate
rotation vectors (27). In particular, the relationship of RotTaylor-T2s to the mainstream 2/3-sample algorithms [10] is shown in
Appendix.

It should be noted that the Taylor series approximations in (18), (21) and (26) are time polynomials that actually reconstruct the
whole attitude history over the time interval t0 t N  in which the N gyroscope samples are measured, sharing the same advantage
of the attitude algorithms by functional iterative integration [16, 33, 34].
V. ATTITUDE ALGORITHMS BY FUNCTIONAL ITERATIVE INTEGRATION (NORMAL POLYNOMIAL)
This section will use the functional iterative integration approach to solve the differential equations of attitude parameters, using
the normal polynomial approximation. Notably, the functional iterative integration, combined with the Chebyshev polynomial
approximation, has been successfully applied for attitude computation in [29-31]. By analogy, the development procedure is
straightforward.

10
A. QuatFIter-np1 by Quaternion
With the angular velocity polynomial in (6), the functional iterative integration is applied to the attitude quaternion rate equation
(16), yielding
q j t   q 0 

n
1 t
1 t
q j 1  ω dt  q  0    q j 1  t    d i t i dt ,

2 0
2 0
i 0

j  1, 2,

(30)

Suppose the attitude quaternion at the (j-1)-th iteration is represented by a normal polynomial of order m j 1 , i.e.,
m j 1

q j 1  t    b j 1, k t k . Substituting into (30) gives
k 0

q j t   q  0 

m

n
1 t j 1
k
b
t

di t i dt



1,
j
k
2 0 k  0
i 0

m
1 j1 n b j 1, k  di k +i +1
,
 q  t0   
t
2 k 0 i 0 k  i  1

(31)
j  1, 2,

It can be seen that the polynomial order of attitude quaternion grows quickly by m j  m j 1  n  1 . In the explicit form,
n
d
1
q 0  t   q  0  and q1  t   q  0   q  0    i t i +1 , etc.
2
i 0 i  1

B. RodFIter-np by Rodrigues Vector
Apply the functional iterative integration to the Rodrigues vector’s rate equation (19),
t
1
1

g j  t     ω  g j 1  ω  g j 1gTj 1ω  dt
0
2
4


t
1 t
1 t
  ω dt   g j 1  ω dt   g j 1gTj 1ω dt ,
0
2 0
4 0

(32)

j  1, 2,

Suppose the Rodrigues vector at the (j-1)-th iteration is represented by a normal polynomial of order m j 1 , i.e.,
m j 1

g j 1  t    b j 1, k t k . Using the angular velocity polynomial approximation 6 , the three integrals on the right side of (32) can
k 0

be computed as
t n

 ω dt    d t
t

0



t

0

1

g j 1  ω dt  

0

t

0

m j 1

b
k 0

j 1, k

i0

i

i

n

dt  
i 0

d i i 1
t
i 1

n

m j 1 n

i 0

k 0 i 0

t k   di t i dt  

(33)

b j 1, k  di

k  i 1

t k i 1

Abbreviation ‘FIter’ stands for Functional Iterative integration; ‘np’ stands for normal polynomial.

(34)

11



t

0

g j 1gTj 1ω dt  

t

0

m j 1

m j 1

n

m j 1 m j 1 n

 b j 1,s t s  bTj 1,k t k  di t i dt   
s 0

k 0

i 0

s 0 k 0 i 0

b j 1, s bTj 1, k di

s  k  i 1

t s  k i 1

(35)

Substituting (33)-(35) into (32), the Rodrigues vector at the j-th iteration is obtained as

di i 1 1 j1 n b j 1, k  di k i 1 1 j1 j1 n b j 1, s b j 1, k di s  k  i 1
t  
t
t
  
2 k 0 i 0 k  i  1
4 s 0 k 0 i 0 s  k  i  1
i 0 i  1
n

g j t   

m

m

m

T

(36)

Obviously, the polynomial order grows by m j  2m j 1  n  1 .
C. RotFIter-np by Rotation Vector
The rotation vector’s rate equation (22) involves trigonometric functions and it is cumbersome to do the integrals. Here the
coefficient of the third term is approximated by A  1 12 .
Suppose the Rodrigues vector at the (j-1)-th iteration is represented by a normal polynomial of order m j 1 , i.e.,
m j 1

σ j 1  t    b j 1, k t k . By analogy with the development in (33)-(36), the rotation vector at the j-th iteration can be written as
k 0

m
m m
di i 1 1 j1 n b j 1, k  di k  i 1 1 j1 j1 n b j 1, s   b j 1, k  di  s  k  i 1
t  
t
t
  
2 k 0 i 0 k  i  1
12 s  0 k 0 i 0
s  k  i 1
i 0 i  1
n

σ j t   

(37)

The polynomial order grows by m j  2m j 1  n  1 as well. It is particularly named as RotFIter-np-T3, because the third term is
only approximately accounted for. For the case of only considering the first two terms as in (27), the corresponding algorithm is
readily obtained by abandoning the last additive term in (37), named as RotFIter-np-T2.

Note that Eqs. (31), (36) and (37) could be iterated by updating the normal polynomial coefficients only and truncating the
normal polynomials at each iteration to avoid fast order growing, as done in QuatFIter [33]. The polynomial truncation order,
denoted by mT hereafter, also acts as the highest order of derivative to those algorithms by the Taylor series expansion. The
iteration times could be controlled by some pre-defined maximum or stopping criterion given in the sequel.
VI. ATTITUDE ALGORITHMS BY FUNCTIONAL ITERATIVE INTEGRATION (CHEBYSHEV POLYNOMIAL)
This section is mainly a brief summary of the proposed algorithms in 29-31 for easy reference and comparison in this paper.
Readers are referred to those works for details. It should be highlighted that the technique has been successfully applied to the
whole inertial navigation algorithm including velocity/position computation [40, 41].
A. QuatFIter by Quaternion
With the angular velocity polynomial given by (11), the functional iterative integration approach is applied to solve the quaternion
rate equation [31]

12

q j  q  0 

t
1 t
q j 1  ω dt  q  0  N

0
2
4





1

q j 1  ω d .

(38)

Assume ω and the quaternion estimate at the (j-1)-th iteration is given by a weighted sum of Chebyshev polynomials, say
m j 1

q j   b j 1, k Fk   where m j 1 is the maximum degree and b j 1, k is the coefficient of the kth-degree Chebyshev polynomial
k 0

at the (j-1)-th iteration. Substituting it, together with (10) and (11), into (38)

q j    q  0 

tN
8

m j 1 n

 b
k 0 i 0

j 1, k



 ci Gk i , 1    G k i , 1  

where Gi , 1   is the integrated ith-degree Chebyshev polynomial over the interval



 1   , as defined in

(39)
(13).

B. RodFIter by Rodrigues Vector
When the functional iterative integration approach is applied to solve the Rodrigues vector rate equation, we get [29, 30]
t
t
1
1

g j    I 3  g j 1   g j 1gTj 1  ω dt  N
0
2
4
2







1

1
1

T 
 I 3  g j 1   g j 1g j 1  ω d
2
4



(40)

Assume the Rodrigues vector at the (j-1)-th iteration is given by a weighted sum of Chebyshev polynomials, say
m j 1

g j 1   b j 1,k Fk   . Substituting into (40) leads to
k 0

m
 n
1 j1 n
  ci Gi , 1     b j 1, k  ci Gk  i , 1    G k i , 1  
4 k 0 i 0
t i 0
g j    N 
m j 1 m j 1 n

2
1
    b j 1, s bTj 1, k ci Gs  k  i , 1    G s  k i , 1    G s  k  i , 1    G s  k i , 1 
 
 16 s  0 k  0 i  0
















(41)

C. RotFIter by Rotation Vector
The functional iterative integration approach is applied to solve the full rate equation of the rotation vector
t
2 
t
1
σ j    I 3  σ j 1   A  σ   σ j 1    ω dt  N
0
2
2







1

2 
1

 I 3  σ j 1   A  σ   σ j 1    ω d
2



(42)

Suppose the Rodrigues vector at the (j-1)-th iteration is represented by a Chebyshev polynomial of order m j 1 , i.e.,
m j 1

σ j 1  t    b j 1, k Fk   . Recall that the scalar coefficient A  σ
k 0



involves a trigonometric function of the rotation vector’s

magnitude and does not allow a tractable analytical integration.





p j 1

Denote the third term by A  σ  σ j 1  σ j 1  ω  η j 1 and approximate it by a Chebyshev polynomial, say η j 1   γ j 1, k Fk   .
The coefficients can be approximately computed as [35]

k 0

13

γ j 1, k 

2   0k
Q

Q 1


 k  s  1 2 
  s  1 2
 η j 1  cos 
Q
Q





 cos 
s 0


 


(43)

where  ij is the Kronecker delta function. Exact coefficients could be obtained only if the number of summation terms Q
approaches infinity. Substituting into (42) gives
σ j   

tN
2

m
p j 1
 n

1 j 1 n
  ci Gi , 1      b j 1, k  ci Gk  i , 1    G k  i ,1     γ j 1, k Gk , 1   
4 k 0 i 0
k 0
 i 0






(44)

When A  σ   1 12 , the above algorithm reduces to the RodFIter-T3 given in [16], i.e.,
m
 n

1 j 1 n
  ci Gi , 1      b j 1, k  ci Gk  i , 1    G k  i , 1  

4 k 0 i 0

tN  i 0
σ j    
m j 1 m j 1 n
G
G

 s  k  i ,  1  

2 1
s  k  i ,  1  

    b j 1, s  b j 1, k  ci 
 48 s  0 k  0 i  0
  G s  k  i ,  1    G s  k  i ,  1    








(45)

Totally omitting the third term of the rotation vector rate equation (42) gives us the RotFIter-T2 in [16].

Similiar to the last section, Eqs. (39), (41) and (44) could be iterated by updating the Chebyshev polynomial coefficients only
and making necessary polynomial truncation at each iteration to avoid fast order growing [16, 33, 34].
VII. NUMERICAL RESULTS AND ALGORITHM COMPARISON
All derived attitude algorithms in the paper can be directly implemented by following the given formulae, as summarized in Table
I. Simulations are performed in this section under the classical coning motion scenario to evaluate these algorithms. The coning
motion has explicit analytical expressions in the angular velocity and the attitude parameter, so it has been widely accepted as a
standard criterion for algorithm accuracy assessment in the inertial navigation field [2, 4, 7]. It is not uncommon in practice with
a large excitation of attitude drift error, e.g., in situations of angular vibration or complex rotation. The angular velocity of the
2
classical coning motion is described by ω   2sin  2  sin   sin  t  sin   cos  t   , with the true rotation vector
T

σ   0 cos  t  sin  t   , the true Rodrigues vector g  2 tan  2 0 cos  t  sin  t  
T

T

and the true quaternion

q  cos  2  sin  2 0 cos  t  sin  t   . In the above,  denotes the coning angle and   2 f c denotes the
T

angular frequency of the coning motion (unit: rad/s) and f c is the coning frequency (unit: Hz). The angular increment
measurement is assumed and the sampling rate is nominally set to f s  1000 Hz.
The following principal angle metric is used to quantify the attitude computation error

14
Simulated Angular Velocity Profile of Coning Motion

1.5

x
y

1

z

0.5

0

-0.5

-1

-1.5

0

0.02

0.04

0.06

0.08

0.1

0.12

0.14

0.16

0.18

0.2

Time (s)

Fitted Angular Velocity Error (rad/s)

Fitted Angular Velocity Error (rad/s)

Figure 1. Angular velocity profile of classical coning motion.

Figure 2. Errors of fitted angular velocity for N = 3 and 8.

 att  2 q*  qˆ  2:4

(46)

where q̂ denotes the quaternion estimate computed by attitude algorithms, and the operator 2:4 takes the vector part of the
error quaternion. If the used attitude parameter is other than quaternion, then the computed result needs to be transformed to the
corresponding quaternion for error quantification. The polynomial order of the fitted angular velocity (6) is uniformly set to

n  N  1 , if not explicitly stated.

A.

Fitted Angular Velocity Polynomial and Reconstructed Attitude

Figure 1 plots the angular velocity profile of the classical coning motion, where the coning angle is set to   1 degree with the
coning frequency f c  10 Hz. Figure 2 presents the errors of the fitted angular velocity by the normal polynomial (6) or by the
Chebyshev polynomial (11) during the first update interval, for the number of samples N = 3 and 8. It shows that using more
samples leads to much more accurate fitted angular velocity, making it possible to acquire more accurate attitude. Note that an

15
j=1 (N=8)
j=2 (N=8)
j=3 (N=8)
j=4 (N=8)
j=5 (N=8)
j=6 (N=8)
j=7 (N=8)
j=1 (N=3)
j=2 (N=3)
j=3 (N=3)
j=4 (N=3)
j=5 (N=3)
j=6 (N=3)
j=7 (N=3)

QuatFIter: N = 3 and 8; Iterations = 7

10 -2
10 -4
10 -6
10 -8
10 -10
10 -12
10 -14
10 -16

0

1

2

3

4

5

Time (s)

6

7

8
10 -3

Coefficients of Fitted Angular Velocity

Coefficients of Fitted Angular Velocity

Coefficients of Quaternion

Coefficients of Quaternion

Figure 3. Attitude errors of QuatFIter across seven iterations for N = 3 (sold lines) and 8 (dashed lines).

Figure 4. Polynomial coefficients of fitted angular velocity and computed quaternion by QuatFIter-np (left) and
QuatFIter (right) for N 8.
erroneous angular velocity cannot in general be compensated in the subsequent attitude computation process. The work of RodFIter
[16] has thrown lights on this fact in the case of the Rodrigues vector (Theorem 2 therein). The two kinds of polynomials have
identical angular velocity fitting errors but their coefficients differ much (cf. Fig. 4 in the sequel).
Taking the QuatFIter algorithm proposed in [33] as a demonstration (polynomial truncation order set to mT  N  9 ), Figure 3

Angle error (deg)

Angle error (deg)

Angle error (deg)

Angle error (deg)

16

Figure 5. Truncation effect on QuatFIter-np and QuatFIter (Top: mT  N  5 ; bottom: mT  N  2 ).
plots the principal angle errors of the reconstructed attitudes over the first iteration interval, across seven iterations for the cases of
N = 3 and 8. The angle error reduces and converges as the iteration goes on. Because the fitted angular velocity has much better
accuracy, the attitude error with N = 8 is significantly smaller. Additionally, regarding the converged results (after two iterations
with N = 3; after four iterations with N = 8), the attitude errors turn to have sharp drops at the sampling instants. This apparent ‘nshape’ phenomenon is an indication of insufficient fitting of the angular velocity polynomials by the current number of gyroscope
samples. Figure 4 presents the polynomial coefficients of the fitted angular velocities for the case of N = 8, as well as those of the
computed quaternions at the 7th iteration by QuatFIter-np and QuatFIter. Along with the increasing order, the magnitude of the
normal polynomial quickly increases while that of the Chebyshev polynomial swiftly decreases. The trend is observed in both the
fitted angular velocities and the computed quaternions.
B. Polynomial Truncation and Iteration Times
Figure 5 examines the effect of two polynomial truncation orders ( mT  N  5, N  2 ) on QuatFIter-np and QuatFIter across seven
iterations. We see that the QuatFIter-np is more vulnerable to polynomial truncation, indicating that the normal polynomial has
inferior functional representation capability than the Chebyshev polynomial does. In other words, the Chebyshev polynomial

17
QuatFIter-np: N = 8; Iterations = 15

QuatTaylor: N = 8; Iterations = 15

100

10 -5

Angle error (deg)

Angle error (deg)

10 -5

10 -10

10 -10

10 -15

10 -15

0

1

2

3

4

5

6

7

0

8

4

5

6

7

10 -8

10-10

10-12

10-14

8
10-3
j=1
j=2
j=3
j=4
j=5
j=6
j=7
j=8
j=9
j=10
j=11
j=12
j=13
j=14
j=15

10 -6

Quaternion norm error

Quaternion norm error

3

QuatTaylor: N = 8; Iterations = 15

10 -4

10 -6

10-16

2

Time (s)

QuatFIter-np: N = 8; Iterations = 15

10 -4

1

10 -3

Time (s)

10 -8

10 -10

10 -12

10 -14

0

1

2

3

4

Time (s)

5

6

7

8
10

10 -16

0

1

-3

2

3

4

Time (s)

5

6

7

8
10 -3

Figure 6. Attitude errors and quaternion-norm errors of QuatFIter-np and QuatTaylor. Note the order of legend colors
used to denote different iterations are the same throughout the paper.
requires relatively fewer terms to achieve the same accuracy, an excellent property favorable to numerical computation [35].
Figure 6 compares the attitude errors and quaternion-norm errors of QuatFIter-np and QuatTaylor, across fifteen iterations for the
case of N = 8. The polynomial truncation order is still set to mT  N  9 for both algorithms. We see that it takes more iterations
for QuatTaylor to reach comparable accuracy, e.g., fourteen iterations to reach the convergence in contrast to only five iterations
for QuatFIter-np. This is owed to the fast increase of normal polynomial orders in QuatFIter-np, as shown in (31), while the normal
polynomial order of QuatTaylor increases one by one along with each iteration. From the quaternion kinematic equation (16), it
can be readily shown that the norm of quaternion is naturally preserved, i.e., d  q T q  dt  2q T q  q T  q  ω   1 031  ω  0 , if
only we could compute solve the kinematic equation accurately, whether by Taylor expansion or iterative integration. We see in
Fig. 6 that the quaternion norm gradually approaches to unity because the initial quaternion is of unit norm, which sets the
foundation for QuatFIter [31] that uses quaternion directly for attitude computation.
It should be highlighted that the above conclusions derived from Figs. 5-6 are independent of the specific attitude parameters,
which is in favor of the functional iterative integration combined with the Chebyshev polynomial for attitude computation. For a

18
RotTaylor-T2s: N = 2; Iterations = 4

10 -2

10 -4

10 -4

10 -6

10 -6

10 -8

10 -8

10 -10

0

0.2

0.4

0.6

0.8

1

1.2

1.4

1.6

1.8

Time (s)

10 -10

2
10

RotTaylor-T2s: N = 3; Iterations = 6

10 0

10 -6

10 -8

10 -8

1.5

2

2.5

0.6

0.8

1.2

1.4

1.6

1.8

2
10 -3

RotTaylor: N = 3; Iterations = 9

10 -10

3

0

0.5

1

1.5

10 -3

Time (s)

1

10 -2

10 -6

1

0.4

10 0

10 -4

0.5

0.2

Time (s)

10 -4

0

0

-3

j=1
j=2
j=3
j=4
j=5
j=6
2-sample
3-sample

10 -2

10 -10

RotTaylor: N = 2; Iterations = 4

10 -2

2

2.5

3
10 -3

Time (s)

RotTaylor-T2s: N = 5; Iterations = 10

100
10 -2

Angle error (deg)

10 -4
10 -6
10 -8
10 -10
10 -12
10 -14

0

0.5

1

1.5

2

2.5

3

3.5

4

4.5

5
10 -3

Time (s)
RotTaylor-T2s: N = 8; Iterations = 14

100

10 -5

10-5

10 -10

10-10

10 -15

10-15

0

1

2

3

4

Time (s)

5

6

RotTaylor: N = 8; Iterations = 14

10 0

7

8
10 -3

0

1

2

3

4

Time (s)

5

6

7

8
10-3

Figure 7. Attitude errors of RotTaylor-T2s (left column) and RotTaylor (right column) for N = 2, 3, 5 and 8, as compared
with mainstream 2-sample and 3-sample algorithms.
stopping criterion of iteration, the algorithms by Taylor series expansion could check if the highest-order term (HOT) is negligible
relative to the require attitude accuracy, and those algorithms by functional iterative integration could use the discrepancy of

Angle error (deg)

19

Figure 8. Attitude error comparison of RotTaylor-T2s and RotTaylor for N = 5 and 8 in one second, as compared with
mainstream 2/3-sample algorithms.

polynomial coefficients (DPC) between successive iterations, namely,

mT

b
k 0

j 1, k

 b j ,k

2

.

C. RotTaylor and Its Relation to Mainstream Algorithms
Figure 7 presents the attitude errors of RotTaylor-T2s and RotTaylor for cases of N = 2, 3, 5 and 8, as compared with the widelyused mainstream 2-sample and non-coning-optimized 3-sample algorithms [10, 14]. The HOT iteration-stopping criterion is
employed, with truncation order mT  N  9 . As the RotTaylor-T2 algorithm is founded on the approximation rotation vector,
using more samples even leads to larger computation errors, as already clarified in several previous works, e.g., [33, 53]. The
underlying reason is that along with more accurate angular velocity (by more samples), the RotTaylor-T2s just converges to a fake
‘rotation vector’ whose rate equation is exactly represented by (27) (see Theorem 2 in [16]). Only when the exact rotation vector
rate equation is properly handled, e.g., by the RotTaylor just derived in this paper, could an improved accuracy be really acquired.
Their attitude accuracies in one second are further demonstrated in Fig. 8.
D. Accuracy Comparison
A comprehensive accuracy comparison is performed next for the case of N = 8, with the coning frequency ranging 1-200 Hz. The
HOT and DPC iteration-stopping criteria are respectively used in the Taylor expansion-derived algorithms and the functional
iterative integration-derived algorithms. Figure 9 presents the attitude errors accumulated over one second (the analogy of the
attitude error drift [36]) as a function of relative frequency f c f s for QuatFIter-np (QuatTaylor), RodFIter-np (RodTaylor),
RotTaylor and QuatFIter (RodFIter and RotFIter), against the mainstream 2/3-sample algorithms. The results of QuatTaylor,

Principle angle error (deg)

20

Figure 9. Attitude errors as function of relative frequency for N = 8, as compared with the mainstream 2/3-sample
algorithms.

100

100
QuatFIter-np (N+29)
RodFIter-np (N+29)
RotTaylor ( N+29)
QuatFIter (N+1)

10-1
10-2

10-2

10-3

10-3

10-4

10-4

10-5

10-5

10-6

10-6

10-7

0

0.002

0.004

0.006

QuatFIter-np (N+49)
RodFIter-np (N+49)
RotTaylor ( N+49)
QuatFIter (N+1)

10-1

0.008

0.01

Time (s)

0.012

0.014

0.016

10-7

0

0.002

0.004

0.006

0.008

0.01

0.012

0.014

0.016

Time (s)

Angle error (deg)

Figure 10. Attitude errors in two update intervals at coning frequency of 100 Hz for N = 8, with truncation order
mT  N  29 (left) and mT  N  49 (right).

Figure 11. Attitude errors in three update intervals for N = 5 samples at coning frequency of 100 Hz.

RodTaylor, RodFIter and RotFIter are omitted in Fig. 9, because they are found to be nearly identical to those of QuatFIter-np,
RodFIter-np and QuatFIter, respectively. We see that all algorithms have comparable accuracy while the coning frequency stays

Principle angle error (deg)

21

Figure 12. Attitude errors as function of relative frequency (N = 8) for navigation-grade gyroscope measurements.
below 30 Hz, linearly increasing with respect to the relative frequency. Specifically, they all reach the machine precision for coning
frequency less than 10 Hz. If the coning frequency goes up further, however, three algorithms of QuatFIter-np, RodFIter-np and
RotTaylor, with the truncation order mT  N  9 , begin to deteriorate and become even worse than the mainstream 2/3-sample
algorithms for over 70 Hz. When the truncation order is set to mT  N  29 , their accuracies do not decline until the coning
frequency is larger than 70-80 Hz. In contrast, with a constant truncation order mT  N  1 , the accuracy of QuatFIter (RodFIter
and RotFIter) is uniformly the best over the whole frequency range, approaching those of the mainstream algorithms at the right
end. It is observed in our simulations that higher truncation order would not bring further accuracy improvement to the QuatFIter
(RodFIter and RotFIter). This significant advantage is largely owed to the excellent functional representation capability and
numerical stability of the Chebyshev polynomial.
The error rising of QuatFIter-np, RodFIter-np and RotTaylor appears odd, so the case of f c  100 Hz is particularly examined.
Figure 10 presents their attitude errors for two update intervals using the polynomial truncation orders mT  N  29 and
mT  N  49 . With the truncation order increased, QuatFIter-np and RotTaylor improve in accuracy as expected but RodFIter-np

changes little. Contrary to the prediction that their accuracies could be unlimitedly improved by further increasing the truncation
order, we have observed that the three algorithms all encounter numerical failures when the truncation order is larger than 150. Of
special interest is the ‘u-shape’ profile in the QuatFIter that has oscillated peaks close to both ends of iteration intervals. It is the
famous Runge’s phenomenon [54] that is ubiquitous in high-order polynomial interpolation for evenly-spaced samples, which can
also be apparently identified in Fig. 2 for the fitted angular velocity with N = 8. An interesting thing is observed in the case of N =
5 samples, as shown in Fig. 11 (with the results of Fig. 10 as the background) in which the results of all algorithms overlap. In
specific, QuatFIter-np and RodFIter-np demonstrate better accuracy than they do in Fig. 10 (N = 8). This unusual observation is

22
believed to be incurred by the Runge’s phenomenon, so is the numerical failure encountered above. Supposedly, the technique of
depressing the Runge’s phenomenon (e.g. using multiple integrals of gyroscope measurements [37, 51]) could be used to improve
all derived algorithms including the already well-performing QuatFIter.
Finally, a practical situation with noisy gyroscope measurement is investigated, as the high-order/sample algorithms tend to be
much more sensitive to narrow-band noises that might lead to pseudo-coning [37]. Noise errors with an angle random walk of
0.001 deg

h , comparable to a navigation-grade inertial navigation system, are considered. A common set of random gyroscope

noises are generated and fed to all algorithms for uniform comparison. Figure 12 plots the attitude errors in ten seconds as the
function of relative frequency for N = 8. For coning frequencies below 20 Hz, all derived algorithms have similar accuracy with
the mainstream 2/3-sample algorithms, as the noise dominates the attitude accuracy (cf. Fig. 9). The derived algorithms are
comparable to each other when the coning frequency is below 40 Hz. The performance ranking keeps the same with the noise-free
case in Fig. 9, except that the frequency point where QuatFIter-np, RodFIter-np and RotTaylor begin to get worse than QuatFIter
increases from 30 Hz to 40 Hz.
VIII. CONCLUSIONS AND DISCUSSIONS
This paper poses the strapdown attitude computation as seeking the general solutions to the kinematic equations of attitude
parameters. Two basic approaches are briefly reviewed, namely, the Taylor series expansion approach and the functional iterative
function approach (or alternatively known as the Picard iteration in the community of differential equations). Then, three groups
of attitude algorithms have been derived by the two basic approaches, based on major attitude parameters including quaternion,
Rodrigues vector and rotation vector. The first group, based on the Taylor series expansion (QuatTaylor, RodTaylor and RotTaylor),
follows and considerably extends the framework of the mainstream algorithms, by making use of recursive calculation of highorder derivatives. The other two groups (QuatFIter-np, RodFIter-np and RotFIter-np; QuatFIter, RodFIter and RotFIter) both
employ the functional iterative function approach yet with two different kinds of polynomial approximation, namely, the normal
polynomial (presented first in this paper) and Chebyshev polynomial (recently published). Numerical tests under classical coning
motions are carried out to compare the algorithms, refining the conclusions drawn in previous papers on the functional iterative
integration approach. In the relative frequency range when the coning to sampling frequency ratio is below 0.05-0.1 (depending
on the chosen polynomial truncation order), the three algorithm groups have the same order of accuracy if the same number of
samples are used to fit the angular velocity over the iteration interval; in the range of higher relative frequency, the third group
(Quat/Rod/RotFIter) performs better in both accuracy and robustness to the Runge phenomenon than the other two groups do,
thanks to the unique properties of Chebyshev polynomial. Notably, the third group allows a lower truncation order, while the other
two groups require significantly higher truncation order and might even encounter numerical failure.

23
All presented algorithms are in nature iterative and thus much computation-expensive relative to the mainstream algorithms. If
necessary, however, they can be implemented in inertial navigation systems by optimized software or customized hardware for
potential accuracy benefit. Additionally, all proposed algorithms are founded on polynomial approximation of angular
velocity/specific force, so any potential improvement in polynomial approximation would further advance them, e.g., using the
multiple integrals of gyroscopes/accelerometers measurements or resorting to the technique of depressing the Runge’s phenomenon.
APPENDIX: MAINSTREAM 2/3-SAMPLE ALGORITHMS
For the special case of N = 2 and n = 1, ω  t   d 0  d1t according to (6), and the derivatives of the approximate rotation vector
in (29) are explicitly

1 1
1
σ    0   ω  0   ω   0   ω  0   d 0
2
1 1
2
1
1
σ    0   ω   0   ω   0   ω   0   d1
2
1
1
3
1
σ    0   ω  0   ω   0   d 0  d1
2
2
j
σ    0   0, j  4
t

Note that the notation ω  1  0    ω dt
0

(47)

 0 . Substituting into (3) yields the Taylor series approximation of the rotation vector
t 0

σ  t   d0 t 

d1 2 d0  d1 3
t 
t
2
12

(48)

Similarly, for the case of N = 3 and n = 2, ω  t   d 0  d1t  d 2 t 2 , and the derivatives of the approximate rotation vector in (29)
are explicitly

σ 1  0   d 0 , σ  2  0   d1
1
1
1
ω  0   ω   0   2d 2  d 0  d1
2
2
4
2
σ    0   ω  0   ω   0   2d 0  d 2
σ

3

 0   ω 2   0  

(49)

 0   ω1  0   ω 2  0   2d1  d 2
j
σ    0   0, j  6
σ

5

Substituting into (3) yields the Taylor series approximation of the rotation vector
σ  t   d 0t 

d1 2 4d 2  d 0  d1 3 d 0  d 2 4 d1  d 2 5
t 
t 
t 
t
2
12
12
60

Alternatively, the results in (48) and (50) can be directly obtained by integrating the second equation of (27).
When the angular increment measurements are considered, it can be obtained from (8) for N = 2 and 3, respectively,

(50)

24


d0  11θ1  7θ2  2θ3  6T 


T
θ
θ
3
2



d 0  
1
2
 and d1     2θ1  3θ 2  θ3  T 2 
 
2


d1   θ1  θ2  T 
d 2  
3 
 
T
θ
θ
θ
2
2







1
2
3



(51)

Substituting (51) into (48) and (50) and letting t  N T produce the well-known mainstream 2-sample and 3-sample
algorithms 10 , respectively,
2
N  2 : σ  2T   θ1  θ2  θ1  θ 2
3
(52)
N  3 : σ  3T   θ1  θ2  θ3  0.4125θ1  θ3  0.7125θ 2   θ3  θ1 

ACKNOWLEDGEMENTS
Thanks to Dr. Qi Cai for Matlab code optimization.

25
Table I. Attitude Algorithms Derived by Taylor Series Expansion and Functional Iterative Integration

Functional Iterative Integration

Taylor Series Expansion

Normal Polynomial

QuatTaylor
m

Quaternion

q t    q

 j

j 0

q j 0 

QuatFIter-np

tj
0
j!

m
d
1 j 1 n b
q j  t   q  0    j 1,k i t k +i +1
2 k 0 i  0 k  i  1

g  t    g j   0
j 0

t
j!

n

g j t   
i 0

1 j 1  i  1  j 1i 
   g  0   ω i   0 
2 i 0  j 



m j 1 m j 1



n

T
j 1,k

b b d i s  k i 1
1
t
   j 1,s
4 s 0 k 0 i0 s  k  i  1
n



RotTaylor
m

σ t    σ j   0
i 0

k 0 i  0

j 1,k



 ci Gk i ,1    G k i ,1  

t
j!

n

σ j t   
i 0

1 j 1  i  1  j 1i 
   σ  0   ω i   0 
2 i 0  j 

 i  1 i  k   j 1i 
  
 0  σ  i k   0   σ  k  s   0   ω  s   0 
   A
i 0 k 0 s 0  j  k  s 



k

 n

1
  ci Gi ,1     b j 1,k  ci Gk i ,1    G k i ,1   
4

0

0

0
i
k
i

t 
g j    N 
 Gsk i ,1    G sk i ,1    
2  1 m j 1 m j 1 n
T


 b j1,sb j1,k ci  G
 16 
 G sk i ,1    
s 0 k 0 i 0


,

1

s
k
i






1 j 1 j 1 n b j 1,s   b j 1,k  d i  s k i 1
   s  k  i 1 t
12 s0 k 0 i 0
m





b
 d i k i 1
d i i 1 1
t    j 1,k
t
i 1
2 k 0 i 0 k  i  1
m j 1 n

m

n

σ j t   
i 0

b
 d i k i 1
d i i 1 1
t    j 1,k
t
i 1
2 k 0 i 0 k  i  1



RotFIter

  ci Gi ,1     γ j 1,k Gk ,1  
t N  i 0
k 0
σ j   
2  1 m j 1 n
   b j 1,k  ci Gk i ,1    G k i ,1  
 4 k 0 i 0



m j 1 n

γ j 1,k 

2  0k
Q

RotTaylor-T2/T2s
σ

0  ω

 j 1

1 j 1  i  1
 0      σ  j 1i   0   ωi   0 
2 i 0  j 

σ  j   0   ω  j 1  0  

1 j 1  i  1  j 2i 
   ω  0   ωi   0 
2 i 0  j 



p j 1

n

Q 1
s 0











 k  s  1 2  
  s  1 2 
 η j 1  cos 
Q
Q





 cos 

η j 1  Aσ j1   σ j 1  ω 

 j



RodFIter
m j 1 n

RotFIter-np-T3/T2

j

σ  j   0   ω j 1  0  

Rotation
Vector

b
 d i k i 1
d i i 1 1
t    j 1,k
t
i 1
2 k 0 i 0 k  i  1
m j 1

T
1 j 1 i  i  1 i   j 1i 
    g  0  gik   0 ωk   0
4 i0 k 0  j  k 

i

 b

RodFIter-np

j

g  j   0   ω j 1  0  

j 1

m j 1 n

1  i  1   j 1i 
   q  0   ω i   0 
2 i0  j 

RodTaylor



QuatFIter
t
q j    q  0   N
8

j 1

m

Rodrigues
Vector

Chebyshev Polynomial (cf. [16, 33, 34])


 


RotFIter-T3/T2
m
 n

1 j 1 n
  ci Gi ,1      b j 1,k  ci Gk i ,1    G k i ,1  

4
i
k
i

0

0

0

t 
σ j    N 
 Gs  k i ,1    G s  k i ,1    
2  1 m j 1 m j 1 n


  b j1,s  b j1,k  ci  G
 48 
 G s k i ,1    
s 0 k  0 i 0
s
k
i


,

1









σ j   

tN
2

m
 n
1 j 1 n
  ci Gi ,1      b j 1,k  ci Gk i ,1    G k i ,1  
4 k 0 i  0
 i 0







 

26

REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
[23]
[24]
[25]
[26]
[27]
[28]
[29]
[30]

F. L. Markley and J. L. Crassidis, Fundamentals of Spacecraft Attitude Determination and Control: Springer, 2014.
D. A. Tazartes and J. G. Mark, "Coning compensation in strapdown inertial navigation systems," US Patent US005828980A,
1997.
D. H. Titterton and J. L. Weston, Strapdown Inertial Navigation Technology, 2nd ed.: the Institute of Electrical Engineers,
London, United Kingdom, 2007.
P. D. Groves, Principles of GNSS, Inertial, and Multisensor Integrated Navigation Systems, 2nd ed.: Artech House, Boston
and London, 2013.
D. A. Tazartes, "Inertial Navigation: From Gimbaled Platforms to Strapdown Sensors," IEEE Trans. on Aerospace and
Electronic Systems, vol. 47, pp. 2292-2299, 2010.
P. G. Savage, "A new second-order solution for strapped-down attitude computation," in AIAA/JACC Guidance and Control
Conference, 1966.
"A study of the critical computational problems associated with strapdown inertial navigation systems," NASA CR-968 by
United Aircraft Corporation, 1968.
J. W. Jordan, "An accurate strapdown direction cosine algorithm," NASA TN-D-5384, 1969.
J. E. Bortz, "A new mathematical formulation for strapdown inertial navigation," IEEE Transactions on Aerospace and
Electronic Systems, vol. 7, pp. 61-66, 1971.
R. Miller, "A new strapdown attitude algorithm," Journal of Guidance, Control, and Dynamics, vol. 6, pp. 287-291, 1983.
M. B. Ignagni, "Optimal strapdown attitude integration algorithms," Journal of Guidance, Control, and Dynamics, vol. 13,
pp. 363-369, 1990.
M. B. Ignagni, "Efficient class of optimized coning compensation algorithm," Journal of Guidance, Control, and Dynamics,
vol. 19, pp. 424-429, 1996.
P. G. Savage, "Strapdown inertial navigation integration algorithm design, part 1: attitude algorithms," Journal of Guidance,
Control, and Dynamics, vol. 21, pp. 19-28, 1998.
Y. A. Litmanovich, V. M. Lesyuchevsky and V. Z. Gusinsky, "Two new classes of strapdown navigation algorithms," Journal
of Guidance, Control, and Dynamics, vol. 23, pp. 34-44, 28-30, Jun. 2000.
P. Savage, "Down-Summing Rotation Vectors For Strapdown Attitude Updating (SAI WBN-14019)," Strapdown Associates
(http://strapdownassociates.com/Rotation%20Vector%20Down_Summing.pdf) 2017.7.
Y. A. Litmanovich and J. G. Mark, "Progress in Strapdown Algorithm Design at the West and East as Appeared at Saint
Petersburg Conferences: Decade Overview," in Saint-Petersburg International Conference on Integrated Navigational
Systems, Russia, 2003.
J. G. Lee, Y. J. Yoon, J. G. Mark and D. A. Tazartes, "Extension of strapdown attitude algorithm for high-frequency base
motion," Journal of Guidance, Control, and Dynamics, vol. 13, pp. 738-743, 1990.
C. Rucker, "Integrating Rotations Using Nonunit Quaternions," IEEE Robotics and Automation Letters, vol. 3, pp. 27792986, 2018.
J. Park and W.-K. Chung, "Geometric integration on euclidean group with application to articulated multibody systems,"
IEEE Trans. on Robotics, vol. 21, pp. 850-863, 2005.
M. S. Andrle and J. L. Crassidis, "Geometric Integration of Quaternions," Journal of Guidance, Control, and Dynamics, vol.
36, pp. 1762-1767, 2013.
M. Boyle, "The Integration of Angular Velocity," Advances in Applied Clifford Algebras, vol. 27, pp. 2345–2374, 2017.
P. Krysl and L. Endres, "Explicit Newmark/Verlet algorithm for time integration of the rotational dynamics of rigid bodies,"
International Journal for Numerical Methods in Engineering, vol. 62, pp. 2154–2177, 2005.
E. Hairer, C. Lubich and G. Wanner, Geometric Numerical Integration: Structure Preserving Algorithms for Ordinary
Differential Equations. New York, NY, USA: Springer-Verlag, 2006.
C. I. Sukenik, "Application of ultracold molecules to inertial sensing for navigation," ADA146124, 2004.
M.
Kasevich.
(2002).
Science
and
technology
prospects
for
ultra-cold
atoms.
Available:
www7.nationalacademies.org/bpa/kasevich_CAMOS_021124.pdf
M. Wang, W. Wu, J. Wang and X. Pan, "High-order attitude compensation in coning and rotation coexisting environment,"
IEEE Trans. on Aerospace and Electronic Systems, vol. 51, pp. 1178-1190, 2015.
M. Wang, W. Wu, X. He, G. Yang and H. Yu, "Higher-order Rotation Vector Attitude Updating Algorithm," Journal of
Navigation, vol. 72, pp. 721-740, 2019.
Z. Xu, J. Xie, Z. Zhou, J. Zhao and Z. Xu, "Accurate Direct Strapdown Direction Cosine Algorithm," IEEE Trans. on
Aerospace and Electronic Systems, vol. 55, pp. 2045-2053, 2019.
Y. Wu, "RodFIter: Attitude Reconstruction from Inertial Measurement by Functional Iteration," IEEE Trans. on Aerospace
and Electronic Systems, vol. 54, pp. 2131-2142, 2018.
Y. Wu, Q. Cai and T.-K. Truong, "Fast RodFIter for Attitude Reconstruction from Inertial Measurement," IEEE Trans. on
Aerospace and Electronic Systems, vol. 55, pp. 419-428, 2019.

27
[31] Y. Wu and G. Yan, "Attitude Reconstruction from Inertial Measurements: QuatFIter and Its Comparison with RodFIter,"
IEEE Trans. on Aerospace and Electronic Systems, vol. 55, pp. 3629-3639, 2019.
[32] G. Yan, J. Weng, X. Yang and Y. Qin, "An Accurate Numerical Solution for Strapdown Attitude Algorithm based on Picard
iteration," Journal of Astronautics, vol. 38, pp. 65-71, 2017.
[33] K. E. Atkinson, W. Han and D. E. Stewart, Numerical Solution of Ordinary Differential Equations: John Wiley and Sons,
2009.
[34] R. E. Moore, Methods and Applications in interval analysis. Philadelphia: SIAM, 1979.
[35] W. H. Press, Numerical Recipes: the Art of Scientific Computing, 3rd ed. Cambridge ; New York: Cambridge University Press,
2007.
[36] V. Z. Gusinsky, V. M. Lesyuchevsky, Y. A. Litmanovich, H. Musoff and G. T. Schmidt, "New procedure for deriving
optimized strapdown attitude algorithm," Journal of Guidance, Control, and Dynamics, vol. 20, pp. 673-680, 1997.
[37] Y. A. Litmanovich, "Use of angular rate multiple integrals as input signals for strapdown attitude algorithms," in Symposium
Gyro Technology, Stuttgart, Germany, 1997.
[38] Y. Wu, "Rigid Motion Reconstruction by Functional Iteration," in Inertial Sensors and Systems - Symposium Gyro Technology
(ISS-SGT), Karlsruhe, Germany, 2017.
[39] Y. Wu, "Fast RodFIter for Precision Attitude Computation," in Inertial Sensors and Systems - Symposium Gyro Technology
(ISS-SGT), Braunschweig, Germany, 2018.
[40] Y. Wu, "Next-Generation Inertial Navigation Computation Based on Functional Iteration," in International Conference on
Integrated Navigation Systems (ICINS) & Inertial Sensors and Systems - Symposium Gyro Technology (ISS-SGT), Saint
Petersburg, Russia; Braunschweig, Germany, 2019.
[41] Y. Wu, "iNavFIter: Next-Generation Inertial Navigation Computation Based on Functional Iteration," to appear in IEEE
Trans. on Aerospace and Electronic Systems (fulltext available at https://ieeexplore.ieee.org/document/8844820/), 2019.
[42] C. W. Clenshaw and H. J. Norton, "The Solution of Nonlinear Ordinary Differential Equations in Chebyshev Series,"
Computer Journal, vol. 6, pp. 88-92, 1963.
[43] J. Shaver, "Formulation and Evaluation of Parallel Algorithms for the Orbit Determination Problem," Ph.D., Dept. of
Aeronautics and Astronautics, Massachusetts Inst. of Technology, Cambridge, MA, 1980.
[44] T. Fukushitma, "Picard Iteration Method, Chebyshev Polynomial Approximation, and Global Numerical Integration of
Dynamical Motions," The Astronomical Journal, vol. 113, pp. 1909-1914, 1997.
[45] X. Bai and J. L. Junkins, "Modified Chebyhev-Picard iteration methods for orbit propagation," The Journal of the
Astronautical Sciences, vol. 58, pp. 583-613, 2011.
[46] X. Bai, "Modified Chebyshev-Picard Iteration Methods for Solution of Initial Value and Boundary Value Problems," Ph.D.
Dissertation, Texas A&M University, College Station, TX, 2010.
[47] V. I. Arnold, Ordinary Differential Equations: The MIT Press, 1978.
[48] E. Hairer, S. P. Nørsett and G. Wanner, Solving Ordinary Differential Equations I. Berlin Heidelberg: Springer-Verlag, 2008.
[49] H. Musoff and J. H. Murphy, "Study of strapdown navigation attitude algorithm," Journal of Guidance, Control, and
Dynamics, vol. 18, pp. 287-290, 1995.
[50] V. Z. Gusinsky, V. M. Lesyuchevsky, Y. A. Litmanovich, H. Musoff and G. T. Schmidt, "Optimization of a strapdown attitude
algorithm for a stochastic motion," Navigation: Journal of The Institute of Navigation, vol. 44, pp. 163-170, 1997.
[51] Y. A. Litmanovich, V. M. Lesyuchevsky and V. Z. Gusinsky, "Strapdown attitude/navigation algorithms with angular
rate/specific force multiple integrals as input signals," in ION 55th Annual Meeting, Cambridge, MA, 1999.
[52] W. J. Rugh, Linear System Theory, 2nd ed. New Jersey: Prentice-Hall, 1996.
[53] G. Yan, W. Yan and D. Xu, "Limitations of error estimation for classic coning compensation algorithm," Journal of Chinese
Inertial Technology, vol. 16, pp. 380-385, 2007.
[54] L. N. Trefethen, Approximation Theory and Approximation Practice: SIAM, 2012.

