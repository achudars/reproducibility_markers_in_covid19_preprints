Matrix Product States with adaptive global symmetries
Chu Guo1 and Dario Poletti2

arXiv:1905.01609v2 [quant-ph] 16 Oct 2019

2

1
Quantum Intelligence Lab (QI-Lab), Supremacy Future Technologies (SFT), Guangzhou 511340, China
Science and Math Cluster and EPD, Singapore University of Technology and Design, 8 Somapah Road, 487372 Singapore
(Dated: October 17, 2019)

Quantum many body physics simulations with Matrix Product States can often be accelerated if
the quantum symmetries present in the system are explicitly taken into account. Conventionally,
quantum symmetries have to be determined before hand when constructing the tensors for the
Matrix Product States algorithm. In this work, we present a Matrix Product States algorithm with
an adaptive U (1) symmetry. This algorithm can take into account of, or benefit from, U (1) or Z2
symmetries when they are present, or analyze the non-symmetric scenario when the symmetries are
broken without any external alteration of the code. To give some concrete examples we consider
an XYZ model and show the insight that can be gained by (i) searching the ground state and (ii)
evolving in time after a symmetry-changing quench. To show the generality of the method, we also
consider an interacting bosonic system under the effect of a symmetry-breaking dissipation.

I.

INTRODUCTION

Matrix Product States (MPS) algorithms have become
one of the best tools to study one-dimensional quantum
manybody systems [1–4]. It has been shown that they
can represent the ground state of a wide class of local
Hamiltonians [5, 6]. They can also be applied to study
the time evolution of both unitary and open quantum
manybody systems [7–17], provided the entanglement entropy, or the operator space entanglement entropy for
dissipative systems [18], do not grow too fast.
Symmetries play a very important role in physics as
they imply the presence of conserved quantities. These
make it possible to write the Hamiltonian of a system
in a block-diagonal form, where each block has an associated quantum number, thus significantly reducing the
storage requirements and the computational cost of diagonalizing it. In a number of systems and models the
total number of particles, or the total magnetization, are
conserved: in these scenarios the systems have a U (1)
symmetry. In other cases a system could have a discrete
symmetry, like a Z2 symmetry, which is a subgroup of
U (1). In such situations, it is often advantageous to explicitly encode the quantum symmetry into the tensors of
the MPS [9, 19, 20], which are also called symmetric Matrix Product States (s-MPS). s-MPS would usually result
in more efficient numerical algorithms because it only explores the portion of the Hilbert space corresponding to
the relevant symmetry sector. s-MPS are also particularly important when searching for the ground state in
a certain symmetry sector of an Hamiltonian, otherwise
the ground state search algorithm would return the lowest ground state of the global Hilbert space, i.e. of all
the symmetry sectors. Typically, one would thus use a
different MPS depending on whether the Hamiltonian is
symmetric or not, or maybe use a lesser efficient option.
This is particularly true in the study of dynamical systems in which the equations of motion change the symmetry properties of the system during the evolution. For
example, one could have prepared a quantum state in

the ground state of an XXZ chain, which has U (1) symmetry, and then suddenly tune the parameter so that the
system is modeled by a Z2 −symmetric XYZ chain. With
conventional s-MPS, one would have to manually convert
the ground state from U (1) to Z2 symmetry for the time
evolution.
In this work we propose MPS with adaptive global
U (1) symmetry to overcome this difficulty, which we will
refer to as adaptively symmetric Matrix Product States
(as-MPS). The central idea of our approach is to generalize U (1) s-MPS so that instead of a fixed total quantum number, it allows a superposition of different total
quantum numbers only. Importantly, the amount of different quantum numbers required changes automatically
during the calculations including only the quantum numbers required. As a result, a U (1) as-MPS is able to treat
systems with U (1) symmetry or systems whose symmetry group is a subgroup of U (1), or even no symmetry at
all, on the same footing.
This paper is divided into the following sections: In
Sec.II, we introduce in detail how to implement U (1)
as-MPS, including the ground state search and time evolution algorithms; In Sec.III, we show two concrete examples in which we can demonstrate the use of as-MPS,
one for a unitary system and the other for a dissipative
system; In Sec.IV we draw our conclusions.

II.

METHOD

Similarly to s-MPS, the building blocks of as-MPS are
symmetry protected tensors. The definition of a U (1)
symmetry protected tensor, as well as the basic tensor
operations based on it, has been presented in detail in
the literature. One particularly detailed example is [20],
although the use of symmetry protected tensors has been
presented earlier, for instance in [21]. In Sec.II A, we will
first give a minimal introduction to symmetry protected
tensors, then in Secs.II B and II C we, respectively, describe the adaptively symmetric MPS and Matrix Product Operator (MPO). In Sec.II D we describe how to

2
search for the ground state and in Sec.II E how to implement time evolution.
A.

Symmetry protected tensors

A U (1) symmetry protected tensor can be represented
as a list of dense tensors labelled by quantum numbers,
the dimension of the space corresponding to that quantum number and, very importantly, a direction for each
quantum number stating whether it is incoming or outgoing from the tensor. This direction is key to preserve
the symmetry for the overall state. For example, a 4 dimensional symmetry protected tensor O could be written
as
O=
(~
n ,I

),(~
n ,I

(~
n ,I ),(~
n ,I )
{O(n~31 ,Inn1 ),(n~42 ,Inn2 ) }.
3
4

(1)

)

Here O(n~13 ,Inn1 ),(n~24 ,Inn2 ) is a 4 dimensional dense tensor
3
4
with dimensions Ini , and ni for 1 ≤ i ≤ 4 labels the
four quantum number (note that here we don’t differentiate between superscripts and subscripts). The quantum
numbers have two directions, ~ni and n~i , depending on
whether, respectively, the quantum numbers flows in or
out. The U (1) symmetry can be explicitly enforced by
the fusion rule
n1 + n2 − n3 − n4 = 0,

(2)

where n3 and n4 are subtracted because their quantum
numbers flow outside of the tensor O, while n1 and n2
are added because their quantum numbers flow inside of
the tensor O. For the implementation of algorithms with
symmetric Matrix Product States, it is convenient to use
an appropriate library that takes into account which tensors can be added, multiplied, decomposed and merged.
Of particular importance would be a structured tensor
which takes into account of the possible number conserving combinations (see, for example, [20]). To simplify the
notation, in the following we will denote (~ni , Ini ) simply as ~ni and (n~i , Ini ) as n~i , implicitly indicating the
size Ini ; the tensor in Eq.(1) would then be rewritten as
n2
O = {O~nn~13 ,~
,n~4 }.
B.

Adaptively symmetric Matrix Product States

An MPS representing a quantum state on L sites is a
chain with 3−dimensional tensors. The tensor Ml on site
l of the MPS is labelled by a physical quantum number
σl , an auxiliary quantum number al which connects it to
its left hand site, and al+1 which connects it to its right
hand site. As a result, Ml can be written as
Ml = {M~aσ~ll,a~l+1 },

(3)

and the fusion rule Eq.(2) becomes
σl + al+1 − al = 0.

(4)

FIG. 1: as-MPS and as-MPO with adaptive global U (1) symmetry. We use the convention that the quantum numbers
flow in from the right hand side and out from the left hand
side. Each Ml is a 3 dimensional tensor and each Wl is a 4
dimensional tensor. a1 and aL+1 are the quantum numbers
on the left and right boundaries of the as-MPS, and b1 and
bL+1 are the quantum numbers on the left and right boundaries of the as-MPO. aL+1 and bL+1 are usually chosen so that
aL+1 = bL+1 = 0. For s-MPS and s-MPO, one has a1 = N (N
is the total quantum number) and b1 = 0 (the MPO conserves
the total quantum number). For as-MPS, a1 is allowed to have
multiple values N1 , N2 , . . . , each of them corresponds to an
s-MPS with total quantum number N1 , N2 , . . . . For as-MPO,
b1 is allowed to have multiple values such as −1, 0, 1, . . . , each
of them corresponding to a quantum operator which changes
the total quantum number by −1, 0, 1, . . . when applied to
an as-MPS. The labels a1 and b1 are in red to indicate the
main difference between s-MPS and s-MPO with as-MPS and
as-MPO.

We encode the flow of quantum numbers as in Fig.1
(bottom). Conventionally, if an MPS has a fixed total
quantum number N , then one would have aL+1 = 0 for
the right boundary, and a1 = N for the left boundary,
and we could denote it as s-MPSN . The central observation is that one can generalize this approach such that
aL+1 = 0 still holds, while a1 could have multiple values
depending on how many possible total quantum numbers the quantum state has. As a result, different a1 will
correspond to a different total quantum number. Simply speaking, an as-MPS is a collection of the relevant
s-MPSs which we write symbolically as
as-MPS =

X

s-MPSN .

(5)

N

As for typical s-MPS, the overall bond dimension (defined
as the size of the auxiliary dimensions) of an as-MPS is
the sum of the sizes of all the blocks corresponding to
different auxiliary quantum numbers. In this way, while
keeping each block to a manageable size, it is possible
to effectively use a very large overall bond dimension for
the as-MPS.

3
C.

where the Al are called “left-canonical” because
X σ~
A~all,a~l+1 conjugate(A)~σa~ll,~a0 = Ia~l+1 ,~a0l+1 ,

Adaptively symmetric Matrix Product
Operators

Adaptively symmetric Matrix Product Operators
(as-MPO) can be treated in a similar manner as they
form a chain of 4−dimensional symmetry protected tensors. The tensor Wl on the l-th site of an as-MPO is
labelled by two physical quantum numbers σl and τl , an
auxiliary quantum number bl which connects it to its left
hand site, and bl+1 which connects it to its right hand
site. Thus Wl can be written as
Wl = {W~~σl ,~τ~l },
bl ,bl+1

(6)

where the dimensions of the tensors are implicit in this
notation, and the quantum numbers satisfy
τl + bl+1 − σl − bl = 0.

(7)

The flow of quantum numbers is represented in Fig.1
(top). For U (1) symmetric systems, the MPO does not
change the total quantum number of the quantum state.
If the quantum state had total quantum number N before
being multiplied by the MPO, after the multiplication between MPO and MPS, the total quantum number for the
quantum state is still N . As
Pa result we can denote a symmetric MPO as s-MPO = N s-MPON
N , with the particular number preserving condition that b1 = bL+1 = 0. In
order to generalize this concept, we allow the quantum
number b1 at the left boundary to take multiple values
while still keeping bL+1 = 0. Therefore the adaptively
symmetric Matrix Product Operator can be written as
X
0
as-MPO =
(8)
s-MPON
N ,

and the Bl are “right-canonical”, i.e.
X σ~
B~all,a~l+1 conjugate(B)~σa~0l,~al+1 = I~al ,a~0l .

(11)

l

σl ,al+1

In both Eqs.(10,11) I~al ,a~0l represents the identity matrix
for the two indices ~al , a~0l . Here conjugate(O) means to
take the element wise conjugate of the tensor O, during which the direction of each quantum number also
gets reversed. The two tenors with a commom quantum
number n which is summed over should have opposite
directions. No restrictions is made on the tensors M. A
two-site ground state search variational MPS algorithm
works by iteratively minimizing the energy of an effective Hamiltonian Ĥeff on each neighbouring pair of sites.
This minimization is done iteratively, from left to right
and then back from right to left, in what is called a sweep.
Thus the central step for the two-site ground state search
algorithm is to build the local effective Hamiltonian Ĥeff .
To compute Ĥeff on sites l and l + 1 (also referred to as
bond l), one needs to trace out the left environment consisting of the sites to the left of the l-th site to obtain the
tensor Ll
X
L~a0 ,b~l ,a~l =
L~a0 ,b~l−1 ,a~l−1 ×
l

l−1

a0l−1 ,bl−1 ,al−1
0
σl−1 ,σl−1
~
σ0

σ~

~
σl−1 ,σ~0l−1
,
bl−1 ,b~l

l−1
l−1
A~al−1
,a~l conjugate(A)a~0 ,~
a0 W~

N,N 0

l−1

where N 0 = N if and only if the system has U (1) symmetry. In case the system has only a discrete symmetry, for
example parity, a Z2 symmetry, then N and N 0 satisfy
N 0 = N ± E where E is an even number. If the system
has no symmetry at all, then N and N 0 can be arbitrary.
However, in this case, it may be more efficient to use nonsymmetric MPO and MPS since the number of states will
be the same for both approaches and the non-symmetric
version has a much simpler data structure.
In the next sections we show how to adapt the ground
state search and time evolution algorithms using as-MPS
and as-MPO.

(10)

l+1

σl ,al

l

(12)

and the right environment consisting of sites to the right
of the (l + 1)-th site to obtain the tensor Rl+2
X
Ra~0 ,~bl+2 ,~al+2 =
Ra~0 ,~bl+3 ,~al+3 ×
l+2

a0l+3 ,bl+3 ,al+3
0
σl+2 ,σl+2
~
σ0

σ~

l+3

~
σl+2 ,σ~0l+2
.
bl+2 ,b~l+3

l+2
l+2
B~al+2
,a~l+3 conjugate(B)a~0 ,~
a0 W~
l+2

l+3

(13)

With Ll , Rl+2 and Wl , Wl+1 , one can construct Ĥeff as
~
a0 ,σ~0 ,σ~0

,a~0

l+1 l+2
Ĥeff a~ll,~σll,~σl+1
,~
al+2 =

X

L~a0 ,b~l ,a~l Ra~0
l

~

al+2
l+2 ,bl+2 ,~

×

bl ,bl+1 bl+2

D.

Ground state search algorithm

Here we present the ground state search algorithm that
we have implemented based on as-MPS. The core structure retraces that of a two-site variational Matrix Product States algorithm which we briefly present in the following. In this algorithm it is convenient to keep the
MPS in the “mixed-canonical” form
X
A1 . . . Al−1 Ml Ml+1 Bl+2 . . . BL ,
(9)
a1 ,a2 ,...,aL+1

~
σl+1 ,σ~0l+1

~
σ ,σ~0
bl ,bl+1

W~ l ~ l W~

bl+1 ,b~l+2

(14)

Grouping the tensor indexes (a~l , ~σl , ~σl+1 , ~al+2 ) and
(~a0l , σ~0l , σ~0l+1 , a~0l+2 ), one could treat Ĥeff as a matrix and
find its lowest eigenstate M~al ,σ~l ,σ~l+1 ,a~l+2 and eigenvalue.
Ma~l ,~σl ,~σl+1 ,~al+2 is then decomposed into two 3 dimensional tensors by singular value decomposition (SVD)
X σ~
σ~
SVD(M~al ,σ~l ,σ~l+1 ,a~l+2 ) =
A~all,s~ S~s,s~ B~s,l+1
(15)
a~l+2 ,
s

4
and the results are used to update Al or Bl+1 depending
on whether the sweep is from left to right or from right
to left.
To adapt the above algorithm to as-MPS, one notices that the only difference between s-MPS, s-MPO and
as-MPS, as-MPO is that for the latter there is a much
larger variety of possible values for the left-most index
(a1 or b1 ) of the tensors at the left boundary. Conventionally, a1 (auxiliary index on the s-MPS) can only take
a single value N and b1 (auxiliary index on the s-MPO)
has to be 0, therefore one can straightforwardly construct
L1 as
Ls-MPS
= {1N~ ,0,~ N~ },
1

(16)

where 1 means a trivial dense tensor with a single element 1 and where we have used the label s-MPS to
remind the reader that this concerns symmetric Matrix
Product States. For as-MPS and as-MPO, instead, L1
must be able to include all possible quantum numbers
that could appear after the as-MPO has been applied on
the as-MPS. Thus a way to construct L1 is to look at
the boundary indexes a1 and b1 and find all the relevant
combinations a1 + b1 , namely
L1 = {1~a1 +~b1 ,b~1 ,a~1 }.

(17)

With such a construction of L1 , the variational ground
state search algorithm would be able to automatically
detect and preserve the symmetry in the system, whether
it is U (1) or, for example, Z2 .
E.

Time evolution algorithm

Time evolution with as-MPS can be implemented in
various ways. In the following we describe two of them.
The first approach is based on multiplication between
MPOs and MPSs, as in time evolution with Tchebychev
polynomials [22–24]. These type of algorithms only depend on MPO and MPS arithmetic, namely MPO multiplication with MPS and the addition and subtraction
of MPSs. Hence these approaches can be readily implemented with as-MPS. For a generic construction of MPO
from arbitrary Hamiltonian (including symmetric ones),
one can refer to [25].
While the approach just described can be readily implemented, it is in general slower than Matrix Product
States algorithms which use Suzuki-Trotter decomposition [26, 27]. We thus describe here one way to use
Suzuki-Trotter decomposition for as-MPS. In these algorithms, one splits the time evolution operator Û(dt)
into many local operations which only affect the MPS locally. A typical example is shown in the central portion
of Fig.2, with orange background, in which the evolution for a certain time dt is divided in evolution on even
and odd bonds (respectively with the Hamiltonians Ĥe
and Ĥo ), and which can be parallelized (for more details
on this t−MPS algorithm see, for instance, the review

FIG. 2: Schematic representation of time evolution with
as-MPSs and as-MPOs. Starting from |Ψ(t)i it is possible
to compute |Ψ(t + dt)i doing a double Suzuki-Trotter decomposition. On one side the evolution is divided between the
two contributions of the asymmetric, non-number conserving, Hamiltonian Ĥa , each for a time dt/2 (as-MPOs with
green background), and the contribution from the symmetric part of the Hamiltonian Ĥs for a time dt which here, for
example, is performed with an ulterior Suzuki-Trotter decomposition between even (Ĥe ) and odd (Ĥo ) bonds. This part
is represented over the orange background.

[4]). In the following, for clarity, we focus on a unitary
evolution with a Hamiltonian Ĥ, however in the example discussed in Sec.III B we will show how this approach
can also be readily applied to dissipative evolutions. For
as-MPS, special attentions should be paid to the terms of
the Hamiltonian which change the total quantum number. Considering, for instance, that there is a local term
ĥl = σ̂l+ +σ̂l− acting on the l-th site of an as-MPS initially
in a single number sector N , the resulting state will be
a superposition of three number sectors N − 1, N, N + 1.
This means that even if ĥl only acts locally on site l, the
left boundary tensor at site l = 1 of the as-MPS has to
be updated and thus the effect on as-MPS is non-local.
As a result, we should not simply absorb non-number
conserving terms into a local operator and perform the
usual Suzuki-Trotter based algorithms. One way to overcome this complication is to separate an Hamiltonian Ĥ
into a symmetric, number-conserving part, Ĥs , and an
asymmetric, non-number-conserving part, Ĥa :

Ĥ = Ĥs + Ĥa .

(18)

It is now possible to use a second order time evolution

5

as 
shown in
For the symmetric portion,
 Fig.2.
exp −iĤs dt , one can perform a Suzuki-Trotter based


algorithm, while for exp −iĤa dt , one can treat it as an
MPO and perform an MPO based time evolution. This
hybrid time evolution algorithm
would

 be efficient if the
bond dimension DW of exp −iĤa dt is small which, for
instance, is the case if the non-number-conserving term
Ĥa is local. To give a more concrete idea before we discuss examples in the following section, local non-number
conserving components of an Hamiltonian are typical in
coupled resonator arrays, see for instance the review [28].
III.

EXAMPLES

In the following we present two exemplary applications
of as-MPS. In Sec.III A we discuss a unitary evolution
while in Sec.III B we present a boundary driven dissipative systems.
A.

Ground state and time evolution of an XYZ
chain

PS z

0.6

(a)

0.4
0.2
0
0.8
0.6

PS z

operator as (setting ~ = 1)
!
!


−iĤa dt
Ĥa dt
Û(dt) = exp
exp −iĤs dt exp −i
2
2
(19)

(b)

0.4
0.2
0
-20 -16 -12

-8

-4

0

Sz

4

8

12

16

20

FIG. 3: (a) Distribution of ground states in different number sectors PSTz . The lines from darker to lighter correspond
γ = 0.1, 0.4, 0.7, 1 respectively. The γ = 0 case has a single total quantum number shown by the black dashed line.
(b) Time evolution of the distribution of the quantum state
in different number sectors, after a quench from γ = 0 to
γ = 0.5. The initial state is the ground state of an XXZ
chain with a fixed total spin as shown by the black dashed
line. The lines from darker to lighter colors correspond to
times t = 0.1, 0.2, 0.3, 0.4, 0.5 respectively. The system size is
L = 50, the interaction strength ∆ = 1.5 and the magnetization strength h = 0.5. We have used bond dimensions up to
D = 2000. In both figures, only the data points with non-zero
values are shown (indicated with circles).

The Hamiltonian of an XYZ spin chain of size L can
be written as
ĤXYZ (γ) =

L−1
X


y
x
JXY (1 + γ) σ̂lx σ̂l+1
+ (1 − γ) σ̂ly σ̂l+1

l=1
L
X

z
+ ∆σ̂lz σ̂l+1
+h
σ̂lz ,

(20)

l=1

where σ̂lx , σ̂ly and σ̂lz are the operators corresponding to
Pauli matrices, JXY is the tunneling, ∆ is the interaction
strength and γ denotes the anisotropy ranging from 0 to
1, h is the strength of magnetization. For the special case
γ = 0, this model reduces to an XXZ chain with P
longitudinal field which conserves the total spin ŜTz = l σ̂lz
and has U (1) symmetry, while for γ 6= 0, the Hamiltonian
commutes with the parity operator P defined as


P = exp iπ ŜTz ,
(21)
thus having a discrete Z2 symmetry. In the following we
work in units for which JXY = ~ = 1. We first apply the
ground state search algorithm to ĤXYZ with L = 50. In
the following we keep the interaction strength ∆ = 1.5
and magnetization strength h = 0.5, and we compute
the ground state for different values of γ, starting the

search of the ground state from a state with zero total
magnetization ŜTZ = 0. For the case γ = 0, the resulting ground state will be the ground state in the same
number sector as the trial starting state, namely in the
number sector with 0 total spin. However, for γ 6= 0, the
resulting ground state will automatically be in the even
number sector, which is a superposition of states from
different number sectors that all have an even number
for the total spin. If one uses a Z2 symmetric MPS for
the γ 6= 0 case, one will obtain the same ground state but
only in the number sector labelled by 0 (corresponding
to mod (ŜTz , 2) = 0 , i.e. total spin modulo 2 is 0). A
major difference between using a Z2 symmetric MPS and
our as-MPS is that with our method it is straightforward
to extract the information about the occupation of states
with different total spins from the ground state. In fact,
one can simply split an adaptively symmetric MPS into
many U (1) symmetric MPSs with a fixed total spin as
in Eq.(8), by just splitting the tensor on the left boundary. Therefore, with adaptively symmetric MPS, one can
easily compute the distribution of the ground state in different number sectors PSTz , which is shown in Fig.3(a).
One can see clearly that for γ = 0, the ground state has
a single total spin (a kronecker delta at 0 represented by

6
a dashed line), while the distribution becomes broader as
γ increases to 1. we can also see that the non-zero values
are in a period of 4, which means the total number of
spins pointing up (down) is even.
We benckmark our as-MPS and as-MPO based ground
state search algorithm with the conventional ground state
search algorithm based on a Z2 s-MPS and s-MPO. For
the parameters which we have considered in Fig.3(a), the
differences between the ground state energies computed
from both approaches are of the order 10−9 , with a bond
dimension D = 2000. These two approaches use around
1.7 and 2.5 Gb memory, 0.75 and 2 hours separately on
a personal computer with 4 cores of 3.7 GHz frequency.
We then do a quench, starting from the ground state
corresponding to γ = 0, |GSXXZ i, and then evolving it
with the Hamiltonian (20) for γ = 0.5, as if a sudden
quench occurred. This evolution can be represented as


|ψ(t)i = exp −iĤXYZ (γ = 0.5) t |GSXXZ i.
(22)
We chose to perform the evolution using a fourth order
Runge-Kutta method based on MPO−MPS multiplication. To ensure convergence of our results, we have done
simulations with bond dimensions D = 1000, 1500, 2000
and checked various observables, for instance, for the average spin occupation hΨ(t)|σ̂lz |Ψ(t)i we get a difference
of the order of 10−9 . We have also compared these observables with those computed with time-evolving matrix
product states algorithm (t-MPS) [4] using a Z2 symmetric MPS and MPO, obtaining a difference of the order
10−4 . We note that this difference is partially due to the
fact that we have used a simple MPO based Runge-Kutta
method for the time evolution, which is known to have
poorer performance than other MPO based time evolution algorithms such as the approaches in [24]. Instead,
for the symmetric MPS with a Z2 symmetry, we have
used the standard t-MPS algorithm (by manually converting the initial state from U (1) symmetry into Z2 symmetry) which is known to be very stable and accurate.
With the as-MPS approach it is straightforward to see
that the quantum state of the system gradually expands
into different number sectors with an even number of total spin STz , as shown in Fig.3(b). We note that despite
the initial state is computed for an Hamiltonian with a
different symmetry from that of the evolution Hamiltonian, we use the same structure of Matrix Product States
both for searching the ground state and the evolution,
making the passage between the two different symmetry
regimes seamless.

B.

Time evolution of a dissipatively boundary
driven Bose-Hubbard chain

The method to evolve in time the as-MPS can be readily extended from unitary to dissipative dynamics. We
show an example in the following. The dynamics of
the system is described by a master equation of Gorini-

FIG. 4: (a) Time evolution of the distribution of the density operator in different number sectors, PN as in Eq.(26),
starting from the ground state of a Bose-Hubbard chain with
average filling n̄ = 0.5. (b) Average occupation of each site
l, hnl i. In both panels, the black dashed line corresponds
to the initial state. The lines from darker to lighter colors
correspond to t = 0.2, 0.4, 0.6, 0.8, 1 respectively. The system
size L = 20. The other parameters used are d = 10, U = 4,
Λ1 = ΛL = 1 (in units for which J = ~ = 1), n̄1 = 0.75,
n̄L = 0.25 and the bond dimension D = 1500.

Kossakowski-Sudarshan-Lindblad form [29, 30]
i
dρ̂
= L̂(ρ̂) = − [ĤBH , ρ̂] + D̂(ρ̂),
dt
~

(23)

where we refer to L̂ as the Lindbladian, D̂ as dissipator,
and where the Hamiltonian ĤBH can be written as
ĤBH = − J

L−1
X


âl â†l+1 + H.c.

(24)

l=1

+

L
UX
n̂l (n̂l − 1).
2
l=1

The dissipator can be written as


X h
D̂(ρ̂) =
Λl (n̄l + 1) 2âl ρ̂â†l − {â†l âl , ρ̂}
l=1,L


i
+ n̄l 2â†l ρ̂âl − {âl â†l , ρ̂} .

(25)

In Eqs.(24,25) we have used the notations â†l , âl for the
bosonic creation and annihilation operators and n̂l =
â†l âl . J is the tunneling amplitude and U is the local
interaction strength. Λ1,L denotes the strength of the
dissipation acting at the edges l = 1 or l = L. If J = 0,
the dissipator will impose a local thermal distribution at
the edges with average occupation n̄1,L respectively. Similarly as for the case of the XYZ chain, in the following
we work in units for which J = ~ = 1.
In general, to simulate the time evolution of this system with Matrix Product States, it is first useful to stress

7
that, while at a given site it would be possible to have a
very large (even infinite) number of bosonic particles, the
first step is to limit the local Hilbert space size to a finite
number, which we refer to as d. For unitary systems,
for an interaction strength U ≥ 3, it is usually sufficient
to keep d = 4. However, to faithfully represent a local
bosonic thermal state, d has to be much larger due to the
long tail of the thermal distribution. In our simulations
we have used d = 10 and d = 11 to ensure the accuracy
of the results.
A standard way to deal with density matrices with Matrix Product States is to consider them as vectors and, as
a result, the local Hilbert space will be of size d2 . If one
uses non-symmetric Matrix Product States for the time

evolution, for instance splitting the operator exp L̂dt
into many two-sites operators, then each two-body operator would be a d4 × d4 matrix. For d = 10, one such
operator will contain 108 (possibly complex) numbers,
thus consuming a large amount memory. Furthermore,
the most numeric expensive part of the Matrix Product
States algorithm would be a two-site singular value decomposition performed on a Dd2 × Dd2 matrix. For a
reasonable bond dimension D = 100 and local Hilbert
space d = 10, this tensor would have a size of 104 × 104 ,
for which it is prohibitive to run a singular value decomposition on most personal computers. On this point
we remark that in [31] we kept only the diagonal and a
few off-diagonal elements of the single-site reduce density
matrix thus reducing the local space from d2 to kd with
k < 5. This was possible for the dissipator used (same as
the one in Eq.(25), and the system analyzed), as the local
density matrix is mainly diagonal. Such approximation
is however not sufficient to study larger systems. Using
as-MPS it is possible, as explained in the following, to
study larger systems.
We note that the unitary part of L̂ is number conserving, while the dissipator in Eq.(25) is local, thus the
MPO for the non-number-conserving part has a bond dimension equal to 1, which is the smallest possible size. In
addition, the dissipator in Eq.(25) has an ulterior property: if we write the density operator using the basis
|~nN ; N ihm
~ M ; M | where N is the total number of bosons
in the ket (M in the bra), and ~nN is the vector detailing
how the N bosons are distributed over the L sites (respectively m
~ M describes how the M bosons are distributed
between L sites), then it appears clear that the dissipator
couples the element corresponding to |~nN ; N ihm
~ M; M|
with |~nN ±1 ; N ± 1ihm
~ M ±1 ; M ± 1|. This implies that if
the initial condition belongs to a single number sector
(e.g. at initial time N = M ), then the density operator will have only non-zero terms for blocks in which
N = M . This block-diagonal structure of the density
operator has been discussed in [32] and exploited in the
context of studying transport with exact diagonalization
tools. This symmetry of the density operator will automatically be preserved with as-MPS and as-MPO, making our hybrid time evolution algorithm introduced in
Sec.II E an ideal tool to study this type of problems.

In our exemplary simulation, we first prepared the initial state of the system to be the ground state of a BoseHubbard chain of size L = 20 with average filling 0.5
and U = 4, which we denote as |GSBH i. We then turn
on the dissipation, with Λ1 = ΛL = 1, n̄1 = 0.75 and
n̄L = 0.25. For the simulations we have truncated the
local Hilbert space to d = 10 and used a bond dimension
D = 1000 for the MPS, and the time step dt = 0.01. To
ensure that our choices of d and D are appropriate, we
have also done simulations and computed the local density hn̂j i = tr (n̂l ρ̂) with d = 11, getting a difference of
the order of 10−5 , and with D = 1500, getting a difference
of the order of 10−4 . In Fig.4(a), we plot the distribution
of the quantum state in different number sectors, i.e.
PN =

X

h~nN ; N |ρ̂|~nN ; N i,

(26)

~
nN

something readily done with as-MPS. The initial state
has a total of 10 bosons, then during the evolution, the
state becomes a superposition of states from many number sectors due to the boundary dissipative driving. The
distribution of the density operator in different number
sectors becomes broader with time. In Fig.4(b), we plot
the average occupation hn̂l i as a function of site l at different times. Initially, since the evolution starts from
the ground state, the distribution of hnl i is symmetric
around the middle site. At later times the distribution
becomes unbalanced due to the different drivings at the
two edges.

IV.

CONCLUSION

In this work we have proposed a Matrix Product States
algorithm that can treat a global U (1) symmetry or one
of its subgroups on the same footing. At the same time,
this method can also deal with non-number conserving
systems. We have shown how this method, based on
adaptively symmetric Matrix Product States, can be applied to search for the ground state of a system and also
for time evolution.
We shall note that the conventional symmetric Matrix
Product States method can be viewed as a special case
of the one presented here. Moreover, for systems without
U (1) symmetry, or, for instance, with only Z2 symmetry,
the adaptively symmetric Matrix Product States method
allows to readily acquire additional information about the
distribution of the state in different number sectors.
This method could be very useful in some applications in which the presence of symmetries, and their type,
changes within the evolution. We have studied two such
examples both for unitary and dissipative systems. In
both cases the use of adaptively symmetric Matrix Product States allows to readily follow the evolution of the
system and benefit of the symmetries when present. The
efficiency of the method depends on the system studied.
Adaptively symmetric Matrix Product States could also

8
be extended to systems with non-Abelian symmetries,
however this is beyond the scope of the current work.

and No. 11805279. D.P. acknowledges support from the
Singapore Ministry of Education, Singapore Academic
Research Fund Tier-II (project MOE2016-T2-1-065).

Acknowledgments

C. G. acknowledges support from National Natural Science Foundation of China under Grants No. 11504430

[1] M. Fannes, B. Nachtergaele, and R. Werner, Commun.
Math. Phys., 144, 443 (1992).
[2] S. Ostlund and S. Rommer, Phys. Rev. Lett., 75, 3537
(1995).
[3] D. Perez-Garcia, and F. Verstraete, M.M. Wolf, and J.I.
Cirac, Quantum Inf. Comput., 7, 401 (2007).
[4] U. Schollwoc̈k, Ann. Phys. 326, 96 (2011).
[5] M. B. Hastings, J. Stat. Mech: Theory Exp. (2007)
P08024.
[6] G. Vidal, Phys. Rev. Lett., 101, 110501 (2008).
[7] G. Vidal, Phys. Rev. Lett. 91, 147902 (2003).
[8] G. Vidal, Phys. Rev. Lett. 93, 040502 (2004).
[9] A. J. Daley, C. Kollath, U. Schollwöck, and G. Vidal, J.
Stat. Mech. Theor. Exp., (2004) P04005.
[10] S. R. White and A. E. Feiguin, Phys. Rev. Lett. 93,
076401 (2004).
[11] F. Verstraete, J. J. Garcı́a-Ripoll, and J. I. Cirac, Phys.
Rev. Lett., 93, 207204 (2004).
[12] A. J. Daley, Adv. Phys. 63, 77 (2014)
[13] I. de Vega, and M.C. Banuls, Phys. Rev. A (2015)
[14] C. Guo, I. de Vega, U. Schollwöck, and D. Poletti, Phys.
Rev. A 97, 053610 (2018).
[15] X. Xu, J. Thingna, C. Guo, and D. Poletti, Phys. Rev.
A 99, 012106 (2019).
[16] T. Prosen, and M. Znidaric, J. Stat. Mech. (2009)
P02035.
[17] M. Palmero, X. Xu, C. Guo, and D. Poletti,
arXiv:1901.05145 (2019).
[18] T. Prosen, and I. Pizorn, Phys. Rev. Lett. 101, 105701
(2008).
[19] D. Perez-Garcia, M.M. Wolf, M. Sanz, F. Verstraete, and
J.I. Cirac, Phys. Rev. Lett., 100, 167202 (2008).
[20] S. Singh, R.N.C. Pfeifer, and G. Vidal, Phys. Rev. B 83,
115125 (2011).
[21] I. P. McCulloch, J. Stat. Mech. (2007) P10014.
[22] J. J. Garcı́a-Ripoll, New J. Phys. 8, 305 (2006).
[23] J.C. Halimeh, F. Kolley, and I.P. McCulloch, Phys. Rev.
B 92, 115130 (2015).
[24] M.P. Zaletel, R.S.K. Mong, C. Karrasch, J.E. Moore, and
F. Pollmann, Phys. Rev. B 91, 165112 (2015).
[25] C. Hubig, I. P. McCulloch, and U. Schollwoc̈k, Phys. Rev.
B 95, 035129 (2017).
[26] H.F. Trotter, Proc. Amer. Math. Soc. 10, 545 (1959).
[27] M. Suzuki, Comm. Math. Phys. 51, 2 (1976).
[28] C. Noh, and D. Angelakis, Rep. Prog. Phys. 80, 016401
(2016).
[29] V. Gorini, A. Kossakowski, and E. C. G. Sudarshan, J.
Math. Phys. 17, 821 (1976).
[30] G. Lindblad, Commun. Math. Phys. 48, 119 (1976).
[31] C. Guo, M. Mukherjee, and D. Poletti, Phys. Rev. A 92,
023637 (2015).

[32] C. Guo, and D. Poletti, Phys. Rev. B 96, 165409 (2017).

Appendix A: Construction of as-MPS and as-MPO for
XYZ chain

In this appendix we demonstrate the process of constructing of an as-MPS and an as-MPO using the concrete example of a 3-site spin XYZ chain with the magnetization strength h = 0. We label the state |0i with
quantum number 0, and the state |1i with 1. Assuming
we have an initial state which is
√

2
(|110i + |100i)
2
The as-MPS corresponding to state |ψi is
|ψi =

(A1)

√

2 1~
~
{1~1,0~, 1~12,1~},
2
~
~
M2 = {1~00,0~, 1~11,0~},

M1 =

~

M3 = {1~00,0~}.

(A2)

In fact on site l = 3 there is only one possible quantum
number flowing in a~4 = 0, only one quantum number
present on the site σ~3 = 0 and hence only one possible
output ~a3 = 0. Similarly, at site l = 2 there are two
possible values for σ~2 = 0, 1 which results in ~a2 = 0, 1.
At site l = 3, the local quantum number is only σ~1 = 1,
but since a~2 takes two possible values, then ~a1 = 1, 2.
In the non-symmetric case, the MPO corresponding to
ĤXYZ for L = 3 can be straightforwardly written as

MPOXYZ = (1 + γ)σ x (1 − γ)σ y ∆σ z
 x
 
σ
0
0
0
y
0
0
0  
σ
⊗
 σz
0
0
0  
1 (1 + γ)σ x (1 − γ)σ y ∆σ z


1 ⊗

1
x
σ 
.
σy 
σz

(A3)

Now we first rewrite ĤXYZ in the following form
ĤXYZ = 2

2
X
 + −
+
σ̂j σ̂j+1 + σ̂j− σ̂j+1
+
j=1


+
−
z
γ(σ̂j+ σ̂j+1
+ σ̂j− σ̂j+1
) + ∆σ̂jz σ̂j+1
, (A4)

9
which is a summation of 10 terms (because there are two
bonds). To write down the corresponding as-MPOXYZ ,
it is convenient to first write the product MPO for each
term and then use the MPO addition rule to sum them
up [25]. The product MPO corresponding to the terms
σ̂1+ σ̂2− , σ̂1− σ̂2+ , σ̂1+ σ̂2+ , σ̂1− σ̂2− , σ̂1z σ̂2z can be written as
~ ~

~ ~

~ ~

~ ~

1,0
0,0
1
0,1
, 11,
}
MPOσ̂+ σ̂− ={1~0,
~ 0~} × {1~
~ } × {1−1,
0,0~ ~
0,0~
−1
1

2

MPOσ̂− σ̂+
1

2

~
1,0~
={1~0,
}
1~

×

~ 1~
{1~0,
}
1,0~

~ ~

×

~ 0~ ~
1~
{1~0,
, 11,
}
0,0~ ~
0,0~

~ ~

~ ~

~ ~

1
1
0
1
MPOσ̂+ σ̂+ ={1~0,
} × {1~0,
} × {1~0,
, 11,
}
2,1~
1,0~
0,0~ ~
0,0~
1

2

MPO

σ̂1− σ̂2−

MPOσ̂1z σ̂2z

~ 0~
={11,
~ −1
~}
−2,

×

~
1,0~
{1−1,
~ 0~}

×

~ 0~ ~
1,1~
{1~0,
, 10,
}
0,0~ ~
0~

(A5)
(A6)
(A7)
(A8)

×

as-MPOXYZ = 2

2 h
X
MPOσ̂+ σ̂− + MPOσ̂− σ̂+
j

j+1

j

j+1

j=1

~ 0~
~ 1~
={1~0,
, −1~1,
}×
0,0~
0,0~
~ 0~
~ 1~
{1~0,
, −1~1,
}
0,0~
0,0~

MPOσ̂1z σ̂2z , the auxiliary index on the left boundary b1 =
0, while we have b1 = 2 for the term MPOσ̂+ σ̂+ , and
1 2
b1 = −2 for the term MPOσ̂− σ̂− . We can also con1 2
struct the remaining terms of MPOσ̂+ σ̂− , MPOσ̂− σ̂+ ,
2 3
2 3
MPOσ̂+ σ̂+ , MPOσ̂− σ̂− , MPOσ̂2z σ̂3z similarly. We note
2 3
2 3
that if we encode the MPO with Z2 symmetry instead
of U (1) symmetry, then b1 for the terms MPOσ̂+ σ̂+ and
1 2
MPOσ̂− σ̂− will also be 0 since 2 and −2 are equivalent
1 2
to 0 modulo 2. The final as-MPO is a summation of all
these terms

~ 0~ ~
1~
{1~0,
, 11,
}
0,0~ ~
0,0~

(A9)

We notice that for the terms MPOσ̂+ σ̂− , MPOσ̂− σ̂+ ,
1

2

1

2

+ γ(MPOσ̂+ σ̂+ + MPOσ̂− σ̂− )
j
j
j+1
j+1
i
z
.
(A10)
+ ∆ MPOσ̂jz σ̂j+1

