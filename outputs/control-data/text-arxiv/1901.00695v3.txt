arXiv:1901.00695v3 [math.OC] 28 Jun 2021

The Product Knapsack Problem:
Approximation and Complexity
Ulrich Pferschya , Joachim Schauera , Clemens Thielenb
a

Department of Statistics and Operations Research, University of Graz,
Universitaetsstrasse 15, A-8010 Graz, Austria
b
TUM Campus Straubing, Technical University of Munich,
Am Essigberg 3, D-94315 Straubing, Germany

Abstract
We consider the product knapsack problem, which is the variant of the classical 0-1 knapsack problem where the objective consists of maximizing the
product of the profits of the selected items. These profits are allowed to be
positive or negative. We show that this recently introduced variant of the
knapsack problem is weakly NP-hard and present a fully polynomial-time
approximation scheme (FPTAS) for the problem. Moreover, we analyze the
approximation quality achieved by a natural extension of the classical greedy
procedure to the product knapsack problem.
Keywords: Knapsack, Approximation Scheme, Complexity
1. Introduction
The 0-1 knapsack problem (KP) is a well-studied combinatorial optimization problem that has been treated extensively in the literature, with
two monographs [1, 2] devoted to KP and its relatives. Given a positive
knapsack capacity C and n items j = 1, . . . , n with positive weights wj and
profits pj , the task in the classical 0-1 knapsack problem is to select a subset
of items with maximum total profit subject to the constraint that the total
weight of the selected items may not exceed the knapsack capacity. The 0-1
knapsack problem is NP-hard, but it admits a fully polynomial time approximation scheme (FPTAS) and can be solved exactly in pseudo-polynomial
time by dynamic programming (cf. [2]).

The product knapsack problem (PKP) is a new addition to the knapsack
family. It has recently been introduced in [3] and is formally defined as
follows:
Definition 1 (Product Knapsack Problem (PKP)).
INSTANCE: Items j ∈ N := {1, . . . , n} with weights wj ∈ Z and profits pj ∈ Z, and a positive knapsack
capacity C ∈ N+Q
.
P
TASK:
Find a subset S ⊆ N with j∈S wj ≤ C such that j∈S pj
is maximized.
The solution S = ∅ is always feasible and is assumed to yield an objective
value of zero. Note that the assumption that the knapsack capacity as well
as all weights and profits are integers is without loss of generality. Indeed,
any instance with rational input data can be transformed into an equivalent instance with integer input data in polynomial time by multiplying all
numbers by their lowest common denominator.
D’Ambrosio et al. [3] list several application scenarios for PKP, in particular in the area of computational social choice, and also provide pointers
to literature on other nonlinear knapsack problems. Furthermore, two different ILP formulations for PKP are presented and compared from both a
theoretical and a computational perspective. In addition, D’Ambrosio et
al. [3] develop an algorithm performing dynamic programming by weights
with pseudopolynomial running time O(nC). A computational study exhibits the strengths and weaknesses of the dynamic program and the ILP
approaches for determining exact solutions of PKP depending on the characteristics of the test instances. However, no approximation results for PKP
are known so far.
1.1. Our Contribution
In this paper, we settle the complexity status of PKP by providing a proof
of weak NP-hardness in Section 3, as well as an FPTAS based on dynamic
programming by profits in Section 4. The construction of an FPTAS deserves attention since standard greedy-type algorithms fail to give a constant
approximation ratio for PKP. We demonstrate this in Section 5 by providing
a tight analysis of the greedy algorithm obtained by extending the classical
greedy procedure for KP to PKP in the natural way.

2

2. Preliminaries
In contrast to KP, both the item weights wj and the item profits pj are
allowed to be negative in PKP. However, one can exclude certain weightprofit combinations that yield “useless” items, which leads to the following
assumption used throughout the paper:
Assumption 1. Any instance of PKP satisfies:
(a) Any single item fits into the knapsack, i.e., wj ≤ C for all j ∈ N.
(b) All profits are nonzero, i.e., pj ∈ Z \ {0} for all j ∈ N.
(c) For each item j ∈ N with negative profit pj < 0, there exists another
item j ′ ∈ N \ {j} with negative profit pj ′ < 0 such that wj + wj ′ ≤ C.
(d) All weights are nonnegative, i.e., wj ∈ N0 for all j ∈ N.
(e) All items with weight zero have negative profit, i.e., pj < 0 whenever
wj = 0.
We note that Assumption 1 imposes no loss of generality and can easily
be checked in polynomial time. Indeed, items j ∈ N violating (a), (b),
or (c) can never be part of any feasible solution with positive objective value
and may, thus, be removed from the instance. The nonnegativity of the
weights wj demanded in (d) has been shown to impose no loss of generality
in [3]. For (e), we note that items j with wj = 0 can always be assumed to
be packed if their profit is positive (but items j with wj = 0 and negative
profit remain part of the optimization).
Using Assumption 1 (b), the item set N can be partitioned into N + :=
{j ∈ N | pj ≥ 1} and N − := {j ∈ N | pj ≤ −1}. For convenience, we define
−
pmax := maxj∈N |pj |, p+
max := maxj∈N + pj , and pmax := maxj∈N − |pj |.
Throughout the paper, we denote an optimal solution set for a given
instance of PKP by S ∗ and the optimal objective value by z ∗ . Note that we
must always have z ∗ ≥ 1 since packing any item from N + or any feasible
pair of items from N − yields an objective value of at least 1.
Definition 2. For 0 < Qα ≤ 1, an algorithm A that computes a feasible
solution set S ⊆ N with j∈S pj ≥ α·z ∗ in polynomial time for every instance
of PKP is called an α-approximation algorithm for PKP. The value α is then
called the approximation ratio of A.
3

A polynomial-time approximation scheme (PTAS) for PKP is a family of
algorithms (Aε )ε>0 such that, for each ε > 0, the algorithm Aε is a (1 − ε)approximation algorithm for PKP. A PTAS (Aε )ε>0 for PKP is called a fully
polynomial-time approximation scheme (FPTAS) if the running time of Aε
is additionally polynomial in 1ε .
Throughout the paper, log(x) always refers to the base 2 logarithm of x
and ln(x) refers to the natural logarithm of x.
3. Complexity
In this section, we show that PKP is weakly NP-hard. In fact, [3] already
stated a short proof of weak NP-hardness as a side remark (Proposition 6).
Their proof, however, uses a reduction from KP and requires an exponential
blow-up of the profits of the given instance of KP (by putting them into the
exponent of 2). Since KP is only weakly NP-hard, this is problematic and
does not prove the desired hardness result.
After publication of the first version of this manuscript in [4] in January
2019, we became aware that a proof of NP-hardness of PKP had already
been published in [5] in December 2018. Since our proof uses only elementary
operations and does not require the concepts of advanced calculus as in [5],
we present it here as a possibly useful alternative.
In our proof, we use a reduction from the Product Partition Problem
(PPP), which was shown to be strongly NP-hard in [6] and can be stated as
follows:
Definition 3
INSTANCE:
QUESTION:

(Product Partition Problem (PPP)).
Positive integers a1 , . . . , an ∈ N+ .
Is there a subset
S ⊆ N = {1, . . . , n} such that
Q
Q
a
=
j∈S j
j∈N \S aj ?

Within the proof, we use the following result:
Lemma 1. For all x ≥ 1, we have
log(x + 1) − log(x) ≥

4

1
.
x+1

Proof. Considering the first derivative (log(x))′ =
of the logarithm, we obtain

1
x ln 2

and the concavity

1
1
≤ log(x + 1) −
.
ln 2 (x + 1)
x+1

log(x) ≤ log(x + 1) −

We are now ready to show our hardness result for PKP:
Theorem 2. PKP is weakly NP-hard - even when all profits are positive.
Proof. Given an instance a1 , . . . , an of PPP, we define

v
uY
u n
M := (n + 2) · t aj + 1 .
j=1

qQ

n
j=1 aj

Q

aj ∈ N+ must hold for any solution S of
qQ
n
the PPP instance, we can assume without loss of generality that
j=1 aj ∈

Note that, since

=

j∈S

N, which also implies that M is an integer.1 Moreover, since we can put an
index j with aj = 1 on either side of a partition (S, N \ S) without changing
the feasibility of S for the PPP instance, we can also assume that aj ≥ 2 for
all j ∈ N.
We now construct an instance of PKP with positive profits as follows:
There is one item for each index in N = {1, . . . , n}. Item j ∈ N has profit
pj := aj and
Pnweight wj := ⌊M · log(aj )⌋. The knapsack capacity is set to
M
C := ⌈ 2 · j=1 log(aj )⌉.
Regarding the polynomial-time computability of the constructed PKP
instance, we observe that the profits in the PKP instance clearly have polynomial encoding length in the size of the PPP instance. For the weights wj
and the knapsack capacity C, we note that, while their definition involves
logarithms log(aj ) (which cannot be computed exactly in polynomial time),
these logarithms only appear in expressions that are rounded to integers in
1

qQ
n

aj ∈ N can be easily checked in polynomial time by using binary
Q
search for the square root within the interval [1, nj=1 aj ].
The condition

j=1

5

the definition of the wj and C. Thus, the logarithms do not need to be computed exactly when computing the wj and C. The encoding lengths of the
weights wj and the knapsack capacity C are mainly determined
Pnby the encoding length of M. Encoding M in binary requires Θ(log(n)+ j=1 log(aj ))
bits. Thus, the binary encoded version of the constructed PKP instance has
size polynomial in the size of the (binary or unary encoded) instance of PPP
and can be constructed in polynomial time.2
We now show that the
constructed instance of PKP has a solution with
qQ
n
objective value at least
j=1 aj if and only if the given instance of PPP is
a yes-instance.
First assume that the
of PPP is a yes-instance, Q
i.e., there
Q given instance
Q
exists S ⊆ N such that j∈S aj = j∈N \S aj . Then, as seen above, j∈S pj =
qQ
Q
n
a
=
j=1 aj , so packing exactly the items in S into the knapsack
j∈S j
yields the desired profit. Moreover, this is a feasible
solution for the PKP
qQ
Q
n
instance since raising both sides in j∈S aj =
j=1 aj to the M-th power
and taking the logarithm yields that
v

M 
!M 
u
n
Y
uY

 = log 
log 
aj
t aj  
j=1

j∈S

n

M X
·
log(aj )
2
j=1
j∈S
&
'
n
X
M X
⇒
⌊M · log(aj )⌋ ≤
·
log(aj ) = C.
2 j=1
j∈S
⇔M·

X

log(aj ) =

Conversely, assume that the
constructed instance of PKP has aq
solution S
qQ
Q
Qn
Q
n
with objective value at least
j=1 aj , i.e.,
j=1 aj .
j∈S pj =
j∈S aj ≥
q
Q
Qn
We claim that we must then actually have equality, i.e., j∈S aj =
j=1 aj ,
qQ
n
In contrast, encoding M in unary requires Θ(n
j=1 aj ) bits, so the unary encoded
version of the PKP instance has size exponential in the size of both the binary and the
unary encoded instance of PPP. Consequently, the reduction will indeed only show weak
NP-hardness, even though PPP is strongly NP-hard.
2

6

which directly implies that
the PPP instance.

Q

j∈S

aj =

Q

j∈N \S

aj , so S ⊆ N is a solution of

Assume for the sake of a contradiction that

Q

j∈S aj >

qQ
n

aj . Since
Q
both sides of the inequality are integers, this then implies that j∈S aj ≥
qQ
n
j=1 aj + 1, and raising both sides to the M-th power and taking the
logarithm yields that

v
uY
X
u n
(1)
M · log(aj ) ≥ M · log t aj + 1 .
j=1

j=1

j∈S

In order to lower bound the right hand side of (1), we use that, by Lemma 1,


v
v
uY
uY
u n
u n
1
,
log t aj + 1 − log t aj  ≥ qQ
n
a
+
1
j=1
j=1
j
j=1
which implies that

v
uY
u n
M = (n + 2) · t aj + 1 ≥
j=1

n+2
log(

qQ

n
j=1 aj

+ 1) − log(

qQ

n
j=1 aj )

Reordering terms, this yields
v


v
uY
uY
u n
u n
M · log t aj + 1 ≥ M · log t aj  + (n + 2).
j=1

j=1

Combining (1) and (2) now shows that
X
j∈S

⇔

j=1

n
M X
·
log(aj ) + (n + 2)
2 j=1

X

M · log(aj ) ≥

X

M · log(aj ) − n ≥

j∈S

⇔


v
uY
u n
M · log(aj ) ≥ M · log t aj  + (n + 2)

j∈S

n
M X
·
log(aj ) + 2
2 j=1

7

.

(2)

Since rounding down each of the at most n P
summands on the left decreases
M
the sum by at most n and rounding up 2 · nj=1 log(aj ) increases this value
by at most one, this implies that
&
'
n
X
M X
⌊M · log(aj )⌋ ≥
·
log(aj ) + 1 = C + 1,
2
j=1
j∈S
which contradicts the feasibility of the set S for the PKP instance and completes the proof.
4. A Fully Polynomial-Time Approximation Scheme
We now derive a fully polynomial-time approximation scheme (FPTAS)
for PKP based on dynamic programming.
The most common approach for the exact solution of knapsack-type problems in pseudo-polynomial time applies dynamic programming by weights.
This means that, for every capacity value d = 0, 1, . . . , C, the largest profit
value reachable by a feasible solution is determined, which yields a running time polynomial in C (see [2, Sec. 2.3]). However, for obtaining fully
polynomial-time approximation schemes, one usually performs dynamic programming by profits. In this case, for every profit value p up to some upper
bound U on the objective function value, the smallest weight required for a
feasible solution with profit p is sought, which leads to a running time polynomial in U (see [2, Lemma 2.3.2]). Then, the profit space is simplified in
some way, e.g., by scaling (cf. [2, Sec. 2.6]), such that the running time of
the dynamic program becomes polynomial and the incurred loss of accuracy
remains bounded.
D’Ambrosio et al. [3] provide an algorithm solving PKP with dynamic
programming by weights, where each entry of the dynamic programming
array contains the objective value of a subproblem. However, exchanging
the roles of profits and weights (as it is done, e.g., for KP, see [2, Sec. 2.3]),
would require a dynamic programming array of length O(pnmax ), which is
exponential and does not permit a suitable scaling procedure.
An obvious way out of this dilemma would be the application of the logarithm to the profits. In fact, such an approach is suggested as a side remark in
[3, Sec. 3] for dynamic programming by weights (without commenting on the
details of the rounding process). For dynamic programming by profits, however, the profit values must be mapped to integers as indices of the dynamic
8

programming array and there seems to be no way to preserve optimality in
such a process. It should also be noted that applying any k-approximation
algorithm for KP to the instance resulting from logarithmization would only
yield a (1/z ∗ )1/k -approximation for PKP. Thus, constant-factor approximations for PKP require different approaches.
We now construct a scaled profit space that actually yields a (1 − ε)–
approximation for PKP. Our scaling construction is based on a parameter
K > 0 depending on ε, which will be defined later. For every item j, we
define an integer scaled profit value in the logarithmized space as


log(|pj |)
p̃j :=
.
(3)
K
Since |pj | ≥ 1, we have p̃j ≥ 0, and we obtain p̃j = 0 if and only if |pj | =
1. Note that an item j with pj = −1 and p̃j = 0 might still be useful
for changing
the ksign of the solution of PKP. Analogous to pmax , we define
j
log(pmax )
p̃max :=
. Ruling out trivial instances, we can assume without loss
K
of generality that pmax ≥ 2, so log(pmax ) ≥ 1. As discussed in the proof of
Theorem 2, also for the FPTAS we require the logarithm only for expressions
which are rounded down to integers and, thus, do not have to compute these
values exactly.
We define the following dynamic programming arrays for profit values
p̃ = 0, 1, . . . , n · p̃max :
(
)
X
X
Wj+ (p̃) :=
min
wi |
p̃i = p̃, |S ∩ N − | is even ,
S⊆{1,...,j}

Wj− (p̃) :=

min

S⊆{1,...,j}

(

i∈S

i∈S

X

X

i∈S

wi |

i∈S

)

p̃i = p̃, |S ∩ N − | is odd .

Note that the empty set has even cardinality. For convenience, we set the
minimum over the empty set equal to +∞.
The computation of these arrays can be done by the following recursion,

9

which is related to Algorithm DPPKP in [3, Fig. 1]:
If pj ≥ 1, then:

+
+
Wj+ (p̃) := min{Wj−1
(p̃), Wj−1
(p̃ − p̃j ) + wj }
−
−
Wj− (p̃) := min{Wj−1
(p̃), Wj−1
(p̃ − p̃j ) + wj }

If pj ≤ −1, then:

+
−
Wj+ (p̃) := min{Wj−1
(p̃), Wj−1
(p̃ − p̃j ) + wj }
−
+
Wj− (p̃) := min{Wj−1
(p̃), Wj−1
(p̃ − p̃j ) + wj }

The obvious initialization is given by W0+ (0) := 0 and setting all other entries
(including the hypothetical ones with p̃ < 0) to +∞.
The approximate solution set S A is represented by the array entry with
max{p̃ | Wn+ (p̃) ≤ C}. It follows by construction that S A maximizes the
total profit in the associated instance of KP with scaled profits p̃j among all
subsets of N that fulfill the weight restriction and contain an even number
of items from N − .
In the following, we show that, by choosing
K :=

ε
> 0,
n2

(4)

the set S A yields a (1 − ε)-approximation for PKP and can be computed
in polynomial time via the above dynamic programming procedure. To this
end, we use the following two lemmas:
Lemma 3. For ε ∈ (0, 1), we have ε ≤ − log(1 − ε).
Proof. The statement follows since, for any x ∈ (0, 1), we have
− log(1 − x) = − ln(1 − x)/ ln 2 ≥ − ln(1 − x) =

∞
X
xk
k=1

Lemma 4. Any optimal solution set S ∗ for PKP satisfies
X
log(|pj |) ≥ log(pmax ).
j∈S ∗

10

k

≥ x.

Proof. Let jmax ∈ N denote an item with |pjmax | = pmax . If pjmax > 0, then
the set {jmax }, which is feasible for PKP by Assumption 1 (a), has objective
value pmax . If pjmax < 0, Assumption 1 (c) implies that there exists another
item j ′ 6= jmax with pj ′ < 0 such that {jmax , j ′ } is feasible for PKP, and this
set has objective value pj ′ · pjmax ≥ pmax since pj ′ ≤ −1 by Assumption 1 (b).
Thus, in both cases, the optimality of S ∗ for PKP implies that
Y
pj ≥ pmax
j∈S ∗

⇔ log

pj

Y

|pj |

j∈S ∗

⇔ log

j∈S ∗

⇔

X

!

Y

≥ log(pmax )

!

≥ log(pmax )

log(|pj |) ≥ log(pmax ).

j∈S ∗
4

Proposition 5. The running time for computing S A is in O( nε log(pmax )),
which is polynomial in 1/ε and the encoding length of the input of PKP.
Proof. Clearly, for each of the n items, one has to pass through the whole
length of the two dynamic programming arrays. Therefore, the total running
time is in




2
2 log(pmax )
4 log(pmax )
O(n p̃max ) = O n
=O n
.
K
ε
Proposition 6. The set S A yields a (1 − ε)–approximation for PKP.
Proof. The proof consists of two parts. First, we analyze the effect of
scaling by K and rounding down in (3) by showing that S A yields an objective
value close to the value of an optimal solution set S ∗ for PKP in the associated
instance of KP with profits log(|pj |). The argumentation closely follows the

11

standard FPTAS for KP (see [2, Sec. 2.6]):


X
X
log(|pj |)
log(|pj |) ≥
K·
K
j∈S A
j∈S A


X
log(|pj |)
K·
≥
K
∗
j∈S


X
log(|pj |)
K·
≥
−1
K
j∈S ∗
X
log(|pj |) − n · K
≥

(5)
(6)
(7)
(8)

j∈S ∗

In (6), we exploited the optimality of S A for the KP instance with profits p̃j .
We now set
− log(1 − ε)
> 0.
(9)
ε′ :=
n · log(pmax )
Then, using the definition of K in (4) and that ε ≤ − log(1 − ε) for ε ∈ (0, 1),
we obtain
− log(1 − ε)
ε
= ε′ · log(pmax ),
n·K = ≤
n
n
P
and using that j∈S ∗ log(|pj |) ≥ log(pmax ) by Lemma 4, the chain of inequalities in (5)–(8) yields that
X
X
X
log(|pj |) ≥
log(|pj |) − ε′ · log(pmax ) ≥ (1 − ε′ )
log(|pj |).
j∈S A

j∈S ∗

j∈S ∗

In the second part of the proof, we simply raise two to the power of both
1−ε′
 P
P
, so
sides of this inequality, i.e., 2 j∈S A log(|pj |) ≥ 2( j∈S ∗ log(|pj |))
Y

j∈S A

Y

|pj | ≥

|pj |

j∈S ∗

!1−ε′

(10)

′

= z ∗ · (1/z ∗ )ε

ε′
1
∗
≥z ·
(pmax )n

= z ∗ · 2−ε
∗

=z ·2

′ n log(p

log(1−ε)

12

(11)
(12)

max )

= (1 − ε)z

(13)
∗

(14)

Here, (12) is derived from the trivial upper bound z ∗ ≤ (pmax )n , and (14)
from the definition of ε′ in (9). Recalling that S A contains an even number
of items from N − , the statement follows.
Propositions 5 and 6 immediately yield the following theorem:
4

Theorem 7. There exists an FPTAS with running time in O( nε log(pmax ))
for PKP.
We conclude this section with an example illustrating how the FPTAS works.
Example 1. Consider the instance of PKP given by the n = 5 items with
profits and weights as shown in Table 1 and a knapsack capacity of C := 9.
We choose ε = 0.025 so that K = nε2 = 0.001.
item j
pj
wj
p̃j

1
2
3
4
5
10
10
10
1 2 − 1 −(2 + 1)
2
−1
1
5
5
5
4
0 9998
10001
10000 0

Table 1: Profits pj , weights wj , and scaled profits p̃j of the items in Example 1.

The resulting scaled profits p̃j are shown in the last row of Table 1 and
we have p̃max = 10001, so n · p̃max = 50005. Thus, the FPTAS computes the
relevant dynamic programming arrays Wj+ (p̃) and Wj− (p̃) for all profit values
p̃ = 0, 1, . . . , 50005. Note that N + = {1, 2, 5} and N − = {3, 5}.
For this instance, the FPTAS finds the optimal solution set S ∗ = {3, 5}
during the computation of W5+ (10001), which is given as follows:

W5+ (10001) = min W4+ (10001), W4− (10001 − 0) + 4 = min {+∞, 9} = 9

Here, W4+ (10001) = +∞ since a scaled profit of 10001 cannot be obtained by any subset S ⊆ {1, 2, 3, 4} containing an even number of items
from N − , and W4− (10001) = 5 since a scaled profit of 10001 is reachable
by the subset S = {3} ⊆ {1, 2, 3, 4} that contains an odd number of items
from N − . Thus, the solution set corresponding to the array entry W5+ (10001)
is {3, 5} = S ∗ , and since p̃ = 10001 is indeed the highest value of p̃ for which
W5+ (p̃) ≤ C = 9, this is also the set S A returned by the FPTAS.

13

5. A Greedy-Type Algorithm
For KP, the classical greedy procedure is probably one of the most obvious first attempts for anybody confronted with the problem. Hence, it is
interesting to evaluate the performance of a variant of this greedy procedure
also for PKP.
It is known that, for obtaining a bounded approximation ratio for KP
in the classical greedy procedure, one has to take into account also the item
with largest profit as a singleton solution (cf. [2, Sec. 2.1]). Extending this requirement to the negative profits allowed in PKP, we additionally determine,
among all items with negative profits, a feasible pair of items with largest
profit product. Moreover, if the greedy solution contains an odd number
of items from N − , we simply remove the negative-profit item whose profit
has the smallest absolute value. This leads to the following natural greedy
algorithm for PKP, which we refer to as Product Greedy:
Algorithm 1 Algorithm Product Greedy
log(|p |)

10:

Sort and renumber the items in nonincreasing order of wj j .
(Items j with wj = 0 are put to the beginning of the ordering.)
Perform the classical greedy procedure with this ordering yielding solution set S̄ ⊆ N.
if |S̄ ∩ N − | is odd then
j − := argmin{|pj | | j ∈ S̄ ∩ N − }
S := S̄ \ {j − }
else
S := S̄
end if
Let {j1 , j2 } ⊆ N − be a pair of items with wj1 + wj2 ≤ C maximizing the
profit product pj1 · pj2 over all such pairs.
+
:= argmax{pj | j ∈ N + } be an item with largest positive profit.
Let jmax

11:

+
return the best among the three solutions S, {j1 , j2 }, and {jmax
}.

1:
2:
3:
4:
5:
6:
7:
8:
9:


We note that, since log(|pj |)/wj = log |pj |1/wj and the logarithm is
a strictly increasing function, the sorting and renumbering of the items in
step 1 of Product Greedy can equivalently be done by sorting the items
in nonincreasing order of |pj |1/wj , which means that the values log(|pj |)/wj
do not have to be computed in the algorithm.
14

+
:= argmax{pj | j ∈ N + } denote an item with largest positive
We let jmax
+
profit (i.e., with pjmax
= p+
max ) as in Product Greedy. Similarly, we let
−
:= argmax{|pj | | j ∈ N − } denote an item with smallest negative profit
jmax
−
= p−
(i.e., with −pjmax
max ). Then, by Assumption 1 (c), there exists another
−
−
item in N that can be packed into the knapsack together with jmax
. This
−
implies that the profits of the items j and j1 , j2 considered in Product
Greedy satisfy
−
≥ −pj − .
pj1 · pj2 ≥ −pjmax

(15)

In the following analysis, we denote the objective value obtained by
Product Greedy by z H .
Theorem 8.
(a) Product Greedy is a 1/(z ∗ )2/3 -approximation algorithm for PKP.
(b) Product Greedy is a 1/(pmax )2 -approximation algorithm for PKP.
Proof. The algorithm clearly runs in polynomial time. In order to analyze
its approximation ratio, let s ∈ N be the split item, i.e., the first item in
the given order that cannot be packed into the knapsack anymore during the
greedy procedure performed in step 2. Similar to the analysis of the greedy
procedure for KP, the analysis concentrates on the split solution, i.e., the set
of items S̄ = {j ∈ N | j ≤ s − 1} produced in step 2 of Product Greedy.
We distinguish two cases depending on the number of items with negative
profits in S̄ and, for each of the two cases, two subcases depending on the
sign of the profit ps of the split item s:
Case 1: |S̄ ∩ N − | is even.
In this case, the solution S = S̄ is considered when choosing the best solution
in step 11. Consider the sign of the split item’s profit. If ps > 0, then


X

2 · log(z H ) ≥ 2 · max
log(|pj |), log(p+
)
max


j∈S̄
X
≥
log(|pj |) + log(p+
max )
≥

j∈S̄
s
X

log(|pj |).

j=1

15

Obviously, we also have log(z H ) + log(p+
max ) ≥
Similarly, if ps < 0, then
2 · log(z H ) ≥ 2 · max
≥

X


X


Ps

j=1 log(|pj |).

log(|pj |), log(|pj1 |) + log(|pj2 |)

j∈S̄

log(|pj |) + log(|pj1 |) + log(|pj2 |)





j∈S̄

≥

X

log(|pj |) + log(|ps |)

j∈S̄

=

s
X

log(|pj |),

j=1

where the third
inequality follows from (15). Moreover, we have log(z H ) +
P
s
log(p−
max ) ≥
j=1 log(|pj |).
Case 2: |S̄ ∩ N − | is odd.
In this case, the solution S = S̄ \ {j − } is considered when choosing the best
solution in step 11. If ps > 0, we obtain


 X

H
+
3 · log(z ) ≥ 3 · max
log(|pj |), log(|pj1 |) + log(|pj2 |), log(pmax )


−
j∈S̄\{j }
X
≥
log(|pj |) + log(|pj1 |) + log(|pj2 |) + log(p+
max )
j∈S̄\{j − }

≥

=

X

log(|pj |) + log(|pj − |) + log(ps )

j∈S̄\{j − }
s
X

log(|pj |),

j=1

by invoking P
(15) again. In this case, we also have log(z H ) + log(p−
max ) +
s
log(|p
|).
log(p+
)
≥
j
max
j=1

16

Similarly, if ps < 0, then
3 · log(z H ) ≥ 3 · max
≥

X


 X


log(|pj |), log(|pj1 |) + log(|pj2 |)

j∈S̄\{j − }

log(|pj |) + 2(log(|pj1 |) + log(|pj2 |)))





j∈S̄\{j − }

≥

=

X

log(|pj |) + log(|pj − |) + log(|ps |)

j∈S̄\{j − }
s
X

log(|pj |).

j=1

Moreover, we have log(z H ) + 2 log(p−
max ) ≥

Ps

j=1

log(|pj |).

Summarizing all four cases, we always have
H

3 · log(z ) ≥

s
X

log(|pj |).

j=1

P
Then, since sj=1 log(|pj |) is an upper bound on the optimal objective value of
the LP relaxation P
of the associated P
instance of KP with profits
log(|pj |) (see,
Q
s
e.g., [2]), we have j=1 log(|pj |) ≥ j∈S ∗ log(|pj |) = log( j∈S ∗ pj ) = log(z ∗ )
(clearly, |S ∗ ∩ N − | must be even). This yields
3 · log(z H ) ≥ log(z ∗ ) ⇐⇒ z H ≥ (z ∗ )1/3
and proves the approximation ratio in (a).
Moreover, in all four cases the additive error in the logarithmic space can
−
−
be bounded by max{log(p+
max ), log(pmax )} + log(pmax ) ≤ 2 · log(pmax ), which
yields the approximation ratio in (b).
The approximation ratios obtained by Product Greedy are rather disappointing. The following example, however, shows that the analysis in the
proof of Theorem 8 is asymptotically tight and that a considerable deviation
from the greedy principle would be necessary to improve upon the obtained
approximation ratios:

17

Example 2. Consider the instance of PKP given by the item profits and
weights shown in Table 2 and a knapsack capacity of C := 3M for some
large, positive integer M.
item j
pj
wj

1
2
3
4
2 M + 2 −(M + 1) M
1
M
M
M

5
M
M

6
−1
M

Table 2: Profits pj and weights wj of the items in Example 2 with items indexed in
nonincreasing order of log(|pj |)/wj .

Algorithm Product Greedy first finds S̄ = {1, 2, 3} in step 2, but has
to remove item 3 in step 5 since |S̄ ∩ N − | = 1, which yields S = {1, 2} with
an objective value of 2(M +2). The best negative pair found in step 9 is given
+
by j1 = 3 and j2 = 6, and has profit product M + 1. Finally, jmax
= 2 with
+
+
pjmax
= pmax = M + 2 in step 10. Therefore, Product Greedy returns the
solution {1, 2} with an objective value of z H = 2(M + 2), while the optimal
solution consists of items 2, 4, and 5 with objective value z ∗ = (M + 2)M 2 .
References
[1] S. Martello, P. Toth, Knapsack problems: Algorithms and computer implementations, Wiley, 1990.
[2] H. Kellerer, U. Pferschy, D. Pisinger, Knapsack Problems, Springer, 2004.
[3] C. D’Ambrosio, F. Furini, M. Monaci, E. Traversi, On the product knapsack problem, Optimization Letters 12 (4) (2018) 691–712.
[4] U. Pferschy, J. Schauer, C. Thielen, The product knapsack problem: Approximation and complexity (2019). arXiv:1901.00695v1.
[5] N. Halman, M. Kovalyov, A. Quilliot, D. Shabtay, M. Zofi, Bi-criteria
path problem with minimum length and maximum survival probability,
OR Spectrum 41 (2019) 469––489.
[6] C. T. Ng, M. S. Barketau, T. C. E. Cheng, M. Y. Kovalyov, “Product
Partition” and related problems of scheduling and systems reliability:
Computational complexity and approximation, European Journal of Operational Research 207 (2) (2010) 601–604.
18

