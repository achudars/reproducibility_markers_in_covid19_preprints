A field-split preconditioning technique for
fluid-structure interaction problems with applications
in biomechanics
S. Calandrini∗

E. Aulisa†

G. Ke

‡

arXiv:1909.13201v1 [math.NA] 29 Sep 2019

Abstract
We present a novel preconditioning technique for Krylov subspace algorithms to solve fluidstructure interaction (FSI) linearized systems arising from finite element discretizations. An outer
Krylov subspace solver preconditioned with a geometric multigrid (GMG) algorithm is used, where
for the multigrid level sub-solvers, a field-split (FS) preconditioner is proposed. The block structure
of the FS preconditioner is derived using the physical variables as splitting strategy. To solve the subsystems originated by the FS preconditioning, an additive Schwarz (AS) block strategy is employed.
The proposed field-split preconditioner is tested on biomedical FSI applications. Both 2D and 3D
simulations are carried out considering aneurysm and venous valve geometries. The performance of
the FS preconditioner is compared with that of a second preconditioner of pure domain decomposition
type.

1

Introduction

Biomedical FSI problems are mathematically challenging because of the inherent non-linearity given by
a domain that moves as a function of the unknowns and because of the complex geometries involved
([12, 13, 24]). Numerical simulations of biomedical FSI problems often involve systems with a large
number of unknowns that make their solution computationally expensive in terms of time. Moreover, the
numerical stability could be compromised if forces are not computed correctly at the fluid-solid interface,
or if large structural displacement arise, as in heart or venous valve simulations ([21, 45]).
Many works on the numerical solution of FSI problems focus on the study of preconditioning techniques for Krylov subspace solvers of block-structured linear systems ([37, 14, 15, 26]). Such a block
structure arises, for instance, when finite element discretizations are adopted. Multigrid algorithms, of
either geometric or algebraic type, have been shown to be reliable preconditioners for Krylov subspace
algorithms ([43, 27]). Multigrid procedures are appealing due to their potential for optimal computational complexity and their ability to smooth out error components of both higher and lower frequencies.
Geometric multigrid (GMG) schemes have the advantage that projection and restriction operators are
naturally obtained by the multilevel mesh discretization. On the other hand, algebraic multigrid (AMG)
algorithms do not require the information of the multilevel mesh discretization but they do not perform
as well as perform than their geometric counterpart ([63, 62]).
In this work, we consider a GMRES solver preconditioned with a GMG method, and propose a novel
preconditioning technique for the multigrid level sub-solvers. For biomedical FSI simulations, fast algorithms are of fundamental importance, and an appropriate choice of the preconditioner guarantees that
the system of equations is solved significantly faster. Hence, the choice of preconditioners for the level
sub-solvers can make a substantial difference on the overall performance of the solver. The proposed
preconditioner has a block structure that derives from using the physical variables as a splitting strategy,
therefore we refer to the proposed preconditioner as the field-split (FS) preconditioner. The FS preconditioner is a combination of physics-based ([25]) and domain decomposition preconditioners ([8]). These
two strategies differ in the way the blocks are extracted from the original system matrix. Preconditioners
constructed using a block structure associated with the partial differential equation (PDE) system are
categorized as physics-based. An example is the Schur complement preconditioner ([11, 51, 28]). Preconditioners based on a block structure associated with the geometrical splitting of the domain are called
of domain decomposition type. An example is the Vanka preconditioner ([61, 48, 65]). With the FS
∗ Department

of Scientific Computing, Florida State University, Tallahassee FL 32306, USA.
of Mathematics and Statistics, Texas Tech University, Lubbock TX 79409, USA.
‡ Department of Mathematics and Physical Sciences, Louisiana State University at Alexandria, Alexandria LA 71302,
USA.
† Department

1

preconditioner, after the fields are separated with the proposed approach, the resulting subsystems are
solved using an additive Schwarz (AS) block strategy ([18, 16]). This is the reason why the FS preconditioner is a combination of the physics-based and domain decomposition approaches. Preconditioners
of field-split type have been used by the authors on Rayleigh-Bénard convection problems ([40, 42, 41]),
and the intention of this paper is to investigate their capabilities for biomedical FSI problems.
The GMG is chosen over the AMG because a monolithic Arbitrary Lagrangian-Eulerian (ALE) formulation is used for the FSI problem, where we exploit the high accuracy of the GMG inter-grid operators
in preserving at each level the same fluid-solid decomposition as at the finest level.
ALE schemes have been widely used to simulate biomedical FSI problems ([58, 50, 17]). A standard
ALE approach moves the mesh to follow the elastic body movements. Standard ALE algorithms with
remeshing ([49, 47]) and extended ALE schemes ([12, 19]) have been used to handle large structural
displacements. Other techniques proposed to solve FSI problems include fictitious domain methods
([33, 9, 60]), Lattice-Boltzmann methods ([44, 29]), and the immersed boundary method ([52, 53]).
For the coupling between the solid and fluid unknowns a monolithic approach has been chosen. The
coupling between the solid and fluid unknowns is a key factor to control stability issues. Monolithic
schemes are, in general, more stable then partitioned schemes by means of solving simultaneously for the
fluid and solid part. In this way, techniques such as implicit discretization methods can be used, as well
as strong coupled solvers for the whole system. Nevertheless, partitioned schemes have been investigated
extensively in the literature ([36]) due to their relatively easier implementation.
Recent works in which GMRES has been used for the solution of a monolithic set of nonlinear equations
are [35, 32] and [38]. In [35], preconditioners are developed based on block-triangular approximations
of the Jacobian matrix, obtained by neglecting selected fluid-structure interaction blocks. In [32], two
preconditioners based on algebraic multigrid techniques are applied to the Newton-Krylov solver. The
first is based on a block Gauss-Seidel approach, where approximate inverses of the individual field blocks
are based on an algebraic multigrid hierarchy. The second is based on a monolithic coarsening scheme for
the coupled system. In [38], they construct preconditioners for Krylov subspace solvers based on block
LDU-factorizations of the linearized FSI matrix. In [54], GMG is used as a preconditioner for GMRES
as we do, but for the smoothing strategy a partitioned iteration is used based on the idea provided in
[59]. For an overview of some of the most popular methodologies to solve numerically the haemodynamic
FSI systems, please refer to the introduction in [23], where a class of block triangular preconditioners is
described obtained by exploiting the block-structure of the FSI linear system.
To analyze the FS preconditioner for the level sub-solvers, we compare its performance with the
preconditioner in [5], which is of pure domain decomposition type. In [6, 7, 20] the Krylov solver in [5]
has been applied to solve FSI problems with biomedical applications, namely it has been used for stented
cerebral aneurysm simulations in [6, 7] and for magnetic drug targeting (MDT) procedures in [20]. We
intend to show that, a field-split approach is more suitable for biomedical FSI problems where a Krylov
solver preconditioned with a multigrid method is adopted.
The biomedical applications considered for the tests include aneurysm and venous valve geometries.
Both 2D and 3D simulations are carried out. To further improve numerical stability, a Streamline Upwind
Petrov Galerkin (SUPG) stabilization ([30, 31]) is added to the momentum equation in our monolithic
FSI formulation.
The paper is structured as follows. In Section 2, the weak monolithic formulation of the FSI problem
is described, and details are given on the SUPG stabilization technique used. In Section 3, the fieldsplit preconditioner for the level sub-solvers is described, together with the AS preconditioner already
presented in [5]. Moreover, the monolithic GMRES solver preconditioned with GMG is briefly illustrated.
In Section 4, the numerical tests are presented. Finally, in Section 5, we draw our conclusions.

2

Numerical modeling

This section describes the FSI formulation adopted in this paper. We present a monolithic ALE formulation assuming the fluid flow and the solid material to be incompressible. Since biomedical simulations are
proposed in Section 4, the solid structure refers to blood vessel walls, while the fluid considered is blood.
To further improve stability, a Streamline Upwind Petrov Galerkin (SUPG) stabilization is employed.
Following [31], the stabilization parameter, τ , is computed by solving a generalized eigenvalue problem.
Before discussing the formulation of the problem, we introduce some notations.

2.1

Notation

For every time t ∈ [0, T ], let Ωft ⊂ Rn be an open set occupied only by a fluid, and let Ωst ⊂ Rn be an
open set occupied only by a solid. In the following, any other symbol endowed with the superscripts f

2

or s will refer to either the fluid or the solid part, respectively. The boundary of the fluid and solid parts
are denoted as ∂Ωft and ∂Ωst , respectively. We define the parts of the boundary adjacent only to the fluid
or only to the solid as Γft and Γst , such that ∂Ωft = Γft ∪ Γit and ∂Ωst = Γst ∪ Γit , where Γit is the interface
between fluid and solid. The symbols nf and ns denote the outward unit normal fields defined on ∂Ωft
and ∂Ωst . The open set Ωt := Ωft ∪ Ωst ∪ Γit indicates the current configuration of the overall physical
domain. The fluid and solid are immiscible,
Ωft ∩ Ωst = ∅ ,

(1)

and they interact through the nonempty interface Γit = ∂Ωft ∩ ∂Ωst . The hat notation is used to define
b s := Ωs . Normally, they are referred to as the undeformed or stress-free configurations,
b f := Ωf and Ω
Ω
0
0
although the initial stresses need not be identically zero either in the solid or in the fluid part. Moreover,
b := Ω0 and Γ
b i := Γi .
let us define Ω
0
b s is a Lagrangian
The motion of the solid is followed in a Lagrangian way, therefore the domain Ω
f
b is the domain on which we
domain and it is initially occupied by the solid we observe. The domain Ω
initially observe the fluid motion in an Eulerian way, and it is called an ALE domain. As a consequence of
the solid movement, the domain on which we observe the fluid motion changes in time as well. Therefore,
a deformation for both the fluid and solid domains needs to be defined. The domain Ωft is occupied only
by fluid at each time t. The moving fluid or solid domains Ωft and Ωst are called Eulerian domains.
b or ∇ refer to the nabla symbolic operator in the fixed or
For the sake of brevity, the notations ∇
moving frames, respectively. In order to describe the motion of the fluid and solid domains, we define
a t-parametrized family of invertible and sufficiently regular mappings Xt , called deformation mappings,
given by a perturbation of the identity, so that
b → Ωt ,
Xt : Ω

b + d(b
Xt (b
x) := x
x, t) ,

(2)

where the field d(b
x, t) is the displacement field. These mappings are implicitly the solutions of the PDE
system, so the definition given in (2) is actually a hypothesis on the regularity of the solutions of the
b and t ∈ [0, T ], we also define
b∈Ω
PDE system. For every x
b t (b
b x, t) ,
F (d(b
x, t)) = ∇X
x) = I + ∇d(b
J(d(b
x, t)) = det F (d(b
x, t)) ,

(3)
(4)

B(d(b
x, t)) = F (d(b
x, t))F | (d(b
x, t)).

(5)

The symbols F and B denote the deformation gradient tensor and the left Cauchy-Green deformation
tensor, respectively.

2.2

Weak Monolithic Formulation

In this section, the weak monolithic formulation of the FSI problem is described. With d, u and p we
indicate displacement, velocity and pressure, respectively. Let us define the sets
V f := H 1 (Ωft ) ,
V0f

:=

V s := H 1 (Ωst ) ,

H01 (Ωft ; Γft,D )
f

s

, V0s

:=

f

:=

H01 (Ωft ; Γft,D,df ) ,

(7)
(8)

V0 := {v = (v f , v s ) ∈ V0f × V0s s. t. v f = v s on Γit } ,

(9)

×V

s

f
, V0,d
f
s

Γit } ,

V := {v = (v , v ) ∈ V

f

(6)

H01 (Ωst ; Γst,D )

s. t. v = v on

where Γft,D and Γft,D,df are the subsets of Γft on which Dirichlet boundary conditions on the velocity uf
and on the fluid domain displacement df are enforced, respectively. Similarly, Γst,D denotes a subset of
Γst on which Dirichlet boundary conditions on the displacement ds are enforced. In the following, we will
denote with the same symbol (·, ·) the standard inner products either on L2 (O), L2 (O)n or L2 (O)n×n ,
for any set O ∈ Rn .
The monolithic weak FSI problem consists in finding (d, u, p) in V × V × L2 (Ωt ) solution of a system
that can be split into three parts:
the weak kinematic equations


∂d ks
b s ),
,φ
=0
∀ φks ∈ H 1 (Ω
(10)
u−
∂t
bs
Ω





b + ∇d
b | , ∇φ
bf ; Γ
b i ) ∩ Vb f f ,
b kf
k(b
x) ∇d
=0
∀ φkf ∈ H01 (Ω
(11)
0,d
bf
Ω

3

the weak monolithic momentum balance


∂u m
ρs
,φ
+ (σ s (d, ps ), ∇φm )Ωs − (ρs f s , φm )Ωs
t
t
∂t
s
Ωt




∂d
∂u m
+ ρf [(u −
,φ
) · ∇]u, φm
+ ρf
f
∂t
∂t
Ωt
Ωft


+ σ f (u, pf ), ∇φm Ωf − ρf f f , φm Ωf
t

t

+

Nf 
X
k=1

ρf

∂u m
,φ
∂t SU P G

Nf 
X


+
Ttk

ρf [(u −

k=1

f

−

N
X

(12)

∂d
) · ∇]u, φm
SU P G
∂t


Ttk

f

f

f

∇ · σ (u, p

), φm
SU P G T k
t


−

k=1

N
X

ρf f f , φm
SU P G


Ttk

∀ φm ∈ V0 ,

=0

k=1

and the weak mass continuity
(J(d) − 1, φps )Ω
bs = 0

pf
∇ · u, φ Ωf = 0

b s ),
∀ φps ∈ L2 (Ω
∀φ

pf

∈L

t

2

(13)

(Ωft ) .

(14)

The above set of equations is known as a non-conservative ALE formulation. In the following, we focus on
the analysis of the momentum balance, and we briefly describe the role of the function k(b
x) in equation
(11). For a full description of the PDE system (10)-(14), please refer to [5]. Equation (12) describes, in a
monolithic form, the solid and fluid momenta, which are also referred to as the incompressible non-linear
elasticity equation and the Navier-Stokes equation, respectively. The symbols ρf and ρs denote the mass
densities for the fluid and solid part, respectively, whereas f f and f s indicate the body force densities.
The last two lines of equation (12) describe the Streamline Upwind Petrov Galerkin (SUPG) method used
f
f
j
k
to stabilize our FSI simulations. The set {Ttk }N
k=1 is a partition of Ωt such that Tt ∩ Tt has measure zero
f

f

f

k
k N
for k 6= j and ∪N
k=1 Tt = Ωt . Once a finite element discretization is introduced, {Tt }k=1 will represent
m
the finite element triangulation used. The function φSU P G is defined as


∂d
m
f
m
φSU P G = τ ρ [(u −
) · ∇]φ
,
(15)
∂t

where the description of the parameter τ is given below. Notice that consistency between the fluid and
solid region is automatically enforced with this stabilization technique. By definition of φSU P G , we have
s
that φSU P G = 0 in the solid, since u − ∂d
∂t = 0 on Ωt . For the stability parameter τ , the definition
proposed by Franca and Madureira in [31] is used, namely
ξ(Rek (x))
τ=√
,
λk |u(x)|2
(
ξ(Rek (x)) =

Rek (x) , if
1,
if

(16)

0 ≤ Rek (x) < 1
Rek (x) ≥ 1

,

|u(x)|2
Rek (x) = √
,
4 λk ν(x)
λk =

max

(18)

||∇ · (∇u + (∇u)| )||20,T k

u∈V0 (Ttk )

|u(x)|2 =

(17)

t

||(∇u + (∇u)| )||20,T k

,

(19)

t

n
X

|ui (x)|2

1/2

,

(20)

i=1

where ν(x) indicates the kinematic viscosity (ratio of the fluid viscosity to the fluid density). The norm
in equation (19) indicates the L2 norm. With this design, no explicit computations of inverse estimate
constants, nor the computation of mesh parameters is required. The parameter λk is computed as the
largest eigenvalue of the following generalized eigenvalue problem: for k = 1, . . . , N f find w ∈ V0 (Ttk )
and λk such that
(∇ · (∇w + (∇w)| ), ∇ · (∇φ + (∇φ)| ))Ttk = λk (∇w, ∇φ)Ttk , ∀φ ∈ V0 (Ttk ).
4

(21)

This problem is solved for the largest eigenvalue by the power method.
In equation (12), the interface physical condition of normal stress continuity is also enforced, where
the boundary integrals disappear due to the condition
σ s (d, ps )ns + σ f (u, pf )nf = 0

on Γit .

(22)

For the solid stress tensor σ s , we consider incompressible Mooney-Rivlin, whose Lagrangian description
b s and t ∈ [0, T ] by
b∈Ω
is given for every x
σ s (d, ps ) = −ps I + 2C1 B(d) − 2C2 (B(d))−1 ,

(23)

where the constants C1 and C2 depend on the mechanical properties of the material. For the numerical
C1
results presented in section 4, we considered C1 = G
3 and C2 = 2 , where G is the shear modulus. To
compute G, we use the relation E = 2G(1 + ν), where E is the Young’s modulus of the vessels wall and
ν is the Poisson’s ratio. Mooney-Rivlin constitutive relations have been used to represent the response
of blood vessels ([46]). In [57], it is shown that larger deformations of vessel walls can be achieved using
the Mooney-Rivlin material instead of linearly elastic material models. For the fluid stress tensor σ f ,
an incompressible Newtonian fluid is considered. In the literature, the assumption of Newtonian flow
is generally accepted for numerical studies in large-sized arteries. For the treatment of stenotic vessels
([34]) and cerebral aneurysms ([22]), it has been shown in that the computational results are moderately
influenced by a non-Newtonian model. For these reasons, blood is assumed as a Newtonian fluid in this
paper, and its stress tensor is given for every x ∈ Ωft and t ∈ [0, T ] by
σ f (u, pf ) = −pf I + µ(∇u + (∇u)| ) ,

(24)

where µ is the fluid viscosity.
In equation (11), the choice of the function k(b
x) is important for stability properties. This function
controls the mesh deformation, and, according to the application considered, several choices of k can be
made. If the element size is an issue for stability, a robust choice ([56]) is
k(b
x) =

1
,
Vel(b
x)

(25)

b coordinate. In this way, a mesh with
where Vel is the volume of the mesh element that contains the x
small elements where large displacements are expected, and large elements elsewhere is built. In Section
4, we often make the above choice for the function k(b
x). However, for 2D simulations involving a venous
valve geometry, the proximity of an element to the leaflets’ tip affects stability, so the function k(b
x) is
chosen to be a distance function that assures an homogeneous deformation throughout the entire mesh,
and not only for those elements close to the valve leaflets. A more detailed discussion of the function
k(b
x) adopted for the valve case can be found in Section 4.1.2.
The monolithic weak FSI system (10)-(14) can be discretized in space using any appropriate choice of
finite element spaces. Here, the finite element families chosen are biquadratic Lagrangian for both velocity
and displacement, and piecewise linear discontinuous for pressure (Q2 -P1 ). For the time discretization, a
second order Crank-Nicolson scheme is used for the momentum balance, and a backward finite difference
method is adopted for the time derivatives in the integrands. After the time and space discretizations,
the resulting FSI system is linearized by an exact Newton linearization. For more details about the fully
discretized FSI system, please refer to [5].

3

Preconditioners

The Krylov subspace solver for the linearized FSI system is GMRES preconditioned by a geometric
multigrid algorithm, whose level sub-solvers are further preconditioned. In this section, the field-split
preconditioner for the level sub-solvers is described together with a second preconditioner already presented in [5]. The proposed field-split preconditioner is a combination of the physics-based and domain
decomposition approaches, while the second preconditioner is of pure domain decomposition type. Before
discussing the structure of these two preconditioners, let us introduce some notation.

3.1

Notation

A finite element discretization of the equations in Section 2.2 leads to a system of algebraic equations.
In the following, we use the symbols K for the kinematic equation (10) in the solid and on the fluid-solid
interface, A for the kinematic ALE displacement equation (11) in the fluid, S for the momentum equation
(12) in the solid and on the fluid-solid interface, F for the momentum equation (12) fluid respectively, V
for the continuity equation (13) in the solid, and W for the continuity equation (14) in the fluid.
5

3.2

The Structure of the Preconditioners

The ordering of the equations and variables determines the block structure of the Jacobian matrix J,
resulting in a system that is more suitable to be solved using tailored preconditioners. In the FSI
literature, the most common way to rewrite a monolithic formulation is given by the following equation
ordering: kinematic equations (10)-(11), momentum equations (12), and continuity equations (13)-(14).
Thus,


Kds
0
Kus
0
0
0
 Ad s Ad f
0
0
0
0 


 Sds Sdf Sus Suf Sps Spf 
,
(26)
J =
 Fds Fdf Fus Fuf
0 Fp f 


 Vds
0
0
0
0
0 
Wds Wdf Wus Wuf
0
0
where the variables are ordered as ds , df , us , uf , ps , pf . Note that in definition (26) there is no explicit
reference to the interface. The kinematic test functions on the interface are associated with the weak solid
kinematic equation (10) and are included in the first row of J. Recall that the test functions in the weak
bf ; Γ
b i )∩ Vb f f , and they vanish on the solid-fluid interface. Thus,
fluid kinematic equation (11) are in H01 (Ω
0,d
the second row of J does not directly affect the value of the displacement on the interface. Similarly, for
the weak momentum balance, test functions are divided into test functions for the solid part (third row)
and test functions for the fluid part (fourth row), and contributions coming from nodes on the interface
are accounted for in the solid part.
Recent works ([3, 5]) showed that the above equation ordering is ill-conditioned for steady-state
problems, and it becomes unstable for time-dependent problems as the time step increases. Such a
behavior can be easily explained by looking at the diagonal terms Kds and Sus in the first and third
rows of (26). These terms correspond to the time derivatives of ds and us in equations (10) and (12),
respectively. For steady state problems, such terms are identically zero, and for time dependent problems
they become quite small for large time steps, resulting in a Jacobian matrix with zero or small diagonal
terms. In [3, 5] a stable row/column pivoting alternative has been proposed,


Sds Sdf Sus Suf Sps Spf
 Ads Adf
0
0
0
0 


 Kds
s
K
0
0 
0
0
u
.

(27)
J1 = 
0 Fpf 

 Fds Fdf Fus Fuf
 Vds
0
0
0
0
0 
Wds Wdf Wus Wuf
0
0
For J1 , the ordering of the variables is ds , df , us , uf , ps , pf , as for J, and the equations have been ordered in the following way: solid-interface momentum equations, fluid kinematic equation, solid-interface
kinematic equations, fluid momentum equation, solid continuity equation, and fluid continuity equation.
In other words, J1 is obtained from J by permuting the first and the third row of equation (26). With
this permutation, the time derivatives are moved off diagonal and are replaced by the matrix Sds and by
the lumped mass matrix Kus . Note that the main contribution of Sds comes from the divergence of the
stress tensor in equation (12), which corresponds to the discretization of an elliptic operator. Therefore,
this permutation assures a stable Jacobian matrix since Sds and Kus are always non-zero and somehow
dominant.
A second stable row/column pivoting configuration, proposed here for the first time, is


Sds Sdf Sps Sus Suf Spf
 Ads Adf
0
0
0
0 


 Vds
0
0
0
0
0 
.
J2 = 
(28)
 Kds
0
0
Kus
0
0 


 Fds Fdf
0
Fus Fuf Fpf 
s
Wd Wd f
0
0 Wus Wuf
For J2 , the variables are reordered as ds , df , ps , us , uf , pf , while the equations are reordered in the
following way: solid-interface momentum equations, fluid kinematic equation, solid continuity equation,
solid-interface kinematic equations, fluid momentum equation, and fluid continuity equation. Comparing
J1 and J2 , the matrix J2 is obtained from J1 by permuting rows 3, 4 and 5 in 4, 5 and 3, and columns 3,
4 and 5 in 4, 5 and 3. This choice preserves the diagonal terms of J1 , i.e. Sds , Adf , Fuf and Kus , and
it is more suited for the field-split preconditioner introduced below.
The systems associated with J1 and J2 are solved using GMRES preconditioned by GMG. At each
multigrid level l with l ≥ 1, we use a damped Richardson iterative solver, whereas at the coarse level
6

(l = 0) a direct solver is employed. Depending on the the block structure of the Jacobian matrix, the
Richardson solver is preconditioned with an appropriate method. The proposed additive field-split (FS)
preconditioner is used on J2 , whereas the additive Schwarz (AS) preconditioner used for comparison
is applied to J1 . The AS method is further preconditioned with an LU decomposition, while the FS
preconditioner is further preconditioned with either AS-LU or AS-JACOBI. For the sake of simplicity,
we refer to these two combinations as the AS and the FS preconditioner, respectively. See Figure 1 and 2
for a schematic representation of the two techniques. For both combinations, any type of multigrid cycle
can be applied, such as V-cycle, F-cycle, or W-cycle, with any number of pre- and post-smoothing steps.
A version of the AS preconditioner was already developed and discussed in [3, 5], while the field-split
preconditioner is the novelty of this paper. We remark that the FS preconditioner described in this work
is an additive preconditioner. A multiplicative field-split preconditioner is not investigated since separate
tests (not reported in this manuscript), show that it is not as efficient as the additive variant.
LU

s
s ,pj
s
s ,uj
dj
.,n

GMRES

GMG

AS

j=

1, .

.

df
j ,u f
j ,p f
j=
1, .

j

..,

nf

LU

Figure 1: J1 solver and preconditioner cascade (AS).

d j,
s

AS1
s

p
d,
GMRES

GMG

FS

s

.,n
1, . .
=
j
djf
j=
1, . .
.,nf

u,
pf
s

u
AS2

LU

s

pj

LU

JACOBI

ujf,

pf

j
j=
1, . .
.,nf

LU

Figure 2: J2 solver and preconditioner cascade (FS).

Now, let us discuss in detail the two preconditioning techniques, starting with the AS preconditioner,
since an AS method is used in the novel FS preconditioner as well. For the AS preconditioner, a locally
multiplicative Vanka-type domain decomposition strategy is employed. By locally multiplicative, we
mean that the method is multiplicative within a single process, but additive among processes ([64]).
With the Vanka-type domain decomposition strategy, the physical domain is initially divided into a solid
and a fluid sub-domain, and then each sub-domain is further divided into several non-overlapping blocks,
called Vanka blocks. These non-overlapping Vanka blocks are such that their boundaries overlap with the
boundaries of the mesh elements. The variables within a single block are selected in the following way:
on each block, all the pressure variables whose support intersects the sub-domain are selected, and then
all displacement and velocity variables whose support intersects the support of the selected pressure are
added. Vanka-type domain decomposition is usually used for solving saddle point problems ([61]). More
details about this strategy can be found in [2, 8, 40]. Depending on whether the Vanka block j under
consideration is in the fluid or in the solid subdomain, two different preconditioner matrices are created.

7

f
s
The two matrices, P1j
and P1j
, have the following form:

AS :





s

P1j








Sds Sus Sps
= Kds Kus 0  ,
Vds 0 0 j


Adf 0 0
=  Fdf Fuf Fpf  ,
Wdf Wuf 0 j




f


P1j




for j = 1, . . . , ns
.

(29)

for j = 1, . . . , nf

s
For the solid Vanka blocks, the preconditioner P1j
is applied, and the kinematic, momentum and contis
s
s
nuity equations are solved for [d , u , p ]j within each solid block. Similarly, for the fluid Vanka blocks,
f
the preconditioner P1j
is applied, and the kinematic, momentum and continuity equations are solved
f
f
f
f
s
are relative small
and P1j
for [d , u , p ]j within each fluid block. Note that the matrices forming P1j
saddle-point matrices; therefore, the associated saddle-point problems can be efficiently solved using LU
f
s
decomposition. A thorough explanation of how the AS block preconditioners P1j
and P1j
are applied to
the Jacobian matrix J1 can be found in [55].
In general, when seeking iteratively the solution of the system Jx = f for some given initial solution
x0 , in the AS case the solution at the k th + 1 iteration is obtained by

y 0 = xk ,

(30)
−1

xk+1
= xkj + (Pj )
j
yij =

(f − Jxk )j

 k+1
 xji if the i entry belongs to the block j


yij−1 otherwise








for j = 1, . . . , n ,

(31)







xk+1 = y n ,

(32)

where the subspcript j refers to the restriction to the j th subblock and the subscript i refers to a single
degree of freedom of the system. In the additive case the block solution is updated using the solution
available at the previous k th iteration. Differently, in the multiplicative case the block solution is updated
using the most recently updated block solution, namely
−1

xk+1
= y j−1 + (Pj )
j

(f − Jy j−1 )j ,

for j = 1, . . . , n .

(33)

The AS preconditioner available in PETSc (and used in this work) is multiplicative within a single process,
but additive among processes. The more processes are used the more the additive component dominates
with respect to the multiplicative one, and in general additive is expected to be less performing than
multiplicative.
The additive field-split preconditioner uses a Vanka-type domain decomposition strategy as well, but
before that, the system is split according to the physical fields, i.e. [d, ps ] and [u, pf ]. This is the
key feature of this novel preconditioner. Based on the block structure of the matrix J2 , the Richardson
iterative solver is preconditioned with the following matrix,


0
0
0
Sds Sdf Sps
 Ads Adf
0
0
0
0 


 Vds
0
0
0
0
0 
.

(34)
FS : P2 = 
0
0
Kus
0
0 

 0
 0
0
0
Fus Fuf Fpf 
0
0
0 Wus Wuf
0
The systems associated with the diagonal blocks are then preconditioned and solved separately using
locally multiplicative AS block strategies denoted as AS1 and AS2 , respectively,



Sds Sps

 Ps
=
, for j = 1, . . . , ns
2,1 j
Vds 0 j
,
(35)
AS1 :



f
 Pf
A
f
=
,
for
j
=
1,
.
.
.
,
n
d
2,1 j
j

AS2 :


s
 P2,2

=

f
 P2,2 j

=



Kus

Fuf Fpf
,
Wuf 0 j
8

for j = 1, . . . , nf

.

(36)

f
s
The P2,1
and P2,2
blocks correspond to saddle point problems and are obtained using the Vanka-type
j
j
f
domain decomposition strategy. The P2,1
blocks are obtained using an overlapping domain decompoj
s
sition strategy, while P2,2 corresponds to the lumped mass matrix and is not further decomposed. The
f
f
s
, P2,1
and P2,2
blocks are relatively small matrices, so the systems associated with them can again
P2,1
j
j
j
s
be efficiently solved using LU decomposition. P2,2
is a diagonal matrix and the associate system can be
solved exactly using one iteration of the Jacobi method.
The main difference between the AS and the FS preconditioner is that with the AS preconditioner
the whole system of equations is solved together, whereas with the FS preconditioner, the system is split
into two smaller subsystems, and each is solved separately with its own AS strategy. The total number of
sub-blocks doubles with FS where a domain decomposition strategy is applied, however the size of each
sub-block is smaller than with the AS preconditioner. As the numerical examples in section 4 show, this
size reduction results in less computational time, making the FS preconditioner more efficient than the
AS preconditioner, especially for three dimensional problems.
All of the above solvers and preconditioners have been implemented in FEMuS ([4]), an open-source
finite element C++ library built on top of PETSc ([10]). Specifically, we have used the PCASM preconditioner from PETSc for the Vanka blocks and the PCFIELDSPLIT option for the splitting of the fields
[55] . To perform the mesh partitioning among several processes, the METIS library ([39]) is used.

3.3

Geometric Multigrid Preconditioner

A geometric multigrid preconditioner is used for the outer monolithic GMRES solver. In this section, we
illustrate the multigrid prolongation and restriction operators associated with the Jacobian FSI matrices,
J1 and J2 . For each level l ∈ [0, N ], let hl be the mesh size associated with the triangulation Ωhl ,
where Ωhl is obtained recursively by midpoint refinement starting from a geometrically conforming coarse
triangulation Ωh0 . Let Φ denote the piecewise biquadratic space and Ψ the discontinuous piecewise linear
space. Then, for each level l, Φ(Ωhl ) and Ψ(Ωhl ) refer to the finite element spaces associated with the
triangulation {Ωhl }N
l=1 with associated mesh size hl . With this choice of Φ and Ψ, the level solution
triplet (d, u, p)hl belongs to the space Φ(Ωhl ) × Φ(Ωhl ) × Ψ(Ωhl ). We remark that, while continuity at
the interface is imposed for displacement and velocity, the pressures ps and pf are unconstrained at the
interface. For this reason the discontinuous piecewise linear space has been chosen for their discretization.
In the classical GMG for finite element methods, the prolongation operator
Pl,l−1 : Φ(Ωhl−1 ) × Φ(Ωhl−1 ) × Ψ(Ωhl−1 ) → Φ(Ωhl ) × Φ(Ωhl ) × Ψ(Ωhl )

(37)

is the natural injection from a coarse to a fine space, and the restriction operator
Rl−1,l : Φ(Ωhl ) × Φ(Ωhl ) × Ψ(Ωhl ) → Φ(Ωhl−1 ) × Φ(Ωhl−1 ) × Ψ(Ωhl−1 )

(38)

is the adjoint of Pl,l−1 with respect to the L2 inner product. Below, we show how our restriction operator
differs from the classical one.
The matrix representations, Pl,l−1 and Rl−1,l , of the prolongation and restriction operators depend
on the row/column ordering of the Jacobian matrix, so the different structures of J1 and J2 generate
two different pairs of matrices Pl,l−1 and Rl−1,l . Namely, the matrix operators associated with J1 have
a block structure given by


0
0
0
0
Pds ,ds
0

 Pdf ,ds Pdf ,df
0
0
0
0




s
s
0
0
P
0
0
0
u ,u
,

P1l,l−1 = 

0
0
P
P
0
0
f
s
f
f
u ,u
u ,u




0
0
0
0
Pps ,ps
0
0
0
0
0
0
Ppf ,pf


0
RS,F
0
0
RS,S
0

 0
RA,A
0
0
0
0



 0
0
R
0
0
0
K,K
,

R1l−1,l = 

0
0
0
R
0
0
F,F


 0

0
0
0
RV,V
0
0
0
0
0
0
RW,W

9

whereas the matrix operators associated with J2 have a block structure given by

Pds ,ds
0
0
0
0
0
 Pdf ,ds Pdf ,df
0
0
0
0


s ,ps
0
0
0
0
0
P
p
P2l,l−1 = 

s ,us
0
0
0
P
0
0
u


Puf ,us Puf ,uf
0
0
0
0
0
0
0
0
0
Ppf ,pf


RS,S
0
0
0
RS,F
0
 0

RA,A
0
0
0
0


 0

0
RV,V
0
0
0

,
R2l−1,l = 

0
0
RK,K
0
0
 0

 0

0
0
0
RF,F
0
0
0
RW,W
0
0
0





,




where
RS,S = RK,K = (Pds ,ds )| = (Pus ,us )| ,

RA,A = RF,F = (Pdf ,df )| = (Puf ,uf )| ,

RV,V = (Pps ,ps )| ,

RS,F = (Pdf ,ds )| .

RW,W = (Ppf ,pf )| ,

Unlike the classical GMG, our restriction matrices are not simply the transposes of the associated prolongation matrices. In particular, the blocks Pdf ,ds located at P1l,l−1 (2, 1) and P2l,l−1 (2, 1) transpose into
the blocks RS,F located at R1l−1,l (1, 4) and R2l−1,l (1, 5), respectively. Such a structure for the matrix
operators is due to the particular choice of row pivoting for the Jacobian matrices, J1 and J2 . Moreover,
the transpose of the block Puf ,us in P1l,l−1 and P2l,l−1 does not appear in either restriction matrix, since
the restriction of the kinematic equation in the solid-fluid interface does not receive any contribution
from the fluid domain.

4

Numerical results

In this section, the performance of the proposed field-split preconditioner is tested on biomedical FSI
problems. Aneurysm and venous valve geometries are considered, and 2D and 3D simulations are carried
out. The performance of the proposed FS preconditioner is compared with that of the AS preconditioner,
and a comparison against a direct LU solver is also presented for the 2D geometries. To investigate the
robustness of the schemes in terms of mesh refinement and time step size, a mesh independence and a
time step independence study are performed.
All data are collected considering one single period, which we define as 1 s. The time step considered is
1
tstep s, meaning that one period is composed of tstep iterations. For the aneurysm simulations tstep = 32,
while for the venous valve simulations tstep = 64. For every non-linear step s at time step ti , i =
rNi,s
1, . . . , tstep , let us define the average convergence rate in the linear solvers as ρi,s =
, where Ni,s is
r0
the number of linear steps (in the non-linear step s at the time step i) and r0 and rNi,s represent the
residuals of the initial and final linear iterations, respectively. Over a single period, let us define the two
quantities, N and ρ, as
Ptstep Psmax
Ptstep Psmax
i
i
s=1 ρi,s
s=1 Ni,s
i=1
i=1
N= P
,
ρ
=
,
(39)
P
P
smax
tstep Psmax
t
step
i
i
s=1 1
s=1 1
i=1
i=1
where smax
is the maximum number of non-linear steps at time step ti , i = 1, . . . , tstep . The value ρ
i
indicates the average of the ρi,s ’s over a single period, i.e., the average convergence rate over a single
period, whereas N represents the average of the Ni,s ’s over a single period, i.e., the average number of
GMRES iterations over a single period. With smax we indicate the average value of smax
over a single
i
period.
In the following tests, the values of smax , N and ρ are computed for the FS and the AS preconditioner,
as well as for the LU direct solver, when used. A comparison in terms of computational time is also
presented. The results for the 2D simulations are given first, followed by the 3D tests.

4.1

2D Simulations

Two 2D geometries are considered, involving a venous valve and a brain aneurysm. The AS preconditioner
has already been tested on these two geometries in [6, 7] and [19]. A brief description of the function
k(b
x) used in the venous valve simulations is also given.
10

4.1.1

Brain Aneurysm Geometry.

(a)

(b)

Figure 3: (a) 2D aneurysm geometry and lengths; (b) coarse mesh considered and material separation, where the red color

indicates the solid domain and the blue color indicates the fluid domain.

The following 2D simulations of a cerebral aneurysm are based on a 2D hemodynamics model problem
from [58]. The geometry consists of a channel (lumen of the artery) of diameter 2 mm with a wall thickness
of 0.25 mm (Figure 3 (a)). The aneurysm wall is typically thinner than that of the healthy artery part;
therefore the aneurysm has a wall thickness of 0.125 mm. For this geometry (and all the others as well)
a hybrid mesh is employed. Quadrilateral elements are mainly used to mesh the lumen and the arterial
wall, while triangles are employed in the aneurysm bulge. The coarse mesh is displayed in Figure 3
(b), where the red color indicates the vessel wall and the blue color indicates the fluid domain. The
coarse mesh has 283 elements and 1119 biquadratic nodes, for a total of 5325 degrees of freedom. In the
simulations below, the coarse mesh is refined up to four times, and the last three levels are used for the
quantitative analysis of the solver’s performance. These three levels have a total of 81492, 323524 and
1289220 degrees of freedom, respectively. The density and viscosity of blood are set to 1035 kg/m3 and
3.5 × 10−3 Pa·s, respectively. For the elastic artery, a value of 1120 kg/m3 has been chosen for the density
of the arterial wall, while the Young modulus and Poisson’s ratio are set to 1.0 MPa and 0.5, respectively.
Inflow boundary conditions are specified as a pulsatile velocity profile moving from the right to the left
part of the lumen as in [58]
uf (0, y, t) = (1 + 0.75 sin(2πt))uf (0, y), 0 ,

(40)

where uf (0, y) is defined as parabolic inflow, namely
uf (0, y) = −0.05(1 − y 2 ),

(41)

with 0 ≤ y ≤ R, and R = 1 mm is the lumen radius at the inlet. A zero stress outflow boundary condition
is considered at the lower left part of the artery. The displacements are set equal to zero at the inlet and
outlet of the artery, and zero stress boundary conditions are imposed on the external aneurysm wall.
4.1.2

Venous Valve Geometry.

For the venous valve geometry, half of a blood vessel is considered, namely only the motion of one of
the two venous valve leaflets is analyzed. The other half of the geometry and its mesh can be easily
reconstructed by symmetry. Figure 4 shows the entire geometry, rotated of 90 degrees, together with
its mesh, lengths, and the labels given to the boundaries. In this geometry, we identify six different
boundaries: B1 and B2 represent the fluid boundaries at the bottom and top of the vein, respectively,
B3 and B4 represent the solid boundaries at the bottom and top of the vein, respectively, B5 indicates
the lateral solid boundary, and B6 is the symmetry axis. The vein has a lumen diameter of 5.54 mm and
a length of 10 cm. The thickness of the vein wall is 0.5 mm. For the valve leaflet, a thickness of 0.065 mm

Figure 4: Vein and valve geometry with its coarse mesh, lengths and boundary names.

11

(a)

(b)
Figure 5: Close (a) and open (b) leaflet configurations with highlighted fluid leaflet, in green.

is specified. The elastic vein wall and the valve leaflet have the same density, 960 kg/m3 , and Poisson’s
ratio, 0.5. The density and viscosity of blood are set to 1060 kg/m3 and 2.2 × 103 Pa·s, respectively. At
the fluid boundary B1, a normal stress boundary condition of the form
(σ(u, pf ) · n) · n = 15 sin(2πt)

[Pa],

u · τ = 0,
d = 0,

(42)

is specified, where τ indicates the tangential vector to the boundary. At the boundary B2, the same
condition is applied but with the opposite sign. The vein is considered clamped; therefore at B3 and B4,
the following condition is applied
d = 0.

(43)

At the lateral solid boundary B5, a stress boundary condition of the form
σ(d, ps ) · n = 0,

(44)

is specified. Finally, at the symmetry axis B6, we require
u · n = 0,

∂u
= 0,
∂τ

d · n = 0,

∂d
= 0.
∂τ

The valve coarse mesh, displayed in Figure 4, has 292 elements and 1245 biquadratic nodes, for a
total of 5856 degrees of freedom. Similarly to the brain aneurysm case, the coarse mesh is refined up to
four times and the last 3 levels are used for the quantitative analysis of the solver’s performance. These
three levels have a total of 89604, 355716 and 1417476 degrees of freedom, respectively.
For all the simulations involving this venous valve geometry, the function k(b
x) in equation (11) is
chosen as a distance function from a fluid element to the valve leaflet, to guarantee that there are no
b, the
mesh entanglements in the fluid domain. Given a fluid element in the mesh with center point x
distance function k(b
x) is defined as
a
,
(45)
k(b
x) =
1 + c · k1 (b
x)
b, the center of
where a, c ∈ R+ , a, c ≥ 1 and k1 (b
x) is a function that measures the distance from x
the fluid element, to m, the middle point at the tip of the valve leaflet. Thus, k1 (b
x) has the following
expression
p
k1 (b
x) = (b
x1 − m1 )2 + (b
x2 − m2 )2 ,
(46)
12

Table 1: 2D Brain Aneurysm: mesh independence study for the solver

2D Brain Aneurysm
Additive Schwarz
Field-Split
smax
N
ρ
Time
smax
N
ρ
Time
3.39 9.26 0.16 37.58s
3.39 9.12 0.15 37.84s
α = 0.94
α = 0.83
3.67 9.47 0.17 139.08s 3.67 8.86 0.15 119.39s
α = 0.97
α = 0.90
3.67 9.64 0.18 555.30s 3.67 9.11 0.16 454.00s

Level
3
4
5

Table 2: 2D Venous Valve: mesh independence study for the solver

Level
3
4
5

2D Venous Valve
Additive Schwarz
Field-Split
smax
N
ρ
Time
smax
N
ρ
Time
4.49 14.24 0.24 145.70s
4.49 14.33 0.24 139.72s
α = 1.00
α = 0.81
4.51 15.97 0.28 583.97s
4.51 16.21 0.28 429.58s
α = 1.03
α = 0.97
4.51 17.69 0.31 2508.16s 4.51 18.12 0.31 2039.69s

Table 3: 2D Venous Valve: robustness of the solver in terms of time step size

Time Step
1/64
1/128
1/256

2D Venous Valve
Additive Schwarz
Field-Split
smax
N
ρ
Time
smax
N
ρ
Time
4.51 15.97 0.28 583.97s
4.51 16.21 0.28 429.58s
3.67 15.80 0.27 1024.95s 3.67 16.11 0.28 767.03s
3.33 15.68 0.27 2739.24 3.33 16.14 0.28 1736.29s

b and the pair (m1 , m2 ) indicates the coordinates of
where the pair (b
x1 , x
b2 ) indicates the coordinates of x
m. The value of c considered in the numerical tests is c = 10, 000, while for a we consider either a = 1
or a = 100. For the elements that belong to the fluid leaflet, visible in Figures 5 (a) and (b) in green, we
set a = 100 to make these elements stiffer, whereas for the rest of the fluid elements, a = 1. More details
about the function k(b
x) can be found in [19].
4.1.3

Results.

First, a study to investigate the mesh independence of the proposed solvers is performed. Let the
computational time be
T (dofs) = C dofsα ,
for some constant C. Then, α = 1 is the optimal multigrid convergence rate for elliptic problems. If α < 1
the convergence is better than linear and for α > 1 it is worse than linear. To estimate the parameter α
one can use the number of degrees of freedom and the computational times obtained using two different
levels of refinement, namely
T (dofs1 )
ln
T (dofs2 )
α≈
.
dofs1
ln
dofs2
Tables 1 and 2 show the values of smax , N , ρ, α and the CPU time for the brain aneurysm and
venous valve geometry, respectively. Three refinement levels are considered, namely 3, 4 and 5. Sixteen
processes were used to run these simulations in parallel. In Table 1, the values of smax , N , ρ are almost
constant, whereas in Table 2 N and ρ slightly increase with the number of uniform refinements. This
increase, especially in the values of ρ, indicates that both preconditioning techniques are not completely
13

independent from the mesh considered. A certain degree of dependence on the mesh is expected, since
in hemodynamics simulations the meshes are constructed on complex geometries, and they may undergo
severe deformation during the simulation, causing some deterioration in the convergence. This is especially
visible in the second test, where in the closing phase the valve leaflet squeezes the fluid domain almost
to nothing. Nevertheless, the α parameter is always less than or equal to one. This is quite a remarkable
result, given the nonlinearity and complexity of the FSI problem. In terms of time, the FS preconditioner
is faster than AS. For the most expensive simulations (5 refinement levels), the speed-up of FS over AS
is 18.24% for the aneurysm case and 18.68% for the venous valve.
In terms of robustness with respect to the time step size, Table 3 shows the results obtained for the
more complex valve geometry. The values of N and ρ are stable for both solvers indicating that there
is no significant change in the convergence rate. The value of smax decreases with the time step since,
by reducing the time step size, the difference in the solution between two consecutive time intervals gets
smaller. Thus, a smaller number of non linear iterations is required for the solver to converge. In terms
of computational time, FS performs better than AS, i.e. it is less expensive than AS for all time step
sizes considered.
In terms of scalability of the solvers with respect to the number of processes, Tables 4 and 5 show the
results given for the brain aneurysm and venous valve geometry, respectively. The number of processes
used is 4, 8 and 16, and for the two geometries the fourth uniform refinement level is considered. To
have a more complete picture, a direct LU solver is added for comparison. This third solver is referred
to as MLU, since we used the implementation available in the MUMPS library [1]. From Table 4, we
can see that the values of smax and ρ obtained with the AS and FS preconditioners are very similar.
Slightly bigger differences can be found in the values of N . An analogous situation is present in Table 5.
This means that the two solvers exhibit similar convergence properties. Moreover, the convergence does
not deteriorate increasing the number of processes. Looking at the results obtained with MLU, better
convergence properties are observed, although the computational time is larger.
The solver time decreases as the number of processes increases. For the aneurysm geometry, we
have that when using 8 processes instead of 4, the reduction in the solver time is 43.96% with the AS
preconditioner, and 41.78% with the FS preconditioner. With 16 processes instead of 8, the reduction
is 40.48% with the AS preconditioner, and 37.31% with the FS preconditioner. For the 2D valve case,
we have that, when using 8 processes instead of 4, the reduction in the solver time is 46.47% with the
AS preconditioner, and 47.03% with the FS preconditioner; whereas using 16 processes instead of 8, the
reduction is 37.58% with the AS preconditioner, and 40.47% with the FS preconditioner. Therefore, the
performances of the two preconditioning techniques are comparable in terms of process scalability, and
the scalability is not significantly impacted by the geometry. In an ideal situation, we would like the
time reduction to be exactly half (50%), when doubling the number of processes. Such a scenario is not
achieved here, due to the use of the Schwartz domain decomposition preconditioner available in PETSc.
We remind that this preconditioner is multiplicative within a process but additive among processes. The
more processes are used the more the additive component dominates with respect to the multiplicative
one, and in general additive is expected to be less performing than multiplicative.
The MLU solver has an even poorer performance in terms of process scalability, in fact, for the
aneurysm case, the time reduction is only 22.46% from 4 to 8 processes and 15.18% from 8 to 16.
Similarly, for the valve case, the time reduction is just 22.29% from 4 to 8 processes and 18.60% from 8
to 16.
Comparing the computational times, the FS preconditioner is considerably faster than the AS and
MLU for all cases considered. From Table 4 we see that using the FS preconditioner, the time is reduced
by 21.55% over AS and 36.80% over MLU with 4 processes, by 18.49% over AS and 62.78% over MLU
with 8 processes, and by 14.16% over AS and 72.49% over MLU with 16 processes. Hence, there is an
average reduction of time of 18.07% over AS and 57.37% over MLU. Focusing on Table 5, the time is
reduced by 22.07% over AS and 29.46% over MLU with 4 processes, by 22.85% over AS and 51.91% over
MLU with 8 processes, and by 26.44% over AS and 64.83% over MLU with 16 processes. Hence, for the
valve case, there is an average reduction of 23.77% over AS and 48.73% over MLU.
Finally, we show that with the proposed FSI modeling, our solvers are able to consistently capture
physical quantities of interest. The results obtained with the AS or FS preconditioner are identical,
so only those obtained using FS are shown. Focusing on the 2D valve geometry, Figure 6 shows the
difference between the cumulative bottom (B1 ) and top (B2 ) fluxes over time and the instant flux at the
bottom boundary B1 . These two quantities of interest are computed for three different levels of mesh
refinements, namely levels 3, 4 and 5. Total flux (instant flux) at a boundary Bi , i = 1, 2, is defined as
Z
qi (t) =
u(x, t) · n ds,
(47)
Bi

where n is the inlet normal in B1 and the outer normal in B2 . The cumulative total flux over time is the
14

Table 4: 2D Brain Aneurysm: solver tests - 4 refinements

Additive Schwarz
procs smax N
ρ
Time
4
3.67 9.59 0.18 417.02s
8
3.67 10.15 0.19 233.68s
16 3.67 9.47 0.17 139.08s

2D Brain Aneurysm
Field-Split
smax N
ρ
Time
3.67 8.90 0.16 327.13 s
3.67 9.32 0.17 190.45 s
3.67 8.86 0.15 119.39 s

smax
3.67
3.67
3.67

MLU
N
ρ
Time
1 6.27E-011 659.89s
1 6.86E-011 511.66s
1 7.02E-011 433.96s

Table 5: 2D Venous Valve: solver tests - 4 refinements

Additive Schwarz
procs smax N
ρ
Time
4
4.51 16.48 0.29 1748.17s
8
4.51 15.84 0.28 935.50s
16 4.51 15.97 0.28 583.97s

2D Venous Valve
Field-Split
smax N
ρ
Time
4.51 16.60 0.29 1362.29s
4.51 16.55 0.29 721.65s
4.51 16.21 0.28 429.58s

smax
4.51
4.51
4.51

MLU
N
ρ
Time
1 1.31E-08 1931.23s
1 1.01E-08 1500.80s
1 9.73E-09 1221.58s

integral over time of the total flux, namely
Z

t

Qi (t) =

qi (τ ) dτ.

(48)

0

As expected, the difference between the cumulative bottom and top fluxes over time always oscillates
around 0 for all three simulations, meaning that the fluxes at the boundaries B1 and B2 of the vein
correctly balance each other over time. The discrepancies in the solutions for the three levels of refinements
are negligible, therefore we conclude that the solution is correctly represented. The instant flux at the
bottom of the vein geometry shows that some backflow occurs at the inlet. This natural phenomenon
occurs because, when the valve closes, it undergoes a large deformation (especially for a small Young’s
modulus E), and blood may be pushed down, causing an exiting flux at the inlet. Again, the differences
in the solutions for the three levels of refinements are negligible.

4.2

3D Simulations

Two 3D geometries are presented, a brain aneurysm and an aortic aneurysm. The AS preconditioner has
already been tested on the 3D brain aneurysm geometry in [6] and [7].
4.2.1

Brain Aneurysm Geometry.

The cerebral aneurysm considered here is a 3D extension of the 2D geometry analyzed above. Now, the
aneurysm wall is assumed to have a uniform thickness equal to 0.25 mm. Once again, a hybrid mesh is
employed. Wedges are utilized to mesh the artery lumen, whereas hexahedra are used for the arterial
wall. Tetrahedral elements are mainly employed in the aneurysm cavity. Figure 7 (a) shows the geometry
with its mesh, whereas Figure 7 (b) is a cross-section of the 3D geometry where the red color indicates
the vessel wall and the blue color indicates the fluid domain. The mesh has 268 elements and 2169
triquadratic nodes, thus the number of degrees of freedom is 14086. In the simulations performed below,
this mesh is refined up to two times, and in this case we have 17152 elements, 121253 triquadratic nodes
and so 796126 degrees of freedom. The same physical parameters used in the 2D case are employed for
both the artery wall and blood. The inflow boundary condition is a pulsatile velocity profile moving from
the right to the left part of the lumen described by
uf (0, y, z, t) = −0.3(1 − r2 )(1 + 0.75 sin(2πt)), 0, 0 ,

(49)

p
where r = y 2 + z 2 , with 0 ≤ r ≤ R, and R is the lumen radius at the inlet. At the outlet, a pressure
condition of the form p = 0 has been imposed. The boundary displacements at the inlet and outlet of
the artery are set to zero.

15

(a)

(b)
Figure 6: (a) Difference over time between the cumulative bottom and top fluxes, Q1 (t) − Q2 (t); (b) instant flux q1 (x) at

the bottom boundary B1 .

4.2.2

Aortic Aneurysm Geometry.

The aortic aneurysm geometry and mesh are shown in Figure 8 (a). The mesh has 208 elements and 1715
triquadratic nodes, thus the number of degrees of freedom is 11122. In the simulations performed below,
this mesh is refined up to two times, and in this case we have 13312 elements, 98537 triquadratic nodes
and so 644470 degrees of freedom. The arterial wall has a thickness of 1.5 mm at the inlet (bottom part
of Figure 8 (a)) and outlet (top part of Figure 8 (a)) and it gets thinner getting closer to the aneurysm,
reaching a 1 mm thickness. The lumen diameter at the inlet is 2.5 cm, while at the outlet it reduces to
1.8 cm. The maximum aneurysm diameter is 6 cm. The hybrid mesh employed uses hexahedral elements
for the arterial wall and wedges and tetrahedral elements for the lumen. For both the artery wall and
blood, the same physical parameters used in the 2D and 3D brain aneurysm cases are employed. Blood
flow often slows in the bulging section of an aortic aneurysm, causing clots to form. Therefore, a second
very soft solid is introduced in the aneurysm cavity to simulate clotted blood. The Young’s modulus of
this second solid is 3 × 10−3 MPa. Figure 8 (b) shows a cross-section of the geometry where the lumen,
clotted blood and the artery wall are visible. The inflow boundary condition is a pulsatile velocity profile
moving from the bottom to the top part of the lumen described by


0.01
2
f
u (x, 0, z, t) = 0, −
(0.81 − r )(1 + 0.75 sin(2πt)), 0 ,
(50)
0.81
√
where r = x2 + z 2 , with 0 ≤ r ≤ R, and R is the lumen radius at the inlet. At the outlet, a timedependent normal stress boundary condition of the form
(σ(u, pf ) · n) · n = 12500 + 2500 sin(2πt),

(σ(u, pf ) · n) · τ = 0

has been imposed, to simulate the physiological pressure range 80 - 120 mm Hg. The artery at both the
inlet and the outlet is considered clamped.

16

(a)

(b)

Figure 7: (a) 3D brain aneurysm geometry and mesh; (b) cross-section of the 3D geometry where the red color indicates

the vessel wall and the blue color indicates the fluid domain.

(b)

(a)

Figure 8: (a) aortic aneurysm geometry and mesh, (b) cross-section of the aortic aneurysm geometry, where the blue color

shows the lumen, the red color shows the clotted blood and the light blue colors shows the artery wall.

4.2.3

Results.

For both geometries, 3 uniform refinement levels have been considered. Tables 6 and 7 show the results
for the 3D brain aneurysm and the aortic aneurysm geometry, respectively. For both geometries, the
values of smax , N and ρ obtained with the two preconditioners are comparable, so the two techniques
have similar convergence properties. The values of N and ρ increase with the number of processes for both
solvers, meaning that the convergence is negatively affected by increasing the number of processes. This
is somewhat different from the 2D results, where convergence was better preserved, but 3D problems are
stiffer than 2D ones, so it is reasonable to expect a worsening in the converge rate and in the number of
linear iterations. In terms of process scalability, we have that the performances of the two preconditioning
techniques are comparable, as in the 2D cases. As expected, the solver time decreases as the number of
processes increases. For the brain aneurysm, using 8 processes instead of 4, the reduction in the solver
time is 39.56% with the AS preconditioner and 33.60% with the FS preconditioner; whereas using 16
processes instead of 8, the reduction is 29.67% with the AS preconditioner and 29.66% with the FS
preconditioner. For the aortic aneurysm, using 8 processes instead of 4, the reduction in the solver time
is 20.41% with the AS preconditioner and 14.62% with the FS preconditioner; while using 16 processes
instead of 8, the reduction is 9.50% with the AS preconditioner and 8.60% with the FS preconditioner. In
general, neither preconditioner shows good scalability properties. Again the reason for the “non-perfect”
scalability seems to be the additive Schwarz domain decomposition used between processes. However,
now the negative effect appears to be stronger with respect to the 2D case, since an increase in the
number of processes causes an consistent increase in the number of linear iterations as well. A similar
effect is pointed out in [23], where, again, a “non-perfect” scalability was noticed.
Comparing the times required by the two solvers, the times obtained with the FS strategy are considerably smaller than those obtained with the AS strategy. For the brain aneurysm case, using the FS
preconditioner, the time is reduced by 57.64% with 4 processes, 57.01% with 8 processes, and 53.46%

17

Table 6: 3D Brain Aneurysm: solver tests - 3 refinements

procs
4
8
16

smax
3.78
3.78
3.81

3D Brain Aneurysm
Additive Schwarz
Field-Split
N
ρ
Time
smax
N
ρ
Time
20.87 0.40 11,662.29s 3.78 20.88 0.40 4,939.75s
29.08 0.50 7,049.10s
3.78 29.14 0.51 3,280.01s
36.19 0.67 4,957.86s
3.84 37.00 0.69 2,307.21s

Table 7: 3D Aortic Aneurysm: solver tests - 3 refinements

procs
4
8
16

3D Aortic
Additive Schwarz
smax
N
ρ
Time
3.09 28.40 0.55 8,848.78s
4.09 33.21 0.70 7042.69s
4.66 39.11 0.81 6,373.04s

Aneurysm
smax
3.09
4.13
4.78

Field-Split
N
ρ
Time
28.41 0.55 3,810.90s
33.64 0.71 3253.45s
39.46 0.82 2,973.71s

Figure 9: Relative difference in volume of the aneurysm cavity.

with 16 processes. Hence, averaging these three percentage values, there is an overall time reduction of
56.04%. Focusing on the aortic aneurysm case, the FS preconditioner is approximately 1.5 times faster
than the AS one. Using the FS strategy, the time is reduced by 56.93% with 4 processes, 53.80% with 8
processes, and 53.34% with 16 processes. The overall time reduction is 54.69%.
Once again, we show that the proposed FSI modeling and solvers are able to correctly capture some
physical quantities of interest. Results obtained with the AS preconditioner are identical, so they are not
shown. Focusing on the brain aneurysm, Figure 9 shows the relative difference in volume of the aneurysm
cavity. This quantity of interest is computed for three different levels of mesh refinements, namely 1, 2
and 3 levels. Due to the pulsatile nature of the blood stream and blood pressure, we expect the aneurysm
cavity to periodically inflate, and this behavior is clearly visible in the graph. The discrepancies in the
solutions for the three levels of refinements are negligible, therefore the solution is consistently represented.
For this test, a time-dependent normal stress boundary condition of the form
(σ(u, pf ) · n) · n = 2500 + 1000 sin(2πt),

(σ(u, pf ) · n) · τ = 0

has been imposed on the outlet, to better simulate the more physiological pulsatile nature of blood
pressure.

18

5

Conclusions

In this paper, a GMRES algorithm preconditioned by GMG is used to solve linearized FSI systems.
To ensure numerical stability, a monolithic formulation of the FSI system is adopted, and a SUPG
stabilization is added to the momentum equation. The novelty of the work consists of a field-split
preconditioner for the multigrid level sub-solvers. The block structure of this FS preconditioner derives
from using the physical variables as a splitting strategy. The FS preconditioner is a combination of physicsbased and domain decomposition preconditioners, since its diagonal blocks are further preconditioned
using a locally multiplicative AS strategy. The performance of the proposed field-split preconditioner
is tested on biomedical FSI applications and compared with those of a pure AS preconditioner. Both
2D and 3D simulations are carried out on aneurysm and venous valve geometries. The numerical tests
show a weak mesh dependence of the FS and AS preconditioners, as expected with complex biomedical
geometries. The computational times show optimal complexity with respect to the number of unknowns.
Moreover, both solvers are found robust with respect to the time step size and have similar convergence
properties. The major difference between the FS and the AS preconditioners is that FS is significantly
faster than AS, especially in 3D. In the examples considered, the FS preconditioner is approximately
20% faster than the AS in 2D simulations and 50% faster in 3D. For the 2D cases, a comparison is also
made against a direct LU solver, showing an even better speed-up. In terms of process scalability, the
performance of both preconditioners is satisfactory in 2D, but exhibits saturation in 3D.
Future work consists of investigating the performance of the proposed field-split technique as a preconditioner for the GMRES algorithm. Specifically, referring to Figure 2, we are interested in exploring
how the solver’s performance would be affected interchanging the GMG and the FS boxes. This interchange would produce a Krylov subspace solver preconditioned with FS, where the diagonal blocks
are further preconditioned with a GMG algorithm. The smoothing procedure would then be of domain
decomposition type (AS).

Data Accessibility
The data associated with this paper has been obtained using FEMuS, an open-source finite element C++
library. FEMuS can be downloaded from GitHub; please see the link in reference [4].

Acknowledgments
The research of the second author was partially supported by the NSF grant DMS-1912902.

References
[1] Multifrontal massively parallel solver (mumps 5.2.1) users’ guide. 2019.
[2] E Aulisa, S Manservisi, and P Seshaiyer. A computational multilevel approach for solving 2D
Navier–Stokes equations over non-matching grids. Computer Methods in Applied Mechanics and
Engineering, 195(33):4604–4616, 2006.
[3] Eugenio Aulisa, Simone Bnà, and Giorgio Bornia. Multigrid solver with domain decomposition
smoothing for steady-state incompressible FSI problems. In ECCOMAS Thematic Conference 5th International Conference on Computational Methods in Structural Dynamics and Earthquake
Engineering, COMPDYN 2015, 25 - 27 May 2015 Crete Island, Greece, volume 1, pages 1128–
1144. Institute of Structural Analysis and Antiseismic Research School of Civil Engineering National
Technical University of Athens (NTUA), 2015.
[4] Eugenio Aulisa, Simone Bná, and Giorgio Bornia. FEMuS Web page. https://github.com/
eaulisa/MyFEMuS, 2017.
[5] Eugenio Aulisa, Simone Bna, and Giorgio Bornia. A monolithic ALE Newton–Krylov solver with
multigrid-Richardson–Schwarz preconditioning for incompressible fluid-structure interaction. Computers & Fluids, 174:213–228, 2018.
[6] Eugenio Aulisa, Giorgio Bornia, and Sara Calandrini. Fluid-structure interaction modeling of artery
aneurysms with steady-state configurations. VII International Conference on Computational Methods for Coupled Problems in Science and Engineering, COUPLED PROBLEMS, pages 616–627,
2017.
19

[7] Eugenio Aulisa, Giorgio Bornia, and Sara Calandrini. Fluid-structure simulations and benchmarking
of artery aneurysms under pulsatile blood flow. 6th ECCOMAS Thematic Conference on Computational Methods in Structural Dynamics and Earthquake Engineering, pages 955–974, 2017.
[8] Eugenio Aulisa, Giorgio Bornia, and Sandro Manservisi. Boundary control problems in convective
heat transfer with lifting function approach and multigrid Vanka-type solvers. Communications in
Computational Physics, 18(03):621–649, 2015.
[9] Frank PT Baaijens. A fictitious domain/mortar element method for fluid-structure interaction.
International Journal for Numerical Methods in Fluids, 35(7):743–761, 2001.
[10] Satish Balay, Shrirang Abhyankar, Mark F. Adams, Jed Brown, Peter Brune, Kris Buschelman,
Lisandro Dalcin, Victor Eijkhout, William D. Gropp, Dinesh Kaushik, Matthew G. Knepley,
Lois Curfman McInnes, Karl Rupp, Barry F. Smith, Stefano Zampini, and Hong Zhang. PETSc
Web page. http://www.mcs.anl.gov/petsc, 2017.
[11] Randolph E Bank, Bruno D Welfert, and Harry Yserentant. A class of iterative methods for solving
saddle point problems. Numerische Mathematik, 56(7):645–666, 1989.
[12] Steffen Basting, Annalisa Quaini, Sunčica Čanić, and Roland Glowinski. Extended ALE method for
fluid–structure interaction problems with large structural displacements. Journal of Computational
Physics, 331:312–336, 2017.
[13] Y Bazilevs, M-C Hsu, Y Zhang, W Wang, T Kvamsdal, S Hentschel, and JG Isaksen. Computational vascular fluid–structure interaction: methodology and application to cerebral aneurysms.
Biomechanics and Modeling in Mechanobiology, 9(4):481–498, 2010.
[14] Michele Benzi. Preconditioning techniques for large linear systems: a survey. Journal of Computational Physics, 182(2):418–477, 2002.
[15] Michele Benzi, Gene H Golub, and Jorg Liesen. Numerical solution of saddle point problems. Acta
numerica, 14(1):1–137, 2005.
[16] Susanne C Brenner and L Ridgway Scott. Additive Schwarz preconditioners. The Mathematical
Theory of Finite Element Methods, pages 175–214, 2008.
[17] Martina Bukač, Sunčica Čanić, Roland Glowinski, Josip TambačA, and Annalisa Quaini. Fluid–
structure interaction in blood flow capturing non-zero longitudinal structure displacement. Journal
of Computational Physics, 235:515–541, 2013.
[18] Xiao-Chuan Cai and Marcus Sarkis. A restricted additive Schwarz preconditioner for general sparse
linear systems. SIAM Journal on Scientific Computing, 21(2):792–797, 1999.
[19] Sara Calandrini and Eugenio Aulisa. Fluid-structure interaction simulations of venous valves: A
monolithic ALE method for large structural displacements. International Journal for Numerical
Methods in Biomedical Engineering, page e3156, 2018.
[20] Sara Calandrini, Giacomo Capodaglio, and Eugenio Aulisa. Magnetic drug targeting simulations in
blood flows with fluid-structure interaction. International journal for numerical methods in biomedical engineering, 34(4):e2954, 2018.
[21] Paola Causin, Jean-Frédéric Gerbeau, and Fabio Nobile. Added-mass effect in the design of partitioned algorithms for fluid–structure problems. Computer Methods in Applied Mechanics and Engineering, 194(42-44):4506–4527, 2005.
[22] Juan R Cebral, Marcelo Adrián Castro, Sunil Appanaboyina, Christopher M Putman, Daniel Millan, and Alejandro F Frangi. Efficient pipeline for image-based patient-specific analysis of cerebral aneurysm hemodynamics: technique and sensitivity. IEEE transactions on medical imaging,
24(4):457–467, 2005.
[23] Paolo Crosetto, Simone Deparis, Gilles Fourestey, and Alfio Quarteroni. Parallel algorithms for
fluid-structure interaction problems in haemodynamics. SIAM Journal on Scientific Computing,
33(4):1598–1622, 2011.
[24] Paolo Crosetto, Philippe Reymond, Simone Deparis, Dimitrios Kontaxakis, Nikolaos Stergiopulos,
and Alfio Quarteroni. Fluid–structure interaction simulation of aortic blood flow. Computers &
Fluids, 43(1):46–57, 2011.
20

[25] Howard Elman, Victoria E Howle, John Shadid, Robert Shuttleworth, and Ray Tuminaro. A taxonomy and comparison of parallel block multi-level preconditioners for the incompressible Navier–
Stokes equations. Journal of Computational Physics, 227(3):1790–1808, 2008.
[26] Howard Elman, Milan Mihajlović, and David Silvester. Fast iterative solvers for buoyancy driven
flow problems. Journal of Computational Physics, 230(10):3900–3914, 2011.
[27] Howard C Elman, Oliver G Ernst, and Dianne P O’leary. A multigrid method enhanced by
Krylov subspace iteration for discrete Helmholtz equations. SIAM Journal on Scientific Computing,
23(4):1291–1315, 2001.
[28] Howard C Elman, David J Silvester, and Andrew J Wathen. Performance and analysis of saddle
point preconditioners for the discrete steady-state Navier-Stokes equations. Numerische Mathematik,
90(4):665–688, 2002.
[29] Haiping Fang, Zuowei Wang, Zhifang Lin, and Muren Liu. Lattice Boltzmann method for simulating
the viscous flow in large distensible blood vessels. Physical Review E, 65(5):051925, 2002.
[30] Leopoldo P Franca and Sérgio L Frey. Stabilized finite element methods: II. the incompressible
Navier-Stokes equations. Computer Methods in Applied Mechanics and Engineering, 99(2-3):209–
233, 1992.
[31] Leopoldo P Franca and Alexandre L Madureira. Element diameter free stability parameters for
stabilized methods applied to fluids. Computer Methods in Applied Mechanics and Engineering,
105(3):395–403, 1993.
[32] Michael W Gee, Ulrich Küttler, and Wolfgang A Wall. Truly monolithic algebraic multigrid for fluid–
structure interaction. International Journal for Numerical Methods in Engineering, 85(8):987–1016,
2011.
[33] Roland Glowinski, Tsorng-Whay Pan, and Jacques Periaux. A fictitious domain method for dirichlet
problem and applications. Computer Methods in Applied Mechanics and Engineering, 111(3-4):283–
303, 1994.
[34] Bruno Guerciotti and Christian Vergara. Computational comparison between Newtonian and nonNewtonian blood rheologies in stenotic vessels. In Biomedical Technology, pages 169–183. Springer,
2018.
[35] Matthias Heil. An efficient solver for the fully coupled solution of large-displacement fluid–structure
interaction problems. Computer Methods in Applied Mechanics and Engineering, 193(1-2):1–23,
2004.
[36] Gene Hou, Jin Wang, and Anita Layton. Numerical methods for fluid-structure interactiona review.
Communications in Computational Physics, 12(2):337–377, 2012.
[37] Ilse CF Ipsen. A note on preconditioning nonsymmetric matrices. SIAM Journal on Scientific
Computing, 23(3):1050–1051, 2001.
[38] D Jodlbauer, U Langer, and T Wick. Parallel block-preconditioned monolithic solvers for fluidstructure interaction problems. International Journal for Numerical Methods in Engineering,
117(6):623–643, 2019.
[39] George Karypis and Vipin Kumar. A software package for partitioning unstructured graphs, partitioning meshes, and computing fill-reducing orderings of sparse matrices. University of Minnesota,
Department of Computer Science and Engineering, Army HPC Research Center, Minneapolis, MN,
1998.
[40] G Ke and E Aulisa. New preconditioning techniques for the steady and unsteady buoyancy driven
flow problems. Journal of Computational Physics, 371:244–260, 2018.
[41] G Ke, E Aulisa, G Dillon, and V Howle. Augmented Lagrangian-based preconditioners for steady
buoyancy driven flow. Applied Mathematics Letters, 82:1–7, 2018.
[42] Guoyi Ke, Eugenio Aulisa, Giorgio Bornia, and Victoria Howle. Block triangular preconditioners
for linearization schemes of the rayleigh–bénard convection problem. Numerical Linear Algebra with
Applications, 24(5):e2096, 2017.

21

[43] Dana A Knoll and William J Rider. A multigrid preconditioned Newton–Krylov method. SIAM
Journal on Scientific Computing, 21(2):691–710, 1999.
[44] M Krafczyk, M Cerrolaza, M Schulz, and E 1998 Rank. Analysis of 3D transient blood flow passing through an artificial aortic valve by Lattice–Boltzmann methods. Journal of Biomechanics,
31(5):453–462, 1998.
[45] Patrick Le Tallec and Jean Mouro. Fluid structure interaction with large structural displacements.
Computer methods in applied mechanics and engineering, 190(24-25):3039–3067, 2001.
[46] Joseph R Leach, Mohammad RK Mofrad, and David Saloner. Computational models of vascular
mechanics. In Computational Modeling in Biomechanics, pages 99–170. Springer, 2010.
[47] Raphaël Loubère, Pierre-Henri Maire, Mikhail Shashkov, Jérôme Breil, and Stéphane Galera. Reale:
A reconnection-based arbitrary-Lagrangian–Eulerian method. Journal of Computational Physics,
229(12):4724–4761, 2010.
[48] Sandro Manservisi. Numerical analysis of Vanka-type solvers for steady Stokes and Navier–Stokes
flows. SIAM Journal on Numerical Analysis, 44(5):2025–2056, 2006.
[49] LG Margolin and Mikhail Shashkov. Second-order sign-preserving conservative interpolation (remapping) on general grids. Journal of Computational Physics, 184(1):266–298, 2003.
[50] David S Molony, Anthony Callanan, Eamon G Kavanagh, Michael T Walsh, and Tim M McGloughlin. Fluid-structure interaction of a patient-specific abdominal aortic aneurysm treated with an
endovascular stent-graft. BioMedical Engineering OnLine, 8(1):24, 2009.
[51] Malcolm F Murphy, Gene H Golub, and Andrew J Wathen. A note on preconditioning for indefinite
linear systems. SIAM Journal on Scientific Computing, 21(6):1969–1972, 2000.
[52] Charles S Peskin. The immersed boundary method. Acta numerica, 11:479–517, 2002.
[53] Charles S Peskin and David M McQueen. A three-dimensional computational method for blood flow
in the heart I. immersed elastic fibers in a viscous incompressible fluid. Journal of Computational
Physics, 81(2):372–405, 1989.
[54] Thomas Richter. A monolithic geometric multigrid solver for fluid-structure interactions in ale
formulation. International journal for numerical methods in engineering, 104(5):372–390, 2015.
[55] Barry Smith, Petter Bjorstad, and William Gropp. Domain decomposition: parallel multilevel methods for elliptic partial differential equations. Cambridge university press, 2004.
[56] Tayfun E Tezduyar, M Behr, S Mittal, and A Johnson. Computation of unsteady incompressible
flows with the stabilized finite element methods: Space-time formulations, iterative strategies and
massively parallel implementations. ASME PRESSURE VESSELS PIPING DIV PUBL PVP.,
ASME, NEW YORK, NY(USA), 1992,, 246:7–24, 1992.
[57] Tayfun E Tezduyar, Sunil Sathe, Timothy Cragin, Bryan Nanna, Brian S Conklin, Jason Pausewang,
and Matthew Schwaab. Modelling of fluid–structure interactions with the space–time finite elements:
arterial fluid mechanics. International Journal for Numerical Methods in Fluids, 54(6-8):901–922,
2007.
[58] Stefan Turek, J Hron, Martin Madlik, Mudassar Razzaq, Hilmar Wobker, and Jens F Acker. Numerical simulation and benchmarking of a monolithic multigrid solver for fluid-structure interaction
problems with application to hemodynamics. In Fluid Structure Interaction II, pages 193–220.
Springer, 2011.
[59] E Harald van Brummelen, Kristoffer G van der Zee, and René de Borst. Space/time multigrid for a
fluid–structure-interaction problem. Applied Numerical Mathematics, 58(12):1951–1971, 2008.
[60] Raoul Van Loon, Patrick D Anderson, Frank PT Baaijens, and Frans N Van de Vosse. A
three-dimensional fluid–structure interaction method for heart valve modelling. Comptes Rendus
Mecanique, 333(12):856–866, 2005.
[61] SP Vanka. Block-implicit multigrid calculation of two-dimensional recirculating flows. Computer
Methods in Applied Mechanics and Engineering, 59(1):29–48, 1986.

22

[62] Konstantin Nikolaevich Volkov, Vladislav Nikolaevich Emelyanov, and Irina Vladimirovna Teterina.
Geometric and algebraic multigrid techniques for fluid dynamics problems on unstructured grids.
Computational Mathematics and Mathematical Physics, 56(2):286–302, 2016.
[63] K Watanabe, H Igarashi, and T Honma. Comparison of geometric and algebraic multigrid methods
in edge-based finite-element analysis. IEEE Transactions on Magnetics, 41(5):1672–1675, 2005.
[64] Olof Widlund and M Dryja. An additive variant of the Schwarz alternating method for the case of
many subregions. Technical Report 339, Ultracomputer Note 131. Department of Computer Science,
Courant Institute, 12 1987.
[65] Hilmar Wobker and Stefan Turek. Numerical studies of Vanka-type smoothers in computational
solid mechanics. Advances in Applied Mathematics and Mechanics, 1(1):29–55, 2009.

23

