LinearDesign: Efficient Algorithms for Optimized
mRNA Sequence Design
He Zhanga,b,♠ , Liang Zhangb,♠ , Ziyu Lia , Kaibo Liua , Boxiang Liua , David H. Mathewsc,d,e , and Liang Huanga,b,♣
Baidu Research USA, Sunnyvale, CA 94089, USA; b School of Electrical Engineering & Computer Science, Oregon State University, Corvallis, OR 97330, USA; c Dept. of
Biochemistry & Biophysics; d Center for RNA Biology; e Dept. of Biostatistics & Computational Biology, University of Rochester Medical Center, Rochester, NY 14642, USA

arXiv:2004.10177v4 [q-bio.BM] 13 May 2020

a

A messenger RNA (mRNA) vaccine has emerged as a promising direction to combat the current COVID-19 pandemic. This requires an
mRNA sequence that is stable and highly productive in protein expression, features which have been shown to benefit from greater
mRNA secondary structure folding stability and optimal codon usage. However, sequence design remains a hard problem due to the
exponentially many synonymous mRNA sequences that encode the
same protein. We show that this design problem can be reduced
to a classical problem in formal language theory and computational
linguistics that can be solved in O(n3 ) time, where n is the mRNA
sequence length. This algorithm could still be too slow for large
n (e.g., n = 3, 822 nucleotides for the spike protein of SARS-CoV2), so we further developed a linear-time approximate version, LinearDesign, inspired by our recent work, LinearFold. This algorithm,
LinearDesign, can compute the approximate minimum free energy
mRNA sequence for this spike protein in just 11 minutes using beam
size b = 1, 000, with only 0.6% loss in free energy change compared
to exact search (i.e., b = +∞, which costs 1 hour). We also develop two algorithms for incorporating the codon optimality into the
design, one based on k-best parsing to find alternative sequences
and one directly incorporating codon optimality into the dynamic programming. Our work provides efficient computational tools to speed
up and improve mRNA vaccine development.
Availability: server: http://rna.baidu.com/lineardesign;
code: to be released on GitHub.

1. Introduction
To defeat the current COVID-19 pandemic, which has already claimed
100,000+ deaths as of early April, a messenger RNA (mRNA) vaccine has emerged as a promising approach thanks to its rapid and
scalable production and non-infectious and non-integrating properties. However, designing an mRNA sequence to achieve high stability
and protein production remains a challenging problem. Recently, it
is discovered that greater secondary structure folding stability and
optimal codon usage synergize to increase protein expression.1 The
design problem can therefore be formulated as finding the mRNA sequence(s) that are good in both secondary structure stability and codon
optimality among the exponentially many synonymous sequences that
encode the same protein.
Each amino acid is translated by a codon, which is 3 adjacent
mRNA nucleotides. For example, the start codon AUG translates into
methionine, the first amino acid in any protein sequence. But due to
redundancies in the genetic code (43 = 64 triplet codons for 21 amino
acids), most amino acids can be translated from multiple codons. This
fact makes the search space of mRNA design increase exponentially
with protein length, e.g., for the spike protein of SARS-CoV-2 (the
virus that causes the COVID-19 pandemic), which contains 1,273
amino acids (plus the stop codon which is part of the mRNA but
not part of a protein), there are about 10632 mRNA candidates. The
arXiv Submission

mRNA design problem, therefore, aims to exploit the redundancies in
the genetic code to find more stable and productive mRNA sequences
than the wild type in nature.
Our key idea is to show that this design problem can be reduced
to a classical notion in formal language theory and computational
linguistics, namely the intersection between a Stochastic Context
Free Grammar (SCFG) and a Deterministic Finite Automaton (DFA),
which dates back to 1961.2 Here the SCFG represents the folding
free energy model and the DFA represents the set of all possible
synonymous mRNA sequences that code a given protein. While the
use of SCFG in RNA folding is well-known,3 the use of DFA to
encode the mRNA search space and solving the design problem via
the intersection of SCFG and DFA are novel. This intersection can
be done in O(n3 ) time, where n is the mRNA sequence length, but it
could still be too slow for large n (e.g., n = 3 × (1273 + 1) =
3, 822 nucleotides for the spike protein of SARS-CoV-2), so we
further developed a linear-time approximate version, LinearDesign,
inspired by our recent work, LinearFold.4 We also develop two
algorithms for incorporating the codon optimality into the design, one
based on k-best parsing to find alternative sequences and one directly
incorporating codon optimality into the dynamic programming.
After the completion of our algorithm design and implementation
of our Python prototype and C++ code, we became aware of two
earlier, independent, papers that tackled the same problem of “most
stable RNA design” using dynamic programming.5, 6 The second paper “CDSfold" published in 2016 did not cite the first one, published
in 2003. Our work is different in three aspects. First, we reduced the
mRNA design problem to “CFG-DFA intersection”, a classical problem in formal language theory and computational linguistics, which
is more general and can be applied to other scenarios with alternative
inputs, whereas the previous algorithms were ad hoc. Second, we
integrated codon optimality in the optimization. Third, we further
developed a linear-time approximate version with greatly reduced
runtime for long sequences and small sacrifices in search quality.

2. LinearDesign Algorithms
The mRNA design problem can be formulated as follows: given a
protein sequence p = p1 . . . pm where each pi is an amino acid,
we search, among all possible mRNA sequences r that translate into
protein p, the best mRNA sequence r? (p), defined as the sequence
that has the structure with minimum folding free energy change:
r? (p) = argmin MFE(r)

[1]

r∈RNA(p)

MFE(r) =

min

∆G◦ (r, s)

[2]

s∈structures(r)

where RNA(p) = {r | protein(r) = p} is the search space,
structures(r) is the set of all possible secondary structure for RNA
♠
♣

These two authors contributed equally.
Corresponding author: liang.huang.sh@gmail.com.

arXiv Submission

|

1

A

A

0,0

A

1,0

U

2,0

G

C

B

3,0

G

0,0

1,0

U

2,0

G

3,0

U
A
C

C

0,0

U

1,0

C

2,0

A

D

3,0

G

A
U

0,0

1,0

G

2,1

2,0

G

3,0

G

U

1,1

A

A

C

2,1

U

Fig. 1. Four examples of Deterministic Finite Automaton (DFA) representations for amino acids. Each example represents one amino acid. A: DFA for
methionine, with only one path (tryptophan is the only other amino acid with a single codon path in the standard genetic code); B: DFA for valine, with
alternatives only at the third nucleotide (15 of 21 amino acids are like this, with 2–4 paths); C: DFA for serine, which branches at the start node and has a
total of 6 paths (leucine and arginine are also like this); D: DFA for the stop codon.

A

0,0

A

1,0

U

2,0

G

3,0

U

4,0

U

G

5,0

C

6,0

U

7,0

A

A

8,0

A

C

4,1
|

D(methionine)

|
◦

5,1

D(leucine)

9,0

G

A
U

G

G

8,1

U

|
◦

|

D(STOP)

Fig. 2. The protein DFA for “methionine leucine” by concatenating small DFAs from individual amino acids, i.e., D(methionine) ◦ D(leucine) ◦ D(STOP).
The thick arrows indicate the best mRNA sequence after intersecting this DFA with the context-free grammar (see Fig. 3).

sequence r, and ∆G◦ (r, s) is the free energy change of structure s for
RNA r according to an energy model. Note that the mRNA sequence
length is n = 3(m + 1) due to the final stop codon, which is not
translated into the protein sequence.
Next we first show how to represent the exponentially large search
space RNA(p) compactly via DFAs, and then discuss how to do this
argmin search (over the product of two exponentially large spaces)
efficiently via dynamic programming, which can be reduced to the
CFG intersection with DFA.
A. DFA representation for amino acid codons and mRNA
search space. In the fields of formal language theory and com-

putational linguistics, the DFA graph is typically used to encode
ambiguities in languages.7 We notice that the ambiguity of codon
choice for amino acid is similar as to the language ambiguity problem,
and can be represented with a DFA graph too. We first illustrate how
to represent the amino acid codons using DFAs.
Informally, a DFA is a directed graph with labeled edges and
distinct start and end nodes. For our purpose each edge is labeled by
a nucleotide, so that each start-to-end path represents a triplet codon.
Formally, a DFA is a 5-tuple hQ, Σ, δ, q0 , F i where Q is the set of
nodes, Σ is the alphabet (here Σ = {A, C, G, U}), q0 is the start node,
F is the set of end nodes (in this work the end node is unique, i.e.,
|F | = 1), and δ is the transition function that takes a node q and a
symbol a ∈ Σ and returns the next node q 0 , i.e., δ(q, a) = q 0 encodes
a
a labeled edge q → q 0 .
Fig. 1 illustrates how DFAs represent 4 different types of amino
acids and their codons. All these DFAs have (0, 0) and (3, 0) as their
2

|

arXiv Submission

start and end nodes, respectively. Fig. 1A is the DFA representation
for methionine, which has only one path. Fig. 1B is the DFA for amino
acid valine, whose codon has a choice at the third nucleotide (most
amino acids are of this type). Fig. 1C represents the most complex
case, serine, leucine, and arginine, which have 6 codons each, and the
branching happens at the start node. Fig. 1D is the DFA for the stop
codon. It is special because branching happens at the second step, at
node (1, 0).
After building DFAs for each amino acid, we can concatenate them
into a single DFA D(p) for a protein sequence p, which represents
all possible mRNA sequences that translate into that protein
D(p) = D(p1 ) ◦ D(p2 ) ◦ · · · ◦ D(pm ) ◦ D(STOP)
by stitching the end node of each DFA with the start node of the next.
The new end node of the protein DFA is (3(m + 1), 0). Fig. 2 gives
a DFA of the protein sequence “methionine leucine”.
We also define out_edges(q) to be set of outgoing edges from
node q, and in_edges(q) to be the set of incoming edges:
out_edges(q) = {(q 0 , a) | δ(q, a) = q 0 }
in_edges(q) = {(q 0 , a) | δ(q 0 , a) = q}
For the DFA in Fig. 2, out_edges((3, 0)) = {((4, 0), U), ((4, 1), C)}
and in_edges((9, 0)) = {((8, 0), A), ((8, 0), G), ((8, 1), A)}.
B. CFG intersection with DFA. A stochastic context-free grammar
(SCFG) is a context-free grammar in which each rule is augmented
with a weight. More formally, an SCFG is a 4-tuple hN, Σ, P, Si
Zhang et al.

0,0 S9,0
0,0 N1,0

1,0 S9,0
2,0 S8,1
2,0 N3,0

3,0 S8,1
4,1 S7,0
4,1 N5,1

A

0,0

U

1,0

·

G

2,0

(

C

3,0

·

4,1

(

U

·

5,1 N6,0

5,1

U

4,0

U

5,0

G

·
A
C
U

6,0 N7,0

6,0

U

G

7,0

·

A

8,1

)

9,0

)

A
A
A

G

8,0

G

Fig. 3. One of the best derivations of the intersected grammar, demonstrating the path through the SCFG and the DFA (there are multiple best trees due
to the simple energy model). The corresponding secondary structure (in dot-bracket format) is shown below the solid arrows. The rest of the DFA (from
Fig. 2) is shown in light gray.

where N is the set of non-terminals, Σ is the set of terminals (identical
to the alphabet in the DFA, in this case {A, C, G, U}), P is the set of
weight-associated context-free writing rules, and S ∈ N is the start
w
symbol. Each rule in P has the form A → (N ∪ Σ)∗ where A ∈ N
is a non-terminal that can be rewritten according to this rule into a
sequence of non-terminals and terminals (∗ means repeating zero or
more times) and w ∈ R is the weight associated with this rule.
SCFGs are used to represent RNA folding. The weight of a derivation (parse tree, or a secondary structure in this case) is the sum of
weights of the productions used in that derivation.3
For example, for the very simple Nussinov-Jacobson model8
(which simplifies the energy model to the number of base pairs),
we can define this SCFG G:
0

S→SS
−1

S→

A

S

U

|

U

S

A

|

C

S

G

|

G

S

C

|

G

S

U

|

U

S

G

0

S→NS|SN |NNN
0

N→

A

|

C

|

G

|

S
S
S
N N N
C

C

A

A

A

G

G

Fig. 4. The the best derivation of sequence CCAAAGGusing the NussinovJacobson grammar.

and find the best derivation in G0 .2, 9
In the intersected grammar G0 , each nonterminal has the form
q1 Aq2 , where A ∈ N is an original nonterminal in G and q1 and q2
are two nodes in D; and the new start symbol is q0 Sqn where S is the
original start symbol in G and q0 and qn are the start and end nodes
0
in D. The bifurcation rule S → S S will become

U
0

Here the first line is the bifurcating case, the second line is the
base-pairing case (with weight −1, and the negative score mirrors the
free energy minimization problem), and the third line is the unpaired
0
cases (note S → N N N makes sure the minimum hairpin length is
3, i.e., no sharp turn is allowed).
The standard RNA secondary structure prediction problem under
a Nussinov model can be cast a parsing problem: given the above
SCFG G and an input RNA sequence, what is the minimum-weight
derivation in G that can generate sequence? For example, for input
CCAAAGG, the best derivation is showed in Fig. 4.
The mRNA design problem is now a simple extension of the above
single-sequence folding problem to the case of multiple inputs: instead
of finding the minimum energy structure (minimum weight derivation)
for a given sequence, we find the minimum energy structure (and its
corresponding sequence) among all possible structures for all possible
sequences. This can be solved by intersecting the SCFG G on the
protein DFA D, which results in a bigger SCFG
G0 = G ∩ D
Zhang et al.

q1 Sq3 → q1 Sq2 q2 Sq3
for all (q1 , q2 , q3 ) node triplets in D. We can see that this intersection
construction generalizes the widely-used CKY algorithm10, 11, 12 where
the triple of states (q1 , q2 , q3 ) generalizes the triple of string indices
(i, k, j). The CKY algorithm is a special case of intersection when
the DFA only encodes one string, e.g., when the protein is made of
amino acids that have only one codon (methionion and tryptophan).
Similarly, in computational linguistics, this intersection construction
is widely used for word-lattice parsing in speech recognition where
the word-lattice is a DFA to account for ambiguity in word identity.13
0

The terminal rule N →

A

will become
0

q1 N q2 → q1 Aq2
A

if only if there is a labeled edge q1 → q2 in D, i.e., δ(q1 , A) = q2 .
This intersected grammar G0 will have N |Q|2 nonterminals and
P |Q|3 rules in the worst case (|Q| is the number of nodes in D). This
resembles the space and time complexities of the CKY algorithm
arXiv Submission

|

3

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:

function B OTTOM U P D ESIGN(p)
n ← 3 · |p| + 1
. mRNA length; +1 for the stop codon
D ← D(x1 ) ◦ D(x2 ) ◦ ... ◦ D(stop)
. build protein DFA
best ← hash()
. hash table: from [qi , qj ] to score
back ← hash()
. hash table: from [qi , qj ] to backpointer
for i = 0 . . . (n − 1) do
for each qi ∈ nodes(D, i) do
for each (qi+1 , nuci ) ∈ out_edges(D, qi ) do
0
best[qi , qi+1 ] ← 0
. singleton: N → A | C | G | U
back[qi , qi+1 ] ← nuci
for l = 2 . . . n do
for i = 0 . . . (n − l) do
j ←i+l
for each qi ∈ nodes(D, i) do
for each qj ∈ nodes(D, j) do
if j − i > 4 then
. pairing (no sharp turn)
for each (qi+1 , nuci ) ∈ out_edges(D, qi ) do
for each (qj−1 , nucj−1 ) ∈ in_edges(D, qj ) do
if match(nuci , nucj−1 ) then
−1
score ← best[qi+1 , qj−1 ] − 1 . S → A S U | ...
U PDATE(qi , qj , score, (nuci , qi+1 , qj−1 , nucj−1 ))
for k = (i + 1) . . . (j − 1) do
for each qk ∈ nodes(D, k) do
score ← best[qi , qk ] + best[qk , qj ]
U PDATE(qi , qj , score, qk )

. bifurcation
0

.S →SS

return best[q0 , qn ], BACKTRACE(q0 , qn )

Fig. 5. The pseudocode of a simplified bottom-up version of the mRNA
Design algorithm. See Fig. SI 1 for U PDATE and B ACKTRACE functions.

(where |Q| = n). Indeed, intersection is a generalization of CKY
from fixed input (RNA folding) to lattice input (mRNA design).
Now we just need to find the best (minimum weight) derivation
in G0 , from which we can read off the best mRNA sequence and its
corresponding structure. Fig. 3 shows one of the best derivations for
the DFA in Fig. 2.
C. Bottom-up dynamic programming on Nussinov model. We

describe how to do dynamic programming based on CFG intersection
with DFA. First, we use bottom-up dynamic programming on the
Nussinov-Jacobson energy model as an introduction.
Fig. 5 gives the pseudocode for this simplified version. We first
build up the given protein’s DFA graph, and initialize two hash tables, best to store the best score for each state, and back to store
the best backpointer for each state. The base cases (singleton rule)
are best[qi , qi+1 ] ← 0 and back[qi , qi+1 ] ← nuci for each state
(qi , qi+1 ), where nuci is the edge between qi and qi+1 . Next, for
each state (qi , qj ) it goes through the pairing rule and bifurcation
rules, and updates if a better score is found. After filling out the
hash tables bottom-up, we can backtrace the best mRNA sequence
stored with the backpointers. See Fig. SI 1 for details of Update and
Backtrace functions.

1:
11:
12:
13:
14:
15:
16:

function L INEAR D ESIGN(p, b)
. b is beam size
for j = 1 . . . n do
for each qj−1 ∈ nodes(D, j − 1) do
for each qi such that [qi , qj−1 ] ∈ best do
for each (qj , nucj−1 ) ∈ out_edges(D, qj−1 ) do
backpointer ← (qj−1 , nucj−1 )
0
U PDATE(qi , qj , best[qi , qj−1 ], backpointer) . S → S N

23:

if j − (i − 1) > 4 then
for each (qi−1 , nuci−1 ) ∈ in_edges(D, qi ) do
−1
if match (nuci−1 , nucj−1 ) then . S → S A S U | ....
for each qk such that [qk , qi−1 ] ∈ best do
score ← best[qk , qi−1 ] + best[qi , qj−1 ] − 1
backpointer ← (qi−1 , nuci−1 , qi , qj−1 , nucj−1 )
U PDATE(qk , qj , score, backpointer)

24:

B EAM P RUNE(best, j, b) . choose top-b among all (qi , qj )’s

17:
18:
19:
20:
21:
22:

25:

return best[q0 , qn ], BACKTRACE 2(q0 , qn )

Fig. 6. The pseudocode of (simplified) LinearDesign algorithm.The first 10
lines are the same as in B OTTOM U P D ESIGN (see Fig. 5). See Fig. SI 1 for
U PDATE, B ACKTRACE 2, and B EAM P RUNE functions.

approximation algorithm for mRNA design. We apply beam pruning,14 a classical pruning technique, to significantly narrow down the
search space without sacrificing too much search quality.
Fig. 6 gives the pseudocode of simplified LinearDesign algorithm
for the Nussinov model, based on left-to-right dynamic programming
and beam pruning. LinearDesign replaces bottom-up dynamic programming with a left-to-right parsing. At each step j (the jth position
of mRNA sequence), we only keep the top b states with the lowest free
energy and prune out the less promissing states, since they are unlikely
to be the optimal sequence. Here b, the beam size, is a user-adjustable
parameter to balance runtime and search quality. This approximation
leads to a significant runtime reduce from O(n3 ) to O(nb2 ). Notice
that we use b = 100 as default in LinearFold,4 but in LinearDesign
we usually use a larger b because the search space is much larger.

E. Implementation on Turner model. Our real system uses a leftto-right dynamic programming with beam pruning on the Turner
nearest neighbor free energy model.15, 16 We implement the thermodynamic parameters following Vienna RNAfold,17 except for the
dangling ends and special hairpins. Dangling ends refer to stabilizing
interactions for multiloops and external loops, which require knowledge of the nucleotide sequence outside of the state (qi , qj ). Though
it could be integrated in LinearDesign, the implementation becomes
more involved. Special hairpins are hairpin loop sequences of length
3, 4, or 6 unpaired nucleotides with folding free energies stored in
lookup tables, rather than estimated from features like other sequences.
Special hairpins can be also integrated in LinearDesign with some
preprocessing. We will include both dangling end and special hairpin
stabilities in future versions.

D. Left-to-right dynamic programming with beam pruning.

The algorithm based on bottom-up dynamic programming runs in
cubic time, however, it is still slow for long sequences. Inspired by
our previous work, LinearFold,4 we further developed a linear-time
4

|

arXiv Submission

F. MFE and CAI joint optimization. Since CAI is also important

for mRNA functional half life,1 we consider optimizing MFE and
CAI jointly. We add CAI as an additive regularization term in the
Zhang et al.

A: -0.47

A

freq. log CAI
0.15
-0.47
0.22
-0.09
0.06
-1.39
0.18
-0.29
0.24
0
0.15
-0.47

Codon
UCA
UCC
UCG
UCU
AGC
AGU

B

A: -0.38

C: -0.09

0,0

U: 0

1,0

C: 0

2,0

A: 0

G: -1.39

3,0

C

G: 0

U: -0.09

1,0

2,0

U: -0.47

G: -1.30

3,0

U: -0.20

C: 0

2,1

C: 0

A: 0

U: -0.29

1,1

C: 0

0,0

1,1

G: 0

2,1

C: 0

U: -0.47

Fig. 7. The DFA representation integrating CAI as edge weight. A: Codon table of "serine". B: DFA graph of "serine" with CAI as edge weight; weights
only differ at the last edges. C: Improved edge weights to differ earlier.

objective function:



r? (p) = argmin MFE(r) − (m + 1)λ log CAI(r)



r∈RNA(p)



1

m+1
= argmin MFE(r) − (m + 1)λ log(Πm+1
i=1 wi (r))



r∈RNA(p)



= argmin MFE(r) − λ
r∈RNA(p)

m+1

X



logwi (r)

i=1

where m is the protein length, logwi (r) is the measurement of deviation from the optimal codon (0 is optimal) for the ith amino acid
(given an mRNA candidate), and λ is a hyperparameter that balances
MFE and CAI.
We integrate this equation into LinearDesign dynamic process, i.e.,
each DFA graph’s edge will have a cost so that the combined cost of
traversing a local path (choosing a codon) equals logwi . Each edge
cost is the “best” of the paths (i.e., codons) that uses this edge.
Fig. 7 uses serine as an example, showing how to integrating CAI
as edge cost in DFA graph. The 6 codons of serine, listed in Fig. 7A
with their CAI, each has a corresponding path in the DFA graph (see
Fig. 7B). For example, codon UCU has a CAI of 0.18, while the best
codon AGC has a CAI of 0.24. The edge costs in "UCU path" are 0,
0, log(0.18/0.24) = −0.29, therefore, logwi of UCU is -0.29. The
best codon AGC has a logwi of 0, meaning that choosing AGC would
not have a cost.
Considering LinearDesign is doing left-to-right dynamic programming with beam pruning, and at each step j states with lower scores
are pruned, it is better to incur edge costs as early as possible in a
path, which ensures the states with better CAI paths are more likely to
survive in each step. Fig. 7C rearranges the edge cost to fit better for
LinearDesign. Note that different edge costs in Fig. 7B and C would
not affect exact search.
G. The top k best mRNA candidates. An alternative solution for

finding mRNA candidates with both stable secondary structure and
high CAI is to provide the top k mRNA candidates with the lowest
MFE, and post-process them by features such as CAI. Although this
is not as principled as the algorithm described in subsection 2F, this
solution is easier to implement, and is more flexible in the sense that
users are free to add other customized filters.
Inspired by the k-best parsing algorithm,18 we developed an efficient algorithm to find suboptimal candidates in a sorted order. During
the dynamic programming process (forward-phase), instead of just
saving the single best prestate as the backpointer for each state, we
store alternative prestates that all transit to this state. Then in the
backtrace process (backforward-phase), starting from the last state,
we query the second best. The answer is one of the two cases: (1) the
second best is from another prestate S1 ; or (2) the second best is from
the same prestate S0 . In the former case we can find the second best
Zhang et al.

by backtracing the best path going through prestate S1 , while in the
latter case we keep querying for the second best from the prestate S0 .
Recursively, we would compute and get as many solutions as needed.
To our knowledge, our algorithm is the first one to output suboptimal results in the mRNA design problem. Two previous algorithms
explored searching suboptimal secondary structure for RNA folding
problem.19, 20, 21 Zuker’s algorithm is to find diverse suboptimal secondary structures, and Wuchty’s algorithm is to find all secondary
structures in a given free energy gap. Our algorithm is different from
these two in the sense that: (1) ours is for mRNA design problem; and
(2) ours can output all top k best candidates in a sorted order.
Combining the k-best algorithm and linearization, LinearDesign is
able to quickly design a large set of mRNA candidates, which provide
a set of alternative designs for follow up with wet lab experiments.
H. Less secondary structure at 5’-end leader region. Some

studies have shown that protein translation level will drop if the 5’-end
leader region has more secondary structure.22, 23, 24, 25, 1 Considering
this practical issue, LinearDesign can be used to design an ORF with
an absence of base pairing in the 5’-end leader region by utilizing a
simple strategy.
Instead of designing the most stable sequence for the whole coding region, we leave the 5’-end leader region (e.g., the first 15 nt)
unchanged from the wildtype, since the wildtype usually has less
structure in this region. Then we use LinearDesign for the rest of
the coding region. Because the designed region will be composed of
strong base pairs (generally maximizing GC content), it is unlikely
for a global structure change when concatenating with the wildtype
5’-end head region, which we observe is often depleted of GC content.
Refolding using secondary structure prediction tools for the concatenated sequence, we get its corresponding secondary structure and
observe that the first 15 nucleotides are unpaired.
If a wildtype sequence is not available, we can alternatively enumerate all possible sequences in the 5’-end leader region. Because
each amino acid has 3 codons on average and the start codon is fixed,
the enumeration space of the first 15 nt in the 5’-end region is small
(34 = 81), which makes the enumeration feasible.

3. Results
A. Efficiency and scalability. To estimate the run-time complexity
of LinearDesign, we use 100 protein sequences from Uniprot26 following CDSfold, with length from 78 to 2,828 nt (not including the
stop codon). We found that there are three sequences whose lengths
reported in CDSfold do not match the ones currently in Uniprot, so
we removed these sequences, resulting in a dataset with 97 diverse
protein sequences.
We compared LinearDesign in exact (infinite beam size) and approximate modes (beam size b = 1, 000 and b = 100). Because
CDSfold code is not currently available, we directly use the runtime
arXiv Submission

|

5

30

CDSfold
O(n3.1)

25
20
15
10
5
0

30

B

runtime in hours

runtime in hours

A

LinearDesign b = +
O(n2.8)
LinearDesign b = 1000
O(n1.2)
LinearDesign b = 100
O(n1.0)

25
20
15
10
5

0

2000
4000
6000
8000
mRNA (CDS) sequence length

0

0

2000
4000
6000
8000
mRNA (CDS) sequence length

-3000

-5000
-5000

-3000

-1000

LinearDesign b = +∞ (kcal/mol)

6

b = 100
b = 1000

4
2
00
2500 5000 7500
mRNA (CDS) sequence length

C
free energy gap %

B
-1000

free energy gap %

A

LinearDesign b = 1000 (kcal/mol)

Fig. 8. Runtime comparison between CDSfold and LinearDesign on Uniprot dataset. A: the runtime of CDSfold as reported by Terai et al. B: the runtime
of LinearDesign (exact mode b = +∞, and approximation mode b = 1, 000 and b = 100) run by us on an Intel Xeon E5-2660 v3 CPU.

12

Spike
EGFP

10
8
6
4
2
0
0

400

800

1200

1600

2000

beam size

Fig. 9. Search quality of LinearDesign with beam pruning is good. A: LinearDesign with b = 1, 000 has small free energy gap compared with exact
search for 97 Uniprot sequences. B: The percentage of LinearDesign free energy gap changes linearly with mRNA sequence length for both b = 100 and
b = 1, 000 on Uniprot dataset. C: The percentage of LinearDesign free energy gap changes with beam size for the spike protein of SARS-CoV-2 (in
purple) and EGFP (in green).

reported in CDSfold paper as a comparison allowing us to compare
the computational complexity. Note that CDSfold results and our
results were run in different machines. We run LinearDesign on a
machine with 2 Intel Xeon E5-2660 v3 CPUs (2.60 GHz), while
CDSfold is run on the Chimera cluster system at AIST, which was
reported in the paper as 176 Intel Xeon E5550 CPUs (2.53 GHz).
Fig. 8 shows the runtime plots. We observe that CDSfold has an
estimated runtime complexity of O(n3.1 ), while LinearDesign (exact
mode b = +∞) runs in a complexity of O(n2.8 ). Both CDSfold and
LinearDesign (b = +∞) have nearly cubic runtime, but LinearDesign (b = +∞) is under the exact O(n3 ) because we use the "jump"
trick as in LinearFold,4 i.e., jump to the next possible nucleotide nucj
that can pair with nuci (with the help of preprocessing), instead of
checking all positions one by one. In terms of the time cost, CDSfold
takes 31 hours for the longest sequence in the dataset (8,484 nt),
while LinearDesign (b = +∞) takes 11 hours. If applying beam
pruning, the runtime of LinearDesign reduces to linear complexity as
expected. With beam size b = 1, 000, the runtime is O(n1.2 ), and
further reduces to O(n1.0 ) with b = 100. Our LinearDesign finishes
the longest sequence design in 35 minutes with b = 1, 000, and in
only 2 minutes with b = 100, which is 330× speed up compared with
the LinearDesign exact search.
B. Search quality of linear-time approximation. Since the Lin-

earDesign algorithm is significantly faster than its exact counterpart,
we envision that the LinearDesign algorithm will be used for long
sequences. To ensure the quality of the approximation used in LinearDesign (with beam pruning mode), we compared the energy gap
6

|

arXiv Submission

between the exact (b = +∞) and approximate algorithm (b = 1, 000).
For this analysis, we used the same dataset as in subsection 3A.
Fig. 9 represents the folding free energy differences between the
exact search and approximation. Fig. 9A compares the free energy
changes of the mRNA sequences designed with exact search and
with the b = 1, 000 approximation. The x-axis is the free energy
of exact search, while the y-axis corresponds to the free energy of
approximation. We see that all plots are on or close to the diagonal,
which confirms that the folding free energy differences are 0 or small.
Fig. 9B shows the trend of free energy differences increases linearly
with mRNA sequence length. They y-axis is the percentage of free
energy change gap, which is the free energy change gap (∆∆G◦ )
divided by the total free energy change of the MFE structure (∆G◦ ).
The percentage of free energy change gap is small for all sequences
in the dataset. For b = 1, 000, all sequences have gaps within 1%.
Even for the longest sequence (8,484 nt), the gap is 0.8%. For
b = 100, most gaps are within 5%, and the largest gap is 7%. We also
investigate the percentage of free energy change gap against beam size
for two specific protein sequences, the spike protein of SARS-CoV-2
and EGFP (GenBank KM042177.1), in Fig. 9C. The purple curve
shows the result of the spike protein. Starting with a small beam size,
b = 20, the gap is 10.6%. With increasing beam size, the gap shrinks
quickly to less than 6% at b = 100. Further increasing b up to 500,
the gap drops to 1%. With a beam size of b = 2, 000 the gap drops
to 0, which indicates that the approximate result is the same as the
exact search. The EGFP result (the green curve) has the same shape
as the spike protein, but the gap drops faster and down to less than 2%
at b = 100. This is because EGFP is shorter (239 amino acids), thus
Zhang et al.

λ=3000

1
λ=1000
λ=1000
λ=600

0.95
λ=400

CAI-greedy design
λ=3000

λ=600

λ=400

λ=300

0.9

λ=300

λ=200

λ=200

CAI

0.85
λ=100
λ=100

0.8
λ=35
λ=35

codon-biased random

λ=1
b=1,000

0.75

λ=1 λ=-0.01 b=100
b=+∞
(exact) λ=-0.01

b=20

0.7
pure random
0.65
-2600

wildtype
-2400

-2200

-2000

-1800

-1600

-1400

-1200

-1000

-800

MFE (kcal/mol)
Fig. 10. Two-dimensional comparisons (MFE and CAI) between wildtype mRNA sequence (the light-red circle), random sequences (the blue cloud and
the orange cloud) and our designed sequences (the blue spots, the light-blue curve and the magenta curve) on the spike protein of SARS-CoV-2. The
better performance is the upper left of the graph, with low MFA and high CAI. Our designed sequences include three parts: (1) the sequence with the
lowest MFE in exact mode and in approximation mode (b = 1, 000, b = 100 and b = 20, respectively), which are optimized by MFE only (shown in
dark-blue spots and labeled by beam size); (2) sequences that are jointly optimized by MFE and CAI (showed in light-blue curve for exact mode and
magenta curve for b = 1, 000); and (3) top 10, 000, 000 best sequences (dark-red cloud next to the b = +∞ blue spot). We also show CAI-greedy
design result as a grey point.

the approximation is close to the exact result even with smaller beam
size. At b = 200, the gap increases 0.25% compared with b = 100.
This happens because more states are kept when enlarging the beam
size, among which states with higher scores at length j survive. Their
extension to longer lengths (like offspring) beat states and fill the
beams, but all these states become worse at the end, resulting a small
drop of the search quality. The fluctuation happens in this sequence,
but the jump is small and the gap quickly decreases to 0 at b = 400
and above.
C. Example for the coding mRNA of the spike protein. The

spike protein of SARS-CoV-2, which has 1,273 amino acid residues,
is the target of mRNA vaccines (https://clinicaltrials.
gov/ct2/show/NCT04283461).Therefore, we use the spike protein of SARS-CoV-2 as an example, and compare our designed sequences with the wildtype sequence and random generated sequences.
We use the mRNA sequence from the reference genome of SARSCoV-2
(https://www.ncbi.nlm.nih.gov/nuccore/
MN908947) as the wildtype sequence, which contains 3,822
nucleotides (including the stop codon). Additionally, we use two
different strategies to generate random sequences (5,000 sequences
Zhang et al.

for each strategy) as another baseline. One of the two strategies,
named "pure random", is to randomly (with equal probabilities)
choose a codon for each amino acid in the spike protein, and
form a mRNA sequence by concatenation. The other strategy,
called "codon-biased random", is to choose a codon the probability
proportional to its usage frequency. We also run LinearDesign (in
both exact mode and approximation mode) to evaluate the best
sequences we can achieve. Since previous studies show that both
the folding free energy change of mRNA secondary structure and
codon optimality influence the vaccine effectiveness,1 we do a
two-dimensional comparison, MFE and codon adaptation index
(CAI),27 between mRNA sequences.
Fig. 10 shows the results. The wildtype sequence, denoted in
a red circle, folds into a structure with the minimum free energy
change of -967.80 kcal/mol, and has a low CAI of 0.655. Most "pure
random" sequences, denoted in blue cloud, have similar free energy
changes (-987.90 kcal/mol on average) as the wildtype, but with
higher CAI (0.671 on average). This may be because SARS-CoV-2
just recently infected human cells and does not have enough mutations
to optimize for human codons. Compared with the wildtype and "pure
random" sequences, "codon-biased random" sequences, denoted in
arXiv Submission

|

7

A
A U
U U
G A
C C
AG
U G
A
A U G
C
A
UC
A
U A A U CA C
U A UGC G A G A
G AC A
A C
G A
A UCA A U A U U U
A C
U A GC G A
G U
C U A U AC
G U
C
U
A CA
G G G AU
U
C U A CU U G C
C G U UU AUU A
A G
U G U AU U
UG
A
U AA AG A
A
GA AA U
C
A
AU
AU U
A
UA
AG U A
A
U G
GC
A G
U
GC
U
U
A GG
G
A
G U
GC
CG
A
G C
UG
AU
U U A
U C
U C
UG
AU C
U
U
U A
G
U U G GU
CG
UA
UG AA
U C
G A
UAA
A
C
C
UA
UG
A
G
U
C
A GU
U
U C
A
A U CAA GAU UC G
UA
G
A
U
A UC C
U
U
C UU
G
U
U AG A U U
U
UG C
G UU
G CU UAAA AA U
AA
GU
U
AAG
A
U
UG
UA
U
C
G
A G
CG
U
U A
A AU
G
GC
C A UU
G CC G C
U CA
A
A
A A A U UA A
A G
A U
AU
UU G G C A C
C
A
U C U
C
A
U A GA
U
A UUG
U GCA
U
UG
UA
U
G
A GU
U CU A
C
U G U A
U
C AU
GC
U
C
U CA
A UU
U
U A CU A CA U A
GCG
GU A UG CU
CG A
G AA
A UU
A
U
A
C GU
UU
A
A
A
U CAU U A A U
UA C A
ACG
U U U C G GU
UA
G
C A UUCG GU
AA
A U
C
U A
U
G A A U
G
G U
U
A
G
U
C
U
U
U
G
C
U
GGU GA
GUGC G A C
UA
A
U
U
U AAA UU
CG
UU G
C CA
CA
A UGUCAUGA
UUGC U
A C CGU
U U AU
A
G
A
U
GGA
A UG
U
A U
CA
G AU
U UU
A
A
GC
A UG
GC
A
AU A
A
AC G A
G
G
UG
C UG CG UUG C
C A G C
A C
A U CU C G G
A
AU UUUU
G
UA
CA C C
C
A UG C A U C G A U G
A CG A
AAC U
C
AUU
GU
C GC G U A
C CU
A U
A UU U
A UG
U U
UG
GU GUA
G A
CA
A
GGC
C
U CG
CU
C
U
A
G
C
G
C
U UG G
CG
A U A UGA UG
G
U
AA
A U A G U U C UU
GG U
U GUA
CC
C
A
A
CU A
AG
U
A
G U
AA
U
A
A
U A
AC
U UU
A
C
ACA
U
GUU
AC
GU
A CU A GC C
AU
UU
U
AA
C
UAG
U UA
CA
U A
A
A
G G
U GC
AG
G UA C
U
U A UU ACUUU
G A C UA
C
AA U
U
U C
UG
A
A UU UU
AG C
GG
G A
A
AA
AU
C
A C
C C
A
UA
C
U
U
C
UG CA
A
A A
C GC A U
GU CU
AG
GU
U
GA
A
GA A
C
CG
UU
U
UUU
U C
UG A
GU
A
C U
A CG AGAC U
G C A CAGG U C
GAGU
U GA A
A
G
UU U
UG
GUCG CUUGAC A U U A
A
GC
UG
U A
C
C A UGG
AU GU UAAA C G U G A A
A
ACG U
A U G U UU A
A
A
GC
UU
U
C UUC
U
U
G CACUAGUUGG
UU
U C
UU
C
A A U G C AA U C C U A
C A
A
UC C G A G
U A
CG GGU
CA ACC
A UGAU UUGUGA AC
UU
U A
AU A
U
U UU
A A
C A
UGUGGU
GG
A
G C UC C A A U
UUA
G A A AUU
UUC
U A
G
U U
A
AA U U
U U G
G
A
A
CU U U A A ACA C G C U U G
U CA A CC GU C
A
A
U
U
G
A C
U
UC
U
A
G
C
UA
UU A
C
U
UAAACAACUU
U C U
CUG A G A A U
A U UA U
G A
GA ACUUCA
G UU
A
U
A
C
G
U
G A C CC A
A A AA G
A U
GC G
A
C
A GA
UG
UAA
C AA CC G
U C U GUG
AC
A UUGGAA A
C
UGA
U
U A A CAAC U C A G U G U
A GU
U UG
UC AGAUUA
C C G C U A UC
A G
C
U G
A C
G
A
C
U AA
G
C C AC U U U A
UUGGAGUUACA
C U U GG
UA
U
A G U U U A A UG
A A
C U
G U G A A CG C A
U
U
C
UA A
UAG
C
GU U U CG G
U GG
A
C
UG CA
C AA
C AC
G UA
G U
CACUU C
C
U
U
C UUC
C
G U
CC
CUU
C
G
U UA
UC
G
C
A U
AU G A C A C G G A
A
GG
U UU C
A
A
U
U
C
U G
GA
A U
C
A AG
CC UAAA
C C G AAU GU
AA
A U UU
G CUG U
UG U
G
C UUAA
G
AU
UC
U
AU
G U
A
G
CU U
U
UU CG U
U U G A A A C G G U UA
A G A UU
G
UA A AU
A GC
A A
CA A
AA
GC A
UUGC
A
UA A U U
A
AU
A
UGAU
U
A
U GAG
CAA
G CC AC G U GC U
A
C G
A
U
U
U
CAA
A
A
UG UAC
A
A AC
C G
AUU
A
G
CA
CA
C
G
U
G
GU
C
A
C
AAA
U
U
C U
U
UAC
G CU A
UA
ACA
U
C A
A C U A A C A G G U UCA U G U GUG A G A CUG UA AAA U C A U C
A UA
GUU GAG U
GC UC G
U
G
G U
A
A U
A
CUC A
AG U
U
U
A
U
C
U
G
A
U
U
G
U
G
C
A
AUACACUUCUGCA
C
A
UG U AGCG CCA G
UC UG AA A
A
G
C
U
AC C U A
G
U
U G
A AU
U
A U U
GG
C
U A A G GU G
A
U
A
A
A CC G
C A UU
C A A
UA G U U
A
U AU
UGC
C U
A U C A
UU U
CA
G
U
A U GU
U A G UU
CU
U CG U
GAA
A GU
AU
U
AU GU C
U
U GC U
G
UG U
C A C U U G A UU
C A
C
C
U
A GG
CA
A UA G
U
A AC A G
CG U
A
A
C
U AA
U
A
A
C
UAG U CA G U
CCA
U
U UC
A G C UU C
U UA C
U
G U
A
C U
AA
C
C U
U A CU
C
C
A
U
CU A
G
U C UA
U
C C U A UC
GA GU
U AC
G UA C U C
A UUU UGG C
U UCU
CA
U
A
AG
G
U
UUU
C
C
G
UUC
A
U U G
U
U
G
C
A
G
C
U
C AGA
G
U
GU C
C
U A AU A A A CU GU A
AAGUG GUG U
UG G G UU
A
GC
U
CA C UU
C
GC
UAC
A
C C
UG CA C A A
U U U A UG GU
A UC U
AA U C
A
G AA
A CC
A CA
GU
CA G G
UA U
A
A A
G C AG CC U U G A C
U
U
A C ACCG
G AC C
GCG UA UU U CG U
U CU
AG G UG CC
AU
AU U A C
U
A
AU
U
G
C
A GU
A A U
A A
G U AU U
A UU
A GG
U
CG
A
AA
A
A
A
U
U
ACCA
UC
A C A U U UA AA
A A
A C A
A A A UCA AA
CG
C U U
A
U
G
U
C
A AU G
A
GU AG
A U
CUU G U U
C
A
AU
U U
C
U
GA
AGGC A
C
C A AG
C GU C A
UU CA
G
A
A G
A
CA U C A A
AU
A
U
U
UU C A A
AUGUC
U GU
A
A C
UG C
G
GU
C UU
U
A
G
A
C
A
UU C C A
AA U
C CU
A GA
CA
A UG G
U
U
U
GU U
U
A
U A AC
AA U
C GAU A U
U UC
U
U
U
GAA
A
U AG C
CG U A
U GA
U
C
A U A
C A
C UA A U
G
U
UGC U
A
A
A CG G
A
CC AA
A UU
C
U
UU
A
C
C
G U C
U
A
A
A A U A GU A
U C
A U
U U
G U
C
U
G G U
A C
U
C GU
G U
U
C
C U
U C A
A AU GU G
CC A
U
A U
AA C A A GG
A C C CU U
A AG C C
C
C
U
UU
C
C
A A A UC
A
GG
A
G
G
A
AG
G
U AG A C G
U CUA UCUA A
A
U C CU A
U
AU U C A U
A
G
GA
UA
A U AUA U AG A
AU A C A G UUA
G U A UCUU
A UC G
A CAUU
U U U
G
C
UU
A
U
U
A
A UUAU
A
C
U AA
U AGA AAC
A U
U
U AU U AU U U A
C C A C U U C A A AC
AA
UG
U A
CU
G UA
A U
G A
G C G U GA
G
UU
U
UU
C
UU
C C A A UU
U
G CAA
U G
A
A A
G UA UA C C G
UC A U
CAA U
U U
GGA U
U
AC U U
U
UG
U AC A
U U U G UGA UA G
C
UGAU
G
U U
GG
U
C
A C CUACG
AC C U A C
AU
A
UA
GAACG
U
U
G UCG
A G
U
A
U
A U UAU
A
G U UU
G CC
U C A AUCA C
U
AC CCUU U
C G
C
GC
G U G G CU
G U
G
G
U
G
G GUU
C G UU
C U
A CC
GA
CA
UA
U
C
U
UG
A
UG
A U
A G
G CG
AU
C
C C U U U U A GU A CU C A U
G UU
A UG
C
G
AU
C U
G
A C
U U
GU
A
G
UAU C G G
U
AA
A U
AA
C A A
C
U
U CA CA
UC GU
C
UUUC
A AU GAG
AU
A UA
G U
A
C GU
A AU C U
A
UG U
A
U U UU U
AG
U
A GAU
U
G
A A
U
UU
U
A CG A UU AU
AA
A U GC G A C C
A
C A G C A UUC UG
AG
A A GU
G
A
U UU C
C
C
U
U A
AA
A C C U A U AA U
UA UU
G A
U
U
AU
U
C AG
U A U
AA U G
U AG
CU A G A U
G AA A
U U
U U
G U
A
U
AU
U
C A
C C AU
A
UC
A UG
A G
C AU A
CU
U A C
A UU
CG
G
U U
G
U U GU GA U
C
A
C U
C AUU
U
CU
A
C
U
A
A
UA
A G
U CG
A A
U UU
AC GA A
GC
C U
U GC U
C A A A
G
U CA
C
GG G UG
U U
U
C
U
U
C
C
A
AU GG
C
G UC U AU
U
U
A GU
A U
A
A AA
C AA
U AC
G A UG
G
A
G A
G
U CU U
U G
GU
C
G AA U A
A
C A
C GU
G UA GGA U C GA AU A
U A
U AC AU
A
U G GUG
A CU U
C
G
U A U
A
A
C CG U A C G C U C A
A
G
U AC
U
AU
U
U
G
C U A
C
C
A A
G
U
A
C
C
C A
UC G
UG
A A A AC G
UA
A
A U
CG
GU
C CU
A
AGC A A U A C U GC G
G
UA G
GA A
AG U
UA C
GU
G A
C
G
U
C
A
UA
G
C
C
G CA
A CG
AU
A
UAA UU AC AA UG CA UA CA U C G
U AUCG
G CA GG A AU AC CU G G U
C
UA UA
CG
U U AU A
GC
UG
U
C
C
C
U AA
GU AU
UA
CG
U G
A U
G
GC GC
U
CG
CG
A UG A
AU
UG UA
AU
CG
C GUC C
CG
AC G
GC GC
G
U AU U U
U CG
UU
AU
CG UA
UG
AGU
GU
A
U UC
CU U
A UA A U
AC U
A
G
UA
U AC
C
G
CA A
G
UA G
UG C
U AG AC GC
U
G
C
G
C
U A CU G
G CA UU G
A UA
A
ACA
C GU CUAA U
GC
AU
U
A
C
AU
CU CG CU
GU
A
G
UA
AA
UAC
U AC
U U C UG U
C
GU
U
A CC G
G CU UU A G
CC A
A
A
C AG C
U AU CG C U
U
A G
UA U
A
C
C
U UU A
U
UC
C GG UC G G C G C
GC
UA
A A
G CA
AU
UA
UU
A A
U A GAU G
U
UA
U
A U
A
GC
CG
CG
A
AU C
A
A
U
U
A UC
U C C U
G
A
U
U
CG
G
UA U
CU
UAU
U
A U UU
U
CG
G
CG
U
UG
UU
AU
U
CU
A
G
C AC
A
G
U
U
U
A AC
UC

A

A

5’ 3’

Wildtype
- 967.8 kcal/mol

AAC
G
C
AUG
AU
CG
C
A UA
CG
A
UA
C GC
CG
G G
A
CA U
C C
G
U G
A
A
A
GC A
G UA
AU
U
GC
G AU
CG
U
CG
C AC
UA
G G
U C
AG C
UA
C G
CG
A G
GC
A U
C U
AU
A C
UA
U
CG
C AU
UA
C G
CG
A G
C
A GAG U
G
A G
C
G
AG
C
A
U G
G A
G C
G C
G C
A C
A U
G U
U AC
A
U U
G A
A CA
G U A
C C
G
A UA A
G U
U C
A A
C GU
A
A A
U U
C A
A G
A U
G CU
G UG
A
G
G
C AG
C G
U G
U
G AA
G C
U U
A U
C U
A G
A
U U
C A
U G
G A
G U
C C
U G
C A
G G
G C
G CC
U
U
C
A
U
U G
G A
C C
A G
G U
G CC
UG C
C
U
G
U C
A C
U
U U
U A UA
G
C A
U CA
G G
C
C C
A GA
A
G U
G
U CU
A C
G
U U
G CA
C G
U
G G
A AC
A
U C
U UU
G A
U
A C
G AA
U A
GU
G A
A
AU
G C
U G
U A
G
U CA
C A
G
A G
G CA
C U
U
G G
C AC
A
A C
U U U UGA
C A GA UA
A GG
UC
U
G
U
U
U AC
G
U CA
G G
C C
U G
G
C CA
G

3’

B

5’
A
C
G

A C
A
A
C
C GA U
G
CG C
U
A A

G AG
A A
U
UA
A GU
CG
CG C
GC
A
C
A
A
AU A
UA U
CG
C
GU A
CG
CG
C
GA U
GC
G
UA
UU A
UA
C
C GC
AA C
UA
GG C
CG
A
UC G
CG
CG
A
U A
GC
G G
UG
CG C
UA
U
CG
AG C
A U GC
A
U G
A
A
UC
C
G
C GC
CA U
C
AU
GU A
UA
C
A
GC
UC G
C
GC
A
CG
UG C
GC
G GC
C
UA
U
A
GC C
U
U
U
A
C
A
C GA U
CU GU
A
U
UC G
CG
G
GU
CA U
CG
A
UU G
GC
G
UA
CC G
CG
G
A U GC
UG C
A
A
C
A
GG U
C GC
A
UG C
GC
AU
UA U
GC
A
UA U A U
U
A
UU A A C
G
U
U
AC G A U
C
C
C
C
A CAGU
U
A C
G U
AA U
G
CA U
A
C
AA U
C
G A
U G
C G
C A
U C
G C
G

A
A
AU
UA
GC

UA
C
A
G CU
UA
GC
UA
U
U
UC
GU
UA
UA
GC
UC
GU
CG
UG
CG
CG
UA
UA
CG
U
U
CG
AU
CG
UA
GC
GC
UG
UA
UG
CG
GC
AU
GC
UA
CG
A UA
G
G
U
G
G
A
CG
U
U

C
GAG
U
U
U
G
U CA U
C
G U
G
U UC
G
A
U A
GUA
U
U
AU A
C
GA U
G
CC GU
G
CG C
A
UU A
G
C C
A
U UG
C
C
GGG
CA
A
UG C
A
UU A
G
UA U
G
CU A
U
AU A
G
CA UU
G
CA U
U
AG C
C

5’

A
A
AU
UA
GC
UA
C
A
G CU
UA
GC
UA
U
U
UC
GU
UA
UA
GC
UC
GU
CG
UG
CG
CG
UA
UA
CG
U
U
CG
AU
CG
UA
GC
GC
UG
UA
UG
CG
GC
AU
GC
UA
CG
A UA
G
G
U
G
G
A
CG
U
U

GC
UA
CG
AU
AU
UC
GU
UA
UA
AU
CG
AU
AU
CG
AU
CG
GC
AU
AU
CG

E

3’

D

CG
U
CG
AU
U
GC
U U
CG
G
UA
C CA
GC
G
U C
CG
C
C
C GA
G CU
U G
G G
CC G
AU
U
U AC
GC
U
CG
AA
C GG A G
A
UA
UC
U
AU
A AC
G A
CG
C
A
A
C U
A
U
CA AG
G UU
C
AU
A C UU
A
UC G
AU
A
U
A
CG
G
C A
UU A
A
UA
A
U
C
A U U UA C
CG
A U
GG CU
A G
CC C A A GA
G GG
CG
U
A
G
C G A
UA C C
AU A
UA
C
G G G UU C A
GC
G
A
U G
UA
CA
G
G
GA GC A
G
G GAC
C CA
CG
GU
U
U AA
G
UC
AU
C CG
U
G
C
C
C
U CG
CG
GA U
A A AU GU
G GG
G
CA CG
G
GC
C
U GA
C CC
C
CG
GU A
C
CG
CG CA
C
U AG
A GUG
C
GU AG
GC
U
U
G C
C UU
UC GU
A AU
AGU
GC
A
U
A
C A C UC
GC
A CUA
G AU
A
U
GA GC
G
GU
UC G
C AC
A G
CG GA
G
A
AU
G
C UG
CU C U
A C U
CG C
GC
AG
A AG
U
G
U CG
U
U UC
UA
U
UU A C G
G
A U
C UU
G
GC GG
G CA
C A
GC
A
UGU A
G
G
CC AC
C UG
CC G U C
A GC
A CUC
UC
C
U
CA
A
UG G
C
C
U A C G G C CG
AU A
C A UU
GGC G
GG A UU
C
UG
G U
AC
UG
G
G
GG CGUG
C ACU
A C AGG C
UC G
GU
A UC
U
AC GACG
UC
A
U
A GA
CU
CG
CU
AU A
G C U CAG GUU
C
U
C
C
AG
U
A
G
C
CC GGCC
AAG U
A A
AU
CC G
CC
C C
A GU
GUU
GG UG
G
CG
A
U
C
AC
U
A AU
UACAA GUUCU
GC G
CG
U U
CGA
U
U
G
CG
C
GA A G CC
A GA
GA U
C
CG
C
CG
CG
GG UCU
U GC
U
CG
AGC
ACG
C
A
AU A
U C
C
G UU
AU GUG
AU
U
A
CA
C
A
AG
U GC
A C CA AA U
CG CUG
A U CA
G
G U U C AC
UA
GA
CU
A
U
GC
C GC C C
C U CUA
C A G U C
CG
GC
U C GG
GG A A C
C U G AA
AU
U
A
UU
UA
U
CU AG
U CC
CG
GA AAC
C
GC
CC GA
G
UU
C
GC
G UGA
UG
CG GG
GUG G
A
A
UA
C
U
C
GA GC
G
UA
C A CG A C U
C C AG
U G
C
U
C G C UU
C AC
GC
G G
U
G AG
GU
C U
U
GC
U G
C CU
G
C A
AU
G UC
G G
A
AU
C C
GACG C
U C
G
C G
G UU
AU
A
U A
AU
A CA
G A
G
CG
U UG
U GC
C
G
G
U
C UG
C C
GC
A
C A
C GG
AG
U
GC
U G
C
CG
C GC
GU GCUC A
A UC
G A
U
UC
G
AAG A
CG C
AGAG AGCA
C C
U GC
A G
UC
AU
C
G
G C U A AC
AU
G A AU
C
GU
U
U
AU
GC UACG
A GG
U
U
CU
GC
G U
GU GACG
U A GC
AC
AU
C C
C
AA UGCA
G CA
A G
GC
CC
G
C G G U GAG U U
U UC
C U
GC
G
A
CA
G G
UA
CG
G UU G
A G G C C UC
G C C
A
A ACC
A U
G
U AU G
C
GU
G
A A C CA GC A UG A
UG
UA
G
A
GC G A G A U C A C
G C
G
UC
GC
GC
AU
G
UA
CG
UA
AU
UA
CG
A
AG

GC
UA
CG
AU
AU
UC
GU
UA
UA
AU
CG
AU
AU
CG
A
AU
U C
CG
G A
GC
A
AU
C UC
G G
AU
A C
CG
G
CC
CG
U
C UU
AU
CG
U G
CG
AU
G G
CG
U U
GC
UA
CG
U U
CG
CG
G
UA
A
C CA
AC GC
GC
G
U C
UA
CG
C
UA
C
C GA
CG
G CU
U G
CG
GU
G G
CC G
CG
G
AU
U
A
A
GC
U AC
GC
UA
U
CG
CG
AA
CG
C GG A G
A
AU
UA
UC
GC
AU
CG
CG
CG
GC
AU
AU
C
C A
CG
G UU
C A
UA
U
AU
CU G
GC
A U
CC C A A GA
AU
C GG
AU
C
A
G
GC
CG
C CG
C
G
AU
A
UA
U G
C UGC
GU
G
A
G
CG
G UC
C CA
GGA
UA
G
G
C C
CG
U
AU
G CA
C CG
A
G
UA
C
UA
GU
AG
U A AU
U
G GG
CG
CG
U
U C
UA
G
U AG
AU
GU GCUC A
C
GC
U
C
U
G
UC
CG
UA
C GC
C CC
AGAG AGCA
CG
U A C AC
G
A
C
AU
UA
G GC
U U GU
UC
AU
CG
UG AU
CG
C
A A
CG
A
G C U A AC
G AC A
U C
C C G CU
U UA
GU
GC
GU
UUG
GC
G
GC UACG
GC
G C
U U GG
C
GC
U CA
CG
CU
A C
UG
GA G G A
C
G U
CC AA
GU GACG
G
U
GC
A GA
CC A C
AC
A C
GC GG
UC GU
C
AA UGCA
UA
GC
U G
A G GU
G A
AC CG
CC
CU U
CG
AU
GC
C G G U GAG U U
C
U C
AG UG
C
G CA
GC
CG
G
GC
GU
G
G
CA
G UG UC
AU
CG C
U UC
G U G CA
C UA
G
C UU
CU
A
A
A
UC
C
U
C
G U
G C
U AA U
U
A ACC
G
CG
A
C
CG
C C G GA
A A GA
A C GU GC
GU
A UC
U
AC
AG
UG
G
G C G GU
A
G GU A UA
C A U AC
CCAAG
GU
A A
G CU A C CG
C
U
C U GUG U G G U U C G
U
G
C
A GC G A C A U AC
A
G GG
G UUU G C
CC C U
ACCA
C
G GAG
C
U
GU
A
A
C A A C GCG
U
G
G
C GU
C
GC
G UC U U
G G A G C A AG U G CGU C
CC A
C
CCU G
C
A A GUC
UG U G
GA UA
CG GG
U
GA CG
CU
U
CA
GCA UACG
UG GC
GU
C
U
UUC
A GUG G G U G A UC
GU
G UG
A CA AGG A AGU
UG AC
UA
G
CC UCCA
UA AC
UUC
CG
C UG
AGG
A
GA AU
GG
AGA
C C A CU
G
GC
U UU
A U AGG UUUU
AC CU
UG
CG
C
C
A
U
G
U
G
C
C
A
U
G
A
A GCGG
C GC UU
CG
AAG
G
A C AA
A GA
G
G U U U U C G CG
G
CG
CUCG
CAU G
A
U
CAA
UGU
AG
AA
AC G
CCGC
G CGA AUAC
A A C A U C CC
CGACC GUU A
C UG
G
CUCUAC C G G G G C U U
U A A
C
GC
A
GCU
A C U
C
C U G G UC A A G C
GU
C C GU
A
AGUCUUGCGAG
AU
G GU
G G C C C U G A AU CG
G
GUCCUACAGCA
C A
GU G
AU
C CC
UCAGA ACGCUC A
A
AU CA AG
G
C A G G A U G U C G UUAA
GC
GC UA
G AA A
UA
G
U
G
UU
U G A UC A
UA
CA U
A G C A A CU
C
A
GC
C
C
G
U A UG
C G UG U
AA C
GC G
A A
U
A C GU
A
G
C GG
U
CG
UU A
C
CC G
AC
GC
C AC
G
AG
C G U GUA
U
AU
ACC G
G GA
C
AC
C GU
C
G
C G U GUG
U AC
C
CC G
C
U
UUA C
U GU
G GG
U
C
CC UGG
C
AA U
G
UA
GU
C GA
C
G
UA CAG
GC
C
U GG
U
CG C
GG
CG
C
C A C C AA
G
C U
UA
A
UG C
UA
GU
C
C
CG
AC
A
GA
U
AU
G
GCC
C
C
CG
AG CU
GAA
GG C G
CG
GC
CG UC
AU
AU GU
UA
A
A
AU
G UG
A
UU U
G
AA
C
UA
CG
GU A A
A
CG
GC
CA CA
UA U
UA
CG
CU GU
G
GC
CU A
AU
GC GA
UA A
G
GG CG
GC
A
CG C
G G U CA
C
U
C
UG
CA CC
A
GA U
U
G
AC
UC
G
U
C
G
GC
CC AG
U
G GCA
CG C
AG C
GA GG
G
UA
G
C
A
C
CU A
UU CU
G A
UA
U UCC
GG C
A
UC
CC AA
U
UG
UG C
U AU
AU C
U
C
GG GG
G
GG
U
AG C
C GGA
GC
G GUA
AG C
UU CC
U
CC ACGU
G
A GG
U
GU
GG A A
U
UG
U
A
AU A
C AAG
C A CGGG
CA CU
U
CG
GC
C
A
U G CG
UC G
C C GC C GC GU
A
A
CG
A A
U
C C
G
CG
G
A
A UG U
G CA ACU
A
UG C
GUU
G
GC
UC U G A A A C U C U C A C G
A
U
A
C CU
G
UA A AU
C
CAGA G U C U
ACU UUGA
U
C AUG
U
AU
UACAA
G AA
UC G
G AAGG G C A U
GUUC
C
G
C
CGA CUUG
AGGUCCCG
UUAUCAGA
A
G
GC
A
G
A CA
GAA
CG
CA AG
U
U CGG
UU A
U C A G G G U G U C G G U G G CGC A G G C
C
AU
G
A
G
U
CAG CCAC
A
G
G
UC G
A C G
A A UU
CG GUCCG CUCCA AGG
CG
C
AU CCA
CC G G
AUC U G A G G U U C
U
A
G
C
AC G
AU
G UG
GC
C
U
C
UG
A GA
AAC
C ACA
G A
U
G
G
A
C CC
CG
A
G
G
C ACU U
CUC G
C CCG
GC
A
A
GA U
UG C
AC
C
CG
G
UA
G
AU
GC G
A UUG
UUC A U U G CU
CA U
C
A
U
U
U
C
G
A
C
CG AAG
C
A U AC
GC G
GC
GC G
CC
G
U
UG GGGC
A
A
C CGA
AU
U A U C GC
UU A
UU
C
U C
G
A
U
G CGG AGA
GGU A
C
U U A G UAG
C G U AA
C GCG
A
A UU
A
G GA
CC
A
AU
C
GG U
GA A
G C A AC
GC AU
CG
UG C U
GU
G
U UC G CC AG C
ACC
U CU
GC GC
CGC
G
U U C A C C GG
G CGG
A
U
U
A A
GCG
A
C GU
GC CG
UUG G
A
G AA
GUG
G U AC
G
CG
CGU
AG
C
A UA
UGC
G C G CA
AU
U CU
A C GUU
GC
A
GAU
UU UC
A
AAC
C GC
GU AU
A GUGU
G UA
C UC
AGC
G G
UA
CG
AG A
C
U
AG C G
C
CG UA
G UG C G U U C G C A U U
U A
CU AUGA CU
U
U
C
G
GA U
GC
U
GA
G
C
G
C AG
C AC U
U
GC
G
A
A
G AGC
G
UU CUGA
A
G
G
GCAA
U AG C G
U
G
U
G
C
U
G
A
C
U
G A
A CG
CG
C
A
UU A
A UC
C G AC
A
C
UU GC
AUAUG AAA
AU
U AG
A
A GU
A C
C
A UCC
AU
U GU
AC AG
C
C
GC
AC
A
GG C
A
U AC
U
C
C U
GC
G GA
UC U
AAC C U G
U AA
G
A G CUU
C GU
UA
GC
GA C
G G
G
CU
A
A
C
CG C U
U C
A C
CC UGAG C
G
C UA
GC
C
A UC
U G G AG
A
CU
U
G
U CG
A
UG
A G
U AU
A UC AC
UUU G G G G
A
G G AG
CG UA
G UU
G A
AU
C UG
G
GA
G
C
C U
C
GC
U CA
C
G
U GC A C C U A
AU
GC
C CA
U
U
U G
C A
C
UA
A CA UCC
U AA
G C C G GA
UG
U
A A
C G A G AC
A C
AG C
U A
UG
CG
U
AG CG
A
CG
A
U
G
GG
G U
C AG
A UA
AGU
AU
G G CA
AU UC
A
A
U
U
C A
CG
C
G
U AU
U
U AC U
CG
A
A
U CG UA
CC
A
U
C
G
A
AU G
A
GU
U
U U A C CGUUU
GC
A
G
U AG CG
U UA
A
U G
C
C
U
A
C GA
GA A
GC
U
G
C
G UG
A GA
U CU
G
A U
A
G GC
G AA
C
CG
A CG
U
A
U CGG G UG CG
GC
G AA
U
U A
UA
U C C
G A
UA
C
C
U C
AU
C
C GC
A
G U G
G AC
GC
C GC U
A
G GUA
A
CC UU
AG C G
A
C U
UA
G
GC
A
G
GA
C AA
A
C
A GG
G
C
G
CA
U
A CC
UA
G
CG
U GUC
C
AG
A CG G
A
ACU A
AU
G
A C
GU
C
G
C
C
AC
U GU
G
UU
C U
CG
G CU
A
U
C GA
U
ACA
CG C
U G
U AA
C UG
AU
G
A
C
C A
A
CG
C UA
AU
G G CG
G UC
G
UU
U
C G
UA U
CG
G
AU
G G AG
U G
G G
U
A
CCG
C
G
AU
C
U C
U GC
GC
A
UGA U
U
U CC
CG
C A
A
C G A G AC
C
G
A
AC
C
A UUU
GC
G
C
CA
G UA
A GA
A
G AU
GU A
U
G U
GC
G
U A C UU
C
CA
C C
U
A
A GCU
CG
G CC
UU
U UA
U
A G
A
GC G A
U
AU
A U GC
G AA
C U
CU
G U
C
AU
U
AUU
C A
U C C
C G
AG
G
C
G
G U G
C
CG
C G
A
A
GC
G G
UC AC
A
GA
C G
AU
A UCA
U
A
C G
G
UG CC
UC
A
G
C UUG
C
GA
GG A C
AG
U
C GCU
C
U C
AU A
UG UG
C
C
G
U
U
A
CA
UU
G
U AGG
U
C G
C A GG
CC G
C G
AGC
C U
UC C U
G
U G
C UGG
G
A GG
GC A C
G
G
CC G G A C
UG GG A
C
U CA
G
AGCGCG
CC U A
C
U GU
UU
G
A
A
AUC
AG C U
AU A
A
G CA
U
GG UG U
A
C
G U
C UA
AU AUG
A
G
C C
AC GA G
UG CU C
GA
C
C G
U
CU GU
UG
A GCA
C G
U
C
C
CA AG
GA U
A G
G
UC AC
G
A UAA
G CGU
CG
C
G
A
C
U G G UA
U
C
A
G
GC
A
U
CG GC
A AC
G
U
CUC
A UA A U
CG GU
C
C
G
C
G U
CG C
U
CA UU
UA
G GU
U
A
C AC
GA UC C
G
C UAG
C
G A
C
AG
GC G
C CC
CU
A C
UU
G A UGG
UU
C U
U
C
AG
CAACG G A G A
G C
AU A
G G
UC
A C
C
C
C
UG GU
G
A G
A
C
CU A
C U
AC A C A
A
G
U G
GU CG
C
C CU
U A
GC G
GC AC
C
G G CA
UG GG
U
C
C GG
A
CC GG
G U
G
A
UUC
CC GC
A GA
C GAC
C UG
A
CG GA U
C
U
CU GG A
A C GG
C
CC GG
AC
GU A
G
UC UG
G
G
AC G G
UA U
GC
C
A C A A
GAC G U C C
G
CC GA
A GA A
C
C
G U
UG UA
A
A U
A U G CA
GCG
CC
CG GG
U
GUG
CC GU
A U
G
A
A C
CA CG
GU
UU A
G U
G
G
UACA
C
CC UC U
UCC G
A C
C
GCG
GGC
AG G C
A
A
AU
UC G
A
C
AU UA
C
U G
UCG C
G
GC
C G
CG UA
CU A
C A
C
G C CG
A GGC
U G U
C
U
GC G
C G GC
A
UCG
U AU
A U U AAU
AGUCA
U
U
G
A C
G
U
C
C GU
A G
AU A
A GCG
C
AA
U
A
U
GC
C GA
G G
AGC
AU
GCU A
U G
U
A
AU
AU A
C G
G
UA
C C
C GUC
CU A C
A
A
UA
G
UU A
GC
CG
UC G
A
C
C
G G
UA
U
A
A AGC
C A
UG C
CG
UUCAA
U U
G
CG
C
A
C AG
U
A A
GC
U
C
U G
A CAG
C GC
CG
G
U
C G
G
GC
G
C G
CCG
CA U
CG
G
C G
C
CG
CCG
C U
GC G
C
G CU
A G
GA U U C
A
GC
C U
UA U
A
A
GC
AA U
U
G
CG
A ACU
C
G
UA
A UA
A AG
G
U U
CG
CG C
U
GU
C A
UU A
G
UA
G
A UG
G
AU
C U
C C CU
GC
A A
UA
A
UU
GC
A UC
U AU
G A
GC
U C
GC
G G
CG
U U
GC
AA U
A UA
A
U
GU
C GG
C U
UA
A G
CG
C
C C
AG
U
G C
G U
A C
G C
A A
U G
C A
U A
U
A
C
C
G CC
G A
U G
C U
UC
CA

LinearDesign (b=1,000)
- 2463.8 kcal/mol

AAC
G
C
AUG
AU
CG
C
A UA
CG
A
UA
C GC
CG
G G
A
CA U
C C
G
U G
A
A
G C AA
G UA
AU
U
GC
G AU
CG
U
CG
C AC
UA
G G
U C
AG C
UA
C G
CG
A G
GC
A U
C U
AU
A C
UA
U
CG
C AU
UA
C G
CG
A G
C
A GAG U
G
A G
C
G
AG
C
A
U G
G A
G C
G C
G C
A C
A U
G U
U C
A A
U U
G A
A CA
G U A
C C
G
A
U
A
A
G U
U C
A A
C GU
A
A A
U U
C A
A G
A U
G CU
G UG
A
G
G
C AG
C G
U G
U
G AA
G C
U U
A U
C U
A G
A
U U
C A
U G
G A
G U
C C
U G
C A
G G
G C
G C
U C
U
C
A
U
U G
G A
C C
A G
G U
G CC
UG C
C
U
G
U C
A C
U
UA
U U
U
G AA
C A
U
G G
C
C C
A GAC
A
G U
G
U
A C
G ACU
U U
G
C G
U
G G
A ACC
A
U AC
U
G
U AUU
A C
G
U A
GU
G A
A
AUA
G C
U G
U A
G
U CA
C A
G
A G
G
C U
U CCA
G G
C AG
A
A C
U U U
C A GA AUG
A GG
UCU
U
G
U
U
U AC
G
U CA
G G
C C
U G
G
C CA
A G
U C
G A
A
C UC
G G
A C
G
C UU
U G
G G
U

3’

5’

G
CCC
G
G
G
CAA
U

U
G
CGU
C
G
C
GGA
C

U
C
GG C G
A
G UGU
C

A
U
ACU
G

A
G
CGA
C

U
G
CAG
U

C
C
GGA
C

U
C
GU A GG
A
C
A
A
A UGU
U

A
G
CUU
A

A
G
CC G G
C
A GA
U
A
CUCG
G
C
G
CGC
C
G

A
UG C
G

A
UUG
A

CU
U
G
U CUG
A

C
U
AUU
A

A
C
GGC
C
G
C
G U
A
C UGA
C

U
C
GC G A
A UA G
A
G UGA
C

U A

A
CA

A

A
AU
UA
GC
UA
C
U
A
U
U
GC
UA
GC
UA
U
U
U
U
CG
UA
UA
GC
U U
CG
CG
UG
CG
CG
UA
UA

AAC
G
C
U
AUG
G G
AU
UA
CG
GC
CG
UA
C
UA
A UA
GC
CG
A
AU
A
C GC
CA U
AU
C
C A
G
G G
CG
A
UC A U A
C C
G C AA
G
U G
AU
CG
A
GC
GC
G UA
UA AU
CG
U
UU U C G
CG
G AU
A CG
UA
U
AU
AU C
C AC
AG C
CG GC
UA
G G
GC CG
CG
U C
CG GC
C G
GC
GC GC
A G
AU
GC AU
A U
UA
C U
C A
C CG U
CG
G G
A C
C
A
UA
GC
U
AU
CG
GC CG
C AU
GC
C
G
A
G C A UGU
A GA C G
GC
U
GA
U CC AU A G CU
G
G
U
C
AUCG
G
U AU U
U
A
GC
UA
U
CG
CG
U
U G A
A U AU
G A
UU
GC
GU
G C
U UG
GC
G C
AG A
G C
C
A C
A U
UA
G U
AU
U C
GC
A A
UA
U U
GC
G A
U AU
A CA
GC
G U A
C C
CG
G
A U UA A
UA
G
UA
U C
CG
A A
AU
C GU
CG
A
A A
UA
U U
CG
C A
CG
A G
G
A
A U
C
G CU
U AA
G UG
CG
A
G
AU
G
GC
C AG
C G
GC
U G
C
AU
A A
U
CG
G AA
A
CG
C U GA
G C
UG C
U U
C A UG
C
A U
U U
UG
C U
G A
UA
A G
A
U
C GC
U U
C GC
U
C A
CG
C
A AG U C
U G
UA
U
G A
GC
G AU UU UA
U
A AC
G U
CC A
A
G A
G AA
C C
G
C UC U
C
A
U G
C
C AC
GC
A
C GG A
C A
U
UA
CA AG
G GU G UG
G G
C
UG
A
G C U AC U AC
G
UC G
CG
G C GU
G
A
UA
U GC C CG U CC
UU A
UG
A
A
C
U
UG A UA
UU U
GG C
U
A
C
A C UU
U
AU
A
AUC
CG
A
AG
A G
U U C
U
GC
G
UA C C
A
GC
G GAC
G G G UU C A
AU
A
C GA
U
A U U UA C
CA
G
AU
C
G A
G GG
GA U
GU
CG
G
A
UC
C G A
A
G
C
C
G CC
GC
GC
GU A
A A AU GU
G
UG
CA CG
GA GC A
C
C CC
C
CG
G C
AU
U AA
CG CA
AGU
U G
U
A
AU
GU AG
U CG
C
A
GA
G
CG
UC GU
A
UC
G
G
U
C A C UC
AU
U
C AA
G
GA GC
U
CG C
A AU
UA
U GU
CG GA
G
U
GC
C
C CU
CU C U
A U
A UC
G
GU
UGU A
U
G
A
G U
G U AG
UU G C G
UA
A U
U
A
U
GC GG
C A
A
G
AU A
CG
U
CC AC
C UG
A C U
CC G U C
G
CG
U AU
C
CA
UG G
C
A AG
UC G
U A C G G C CG
GG A UU
G
U UC
AU
U
C
UG
AC
UG
C UU
U
G
C A
U CA
GG CGUG
CG
G
AU A
A C AGG C
G
GU
U
A GC
A GC
AC GACG
UC
A
GU
G
C
CU
A U
CU
CC G
U
G
G C U CAG G
GGC G
CC C A A GA
CG
C
AG
A
G
C
C C U G GG GA
G CA
GC
A A
C ACU
GC G
C
A CG
U
U
G
A
GUU
G
U
A UC
CA G
C
A GA
G AG G
U CC
C
G
GA U
UACAA GUUCU
C
C
U
C
CGA
U
C
U
U
G GC
U
C
GA A G CC
AAG U
C
AU
A GA
AU A
C
CG
C GC
A GU
CG
C U
G
GG UCU
U
U
G CG
ACG
A
A AU
AA U
G G
AU
C
AU GUG
U
C GC
A
A
CG
A GA
CA
C
UUG
A
UC
U
C
U G
C
CG CUG
U U GU
GU G
U GC
A
GA
CU
A
A G
G
C
U UA
C GC C C
A
G
G U U AU A C
CG
GG A A C
U CA
A
C UG C
U UU
C
UU
A C
U AA
U
G
A GA
G UGA
G
GA AAC
C
A
CG
ACC
A
C CA
UU
C
A G GU
C
G
G
GUG G C A
AU
C
U A
C
CG
C
C C AG
C
GC
G
U
U
G U G CA
U GA
C AC
GC
G
U
G G
A CC
CG
G AG
A
U
U
G UU
AU
C CU
U AC
CG
G
CG
C UC
G UC
G
C
CA
A
GC
A GG
AC
GACG C
UC
AU
U
CU U
G UU
C GG
G AG
AU
U C
A
C
A CA
A
C G GG
G
CG
G
C UC
C C
U A C AC
G C
U UG
GU
G
G
G G
UG AU
AG
U
GC
C UG
AG C C A
CG
A C
G
C C G CU
A
GU GCUC A
CG G
G CC
C GG
UC
U U GG
C
A U C UU C G C
AGAG AGCA
C GC
CC AA
C
U
UC
C GA GU G G
AU
G
GC GG
AAG A
C
G C U A AC
CG
U GC
G G A CG C G
GU
C
GC UACG
A
A
U
G AA C U
CU
U
A U
U
U UC
GU GACG
U
U
AC
G CG
AA UGCA
C
UA
CG
CC
C
C G G U GAG U U
GC
C GG C
CA
UG C U
GG
CG
C
G
A G G C C UC
UA
A CU
A ACC
C
G
UA
GU
A UG
AG
UG
CG
A C
GU
C
A GC G A C A U AC
GC
G G CC
U
G
G
AU
GC
G UA
U G CGU C
A
C
GA CG
CU
U A G
G U G A UC
A
U
GG
CC UCCA
U
G
A U AG
CG
AU
GC
A
CG
CG
UA
CG
CG
AU
A
C
U
U
CG
CG
GU
AA
GC
UA
CG
CG
AU
GC
CG
CG
GC
AU
CG
UA
GC
AU
GC
AU
GU
UA
AU
UA
CG
GC
UA
UA
CG
GU
GC
UG
U
UC
GU
CG
GC
AU
U AA U
C
CG
AC
CCAAG
C U GUG U G G U U C G
A
C
GUU U G C
ACCA
G GAG
A
C A A C GCG
C
G UC U U
CCU G
UG U G
GA UA
GCA UACG
GU
UUC
GU
A CA AGG A AGU
UA
UUC
CG
AGG
AGA
C C A CU
GC
A U AGG UUUU
CG
CU
UCC
CG
AAG
G
G U U U U C G CG
CG
A G
UGU
AA
C
G CGA AUAC
U A A
GC
GCU
A C U
AU
G GU
C A
AU
GC
UA
UA
GC
AA C
U
CG
GC
AU
C GU
C
GAG
U
U
U
G
U CA U
C
G U
G
U UC
G
A
U A
GUA
U
U
AU A
C
GA U
G
CC GU
G
CG C
A
UU A
G
C C
A
U UG
C
C
GGG
CA
A
UG C
A
UU A
G
UA U
G
CU A
U
AU A
G
CAU
U
G
CA U
U
AG C
C

5’

F

U GU
C
UA
GC
CG
UA
UA
CG
AU
CG
CG
AU
AU
CG
GC
UA
GC
UA A
A
G
C
G
U
C CAGA U
G
G
G CG
CG C
A
G
U UC
CU A
U
A
C GA
UG C
C
U
U GG
AG C
U
G
U
C AA
AU A
U G CGU
A
C C
UC G
A
A
U UG
UG C
C
C
C GA
G AA
G
G
A CA
U CG
U
G
GC
G
G CA
AU
UC G
U
G AC
AC G
UU
C AC
C
G A
G
G CG
G
C CC
C
G
A GC
A
UG C
G
A UU
G
U UA
CA U
C
C
G GA
GC G
C
A
G GC
UU A
C
G
C GC
C G U AA CC GG
C
G GG
GC AU
CC G
G
U
GC GC
A UC
AA U
GC CG
G
A C GU
G C G CA
CG C
AG
G
GU AU
C CA
UG C
CG UA
U
C
G AG
G
GA U
G
U AG C G
C
A CC
CG
GG C G
C G AC
A
AU
A UU
A
GC
G UG
C
GC
A G CU
A
UA
U C
UA U
A
GC
G
CG UA
CU A
UG
G
G
AU
G CC
CG C
AU
C
U
A CA UU
AC G
UA
U
A
U
A UA
C GA
AG
AG C
A
U
AU
U AU
C
A
A
GG C
CG
U U A C CGUUU
A
U
A
GC
C
U
GA A
AG C
U CU
G GG
A U
A
C GA
A GG
U
U
G UG CG
U
A
G AA
CG
A AC
C
C
C
U C
UA
C GC
A
AC
A
C GC U
G
GU
AG C G
A UG U
GC
C U
A
G
C AA
C
A
A GG
GC
C UC
G
G G
UC G
U
C
A CG G
C
UA
A
C
G AG
C GU
GA
U GU
UU A
AU
UU
C U
U
AA
G
U
AC
CG
U G
U AA
C UG
CC G G
C
A
C
C A
AU
C UA
G G CG
G
UU
U
C G
C
AU
A GA
G CG
G G AG
U G
G G
U
A
CG
G
C
A
U C
A UC
U
CUC G
AU
U CC
C A
A
C G A G AC
G
C
A
CG
A UU
G U
GC G
CA
G UA
G AU
U
GC
G U
C
G
U AC U
C CU
A
C C
GC G
GC
A
A
G CC
U UA
A
A G
A UG
CG
U
A U GC
UG C
U
G AA
C U
AU
A
UU AU
C A
U C C
C G
GUU A
G
AU
G U G
C
C G
A
A CA
CU
CG
G G
GA
A
G
U
U
C G
C G
G UU
A
G
G
U CU
C
A
A
AG C
C GC
C
C
U
C
GA U
G
U GG
A
U
U CA
UU A
C G
AGC GA
C
G
U G
GG C
C UG
G
G
G
CG C U
U CA
AGC CG
C
G
A
A GG
C UG
G CA
C
U
G U
U
AU AU
AG C
G
A
C C
C
G
C G
A GC
C A
G
C
C
A UA G
A G
G GU
A UAA
A
G
G UG
C
G
C
A CC
U A
AG
A C
U
A
U
CU
A
A UA A U
A
C
C
G U
G
CA
U
UA
U
A
ACUC
A AG
C AC
G
C
G A
C
C GU
GU A
A C
G A UG
GC
U
C U
AC G U
A
G C
G G
UU
A C
GA U
A G
C A GA
C U
GU A
U G
C
GU A
U A
C
G G CA
GA U
U
G
A
G
CA U
G
A GA
A
UC GCU
A
G
CC G
G
CA U

3’

A
G
G

U
G G
UA
GC
UA
GC
AU
AU
C
C A
A CG
U
UA
CG
CG
GC
UA AU
U
CG
U
UA CG
AU
AU C
CG GC
GC CG
CG GC
GC GC
C
AU
G
C A
CC U
G G
A
GC GC
AU
GC CG
GC
C A UGU
G
GC
U
U CC AU A G CU
G
C
AUCG
U AU U
U
UA
U
CG
U
A
U
A
U
U
U
GC
GU
U UG
GC
A A
GC
A

5’

A
UU A

C
GG U
U
C
AG C C A
G
C GU
C
CG GGU A G
CC
A UG A
CUU
C
GG C
C
GG C
U
AU A
G
CU A
C
GC GU
C
GC G
C
GU G
G
CG C
G
UA U
G
CC G
U
AG C G
G
A CC
G
G
CA U
U
GA U
G
CG C A
G
AA G
CA U
C
GC G
G
CC G
C
GA U
C
GG CAC
U
A
G
CG C

A

G
A
ACUC

G
C
GUA
A

GC
U
G U
A
CGA
UU
U
C A GA
GUG
A
C
A
UGA
C
U
G
CAU
U
G
GCU
A
CCC
G
G
G
CAU
U

A
A
UGG
C
U
U
C
AGC
CC A
G
GU
C
CG GGU A G
CC
A UG A
CUU
C
GGG
C
C
C
GAU
U
A
G
CUG
A
C
GU
CGC
C
G
C
GUC
G
G
C
GUA
G
U
G
CCA
G
U
C
G G
G
A CCC
G
G
U
AGA
U
U
G
CG C A
G
AA G
CAG
U
C
G
CCC
G
G
C
GAG
U
C
CAC
U
A
GCG
G
C

LinearDesign (b=+∞)
- 2477.7 kcal/mol

3’

A
UG C
G
CC G
G
CG C
G
C G
UCA U
C
GU A

U
AG C
G
CG C
G
UC G
C
G U AUG
U
A
C AG
CU
A
UC G C CC
C
GA U
A
UC G
U
AU A
G
C A
G
G CG
C

A
UGC
C
G
G
CCG
G
C
G
C G
UCAG
U
C
G
UAG
U
C
G
CGU
C
G
G
CG C U
UG
U A
A
C AGU
CU
A
G CC
CG CC
U
AU A
G
CA U

A
U G
AC G
ACG C
A
AUG
C
U
AG C
GU
C
U
UU C
GG C
C
GG C
C
G C
CGG C
U
AG C
U
AA U
G
CA U
C
GU A

A
UC G
A
G
G CG
C

LinearDesign (b=+∞)
Less structure at 5’ leader region
- 2473.7 kcal/mol

C
G U
UAG C
G
CC G
G
UA U

A
U G
AC G
ACG C

A
AUGA
C
U
C
GC G U
U
UU C
GGG
C
C
C
GG C
C
CGGA
C
U
C
GAA
U
U
G
CAG
U
C

A
UG C
U
UAGC
C
G
G
CUA
G
U

A
UU A
C
CGAA
U
U
GA A
G
C
A
AA
C
U
C
C AGC
G
U
AU G

C
U
U
CG A A G
GGA
C UC U
A
U
A UC
UG C
C
A
A
C
U GGU
G
C
U AC
AG C
A
GA CG A
G G
C
A
U GA
UG C GUU
C A
A
U
C
G
U U
UGG
A
C
A AC
UU A
A A
G
C
G GU
U G
CGG
A
C
CU A A
C G
G U
CC
U
A
C G
C A
C C AGG
A
C
U
C G
U
U
A
U
CCUCA
C U
A
C
G
A
UC G A
A G
AACUU G
G
CU A
C U
C
C AG
U
A G
AA U
C
C GG
A
GC G
C
C UC
A
A UA
A
UC G
U U
G UG
G
A
U
C
U UU
U
UU A
A
G
A A
UAC G
A UG
CU G
C
A AC
C U
C GG
GG C
G
C
U
A A
G
C GC C
A
UU
CA U
A
CG AUA
A UC
U
A G G UC
GU A
G A
C
U
C GG
A
U C
UU G
C
G G
C UC
G
A
U U
CU A
GCG U
AA U
A
C
A
A
GU A
A
G
C GG
GCCC U
U
A U
C U
A CG
GC U
A G
C GCC
G
C G
A UC
C C
A
AGCCG
G
GCG
G U
C
A
A
A C
UC G
U UU
C
G C
A
GCG A
A A
A AC
U G
U AA
C A
U
U A
U UA
A
U
A
U AC
C
C
G CC
UG U
G A
A UC
U G
A
G U C
C U
A
G
UC
U U
CA
C

A
UU A
C

C
GA U
U
AC G A A
G
A
AA
C
C
U
U
U
C AG C
CG A A
G
GG C U CG U
CA U
A
U
A UC
G
UG C AG
C
A
A
UU AC
U
G
C
AG C GU A
GA CG A
G CG
C
A
U GA
UG C GU A
C A
U
C
G
U U
UGG
A
C
UU A A
UU A
A A
G
C
C
G G
U G
CGG
A
C
CU A A
C G
G U
CC
U
A
C G
C A
C C AG C
A
U
C G
U
U
A
U
CCUCA
GU A
C U
C
G
A
G A
A G
AACUU G
G
C
CU A
C U
C
C AG
U
A G
AA U
C
C GG
A
GC G
C
C UC
A
A UA
A
UC G
U U
G UG
G
A
U
C
U UU
U
UU A
A
G
A A
UAC G
A UG
CU G
C
A AC
C U
C GG
GG C
G
C
U
A A
G
C GC C
A
UU
CA U
A
CG AUA
A UC
U
A G G UC
GU A
G A
C
U
C GG
A
U C
UU G
C
G G
C UC
G
A
U U
CU A
GCG U
AA U
A
C
A
A
GU A
A
G
C GG
GCCC
U
A U
C
A UG
C C
G C
G U
A C
G
A

C

U AG
C A
U A
U
A
C
C
G CC
G A
U G
C U
UC

CA

C GCC
G
AGCCG
A
UC G
C
A AC

U
A CG
GC

U
A UC
A
G
GCG
C

A
U UU
A
GCG A
U AA
U
U UA
A
U AC
UG U
A UC
A
G U C
A
G
U U
C

Fig. 11. The secondary structures of the wildtype and designed mRNA sequences that translate into the spike protein of SARS-CoV-2. A: Wildtype
sequence and its secondary structure. B: The best mRNA sequence (with lowest free energy change) designed by LinearDesign with b = 1, 000. C: The
best mRNA sequence designed by LinearDesign with b = +∞, i.e. an exact search. D: A zoom in of C showing the 5’-end, which is base paired with the
3’ end. E: The best mRNA sequence designed by LinearDesign with b = +∞, while using the wildtype sequence for the first 15 nt nucleotide at 5’-end.
These 15 nucleotides do not base pair with the designed sequence and therefore remain unstructured. F: A zoom in of E showing just the 5’-end and the
3’ end.

orange cloud, have much higher CAI (0.768 on average), and slight
improvement on MFE (-1063.23 kcal/mol on average). We also notice
that both "pure random" and "codon-biased random" sequences are
packed in cloud-shaped small regions. This is because the search
space of possible mRNAs is extremely huge and most of the random
sequences have similar MFE and CAI. On the left (with much lower
MFE) we plot our designed sequences. The blue plots are optimized
by MFE only. The leftmost one is the sequence designed in exact
search mode, which has the lowest MFE of -2,477.70 kcal/mol and
a CAI of 0.726. The MFE gap between our best designed sequence
and the wildtype, as well as random sequences, is large (more than
1,300 kcal/mol). With only 0.56% MFE loss from the exact search
sequence, the designed sequence with beam size b = 1, 000 achieves
an MFE of -2,463.8 kcal/mol and a higher CAI of 0.751. Compared
to the exact mode, which takes 1 hour for designing the sequence,
the approximation with b = 1, 000 only takes 11 minutes, resulting
in a 5.5× speed-up. For b = 100 and b = 20, the MFE are still
lower than -2,200 kcal/mol, with CAI both at around 0.735 and 0.725,
respectively. Our designed sequences, for both exact search sequence
and approximate search sequences, are much better than random ones
and the wildtype in terms of MFE.

achieve the region beyond (to the top-left) the curve. The points on
the curve are good candidates for an mRNA vaccine. For example, the
point with λ = 100, has the free energy change of -2,414.6 kcal/mol
and CAI of 0.823, which is only 2.5% away from the optimal MFE sequence but with 0.097 increase in CAI. We observe that with λ > 100,
the sequences on the curve have better CAI than codon-biased random sequences. Shifting right from the light-blue curve with a small
margin, the magenta curve is the results of joint optimization using
b = 1, 000. This curve shows that the approximation quality is good
with b = 1, 000. We also designed a CAI-greedy sequence, which
greedily chooses the best codon for each amino acid, leading to a
special sequence with CAI=1. We see that the two curves both point
to the CAI-greedy design, comfirming that the designed sequences
achieve better CAI but sacrifice MFE with increasing λ, and reach
CAI-greedy design with a large λ (e.g., λ = 3, 000).

We show that the top 10, 000, 000 suboptimal sequences for exact
mode (the dark-red cloud on the right of exact design sequence). The
MFE of the sequences are very close to the optimal one, and the free
energy gaps are within 20 kcal/mol. Some of the sequences have
higher CAI, e.g., some have the CAI higher than 0.730. This shows
that our k best algorithm can be used to select sequences with low
MFE and relative higher CAI as vaccine candidates.

Figure 11 shows the secondary structures of the wildtype sequences, our designed sequences with b = 1, 000 and b = +∞,
as well as designed sequences with less structures at the 5’-end leader
region. We can see that the secondary structures of the wildtype
(Fig. 11A) have a large number of loops, and our designed sequences
(Fig. 11B and C) have longer helices and fewer loops, which makes
the structure more stable. The designed sequence with b = 1, 000
(Fig. 11B) has similar free energy changes as the one with b = +∞
(Fig. 11C), but it has a multiloop in the middle.

Further, we show the results of MFE and CAI joint optimization.The light-blue curve is joint optimization design using exact
mode. Each point on the curve is with a different λ, which balances
the importance of MFE and CAI. We see that the curve is on the topleft of the figure, indicating that the sequences on the curve have both
stable secondary structures and higher CAI. In fact, this curve is the
accessible boundary of all possible sequences, i.e., no sequences can
8

|

arXiv Submission

Note that the MFE of the wildtype, the CAI-greedy design and
random sequences are calculated by Vienna RNAfold17 with "-d0"
(disable stabilizing interactions for multiloops and external loops),
to make fair comparisons with our designed sequences. All the sequences can be refolded using RNAfold without "-d0", by which the
points will shift to the left.

Additionally, we investigate the effectiveness of our strategy for
less structure design at the 5’-end leader region. Fig. 11E is the whole
secondary structure of the designed sequence with the goal of leaving
the 5’ end unpaired (the first 15 nucleotides kept identical to the
wildtype and the remaining nucleotides designed by LinearDesign),
Zhang et al.

and we zoom in the 5’-end in Fig. 11F. As a comparison, we also zoom
in the 5’-end of designed sequence without constraint in Fig. 11D.
This demonstrates our strategy can keep the 5’ end unstructured,
whereas designing the complete sequence results in basepairing at the
5’ end.

4. Discussion
The mRNA design problem is of utmost importance, especially for
mRNA vaccines during the current COVID-19 pandemic. We reduced
this problem into a classical problem in formal language theory and
computational linguistics, namely the intersection of a CFG (encoding
the energy model) with a DFA (encoding the mRNA search space).
This reduction provides a natural O(n3 )-time CKY-style bottom-up
algorithm, where n is the mRNA sequence length, but this algorithm
might still be too slow for long proteins such as the spike protein of
SARS-CoV-2, a promising candidate for an mRNA vaccine. Inspired
by our recent work of LinearFold, we then developed a left-to-right
algorithm, LinearDesign, which employs beam search to reduce the
runtime to O(n), with the cost of exact search. LinearDesign is
orders of magnitude faster than exact search (i.e., b = +∞) and
suffers only a small loss in folding free energy. For example, for
this spike protein, LinearDesign can finish in 11 minutes while exact
search takes 1 hour, and the free energy difference is only 0.6%. We
also developed two algorithms for incorporating codon optimality
(CAI) into the consideration, one using k-best algorithms to compute
suboptimal sequences and one directly integrating CAI into dynamic
programming. Our work provides efficient computational tools to
speed up and improve mRNA vaccine development.
ACKNOWLEDGMENTS.

We thank Rhiju Das for introducing the
mRNA design problem to us. D.H.M. is supported by National Institutes
of Health grant R01GM076485.

References
1

David M Mauger, B Joseph Cabral, Vladimir Presnyak, Stephen V Su, David W Reid, Brooke
Goodman, Kristian Link, Nikhil Khatwani, John Reynders, Melissa J Moore, et al. mRNA structure regulates protein expression through changes in functional half-life. Proceedings of the
National Academy of Sciences U.S.A., 116(48):24075–24083, 2019.
2
Yehoshua Bar-Hillel, Micha Perles, and Eli Shamir. On formal properties of simple phrase structure grammars. Zeitschrift für Phonetik, Sprachwissenschaft und Kommunikationsforschung,
14(2):143–172, 1961.
3
Elena Rivas. The four ingredients of single-sequence RNA secondary structure prediction. a
unifying perspective. RNA Biology, 10(7):1185–1196, 2013.
4
Liang Huang, He Zhang, Dezhong Deng, Kai Zhao, Kaibo Liu, David A Hendrix, and David H
Mathews. LinearFold: linear-time approximate RNA folding by 5’-to-3’ dynamic programming
and beam search. Bioinformatics, 35(14):i295–i304, 07 2019.
5
Barry Cohen and Steven Skiena. Natural selection and algorithmic design of mRNA. Journal of
Computational Biology, 10(3-4):419–432, 2003.

Zhang et al.

6

Goro Terai, Satoshi Kamegai, and Kiyoshi Asai. CDSfold: an algorithm for designing a proteincoding sequence with the most stable secondary structure. Bioinformatics, 32(6):828–834,
2016.
7
John E. Hopcroft, Rajeev Motwani, and Jeffrey D. Ullman. Introduction to Automata Theory,
Languages, and Computation (3rd Edition). Addison-Wesley Longman Publishing Co., Inc.,
USA, 2006.
8
Ruth Nussinov and Ann B Jacobson. Fast algorithm for predicting the secondary structure of
single-stranded RNA. Proceedings of the National Academy of Sciences U.S.A., 77(11):6309–
6313, 1980.
9
Mark-Jan Nederhof and Giorgio Satta. Probabilistic parsing as intersection. In Proceedings of
the Eighth International Conference on Parsing Technologies, pages 137–148, Nancy, France,
April 2003.
10
Tadao Kasami. An efficient recognition and syntax-analysis algorithm for context-free languages.
Coordinated Science Laboratory Report no. R-257, 1966.
11
Daniel H. Younger. Recognition and parsing of context-free languages in time n3 . Information
and control, 10(2):189–208, 1967.
12
Richard Durbin, Sean R. Eddy, Anders Krogh, and Graeme Mitchison. Biological Sequence
Analysis: Probabilistic Models of Proteins and Nucleic Acids. Cambridge University Press, Cambridge, UK, 1998.
13
Masaru Tomita. An efficient word lattice parsing algorithm for continuous speech recognition.
In ICASSP’86. IEEE International Conference on Acoustics, Speech, and Signal Processing,
volume 11, pages 1569–1572. IEEE, 1986.
14
Liang Huang, Suphan Fayong, and Yang Guo. Structured perceptron with inexact search. In Proceedings of the 2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 142–151, Montréal, Canada, June
2012. Association for Computational Linguistics.
15
David H Mathews, Jeffrey Sabina, Michael Zuker, and Douglas H Turner. Expanded sequence
dependence of thermodynamic parameters improves prediction of RNA secondary structure.
Journal of Molecular Biology, 288(5):911–940, 1999.
16
David H. Mathews, Matthew D. Disney, Jessica L. Childs, Susan J. Schroeder, Michael Zuker,
and Douglas H. Turner. Incorporating chemical modification constraints into a dynamic programming algorithm for prediction of RNA secondary structure. Proceedings of the National Academy
of Sciences U.S.A., 101(19):7287–7292, 2004.
17
Ronny Lorenz, Stephan H Bernhart, Christian Hoener Zu Siederdissen, Hakim Tafer, Christoph
Flamm, Peter F Stadler, and Ivo L Hofacker. ViennaRNA package 2.0. Algorithms for Molecular
Biology, 6(1):1, 2011.
18
Liang Huang and David Chiang. Better k-best parsing. Proceedings of the Ninth International
Workshop on Parsing Technologies, pages 53–64, 2005.
19
Michael Zuker. On finding all suboptimal foldings of an RNA molecule. Science, 244(4900):48–
52, 1989.
20
Stefan Wuchty, Walter Fontana, Ivo L. Hofacker, and Peter Schuster. Complete suboptimal
folding of RNA and the stability of secondary structures. Biopolymers, 49(2):145–65, 1999.
21
David H Mathews. Revolutions in RNA secondary structure prediction. Journal of molecular
biology, 359(3):526–532, 2006.
22
Yiliang Ding, Yin Tang, Chun Kit Kwok, Yu Zhang, Philip Bevilacqua, and Sarah Assmann. In vivo
genome-wide profiling of RNA secondary structure reveals novel regulatory features. Nature,
505, 11 2013.
23
Yue Wan, Kun Qu, Qiangfeng Cliff Zhang, Ryan A. Flynn, Ohad Manor, Zhengqing Ouyang,
Jiajing Zhang, Robert C. Spitale, Michael P. Snyder, Eran Segal, and Howard Y. Chang. Landscape and variation of RNA secondary structure across the human transcriptome. Nature,
505:706–709, 2014.
24
Premal Shah, Yang Ding, Malwina Niemczyk, Grzegorz Kudla, and Joshua B. Plotkin. Ratelimiting steps in yeast protein translation. Cell, 153:1589–601, 2013.
25
Tamir Tuller and Hadas Zur. Multiple roles of the coding sequence 5’ end in gene expression
regulation. Nucleic Acids Research, 43(1):13–28, 12 2014.
26
UniProt Consertium. Uniprot: a hub for protein information. Nucleic Acids Research,
42:D204–D12, 2005.
27
Paul M Sharp and Wen-Hsiung Li. The codon adaptation index-a measure of directional synonymous codon usage bias, and its potential applications. Nucleic Acids Research, 15(3):1281–
1295, 1987.

arXiv Submission

|

9

Supporting Information
LinearDesign: Efficient Algorithms for Optimized
mRNA Sequence Design
He Zhang, Liang Zhang, Ziyu Li, Kaibo Liu, Boxiang Liu, David H. Mathews and Liang Huang

1:
2:
3:
4:
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
1:
6:
7:
8:
9:
10:
11:
12:
13:
14:
1:
2:
3:
4:
5:
6:
7:
8:
9:

function U PDATE(qi , qj , score, backpointer)
if score < best[qi , qj ] then
best[qi , qj ] ← score
back[qi , qj ] ← backpointer

. minimizing weight

function BACKTRACE(qi , qj )
backpointer ← back[qi , qj ]
if type(backpointer) is string then
nuci ← backpointer
return nuci , "."
if length(backpointer) = 4 then
nuci , qi+1 , qj−1 , nucj−1 ← backpointer
seq, struct ← BACKTRACE(qi+1 , qj−1 )
return nuci + seq + nucj−1 , "(" + struct + ")"
else
qk ← backpointer
seq1 , struct1 ← BACKTRACE(qi , qk )
seq2 , struct2 ← BACKTRACE(qk , qj )
return seq1 + seq2 , struct1 + struct2

. singleton

−1

. pairing: S →

A

S

U

| ...

0

. bifurcation: S → S S

function BACKTRACE 2(qi , qj )
−1
if length(backpointer) = 5 then
. pairing: S → S A S U | ...
qk−1 , nuci−1 , qk , qj−1 , nucj−1 ← backpointer
seq1 , struct1 ← BACKTRACE 2(qi , qk−1 )
seq2 , struct2 ← BACKTRACE 2(qk , qj−1 )
return seq1 + nuci−1 + seq2 + nucj−1 , struct1 + "(" + struct2 + ")"
0
else
. unpaired: S → S N
qj−1 , nucj−1 ← backpointer
seq, struct ← BACKTRACE 2(qi , qj−1 )
return seq + nucj−1 , struct + "."
function BEAMPRUNE(Q, j, b)
cands ← hash()
. hash table: from node qi to combined score best[q0 , qi ] + best[qi , qj ]
for each qj ∈ nodes(j) do
for each key (qi , qj ) ∈ best do
cands[qi ] ← best[q0 , qi ] + best[qi , qj ]
. best[q0 , qi ] as prefix score
cands ← S ELECT T OP B(cands, b)
. select top-b by score
for each key (q, qj ) ∈ best do
if key qi not in cands then
delete (qi , qj ) in best
. prune out low-scoring states

Fig. SI 1. The pseudocode for U PDATE, B ACKTRACE (used in B OTTOM U P D ESIGN), and B ACKRACE 2 and B EAM P RUNE (used in L INEAR D ESIGN) functions.
10

|

arXiv Submission

Zhang et al.

