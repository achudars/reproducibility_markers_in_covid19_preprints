Approximate Nearest Neighbour Search on Privacy-aware
Encoding of User Locations to Identify Susceptible Infections in
Simulated Epidemics
Chandan Biswas

Debasis Ganguly

Ujjwal Bhattacharya

Indian Statistical Institute, Kolkata
chandanbiswas08_r@isical.ac.in

IBM Research, Dublin, Ireland
debasis.ganguly1@ie.ibm.com

Indian Statistical Institute, Kolkata
ujjwal@isical.ac.in

arXiv:2004.08851v2 [cs.IR] 6 Oct 2020

ABSTRACT
Amidst an increasing number of infected cases during the Covid-19
pandemic, it is essential to trace, as early as possible, the susceptible
people who might have been infected by the disease due to their
close proximity with people who were tested positive for the virus.
This early contact tracing is likely to limit the rate of spread of
the infection within a locality. In this paper, we investigate how
effectively and efficiently can such a list of susceptible people be
found given a list of infected persons and their locations. To address
this problem from an information retrieval (search) perspective,
we represent the location of each person at each time instant as
a point in a vector space. By using the locations of the given list
of infected persons as queries, we investigate the feasibility of
applying approximate nearest neighbour (ANN) based indexing and
retrieval approaches to obtain a list of top-ùëò suspected users in
real-time. Since leveraging information from true user location
data can lead to security and privacy concerns, we also investigate
what effects does distance-preserving encoding methods have on
the effectiveness of the ANN methods. Experiments conducted on
real and synthetic datasets demonstrate that the top-ùëò retrieved
lists of susceptible users retrieved with existing ANN approaches
(KD-tree and HNSW) yield satisfactory precision and recall values,
thus indicating that ANN approaches can potentially be applied
in practice to facilitate real-time contact tracing even under the
presence of imposed privacy constraints.

KEYWORDS
Privacy Preserving Encoding of Location Trajectories, Covid-19,
Approximate Nearest Neighbor Search

1

INTRODUCTION

The currently ongoing Covid-19 pandemic has spread at a rapidly
accelerating rate since its inception. Standard epidemics analysis
models, e.g., the SIR model [37], have stressed on the importance of
finding the susceptible cases to flatten the growth rate of the spread
of infection as early as possible. In this modern era of ubiquitous
digital connectivity through mobile devices, a possible source of
information for contact tracing is the log of location traces in the
form of GPS coordinates.
Since procuring such data for the purpose of contact tracing and
using it in a restricted way (possibly by government organizations)
is difficult and time-consuming due to the very sensitive nature
of the data, a strong case needs to be made that how could such
data be useful for controlling the spread of a pandemic. The aim of
this article is to to demonstrate a proof-of-the-concept that with the

availability of massive amounts of trajectory data, it is feasible to develop a scalable system that is both effective (in terms of identifying
people susceptible to an infectious disease) and efficient (in terms of
the time taken to identify the susceptible cases). We believe that this
proof-of-the-concept will encourage sharing (with restricted use) of
such sensitive data in order to help mitigate epidemic situations.
In this paper, we formalize contact tracing as a search problem
within an Euclidean vector space. More concretely, each the state of
each person is represented as a point in a vector space, specifically
of 4 dimensions constituting 3 dimensions for space (3 Cartesian
coordinates corresponding to the spherical coordinates for latitude
and longitude on the Earth‚Äôs surface) and 1 for time. A given set of
persons (those diagnosed as positive with the disease) then define
the query points in this vector space. People who were close to
these infected persons, in terms of both space and time (i.e. they
were in approximately the same place at nearly the same time), also
carry the risk of being infected with the disease. The objective then
is to obtain a list of such susceptible people in real-time. Figure 1
schematically depicts the idea.
The number of points represented in this vector space can rapidly
grow in situations where either the geographic area represented is
too large or too dense to start with, or the location traces need to be
represented over a large duration of time (e.g. over several months).
An exhaustive search for finding susceptible infection cases in this
space is likely not to be feasible in terms of computation time. However, this formulation makes provision to investigate the use of
approximate nearest neighbor (ANN) approaches, such as KD-trees
[34], and evaluate the effectiveness of such approximate approaches
mainly in terms of relative recall with respect to the exhaustive
search (i.e. how many such truly susceptible cases can the approximate algorithm find out). Ideally speaking, we could consider an
ANN algorithm to be working well in this situation of contact tracing if it achieves a fair trade-off between the computation time and
the recall relative to the exhaustive search (minimizing the former
and maximizing the latter).
Our Contributions. The novelty of our work lies in investigating,
under a laboratory based reproducible environment, the feasibility
of ANN algorithms for contact tracing during epidemics. We, to
the best of our knowledge, are not aware of any other work along
this direction. In particular, we conduct extensive experiments on
a relatively large database (24M) of real GPS locations, and an
even larger collection (150M) of synthetic data comprising random
walks of simulated agents. The workflow of our experiments involves indexing a large collection of trajectory records, followed by
simulating a number of records from this index as infected (representing the real-life situation of new cases of reported infection).

Chandan Biswas, Debasis Ganguly, and Ujjwal Bhattacharya

Given the location trace of each infected person, we then find out
a candidate list of persons and evaluate the retrieval effectiveness.
Additionally, since sharing true location data of real users across
different organizations can potentially cause privacy concerns, we
also investigate the feasibility of encoding the true locations with
a distance-preserving linear transformation, e.g. [23]. While such
encoding has been shown to preserve privacy of data [10], we investigate what effects can such an encoding have on the effectiveness
of the ANN retrieval algorithms.
The findings of our experiments indicate that ANN based approaches do yield satisfactory recall even on encoded data. In terms
of run-time, the ANN based approach achieves up to 17, 000√ó speedup. We emphasize that the scope of this paper is not to explore a
novel ANN method but rather to study the feasibility of applying
ANN methods for contact tracing in an epidemic situation.

2

BACKGROUND

Approximate nearest neighbors search. Existing studies in
nearest neighbors (NN) search attempt to find the closest ùëò objects to a query point ùëû from a dataset ùê∑. The KD-tree algorithm, as
proposed in the classic paper [9], is one of the most popular exact
nearest neighbors (NN) searching algorithm. Although it yields
good results in low dimensional spaces, its effectiveness in terms of
computation time and memory usage, tends to decrease for high dimensional spaces [13]. Since exact NN finding for high dimensional
spaces takes a substantial amount of time, exact nearest neighbor
(NN) search algorithms (e.g. the classic KD-tree) being computationally expensive, are rather intractable for large collections of
embedded data in high dimensional spaces, thus leading towards research on approximate NN retrieval. Approximate nearest neighbor
(ANN) search finds applications in content-based image retrieval.
With the advent of deep learning based methods which represent
image and text data in a joint embedding space of reals [17], finding
nearest neighbors in the data can be useful for various applications,
such as image captioning [26], ‚Äòimagification‚Äô of documents [1] etc.
Generally speaking, existing ANN approaches can broadly be
divided into the following categories. Firstly, some approaches are
memory-based relying on efficient data structures to compute only
a limited number of exact distances [16]. Variations of the KD-tree
data-structure to support approximate NN (ANN) also fall in this
category [6, 8, 34].
Secondly, some approaches are hash-based which aim to design
effective hash functions to preserve the spatial proximity of the
points, i.e. map close points to the identical hash values [4, 5, 7]. Locality sensitive hashing (LSH) [4] is the most popular hashing-based
ANN search method which uses a number of different distance preserving (also called semantic) hash functions. Generally speaking,
the effectiveness of these hashing-based techniques solely depends
on the hash functions used. A significant volume of research has
been directed towards improving the quality of these hash functions, such as the Super-bit LSH [23], kernel-LSH [28], randomized
hashing with metric learning [20] etc.
The third category of approaches map data points to compact
binary codes to reduce in-memory space and achieve fast exhaustive
search in Hamming space [19]. Product quantization (PQ) [21]
is a specific type of non-binary discrete encoding method used

for either exhaustive search or non-exhaustive search with the
help of inverted indexing. Supervised methods have been proposed
to better fit the quantization parameters to the underlying data
distribution [18, 25].
The fourth category of approaches is based on metric inversion
(MI), i.e. relying on pre-computing distances from a set of reference
points (different from the data points). These distances are stored
in the postings list corresponding to each reference term [3, 12,
14]. Among more successful approaches allowing provision for an
inverted index based secondary storage organization (with query
driven dynamic loading of content in the primary memory) are
the graph-based approaches - NSW and HNSW. Navigable Small
World (NSW) [11] is a graph with logarithmic or poly-logarithmic
scaling of greedy graph routing [11]. Malkov et al. [29] further
improved NSW-based ANN search with a controlled hierarchy
based approach, known as the Hierarchical NSW (HNSW).
Trajectory search. Recent advancement in GPS technology has
enabled led to everyday recording and storing large amounts of
trajectory data of moving objects. This high volume trajectory can
be very useful for trip recommendation [31], travel time and travel
path optimization [39], identifying driver expertise [35] etc. There
also exist a number of recent studies that about trajectory search
given a particular query location [15, 36], region of interest [33] or
traveler‚Äôs preference and activity [31, 32, 38, 41].

2.1

Review of KD-Tree and HSNW

Since our experiments are conducted with an in-memory and an
indexing based ANN approach, specifically the KD-tree and HSNW,
respectively, in this section we briefly review these two approaches.
KD-Tree. KD-tree is a multi-level space partitioning binary
search tree data structure, where ùêæ is the dimensionality of the
search space. Each node in the tree consists of ùêæ keys (which comprise the data vector) and two pointers which points to the left
sub-tree and right sub-trees. The general idea in Kd-tree is to partition a given collection of points by hyperplanes perpendicular to
the axes. Associated with each node is an integer ùëó (0 ‚â§ ùëó < ùêæ)
called the discriminator, the role of which is to determine the direction (left or right) of a data point with respect to the splitting
hyperplane (the hyperplane perpendicular to ùëó ùë°‚Ñé dimension‚Äôs axis).
The root node has the discriminator value 0. Insertion and searching in a KD-tree recursively traverses the tree determining the
discriminator values at each level by computing the median of the
values corresponding to the ùëó-th dimension.
HSNW. In general, proximity graph based methods constructs
an index by preserving the links to closest neighbours for each
individual data point. The basic greedy search algorithm on this
proximity graph is very expensive due to curse of dimensionality
and it gives relatively poor performance on data with well-separable
clusters [29]. To address this limitation, Malkov et al. [29] proposed
navigable small world (NSW) graph based algorithm for solving the
approximate nearest neighbour search problem. The NSW graph,
ùê∫ (ùëâ , ùê∏), is a network with logarithmic or poly-logarithmic scalability of the greedy search algorithm [27], where there is a one-one
mapping between the vertex set ùëâ of ùê∫ and the elements of the input dataset ùëã ‚äÇ Rùëë , the set of edges ùê∏ representing the link among

Approximate Nearest Neighbour Search on Privacy-aware Encoding of User Locations to Identify Susceptible Infections in Simulated Epidemics

collection of each individual‚Äôs location traces (curves in the spacetime) and a given list of infected people (query curves like the one
shown in red in Figure 1).

3.2

Figure 1: A simple visualization of a 2d space-time world.
the elements being determined by the following construction algorithm. The edge construction algorithm repeatedly connects a
randomly selected node (a data point) with its nearest neighbor.
More formally, (ùë¢, ùë£) ‚àà ùê∏ if ùë•¬Æùë¢ ‚àà ùëÅ (ùë•¬Æùë£ ) or ùë•¬Æùë£ ‚àà ùëÅ (ùë•¬Æùë¢ ), where
ùëÅ (ùë•)
¬Æ represents the neighbourhood of a point ùë•¬Æ in ùëã .
The NSW algorithm was further improved by the Hierarchical
NSW (HNSW) algorithm proposed in Malkov and Yashunin [30].
The key idea of index construction and search strategy in HNSW is
to extend the graph structure of NSW into a hierarchy of a multilayered structure, having the links separated by their characteristic
distance scales. The HSNW graph is constructed by consecutively
inserting a node for each data point, where for each node inserted
an integer ùëô = ‚åä‚àí ln (U (0, 1))ùëöùêø ‚åã is chosen to determine the maximum level of the element, where ùëöùêø is a normalization factor for
level generation. The insertion procedure has two phases. In the
first phase a greedy algorithm starts from the top layer to find ùëí
closest neighbours of the inserted element (ùëí is a parameter to control the search quality, its value in the first phase being set to 1). In
the second phase, search continues to the lower layer considering
the closest neighbours found in first phase as entry points and the
process repeats. The HSNW ANN search procedure is identical to
the insertion algorithm for an element with layer ùëô = 0. The search
result constitutes the closest neighbors found at the bottom-most
layer.

Encoding the Locations for Privacy
Preservation

For contact tracing purposes, the location traces of each user over
a range of time (4-dimensional space-time data) needs to be assimilated in a database. This is likely to raise privacy concerns as
mandated by various privacy regulation practices, e.g. the GDPR
[2]. A possible approach to prevent any possible misuse of the true
location data of real users is to apply a linear transformation of the
data using random projections [5]. For privacy preservation, as a
part of the general workflow, we first apply a distance preserving
transformation function ùúô comprised of projections along random
basis vectors. This is followed by application of a quantization
function, ùëìùõø , of the projected values.

3 ANN WORKFLOW
3.1 Representation of Location Data

Distance-preserving transformation. Let ùúô denote the transformation function which maps points from Rùëë to its corresponding
images in Rùëù , i.e., ùúô : ùë§¬Æ ‚àà Rùëë ‚Ü¶‚Üí ùë•¬Æ ‚àà Rùëù . The most common
function for such transformation is the locality sensitive hash function (LSH) [5], which involves randomly choosing a set of ùëù basis
vectors ùîÖ, where ùëù is a parameter. Each point is then transformed
by computing projections of the point along these ùëù basis vectors
yielding the ùëù components of the transformed point in Rùëù . More
concretely, the ùëñ ùë°‚Ñé component of the transformed vector in Rùëù is
given by
ùë•ùëñ = ùë§¬Æ .ùëè¬Æùëñ ,
(1)
where ùë§¬Æ is a (raw) data vector (e.g. the true user trajectories) in the
space Rùëë , and ùëè¬Æùëñ ‚àà ùîÖ is the ùëñ th basis vector.
A random basis ensures that computing the inverse function is
non-tractable [5]. However, as per the Johnson-Lindenstrauss (JL)
lemma [24], it is known that this random projection based transformation of Equation 1 is in fact distance preserving [40]. Ji et al.
[22] further improved the robustness of this distance preserving
transformation by applying orthogonalization on the randomly
chosen basis vectors with the help of the Gram-Schmidt method.
In this paper, we specifically use the orthogonal basis vector based
approach of [22] as a definition of the transformation function ùúô.

The geo-locations of users (which in real life can be obtained from
GPS locations of smart phones) are represented by ‚Äò3‚Äô-dimensional
points (2 space dimensions corresponding to the location on the
Earth‚Äôs surface latitude, longitude and a time dimension measured
in system epochs). The path traced in this 3 dimensional space-time
corresponds to the activity phase of a single user.
Figure 1 shows a schematic visualization of a 2d space-time world.
Each person is shown as a path (curve) in this space-time, i.e. each
person is shown as a locus of changing positions (x coordinate)
with respect to time. Values along the time dimension (y-axis in
the figure) monotonically increase along the the x coordinate, or
in other words the curves never loop down. Figure 1 shows two
intersections of these locus curves. One of these is an intersection of
a healthy person with an infected one (leaving the healthy person
at a high risk of infection). The objective of the ANN based search
is to automatically find all such possible intersections given a large

Quantizing the projections. The purpose of quantization of the
projected values is two fold. First, quantizing the projected values
adds a further layer of obfuscation on the projected values. Second,
it helps to reduce the storage space (4 or 8 bytes of floating point vs.
a single byte which allows for up to 256 possible quantized values)
and hence allows faster loading of parts of the index into the main
memory thereby speeding up the retrieval process.
The key idea in quantization is to transform the real-valued
Cartesian space, Rùëù , into a set of non-overlapping axis-parallel
grids. More formally, each grid represents an ùëô ‚àû ball of some positive
radius ùõø ‚àà R, taking the shape of a hyper-cube of length ùõø. This
transformation is visualized for the particular case of 2 dimensions
in Figure 2, where each ùëô ‚àû ball manifests itself as a square cell.
Figure 2 shows 4 points, ùë•¬Æ1, . . . , ùë•¬Æ4 in a two dimensional space. If
√êùëÅ
ùëù
ùëã = ùëñ=
1 {ùë•¬Æùëñ } denotes a set of ùëÅ points in R , to place the grid
over ùëã , we first calculate the length of each grid, denoted by ùõø. The

Chandan Biswas, Debasis Ganguly, and Ujjwal Bhattacharya

(Œ≤, Œ≤)

x1
3

x2
x3

2
x4

Œ¥

1

Œ¥

0
(Œ±, Œ±)

0

2

1

3

Figure 2: Decomposing Rùëù into a set of ùëô ‚àû balls.
fŒ¥(x+Œµ)

Figure 4: Simulated ghost-users (shown in amber color) corresponding to a real infected user (shown in red)

‚àö2 Œ¥
Œµ

x+Œµ

x
x-Œµ

‚àö2 Œ¥
fŒ¥(x-Œµ)

Figure 3: Maximum error in distance approximation.
value of ùõø is a function of a) the number of equi-spaced intervals ùëÄ,
in which we would want to split each axis dimension, and b) the
minimum and the maximum coordinates along the axis dimensions,
denoted by ùõº and ùõΩ respectively. Thus,
ùõø=

ùõΩ ‚àíùõº
,
ùëÄ

ùëÅ

ùëù

ùõº = min min ùë•¬Æùëñ ùëó ,
ùëñ=1 ùëó=1

ùëÅ

ùëù

ùëñ=1

ùëó=1

ùõΩ = max max ùë•¬Æùëñ ùëó

(2)

The ùëô ‚àû balls are hence centred at points ùëê¬Æ ‚àà Rùëù , where
1 ùëù
)ùõø } , ùëü = 0, . . . , ùëÄ ‚àí 1
(3)
2
We then define a transformation function, ùëìùõø (ùë•),
¬Æ which represents a point ùë•¬Æ by the coordinates of its discrete grid locations along
each dimension. More formally,
lùë• ‚àí ùõº m
ùëñ
ùëìùõø (ùë•ùëñ ) =
, ‚àÄùëñ = 1, . . . , ùëù.
(4)
ùõø
The distance between two quantized points is given by
ùëê¬Æ = {ùõº + (ùëü +

Dùõø (ùëìùõø (ùë•),
¬Æ ùëìùõø (ùë¶))
¬Æ =

ùëù l
 ‚àëÔ∏Å
ùë•ùëñ ‚àí ùõº m l ùë¶ùëñ ‚àí ùõº m 2  21
‚àí
ùõø
ùõø
ùëñ=1

(5)

Figure 3 demonstrates the approximation effect of the quantization
in two dimensions. Maximum quantization error occurs when two
points, ùë•¬Æùúñ+ and ùë•¬Æùúñ‚àí , in the ùúñ-neighbourhood of ùë•¬Æ are transformed to
two different points ùëìùõø (ùë•¬Æùúñ+ ) and ùëìùõø (ùë•¬Æùúñ‚àí ) respectively. The separation
distance
between these two transformed points in two dimensions
‚àö
is 2ùõø, whereas for the general case of ùëù dimensions, this distance is
‚àö
ùëùùõø. Hence, the maximum factor by which distances are magnified,
in the general case of ùëù dimensions, is given by
‚àö
‚àö
ùëùùõø
D (ùëìùõø (ùë•¬Æùúñ+ ), ùëìùõø (ùë•¬Æùúñ‚àí )) 2 ùëùùõø
=
=
(6)
+
‚àí
2ùúñ
ùúñ
¬Æ
D (ùë•ùúñ , ùë•¬Æùúñ )
As expected, this distortion can be reduced with small values of ùõø,
which is a parameter of the quantization process. In other words,

Figure 5: Left: Random walk based trajectory data of 50 users.
Right: A zoomed-in view for the trajectory of 3 users. Given
the red colored trajectory as a query (infected user) the objective is to retrieve the other two.

the closer a point is within the to the corner point between two
grids, i.e. lower the value of ùúñ, the higher is the quantization error.

4 EVALUATION
4.1 Dataset
To study the effectiveness of our system we perform a number of
experiments with both real and synthetic datasets. As a real dataset,
we use the FourSquare1 global check-in dataset. To conduct experiments on a yet larger collection, we simulate synthetic trajectories,
with a different number of users (simulated agents) and number of
time steps (range of time). Table 2 summarizes these datasets 2 .
Simulated Ground-truths for FourSquare Check-ins. The real
FourSquare check-in data is not directly applicable for our study
because the data contains only a very small number of simultaneous check-ins of two FourSquare users in the same location (a
point-of-interest, e.g. a museum/restaurant). However, to evaluate
contact tracing effectiveness under laboratory-settings, our data
requires to have users that came in close contact with each other
(in terms of both space and time).
As a solution, we undertake a simple simulation model to generate pseudo-user interactions (likely contacts). First, we filter the
original dataset to retain only one check-in per user. This makes
1 https://drive.google.com/file/d/0BwrgZ-IdrTotZ0U0ZER2ejI3VVk/view
2A

prototype of the implementation and data preparation is available for research
purposes at https://github.com/chandanbiswas08/infectracer.

Approximate Nearest Neighbour Search on Privacy-aware Encoding of User Locations to Identify Susceptible Infections in Simulated Epidemics

Table 1: ANN retrieval results for a range of different values for the number of simulated infected individuals (queries) denoted
in the table as ‚Äò#Infected‚Äô. In these results, for each infected user, ùëü (#retrieved at each time step) is set to 100.
KD-tree

PP-HNSW

Dataset #Infected ùëù Time (ms) Recall ùëù Time (ms) Recall ùëù
4
4
4
4

1.95 0.9805
1.84 0.9804
1.83 0.9809
1.94 0.9797

4
4
4
4

41.77 0.9822 16
40.58 0.9823 16
42.58 0.9822 16
42.33 0.9808 16

128
128
128
128

1.18 0.9276 16
1.19 0.9284 16
1.19 0.9293 16
1.20 0.9282 16

128
128
128
128

52.98 0.9824
53.80 0.9830
50.80 0.9825
53.47 0.9815

Traject-100K

1K (1%)
2K (2%)
3K (3%)
4K (4%)

4
4
4
4

2.29 0.9587
2.30 0.9573
2.28 0.9586
2.20 0.9575

4
4
4
4

42.18 0.9728 16
42.12 0.9734 16
42.85 0.9735 16
42.33 0.9729 16

128
128
128
128

1.71 0.8550 16
1.72 0.8577 16
1.72 0.8580 16
1.63 0.8561 16

128
128
128
128

70.34 0.9678
71.29 0.9686
71.00 0.9693
65.69 0.9678

Traject-1M

10K (1%)
20K (2%)
30K (3%)
40K (4%)

4
4
4
4

34.04 0.4542
34.04 0.4539
32.59 0.4541
30.18 0.4541

4
4
4
4

63.05 0.7952 16 1024
64.36 0.7949 16 1024
61.26 0.7950 16 1024
91.95 0.7950 16 1024

25.05 0.4338 16 1024
26.55 0.4337 16 1024
24.38 0.4341 16 1024
20.09 0.4378 16 1024

196.47 0.7895
190.45 0.7890
186.25 0.7896
218.73 0.7892

2670 (1%)
5340 (2%)
CheckIn-24M
8010 (3%)
10680 (4%)

4
4
4
4

0.02 0.9786
0.02 0.9795
0.02 0.9789
0.02 0.9796

4
4
4
4

0.00

0.00
40

50

60

70

80

90

20
0.85

0.80

100

0
10

20

30

40

50

60

70

80

90

PP-HNSW-time
PP-KD-tree-time
PP-HNSW
PP-KD-tree

1.00

80

0.90

60

0.80

40

0.70

20

0.60

0
10

100

20

30

40

50

1M
1M
1M
1M

60

70

80

90

0.61 0.5020
0.61 0.5016
0.62 0.5029
0.61 0.5037
HNSW-time
KD-tree-time
HNSW
KD-tree

PP-HNSW-time
PP-KD-tree-time
PP-HNSW
PP-KD-tree

0.80

400

300
0.60

Recall

40
0.90

0.03 0.4455 16
0.03 0.4510 16
0.03 0.4520 16
0.03 0.4508 16

Retrieve time (sec)

0.95

1M
1M
1M
1M

HNSW-time
KD-tree-time
HNSW
KD-tree

60

Recall

0.20
0.25

1.00 16
1.00 16
1.00 16
1.00 16

PP-HNSW-time
PP-KD-tree-time
PP-HNSW
PP-KD-tree

1.00

Recall

0.40
0.50

Retrieve time (millisecond)

0.75

Recall

HNSW-time
KD-tree-time
HNSW
KD-tree

0.24
0.24
0.24
0.24

Retrieve time (millisec)

PP-HNSW-time
PP-KD-tree-time
PP-HNSW
PP-KD-tree
0.60

30

ùëÄ Time (ms) Recall

100 (1%)
200 (2%)
300 (3%)
400 (4%)

HNSW-time
KD-tree-time
HNSW
KD-tree

20

ùëÄ Time (ms) Recall ùëù

Traject-10K

1.00

10

PP-KD-tree

200
0.40
100

0.20

100

Retrieve time (sec)

HNSW

0
10

20

30

40

50

60

70

80

#Retrieve/timestep

#Retrieve/timestep

#Retrieve/timestep

#Retrieve/timestep

(a) CheckIn-24M

(b) Traject-10K

(c) Traject-100K

(d) Traject-1M

90

100

Figure 6: Sensitivity of ANN retrieval effectiveness and efficiency with respect to the number of retrieved users (ùëü ) at each
timestep. The line graph represents the recall value and bar graph represents the retrieval time for the ANN search methods.
p=8

p=16

p=2

0.30

Recall

Recall

0.40

0.20

p=4

p=8

p=16

p=2

1.00

1.00

0.75

0.75

0.50
0.25

0.10
0.00
100K

1M

10M

32

M

p=2

p=4

p=8

p=2

64

p=2

p=4

p=8

p=16

0.30
0.20
0.10
0.00

16

32

64

128

128

256

M

(b) PP-HNSW:Traject-10K

p=16

p=8

0.40

0.50

128

p=4

0.50

M

(a) PP-HNSW:CheckIn-24M

p=16

0.00
16

0.60

p=8

0.25

0.00
10K

p=4

Recall

p=4

Recall

p=2
0.50

(c) PP-HNSW:Traject-100K

p=16

p=2

p=4

p=8

512

1024

M

(d) PP-HNSW:Traject-1M

p=16

p=2

1.00

1.00

0.80

0.75

0.75

0.60

p=4

p=8

p=16

0.00
10K

100K

1M

10M

M

(e) PP-KD-tree:CheckIn-24M

0.50

0.50

0.25

0.25

0.00

0.00
16

32

64

128

M

(f) PP-KD-tree:Traject-10K

Recall

0.20

Recall

Recall

Recall

0.40
0.40
0.20
0.00
16

32

64

128

M

(g) PP-KD-tree:Traject-100K

128

256

512

1024

M

(h) PP-KD-tree:Traject-1M

Figure 7: Sensitivity of ANN retrieval effectiveness with variations in the projection dimension (ùëù) and the number of quantization intervals (ùëÄ).

Chandan Biswas, Debasis Ganguly, and Ujjwal Bhattacharya

Table 2: Summary of the dataset used in our experiments. ùúå
denotes the population density (#users in a grid cell).
Dataset

#User #Instances #Step (ùúè) Grid (ùõΩ √ó ùõΩ)

Traject-10K
10K
Traject-100K 100K
Traject-1M
1M
CheckIn-24M 24M

1500K 100-200
15M 100-200
150M 100-200
24M
1

ùúå

100√ó100 149.94
1K√ó1K 14.99
1K√ó1K 149.97
107√ó337 670.85

the simulation algorithm easier to manage. Next, for each user
ùëà (having a unique id), we generate a mutually exclusive set of
‚Äòpseudo-users‚Äô or ‚Äòghost-users‚Äô. For a user ùëà , as per the generation
mechanism, this set of pseudo-users hence represent the groundtruth or the target set of users that need to be retrieved given the
current user ùëà as a query. Note that since all the original/real user
check-ins were sufficiently apart in space-time coordinates, it is
likely that the neighbourhood of a user comprised of the ghostuser check-ins are also far apart (in which case one can rely with
sufficient confidence on the simulated ground-truth data). More
concretely, for each user ùëà we generate ùëù +ùëõ number of ghost-users
in a ùõø neighbourhood, out of which ùëù belong to an ùúñ neighbourhood
(ùúñ < ùõø). If ùëà is infected person then the target is to retrieve the set
of ùëù ghost-users. Figure 4 presents a visualization of the simulated
pseudo-users corresponding to a real infected user (red person in
the figure). As particular values of ùúñ and ùõø, we use 1 and 2. The
values of ùëù and ùëõ were set to 30 and 60 respectively. The value of ùëõ
is set to be higher than that of ùëù in order to make the ANN retrieval
task more challenging.
4.1.1 Generating Synthetic Trajectory Dataset. Since the real
dataset is limited by the number of available check-ins, in order
to collate a larger dataset of locations we generate synthetic data
with random walk. Although the real trajectory paths of people are
far from being random, the generated data despite being random
serves its purpose in the context of our experiments, which is to
evaluate the effectiveness of ANN on large volumes of location data.
To generate synthetic data, ùëÅ simulated agents are initialized each
at a randomly chosen location within a 3 dimensional bounding
box (each side of the bounding box being in the range [0, ùõΩ]) with
uniform probability. If the location of the ùëñ-th agent at time-step
ùë° is denoted by (ùë•ùë°ùëñ , ùë¶ùë°ùëñ , ùëßùë°ùëñ ), its location ùë• coordinate‚Äôs value at the
next time step is given by
ùë•ùë°ùëñ +1 = ùë•ùë°ùëñ + U (‚àí1, 1), ùë•ùë°ùëñ ‚àà [0, ùõΩ]

(7)

and so on for the other spatial dimensions (ùõΩ is the length of each
edge of the bounding cube). The process in Equation 7 is repeated
for an agent for ùúèùëñ number of steps where ùúèùëöùëñùëõ < ùúèùëñ < ùúèùëöùëéùë• . For our
experiments, we used ùúèùëöùëñùëõ = 100 and ùúèùëöùëéùë• = 200. Each generated
spatial location for the ùëñ-th agent (ùúèùëñ number of them in total) is
then appended with the time dimension, yielding the set of points
of the form
ùêøùëñ = ‚à™ùúèùë° ùëñ=0 {(ùë•ùë°ùëñ , ùë¶ùë°ùëñ , ùëßùë°ùëñ , ùë°)}.
(8)
While generating the dataset at each step, if two agents are
found to come sufficiently close to each other, i.e. within an ùúñneighborhood of each other (ùúñ set to 1 similar to the Foursquare

dataset settings), we insert each point into the ground-truth (susceptible) list of the other. We generate different synthetic datasets
with three different values of ùëÅ (number of simulated agents),
namely 10K, 100K and 1M. To name the datasets with a common
prefix ‚ÄòTraject-‚Äô followed by the value of ùëÅ . Table 2 summarizes
the datasets. Figure 5 shows a sample of the generated data with
50 users for the purpose of illustration.
Parameters and Evaluation Metrics. The two main parameters
for privacy preserving data encoding are a) the dimension of the
encoded space ùëù (Equation 1), and b) the number of equi-spaced
intervals along each axis of the data, ùëÄ, which is inversely proportional to the quantization interval ùõø (c.f. Equation 2 and 3). For
our experiments, we set ùëù to values of 2, 4, 8, and 16. ùëÄ is chosen
independently for each dataset depending on the density of the
points. For Traject-10K and Traject-100K datasets we set ùëÄ to 16,
32, 64 and 128, whereas for Traject-1M data we set it to 128, 256,
512 and 1024. Likewise for the FourSquare dataset (CheckIn-24M),
we set its value to 1ùêæ, 10ùêæ, 100ùêæ and 1ùëÄ.
For the synthetic trajectory datasets, we conduct an ANN retrieval for each space-time coordinate of an infected (query) user.
This means that a final list of susceptible candidates is obtained
by aggregating (set union) of these individual lists. The size, say
ùëü , of the retrieved list at each distinct time coordinate value is set
to Another parameter for the our ANN search is the number of
retrieved suspected nearest neighbours, say ùëü , of an infected person
at each timestamp is varied from 10 to 100 in steps of 10.
Since the task of finding susceptible candidates is a recalloriented task (false negatives are less desirable), we evaluate the
effectiveness of susceptible retrieval with recall, which measures
the proportion of the true nearest neighbors (true susceptible candidates) that are eventually retrieved.

4.2

Results

Table 1 present the results of the different ANN search workflows
on privacy-encoded data (named ‚ÄòPP-KD-tree‚Äô and ‚ÄòPP-HNSW‚Äô).
The key observations from Table 1 are as follows. First, we observe
that both the approaches yield satisfactory recall values which
demonstrates the feasibility of applying an ANN-based workflow
in pandemic situations to achieve a trade-off between recall and
computation time. The time reported in milli-seconds refers to
the time taken to retrieve a list for a single query. The retrieval
times of both KD-tree and HNSW are substantially lower than an
exhaustive search through the database (for the Traject-1M dataset
the exhaustive search takes 17ùêæ√ó more time on an average).
Although PP-KD-tree yields better recall values than PP-HNSW,
the retrieval time of the KD-tree based ANN approach is higher
than that of HNSW. It is seen that the recall values achieved are
relatively insensitive to the number of people infected.
Parameter Sensitivity. In Figure 6 we can see that by increasing the number of candidates retrieved per time step we can get
better recall value but at the same time we can see that it increases
retrieval time. We observed that setting #retrieve/timestep as 100
we can get near optimal result for all of the dataset within satisfactory retrieval time.
Figure 7 presents the sensitivity of PP-HNSW and PP-KD-tree
with respect to the two parameters, namely the dimension of the

Approximate Nearest Neighbour Search on Privacy-aware Encoding of User Locations to Identify Susceptible Infections in Simulated Epidemics
M=1M

M=10M

M=16

0.03
0.025
0.02
0.015

M=128

M=16

4

8

1.2
1.1
1
0.9

16

M=100K

M=1M

4

8

M=16

M=32

M=64

10
5
0

1.2

8

16

p

(e) PP-KD-tree:CheckIn-24M

8

M=16

60

4

22
21

2

4

M=32

M=64

8

16

p

(f) PP-KD-tree:Traject-10K

8

16

p

(d) PP-HNSW:Traject-1M

M=128

M=128

M=256

M=512

M=1024

500

200
150
100
50
0

2

M=1024

23

16

250

80

M=512

20
4

(c) PP-HNSW:Traject-100K

M=128

40
4

M=256

p

Retrieve time (millisec)

Retrieve time (millisec)

15

2

1.4

2

100

20

M=128

1.6

16

(b) PP-HNSW:Traject-10K

M=10M

25

M=128
24

p

(a) PP-HNSW:CheckIn-24M

M=64

1
2

p

M=10K

M=32

1.8

0.8
2

Retrieve time (millisec)

M=64

Retrieve time (millisec)

Retrieve time (millisec)

Retrieve time (millisec)

M=32

1.3

Retrieve time (millisec)

M=100K

Retrieve time (millisec)

M=10K
0.035

450
400
350
300
250

2

4

8

16

p

(g) PP-KD-tree:Traject-100K

2

4

8

16

p

(h) PP-KD-tree:Traject-1M

Figure 8: Sensitivity of ANN retrieval efficiency with respect to the dimensionality of projection (ùëù) and the number of quantization intervals (ùëÄ).
basis vectors for projection (ùëù) and the number of quantization grids
(ùëÄ). From the figure, we observe that increasing the number of bins
increases recall values. However, we also note that it is not required
to arbitrarily increase the value of ùëÄ because the results tend to
saturate out with the use of ùëÄ = 128 bins for Traject-10/100K and
for ùëÄ = 1024 in the case of Traject-1M dataset. Since the density
of Check-in dataset is higher than those of the synthetic ones (see
Table 2), the number of intervals required to achieve satisfactory
recall values is also higher for this dataset. Figure 7 shows that
about 1M intervals in both PP-HNSW and PP-KD-tree are required
to obtain satisfactory recall values. Similar to investigating the
recall variations, in Figure 8 showcases the effects of varying the
parameters ùëù and ùëÄ on ANN retrieval time.

5

CONCLUSIONS

In this paper, we investigated the feasibility of applying standard
approximate nearest neighbor (ANN) search approaches for the
task of contact tracing in pandemic situations. More concretely,
given an indexed collection of space-time coordinates of individuals and a list of infected persons, our intention is to retrieve a list
of candidate persons might be susceptible to the infection since
they came in close proximity (approximately same place and time)
with the people already infected. Since location data for contact
tracing could lead to privacy issues, we also propose to an encoding and quantization based obfuscation of the data. We conduct a
set of laboratory-based experiments on data with known groundtruths. We found that the recall values that could be achieved with
ANN-based approaches are satisfactory. Although the recall levels
do decrease with an increase in the number of data points, our
experiments show that for large datasets ANN based retrieval can
achieve speed-gains of up to 17K, thus achieving a relative trade-off
between run-time and accuracy. These savings in run-time could
be pivotal for early identification of susceptible cases and carry out
necessary measures (e.g. quarantine the susceptible persons) for the
health-care safety of a community. The proposed workflow also ensures that it is not required to share true user locations for contact

tracing purposes. Instead, such a methodology for contact tracing
in pandemic situations works fairly well with distance-preserving
transformation of the data.

REFERENCES
[1] Rakesh Agrawal, Sreenivas Gollapudi, Anitha Kannan, and Krishnaram Kenthapadi. Enriching textbooks with images. In Proceedings of CIKM ‚Äô11, pages
1847‚Äì1856, 2011.
[2] Efthimios Alepis, Eugenia Politou, and Constantinos Patsakis. Forgetting personal
data and revoking consent under the GDPR: Challenges and proposed solutions.
Journal of Cybersecurity, 4(1), 03 2018.
[3] Giuseppe Amato, Claudio Gennaro, and Pasquale Savino. Mi-file: Using inverted
files for scalable approximate similarity search. Multimedia Tools Appl., 71(3):
1333‚Äì1362, August 2014. ISSN 1380-7501.
[4] Alexandr Andoni and Piotr Indyk. Near-optimal hashing algorithms for approximate nearest neighbor in high dimensions. In 2006 47th annual IEEE symposium
on foundations of computer science (FOCS‚Äô06), pages 459‚Äì468. IEEE, 2006.
[5] Alexandr Andoni and Piotr Indyk. Near-optimal hashing algorithms for approximate nearest neighbor in high dimensions. Commun. ACM, 51(1):117‚Äì122,
January 2008. ISSN 0001-0782.
[6] Sunil Arya, David M Mount, Nathan S Netanyahu, Ruth Silverman, and Angela Y
Wu. An optimal algorithm for approximate nearest neighbor searching fixed
dimensions. Journal of the ACM (JACM), 45(6):891‚Äì923, 1998.
[7] Mayank Bawa, Tyson Condie, and Prasanna Ganesan. Lsh forest: Self-tuning
indexes for similarity search. In Proc. of WWW ‚Äô05, pages 651‚Äì660, 2005.
[8] Jeffrey S Beis and David G Lowe. Shape indexing using approximate nearestneighbour search in high-dimensional spaces. In Proceedings of IEEE computer
society conference on computer vision and pattern recognition, pages 1000‚Äì1006.
IEEE, 1997.
[9] Jon Louis Bentley. Multidimensional binary search trees used for associative
searching. Communications of the ACM, 18(9):509‚Äì517, 1975.
[10] Chandan Biswas, Debasis Ganguly, Dwaipayan Roy, and Ujjwal Bhattacharya.
Privacy preserving approximate k-means clustering. In CIKM, pages 1321‚Äì1330.
ACM, 2019.
[11] Marian Boguna, Dmitri Krioukov, and Kimberly C Claffy. Navigability of complex
networks. Nature Physics, 5(1):74‚Äì80, 2009.
[12] E. Ch√°vez, M. Graff, G. Navarro, and E.S. T√©llez. Near neighbor searching with k
nearest references. Inf. Syst., 51(C):43‚Äì61, July 2015. ISSN 0306-4379.
[13] Edgar Ch√°vez, Gonzalo Navarro, Ricardo Baeza-Yates, and Jos√© Luis Marroqu√≠n.
Searching in metric spaces. ACM computing surveys (CSUR), 33(3):273‚Äì321, 2001.
[14] Edgar Chavez Gonzalez, Karina Figueroa, and Gonzalo Navarro. Effective proximity retrieval by ordering permutations. IEEE Trans. Pattern Anal. Mach. Intell.,
30(9):1647‚Äì1658, September 2008. ISSN 0162-8828.
[15] Zaiben Chen, Heng Tao Shen, Xiaofang Zhou, Yu Zheng, and Xing Xie. Searching
trajectories by locations: an efficiency study. In Proceedings of the 2010 ACM
SIGMOD International Conference on Management of data, pages 255‚Äì266, 2010.
[16] Paolo Ciaccia and Marco Patella. PAC nearest neighbor queries: Approximate
and controlled search in high-dimensional and metric spaces. In Proc. of ICDE

Chandan Biswas, Debasis Ganguly, and Ujjwal Bhattacharya

‚Äô00, pages 244‚Äì255, 2000.
[17] Andrea Frome, Gregory S. Corrado, Jonathon Shlens, Samy Bengio, Jeffrey Dean,
Marc‚ÄôAurelio Ranzato, and Tomas Mikolov. Devise: A deep visual-semantic
embedding model. In Proc. of NIPS ‚Äô13, pages 2121‚Äì2129, 2013.
[18] Tiezheng Ge, Kaiming He, Qifa Ke, and Jian Sun. Optimized product quantization
for approximate nearest neighbor search. In Proc. of CVPR ‚Äô13, pages 2946‚Äì2953,
2013.
[19] Yunchao Gong and S. Lazebnik. Iterative quantization: A procrustean approach
to learning binary codes. In Proceedings of the 2011 IEEE Conference on Computer
Vision and Pattern Recognition, CVPR ‚Äô11, pages 817‚Äì824, 2011.
[20] Prateek Jain, Brian Kulis, and Kristen Grauman. Fast image search for learned
metrics. In 2008 IEEE Conference on computer vision and pattern recognition, pages
1‚Äì8. IEEE, 2008.
[21] Herve Jegou, Matthijs Douze, and Cordelia Schmid. Product quantization for
nearest neighbor search. IEEE Trans. Pattern Anal. Mach. Intell., 33(1):117‚Äì128,
January 2011. ISSN 0162-8828.
[22] J. Ji, J. Li, S. Yan, B., and Q. Tian. Super-bit locality-sensitive hashing. In Proc. of
NIPS‚Äô12, pages 108‚Äì116, 2012.
[23] Jianqiu Ji, Jianmin Li, Shuicheng Yan, Bo Zhang, and Qi Tian. Super-bit localitysensitive hashing. In Advances in Neural Information Processing Systems, pages
108‚Äì116, 2012.
[24] William Johnson and Joram Lindenstrauss. Extensions of Lipschitz mappings
into a Hilbert space. In Conference in modern analysis and probability (New Haven,
Conn., 1982), volume 26 of Contemporary Mathematics. American Mathematical
Society, 1984.
[25] Yannis Kalantidis and Yannis S. Avrithis. Locally optimized product quantization
for approximate nearest neighbor search. In Proc. of CVPR ‚Äô14, pages 2329‚Äì2336,
2014.
[26] Andrej Karpathy and Li Fei-Fei. Deep visual-semantic alignments for generating
image descriptions. IEEE Trans. Pattern Anal. Mach. Intell., 39(4):664‚Äì676, April
2017. ISSN 0162-8828.
[27] Jon Kleinberg. The small-world phenomenon: An algorithmic perspective. In
Proceedings of the thirty-second annual ACM symposium on Theory of computing,
pages 163‚Äì170, 2000.
[28] Brian Kulis and Kristen Grauman. Kernelized locality-sensitive hashing for
scalable image search. In 2009 IEEE 12th international conference on computer
vision, pages 2130‚Äì2137. IEEE, 2009.
[29] Yury Malkov, Alexander Ponomarenko, Andrey Logvinov, and Vladimir Krylov.
Approximate nearest neighbor algorithm based on navigable small world graphs.
Information Systems, 45:61‚Äì68, 2014.
[30] Yury A Malkov and Dmitry A Yashunin. Efficient and robust approximate
nearest neighbor search using hierarchical navigable small world graphs. IEEE
transactions on pattern analysis and machine intelligence, 2018.
[31] Shuo Shang, Ruogu Ding, Bo Yuan, Kexin Xie, Kai Zheng, and Panos Kalnis. User
oriented trajectory search for trip recommendation. In Proceedings of the 15th
International Conference on Extending Database Technology, pages 156‚Äì167, 2012.
[32] Shuo Shang, Ruogu Ding, Kai Zheng, Christian S Jensen, Panos Kalnis, and
Xiaofang Zhou. Personalized trajectory matching in spatial networks. The VLDB
Journal, 23(3):449‚Äì468, 2014.
[33] Shuo Shang, Lisi Chen, Christian S Jensen, Ji-Rong Wen, and Panos Kalnis. Searching trajectories by regions of interest. IEEE Transactions on Knowledge and Data
Engineering, 29(7):1549‚Äì1562, 2017.
[34] Chanop Silpa-Anan and Richard Hartley. Optimised kd-trees for fast image
descriptor matching. In 2008 IEEE Conference on Computer Vision and Pattern
Recognition, pages 1‚Äì8. IEEE, 2008.
[35] Jiabao Sun, Jiajie Xu, Rui Zhou, Kai Zheng, and Chengfei Liu. Discovering expert
drivers from trajectories. In 2018 IEEE 34th International Conference on Data
Engineering (ICDE), pages 1332‚Äì1335. IEEE, 2018.
[36] Lu-An Tang, Yu Zheng, Xing Xie, Jing Yuan, Xiao Yu, and Jiawei Han. Retrieving
k-nearest neighboring trajectories by a set of point locations. In International
Symposium on Spatial and Temporal Databases, pages 223‚Äì241. Springer, 2011.
[37] Katherine Turner. Introduction to infectious disease modelling. Sexually transmitted infections, 87, 11 2010. doi: 10.1136/sti.2010.046342.
[38] Sheng Wang, Zhifeng Bao, J Shane Culpepper, Timos Sellis, Mark Sanderson, and
Xiaolin Qin. Answering top-k exemplar trajectory queries. In 2017 IEEE 33rd
International Conference on Data Engineering (ICDE), pages 597‚Äì608. IEEE, 2017.
[39] Yilun Wang, Yu Zheng, and Yexiang Xue. Travel time estimation of a path
using sparse trajectories. In Proceedings of the 20th ACM SIGKDD international
conference on Knowledge discovery and data mining, pages 25‚Äì34, 2014.
[40] X. Yi, C. Caramanis, and E. Price. Binary embedding: Fundamental limits and
fast algorithm. In Proc. of ICML‚Äô15, pages 2162‚Äì2170, 2015.
[41] Kai Zheng, Shuo Shang, Nicholas Jing Yuan, and Yi Yang. Towards efficient
search for activity trajectories. In 2013 IEEE 29Th international conference on data
engineering (ICDE), pages 230‚Äì241. IEEE, 2013.

