1

Balancing Common Treatment and Epidemic
Control in Medical Procurement during COVID-19:
Transform-and-Divide Evolutionary Optimization

arXiv:2008.00395v1 [cs.NE] 2 Aug 2020

Yu-Jun Zheng, Senior Member, IEEE, Xin Chen, Tie-Er Gan, Min-Xia Zhang, Wei-Guo Sheng, Member, IEEE,
and Ling Wang

Abstract—Balancing common disease treatment and epidemic
control is a key objective of medical supplies procurement in
hospitals during a pandemic such as COVID-19. This problem
can be formulated as a bi-objective optimization problem for
simultaneously optimizing the effects of common disease treatment and epidemic control. However, due to the large number of
supplies, difficulties in evaluating the effects, and the strict budget
constraint, it is difficult for existing evolutionary multiobjective
algorithms to efficiently approximate the Pareto front of the
problem. In this paper, we present an approach that first
transforms the original high-dimensional, constrained multiobjective optimization problem to a low-dimensional, unconstrained
multiobjective optimization problem, and then evaluates each
solution to the transformed problem by solving a set of simple
single-objective optimization subproblems, such that the problem
can be efficiently solved by existing evolutionary multiobjective
algorithms. We applied the transform-and-divide evolutionary
optimization approach to six hospitals in Zhejiang Province,
China, during the peak of COVID-19. Results showed that the
proposed approach exhibits significantly better performance than
that of directly solving the original problem. Our study has
also shown that transform-and-divide evolutionary optimization
based on problem-specific knowledge can be an efficient solution
approach to many other complex problems and, therefore,
enlarge the application field of evolutionary algorithms.
Index Terms—Multiobjective optimization, evolutionary algorithms, medical supplies procurement, epidemic control,
transform-and-divide.

I. I NTRODUCTION

T

O mount an effective response to COVID-19, hospitals
must procure medical supplies for epidemic control.
However, the total budget of any hospital is limited: if a hospital procures too many supplies for epidemic control, it has to
reduce supplies for common disease treatment, which would
damage its medical services. Consequently, it is important
for a hospital to balance between common disease treatment
and epidemic control in medical supplies procurement. The
problem of determining the purchase quantity of each supply
can be formulated as a bi-objective optimization problem for
Y.J. Zheng, X. Chen, and W.G. Sheng are with the School of Information
Science and Engineering, Hangzhou Normal University, Hangzhou 311121,
China (e-mail: yujun.zheng@computer.org; w.sheng@ieee.org).
T.E. Gan is with the First Affiliated Hospital, Zhejiang Chinese Medical
University, Hangzhou 310006, China (e-mail: gantieer@163.com).
M.X. Zhang is with the College of Computer Science & Technology, Zhejiang University of Technology, Hangzhou 310023, China (email:zmx@zjut.edu.cn).
L. Wang is with the Department of Automation, TSinghua University,
Beijing 100084, China (e-mail:wangling@tsinghua.edu.cn).

simultaneously optimizing the effect of epidemic control and
effect of common disease treatment. There are three main
challenges to solving this problem. The first is to evaluate the
effects of epidemic control and common disease treatment in
a relatively accurate manner. The second is to meet the budget
constraint, which is often strict in the pandemic. The third is
to approximate the Pareto front of the problem in an efficient
manner. For the first challenge, we develop a procedure to
simulate the arrival and treatment of cases of infection and
cases of common diseases according to a general principle
of disease treatment and medical supplies usage. However,
this also makes the objective functions expensive. Moreover,
a major hospital often involves tens of thousands of medical
supplies, which makes the dimension of the solution space too
high. The combination of these reasons makes the problem
very difficult to solve.
Decomposition is a general approach to solving large
complex problems that are beyond the reach of standard
techniques. Decomposition in optimization appears in early
work on large-scale linear programming problems from the
1960s [1]. Many problems with separable objective functions
are trivial to solve by mathematical methods. For additively
decomposed functions that are not able to optimize by standard
genetic algorithms, Mühlenbein and Mahnig [2] proposed the
factorized distribution algorithm that factors the distribution
into conditional and marginal distributions based on function
structures. Strasser et al. [3] proposed factored evolutionary
algorithms, which factors an optimization problem by creating overlapping subpopulations that optimize over subsets
of variables. Many combinatorial optimization problems can
be solved by using efficient methods to solve subproblems
and combining the results to obtain solutions to the original
problems. Zheng and Xue [4] utilized these characteristics
to automatically derive efficient problem-solving algorithms,
including evolutionary algorithms (EAs) that are mainly used
for NP-hard problems. Unfortunately, the medical supplies
procurement problem considered in this paper does not satisfy
the basic conditions of decomposition, because it is quite
common that one supply can be used in multiple diseases,
and the treatment of a disease can involve many supplies.
For complex problems whose subcomponents interact and
affect each other, Potter and De Jong [5] proposed a cooperative coevolution architecture that decomposes a problem
into subcomponents, which are then evolved as a collection
of cooperating species. Different decomposition methods have

2

different performance in cooperative coevolution for different
problems. Yang et al. [6] proposed a cooperative coevolution
framework that uses random grouping and adaptive weighting
in problem decomposition and coevolution for optimizing
large nonseparable problems. Chandra [7] presented a competitive cooperative coevolution method for training recurrent
neural networks, where different decomposition methods compete with different features they have in terms of diversity
and degree of non-separability. To capture the interdependency
among variables, Hu et al. [8] proposed a fast interdependency identification algorithm, which avoids obtaining the
full interdependency information of nonseparable variables for
cooperative coevolution. Yang et al. [9] proposed a data-driven
approach, which exploits historical data to mine the evolution
consistency among variables for dynamic variable grouping.
Gomes et al. [10] extended cooperative coevolution with operators that put the number of coevolving subpopulations under
evolutionary control. Wang et al. [11] proposed a formulabased grouping strategy for grouping variables directly based
on the separable and nonseparable operations in the formula of
an objective function. Mahdavi et al. [12] proposed an incremental cooperative coevolution algorithm in which subcomponents are dynamically added to an integrated subcomponent
being evolved. For multimodal optimization problems, Peng
et al. [13] proposed a method that concurrently searches for
multiple optima as informative representatives to be exchanged
among subcomponents for compensation in coevolution. For
dynamic optimization problems, Peng et al. [14] used multiple
populations in cooperative coevolution to compensate information in dynamic landscapes. Zhang et al. [15] proposed a
dynamic cooperative coevolution framework, which allocates
computational resources to elitist subcomponents with superior
variables. Although cooperative coevolution has shown its
efficiency in solving many engineering optimization problems
[16]–[20], for most nonseparable problems, decomposition
causes the loss of a great deal of information, and the
algorithms easily gravitate towards sub-optima represented by
Nash equilibria rather than global optima [21].
A multiobjective optimization problem is much more difficult than its single-objective counterpart, and decomposition
is also a basic strategy in multiobjective optimization. Zhang
and Li [22] proposed a multiobjective evolutionary algorithms
based on decomposition (MOEA/D), which decomposes a
multiobjective optimization problem into a set of singleobjective optimization subproblems using decomposition approaches such as weighted sum, weighted Tchebycheff, and
penalty-based boundary interaction. However, for some problems, these decomposition approaches may not be suitable
for balancing the diversity and convergence. Wang et al. [23]
revolved this difficulty by imposing a constraint to an unconstrained subproblem, where the improvement region of each
subproblem is determined by an adaptive control parameter.
MOEA/D makes an assumption that two neighboring subproblems have similar optimal solutions, but some problems
do not satisfy this assumption. Mei et al. [24] proposed a
decomposition-based memetic algorithm with neighborhood
search for multiobjective capacitated arc routing problem,
which combines decomposition-based and domination-based

techniques for solution selection. An EA proposed by Cai et
al. [25] also combined domination-based sorting and decomposition, the former for evolving an internal population and
the latter for maintaining an external archive. Jan and Zhang
[26] introduced a penalty function to MOEA/D for multiobjective constrained optimization. Konstantinidis and Yang
[27] adapted MOEA/D to solve a K-connected deployment
and power assignment problem by introducing a problemspecific repair heuristic for infeasible solutions. Zhang et al.
[28] extended MOEA/D for big optimization problems by
embedding a gradient-based local search. Chen et al. [29]
extended MOEA/D by assigning each subproblem with an
upper bound vector based on -constraint for constrained
optimization. Qiao et al. equipped MOEA/D with an anglebased adaptive penalty scheme. Fang et al. [30] proposed
coordinate transformation in the objective space to accelerate
the convergence process of multiobjective EA. Jiang et al.
[31] studied the effect of scalarizing functions and presented
two new functions for improving decomposition in MOEA/D.
There have been many other extensions and applications of
MOEA/D in recent years [32]. The cooperative coevolution
architecture that decomposes a problem in the decision space
has also been extended for multiobjective optimization [33]–
[36]. To our knowledge, there is only one study, by He et
el. [37], combining decomposition in both the decision space
and objective space, which is similar to our work. The key
difference is that our method utilizes problem-specific knowledge to ensure the separability of the transformed problem.
Unfortunately, we found that, although using decompositionbased strategies in MOEA/D and other similar algorithms
[38]–[42] can reduce the complexity to a certain degree, the
performance of those algorithms is still far from satisfactory in
solving the medical supplies procurement problem in practice.
In this study, we present a transform-and-divide approach to
efficiently solve the problem. First, we transform the original
problem of determining the purchase quantity of each supply
to a new problem of distributing the budget to epidemic control
and all common diseases. In our case studies, the dimension of
the transformed problem is only one to two percent of that of
the original problem. However, evaluating each solution to the
transformed problem is itself a nontrivial optimization problem. Second, we divide the evaluation problem into a set of
low-dimensional, single-objective optimization subproblems.
We propose a hybrid evolutionary optimization approach,
which employs a multiobjective EA to evolve a population
of main solutions to the transformed problem and uses a tabu
search algorithm to solve the subproblems. During the peak
of COVID-19, we applied the proposed approach to six hospitals in Zhejiang Province, China. Results demonstrated that
the transform-and-divide evolutionary optimization approach
exhibits significantly better performance than that of directly
using multiobjective EAs to solve the original problem. The
main contributions of this paper are twofold:
•

We propose a transform-and-divide evolutionary optimization approach to medical supplies procurement
and demonstrate its practicability and efficiency during
COVID-19.

3

We show that using problem-specific knowledge to transform and divide a complex optimization problem can
lead to competitive EAs for the problem. This approach
can be extended to many other problems and enlarge the
application field of EAs.
The remainder of this paper is organized as follows. Section
II presents the medical supplies procurement problem. Section
III simply describes how to directly use basic multiobjective
EAs to solve the original problem. Section IV proposes
the transform-and-divide evolutionary optimization approach.
section V presents the computational results. Section VI concludes with a discussion.
•

II. P ROBLEM D ESCRIPTION
A. Supplies for Epidemic Control and Common Treatment
We consider a medical supplies procurement problem formulated as follows. In a pandemic, a hospital plans to procure medical supplies, including a set S = {S1 , S2 , . . . , Sn }
of n supplies for epidemic control, and a set S0 =
{Sn+1 , Sn+2 , . . . , Sn+n0 } of n0 supplies for normal disease
treatment. For each supply Sk , the current inventory is ak ,
the unit price is ck , and the unit volume is vk . The problem
is to determine the purchase quantity xk of each supply
(1 ≤ k ≤ n + n0 ), such that the effects of epidemic control
and normal disease treatment are simultaneously optimized.
The supplies for epidemic control can be divided into two
classes. The first class consists of supplies such as latex gloves
and normal saline that must be used in the treatment of a
suspected case of infection; we use Ψ0 to denote the set
of these supplies, and use q0,k to denote the quantity of
each Sk ∈ Ψ0 required to treat a case. The second class
consists of supplies that are alternative in some treatment
items. Table I presents six treatment items and their alternative
supplies used for COVID-19 control in this study. The six
sets of supplies are denoted by Ψ1 , Ψ2 , . . . , Ψ6 , respectively,
and the quantity of each alternative Sk ∈ Ψj required to
treat a case is denoted by qj,k . Different alternatives have
different treatment effects. The treatment effect of using each
alternative Sk ∈ Ψj is estimated as ej,k . For example, the
effects of peroxide, impermeable gown, and normal gown
in “body protection” item are estimated as 1, 0.9 and 0.7,
respectively. If we choose the Skj ∈ Ψj for the j-th treatment
item (1 ≤ j ≤ 6), the corresponding epidemic control effect on
the case is empirically estimated as:
E(k1 , ...k6 ) = (0.4e1,k1+0.6e2,k2 )e3,k3 (0.2e4,k4+0.8e5,k5 )e6,k6
(1)
The hospital is capable of treating a set D =
{D1 , D2 , . . . , Dm } of m diseases. Similarly, for each disease
Di , the set of supplies that must be used is denoted by Ψi,0 ,
and the set of supplies that are alternative in Ji treatment
items are denoted by Ψi,1 , Ψi,2 , . . . , Ψi,Ji , respectively. The
quantity of each Sk ∈ Ψi,0 required to treat a case is qi,0,k ,
and the quantity of each alternative Sk ∈ Ψi,j required to treat
a case is qi,j,k . Different alternatives have different treatment
effects. The treatment effect of using Sk ∈ Ψi,j is estimated
as ei,j,k . If we choose the Skj ∈ Ψi,j for the j-th treatment

item (1 ≤ j ≤ Ji ), the corresponding treatment effect on the
case is empirically estimated by a therapeutic effect function
Ei (k1 , k2 , ..., kJi ). Like Eq. (1), the typical expression of Ei
is a weighted sum or product of ei,j,k [43].
B. Number of Cases
Let T be the procurement decision cycle. In our case studies,
the hospital procures medical supplies every 15 days. The
supply quantities are determined based on the estimation of
the number of hospital visits in the next decision cycle. For
the number of cases of each disease Di , we estimate three
values: the expected value ri , lower limit (optimistic value)
ri , and upper limit (pessimistic value) ri . The values can be
obtained based on historical morbidity data and environmental
influence factors [44]–[47].
The number of suspected cases of epidemic infection is
estimated based on the number of hospital visits of different
diseases. For each disease Di , we estimate a probability pi
that a patient of Di is a suspected case of COVID-19. In
general, a disease having more similar symptoms with the
epidemic has a higher pi . For example, an acute respiratory
infectious disease has a high pi . For a disease (such as fracture)
that is unrelated to the epidemic, we set pi to the current
incidence pe of infection (including suspected infection) in
the local region. We also estimate an average number ri0 of
accompanying persons of a patient of Di ; in general, a critical
disease has a large ri0 . The probability that an accompanying
person of a patient of Di is a suspected case of COVID-19
is p0i , which is set to 0.5pi if Di has similar symptoms with
the epidemic and pe otherwise. The total number of suspected
cases of infection in the next decision cycle is estimated as
follows (we use ri as we take a serious or pessimistic view of
epidemic control):
r0 =

m
X

(pi + p0i ri0 )ri

(2)

i=1

C. Objective Function Evaluation
A solution to the medical supplies procurement problem
can be represented by a (n + n0 )-dimensional vector x =
{x1 , . . . , xn , xn+1 , . . . , xn+n0 }. The fitness of x is evaluated by
two objective functions: (1) the epidemic control effect Υ(x),
which is the sum of treatment effects of all suspected cases
of infection; (2) the common disease treatment effect Υ0 (x),
which is the weighted sum of treatment effects of all common
cases, where the weight of each Di is wi . It is assumed that the
arrival time of cases follows a uniform distribution. That is, for
each disease Di , as the expected number of cases in a decision
cycle of 15 days is ri , then there is a case arriving every
(15× hw )/ri hours, while hw is the daily working hours (24
for emergency diseases and 8 for non-emergency diseases in
our study). Moreover, there is one suspected case of infection
in every 1/(pi + p0i ri0 ) cases of Di .
A general principle of disease treatment is “focusing on
the current patient”, i.e., whenever a new case arrives, the
physician always chooses the most effective supply from
the available alternatives, as he does not know how many

4

TABLE I
A LTERNATIVE SUPPLIES FOR EPIDEMIC CONTROL IN THIS STUDY.
Items

Body protection
protective clothing
impermeable gown
Supplies
normal gown

Face protection
Detection
Oxygen therapy
face shield
nucleic acid kit high-flow nasal cannula
N95 mask+goggle
antibody kit
nasal cannula
surgical mask+goggle
oxygen mask

cases would come later. Based on this first-come-first-served
discipline, we sort supplies in Ψj (1 ≤ j ≤ 6) or Ψi,j
(1 ≤ i ≤ m; 1 ≤ j ≤ Ji ) in nonincreasing order of ej,k or ei,j,k ,
and simulate the arrival and treatment of all cases according
to the procedure shown in Algorithm 1 to calculate the values
of Υ(x) and Υ0 (x). In Algorithm 1, the boolean variable tr
denotes whether the remaining supplies are capable of treating
a suspected case of epidemic infection, and tri denotes whether
the remaining supplies are capable of treating a case of Di .

Algorithm 1: Procedure for evaluating the effects of
epidemic control and disease treatment for the original
problem.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36

Initialize Υ = 0, tr = true;
for i = 1 to m do initialize Υi = 0, tri = true;
;
for k = 1 to n+n0 do ak ← ak +xk ;
;
Start timing simulation;
while the decision cycle is not complete do
if a new case of Di arrives and tri = true then
foreach Sk ∈ Ψi,0 do
ak ← ak − qi,0,k ;
if ak < qi,0,k then tri ← false;
;
for j = 1 to Ji do
let Sk be the first supply in Ψi,j ;
while ak < qi,j,k do
Remove Sk from Ψi,j ;
if Ψi,j = ∅ then tri ← false;
;
let kj = k;
ak ← ak − qi,j,k ;
Υi ← Υi + Ei (k1 , . . . , kJi );
if the case is a suspected infected case and tr = true then
foreach Sk ∈ Ψ0 do
ak ← ak − q0,k ;
if ak < q0,k then tr ← false;
;
for j = 1 to 6 do
let Sk be the first supply in Ψj ;
while ak < qj,k do
Remove Sk from Ψj ;
if Ψj = ∅ then tr ← false;
;
ak ← ak − qj,k ;
let kj = k;
Υ ← Υ + E(k1 , . . . , k6 );
P
return Υ(x) = Υ and Υ0 (x) = m
i=1 wi Υi .

Antivirus
α-interferon
lopinavir
chloroquine phosphate
arbidol

Disinfectant
peroxide
chlorine-containing
alcohols

D. Constraints
A procurement solution x must satisfy problem constraints.
First, the total procurement cost cannot exceed the budget C:
0
n+n
X

ck xk ≤ C

(3)

k=1

The hospital should perform its normal functions. In this
study, it is required that the hospital is able to treat ri (the
lower number) cases of each disease Di . These constraints
can be tested by simulating the arrival and treatment of the
lower numbers of cases in Algorithm 1: if any new case cannot
be treated, i.e., whenever the condition tri = false (Line 6 of
Algorithm 1) is triggered while the number of simulated cases
of Di is less than ri , the constraint is violated.
It is also required that the hospital is able to treat r0
suspected cases of infection. Whenever the condition tr = false
(Line 18) in Algorithm 1 is triggered, the constraint is violated.
III. BASIC E VOLUTIONARY O PTIMIZATION M ETHODS
For the above (n+n0 )-dimensional, constrained bi-objective
optimization problem, we can use evolutionary constrained
multiobjective algorithms to search for the Pareto optimal
solutions. The search range of each dimension k is [xk , xk ].
The lower limit xk is set to the total quantity of Sk required
in non-alternative treatment items for all cases:

max(0, P
rq0,k − ak ),
1≤k≤n
xk =
m
max(0, i=1 ri qi,0,k − ak ),
n+1 ≤ k ≤ n+n0
(4)
The upper limit xk can be set to the total required quantity
of Sk under the assumption that Sk is always chosen whenever
Sk is an alternative. That is, if 1 ≤ k ≤ n, we set
X

xk =
rqj 0 ,k − ak
(5)
0
j ∈{j|0≤j≤6∧Sk ∈Φj }

Otherwise, we set
X
xk =
0 0


ri0 qi0 ,j 0 ,k − ak
(i ,j )∈{(i,j)|1≤i≤m∧0≤j≤Ji ∧Sk ∈Φi,j }
(6)
We adopt the following five well-known evolutionary constrained multiobjective algorithms to solve the problem:
•
•

•

The nondominated sorting genetic algorithm II (NSGAII) with the constrained-domination principle [48].
The constrained multiobjective evolutionary algorithm
(CMOEA) based on an adaptive penalty function and a
distance measure [49].
The multiobjective evolutionary algorithm based on decomposition (MOEA/D) [22] with a penalty function for
constrain handling [26].

5

The differential evolution with self-adaptation and local search for constrained multiobjective optimization (DECMOSA) [50], which combines constraineddomination and penalty function for constrain handling.
• The multi-objective particle swarm optimizer based on
dominance with decomposition (D2 MOPSO) [38].
CMOEA, MOEA/D, and DECMOSA employ penalty functions for constrain handling.
Violation of constraint (3) is
Pn+n0
calculated as max(0, k=1 ck xk − C). For constraints that
all suspected cases of infection and the lower number of cases
of each common disease must be treated, we set the violation
of each constraint equal to the budget C, i.e., the violation is
C times the number of false tri and tr in Algorithm 1.
Nevertheless, the performance of all the above algorithms is
not satisfying, mainly because the dimension (n+n0 ) is very
high (approximately 10,000∼40,000 in a major hospital in our
case studies) and the evaluation of a solution using Algorithm
1 is computationally expensive.
•

IV. A N EW T RANSFORM - AND -D IVIDE E VOLUTIONARY
O PTIMIZATION M ETHOD
In this section, we propose a new transform-and-divide
approach to efficiently solve the problem. First, we transform the original high-dimensional, constrained bi-objective
optimization problem to a low-dimensional, unconstrained biobjective optimization problem, which can be solved using
evolutionary (unconstrained) multiobjective algorithms. The
evaluation of each solution to the transformed problem can
be divided into a set of low-dimensional, single-objective
optimization subproblems, which can be solved using a tabu
search algorithm.
A. Problem Transformation
We transform the original problem of determining the
purchase quantity of each supply to a problem of determining
the purchase budget for epidemic control and the purchase
budget for each disease. First of all, we calculate the cost for
purchasing the supplies that must be used in the non-alternative
treatment items and, therefore, obtain the remaining budget as:
0

C =C−

0
n+n
X

ck xk

(7)

2) If there is no remaining case, set y0 = 0;
3) Else, for each remaining case, always purchase the cheapest supply among the alternatives, and set y0 to the total
purchase cost.
And the upper limit y0 of budget y0 can be obtained using
the following steps:
1) Treat each suspected case in the most effective way, i.e,
always select the supply with the maximum treatment
effect ej,k among the alternatives, and calculate the total
required quantity of each supply;
2) Calculate the purchase quantity of each supply, and set
y0 to the total purchase cost.
Therefore, the search range of y0 is limited to [y0 , y0 ]. We
can obtain the search range [yi , yi ] of each yi in a similar
manner. In our case studies, the average value of (yi −yi ) is
approximately 95 (in unit of 100 RMB), while that of (xk−xk )
is approximately 1100 (in minimum order quantity).
B. Problem Division
The solution space of the transformed problem is significantly smaller than that of the original problem. But how to
evaluate a solution y = {y0 , y1 , . . . , ym } to the transformed
problem? The task can be divided into m+1 optimization subproblems. The first subproblem is to determine the purchase
quantities under the budget y0 so as to maximize the epidemic
control effect. Each of the remaining m subproblems is to
determine the purchase quantities under the budget yi so as to
maximize the treatment effect of disease Di (1 ≤ i ≤ m).
However, the division leads to difficulty in allocating
supplies in storage to different diseases. We overcome this
difficulty by employing a procedure similar to Algorithm 1
to simulate the arrival and treatment of all cases. But the
procedure has two differences from Algorithm 1:
• Initially, we only consider supplies in storage, i.e., Line
3 of Algorithm 1 is not executed.
• If there is no supply in storage that can be used for a
treatment item (i.e., the condition in Line 14 or Line 26
is satisfied), we temporarily purchase “in advance” the
cheapest alternative supply for the item.
The procedure also produces the “cheapest” solution to each
subproblem, which can be evolved to an optimal or nearoptimal solution, as described in the next subsection.

k=1

Consequently, the transformed problem is to distribute C 0
to m+1 components, denoted by {y0 , y1 , . . . , ym }, where y0
is the budget for purchasing alternative supplies for epidemic
control, and yi is the budget for purchasing alternative supplies
for treating disease Di (1 ≤ i ≤ m). The dimension of the
transformed problem is m (approximately 200∼600 in a major
hospital in our case studies), which is significantly smaller than
the dimension n+n0 of the original problem.
Moreover, the search range of each dimension of the transformed problem is also much smaller than that of the original
problem. For epidemic control, the lower limit y0 of budget
y0 can be obtained using the following steps:
1) Use supplies in storage to treat as many suspected cases
of infection as possible;

C. Hybrid Evolutionary Optimization
The proposed method employs an evolutionary multiobjective algorithm to evolve a population of main solutions to the
transformed problem, and employs a tabu search algorithm to
solve the subproblems for evaluating each main solution.
For the first subproblem, each solution z can be represented
by six vectors as follows (the vector lengths do not need to
be the same):
{z1,1 , z1,2 , . . . , z1,|Ψ1 | }
{z2,1 , z2,2 , . . . , z2,|Ψ2 | }
..
.
{z6,1 , z6,2 , . . . , z6,|Ψ6 | }

6

where zj,k denotes the number of cases that use the k-th
alternative supply for the j-th treatment item, and each vector
P|Ψj |
satisfies
k=1 zj,k = r0 .
The procedure described in Sec. IV-B produces the cheapest
solution to the subproblem, denoted by z† . First, we continually use the following steps to improve z† by replacing
an alternative supply to a more effective alternative for a
randomly selected case until z† cannot be further improved:
1) Randomly selecting two components zj,k and zj,k0 in a
vector satisfying zj,k0 > 0;
2) Set zj,k0 = zj,k0 −1 and zj,k = zj,k +1 if doing so would
not violate the budget constraint.
Starting from the improved z† , the tabu search algorithm
continually uses the following steps to search around and
improve z† until the stopping condition is satisfied:
1) Generate kN neighboring solutions of the current z† , each
being obtained by randomly selecting two components
zj,k and zj 0 ,k0 satisfying k < |Ψj |, k 0 < |Ψj 0 |, zj,k > 0, and
zj 0 ,k0 +1 > 0, and setting zj,k = zj,k−1, zj,k+1 = zj,k+1+1,
zj 0 ,k0 = zj 0 ,k0 +1, and zj 0 ,k0 +1 = zj 0 ,k0 +1 −1, if doing so
would not violate the budget constraint;
2) Select the best neighbor that is not tabued or is better
than the current z† , make z† move to this neighbor, and
add this move to the tabu list.
The remaining m subproblems can be solved by tabu search
in a similar way. As demonstrated by the experiments, the
tabu search algorithm can quickly obtain optimal solutions
for most subproblem instances, given that the dimensions of
the subproblems are relatively small. For example, as we can
observe from Table I, the dimension of the first subproblem
is 18 (note that the last dimension of each vector can be
determined by other dimensions of the vector, and the actual
dimension in the solution space is only 12). Therefore, the
tabu search algorithm is very suitable for the subproblems, as
it will be invoked many times to evaluate main solutions.
For the main transformed problem, we adopt the following
evolutionary multiobjective algorithms to evolve main solutions and invoke the tabu search algorithm:
•
•
•
•

NSGA-II [48].
MOEA/D [22].
A differential evolution for multiobjective optimization
with self-adaptation (DEMOwSA) [51].
A multiobjective particle swarm optimization (MOPSO)
algorithm [52] which extends comprehensive learning
[53] for multiobjective optimization.

D. Complexity Analysis
In this subsection, we theoretically compare the complexities of the original problem and the transformed problem.
For notational simplicity, we regard suspected infection as
a disease with subscript i = 0. The number of all possible
solutions to the original problem is
N=

0
n+n
Y

k=1

(xk − xk )

(8)

And the algorithm 1 for evaluating each solution to the
original problem has a time complexity
O(f ) =

Ji
m X
X

ri |Φi,j |

(9)

i=0 j=0

After transformation, the number of all possible solutions
to the new problem is
N0 =

m
Y

(yi − yi )

(10)

i=0

To evaluate each solution to the transformed problem, we
need to solve m + 1 subproblems. The number of possible
solutions to the i-th subproblem is
Ji |Φ
i,j |
Y
Y
Ni =
(zj,k − zj,k )

(11)

j=0 k=1

where zj,k and zj,k denote the upper and lower limits of
decision variable zj,k .
And the time complexity of evaluating each solution to the
i-th subproblem is
O(fi ) =

Ji
X

ri |Φi,j |

(12)

j=0

Consequently, P
the total time complexity
of the transformed

m
problem is N 0
N
O(f
)
,
while
that
of the original
i
i
i=0
problem is N · O(f ), and the complexity reduction ratio of
transformation is

log N ·O(f )

Pm
Rc =
(13)
log N 0 ( i=0 Ni O(fi ))
As the expressions of N , N 0 , Ni , O(f ) and O(fi ) are
complicated, in practice, we can use the average range x
b of
c of all PJi |Φi,j |
all (xk − xk ) in Eq. (8), the average |Φ|
j=0
in Eqs. (9) and (12), the average yb of all (yi − xi ) in Eq. (10),
m
P
and the average zb of all (zj,k − zj,k ) in Eq. (11). Let r =
ri
be the number of all cases, we have
0
c
log x
bn+n r|Φ|
Rc ≈
c c
log ybm zb|Φ| r|Φ|
=

c
(n+n0 ) log x
b + log(r|Φ|)
c log zb + log(r|Φ|)
c
m log yb + |Φ|

i=0

(14)

In our case studies, the average values are x
b ≈ 1100, yb ≈ 95,
c ≈ 37, n + n0 ≈ 25000, and m ≈ 450. Therefore,
zb ≈ 66, |Φ|
the average complexity reduction ratio on the instances is
approximately 58.
V. C OMPUTATIONAL R ESULTS
A. Problem Instances
We use the proposed method for medical supplies procurement in Zhejiang Hospital of Traditional Chinese Medicine
(ZJHTCM) from 15 Feb to 15 Apr, 2020, the peak of COVID19 in Zhejiang Province, China. Since 15 Mar, we also extend
the application to other five hospitals (denoted by H1–H5).

7

Therefore, there are 14 real-world instances of the medical
supplies procurement problem. Table IIPsummarizes the main
characteristics of the instances, where i ri denotes the total
expected number of cases of all common diseases, J denotes
the average treatment items per disease, |Φ| denotes the
average number of alternatives per treatment item, and the
budget C is in RMB. The instances are solved on a workstation
with an i7-6500 2.5GH CPU, 8GB DDR4 RAM, and an
NVIDIA Quadro M500M card.
B. Performance for Solving the Subproblem
Before testing the algorithms for solving the main problem,
we first test the performance of the tabu search algorithm
for subproblems. From the above real-world main problem
instances, we select 16 subproblem instances, the dimensions
D of which range from 12 to 72. For the algorithm, we set
the neighborhood size kN to 2D, tabu length to 12, and the
maximum number of iterations to 50D. On each instance, we
run the algorithm 50 times to test whether and how long it
can obtain the exact optimal solution (validated by an exact
branch-and-bound algorithm [54]).
Fig. 1 presents the convergency curves (averaged over the 50
runs) of the tabu search algorithm on the subproblem instances.
The algorithm reaches the optima within 100 iterations (10 ms
in our computing environment) when the problem dimension
is smaller than 24, within 200 iterations (30 ms) when the
dimension is smaller than 40, and within 400 iterations (120
ms) on all instances. In our case studies, the average dimension
of the instances is approximately 37, which can be solved
using approximately 160 iterations (25 ms); the dimension
of the largest instance is 72, which can be solved using 369
iterations (116 ms). Using multithreading and GPU acceleration, the average CPU time for evaluating a main solution to
a problem of 400 diseases is approximately 600 ms.
C. Performance for Solving the Original and Transformed
Problems
For each main problem instance, we use five evolutionary constrained multiobjective algorithms, including NSGAII with constraint handling (denoted by NSGA-II-C) [48],
CMOEA [49], MOEA/D with constraint handling (denoted
by MOEA/D-C) [26], DECMOSA [50], and D2 MOPSO [38],
to solve the original problem; we also use four evolutionary
multiobjective algorithms, including NSGA-II [48], MOEA/D
[22], DEMOwSA [51], and MOPSO [52], all combined with
tabu search, to solve the transformed problem. The control
parameters of all algorithms are tuned on the whole set of
instances. For a fair comparison, all the algorithms use the
same stopping criterion that the CPU time does not exceed
90 minutes, which is also applied in our practice. On each
instance, each algorithm is run 30 times.
Fig. 2 compares the hyperarea (the area under the Paretoapproximated front in objective space, also known as the
hypervolume) [55], [56] obtained by each algorithm on each
main problem instance. It is clear that the last four algorithms
using transform-and-divide exhibit significant performance advantages over the first five algorithms. On large-size instances

of ZJHTCM and H5, the median hyperareas of the four
transform-and-divide EAs are approximately eight to ten times
of those of the basic EAs; on the other instances, the median
hyperareas of the transform-and-divide EAs are approximately
six to eight times of those of the basic EAs. In general,
the performance of the transform-and-divide EAs is mainly
affected by m (the number of diseases) and C (the total
budget), while that of the basic EAs is mainly affected by n+n0
(the number of supplies). This is why all algorithms obtain
relatively high hyperareas on the instances of H1 and H2,
where m, n+n0 , and C are relatively small. Nevertheless, the
performance advantages of the transform-and-divide EAs over
the basic EAs are very significant on these relatively smallsize instances. On the last two instances of H5, the values of
these parameters are large, and the performance advantages of
the transform-and-divide EAs over the basic EAs are not so
significant. On each instance, the minimum hyperareas of the
transform-and-divide EAs are still significantly larger (about
four to five times) than the maximum hyperareas of the basic
EAs. The results demonstrate that the proposed transform-anddivide method can greatly reduce the difficulty of solving the
complex original problem.
We also make a pairwise comparison between each
transform-and-divide EA and its constrained version for the
original problem, e.g., NSGA-II vs. NSGA-II-C, NSGAII vs. CMOEA, MOEA/D vs. MOEA/D-C, DEMOwSA vs
DECMOSA, and MOPSO vs D2 MOPSO. That is, in each
pair, the first is an unconstrained multiobjective EA used in
transform-and-divide, and the second is a multiobjective EA
adding constraint handling mechanisms (such as constraineddomination or penalty functions) to the first one. The comparison is made based on the ratio of the hyperarea obtained
by the first algorithm to the maximum hyperarea obtained
by the second algorithm. Fig. 3 presents the changes of
hyperarea ratios over the CPU time on each problem instance.
In general, it takes about five minutes for a transform-anddivide EA to reach the maximum hyperarea obtained by
its counterpart after 90 minutes; on large-size instances of
ZJHTCM and H5, the ratio is between 3 and 4 at ten
minutes and exceeds 5 before twenty minutes; on the other
instances, the ratio is approximately 2 at ten minutes and
between 3 and 4 at twenty minutes. The high hyperarea ratios
demonstrate that the transform-and-divide EAs approximate
the Parato front of the problem significantly more efficiently
than the basic EAs, mainly because the transform-and-divide
strategy significantly reduces the solution space, and also
because the unconstrained EAs for the transformed problem
can explore the solution space more effectively than their
constrained versions. Comparatively, the ratios of NSGA-II
vs. its counterparts (NSGA-II-C using constrained-domination
and CMOEA using a penalty) grow more slowly than those of
DEMOwSA and MOPSO vs. their counterparts in early stages
of evolution. As there is no significant difference among the
five basic EAs for the original problem, the results indicate
that DEMOwSA and MOPSO are more efficient in exploring
the solution space to approximate the Parato front of the
transformed problem.
Besides the hyperarea metric, we also compare the al-

8

TABLE II
S UMMARY OF THE REAL - WORLD INSTANCES OF THE MEDICAL SUPPLIES PROCUREMENT PROBLEM .
P
Hospital
Period
m
n+n0
r0
J
|Φ|
C
i ri
2nd half Feb
476
32,535
71,196
64
5.84
7.27
3,516,000
476
32,416
76,580
38
5.84
7.27
3,378,000
1st half Mar
ZJHTCM
2nd half Mar 479
32,628
78,331
34
5.86
7.29
3,022,000
1st half Apr
479
32,628
90,459
36
5.86
7.32
3,698,000
2nd half Mar 162
17,522
8,208
4
7.46
5.41
521,000
H1
162
17,510
13,640
3
7.46
5.41
830,000
1st half Apr
15,666
17,353
24
8.06
5.25
785,000
2nd half Mar 193
H2
1st half Apr
193
15,681
19,309
14
8.06
5.25
902,500
2nd half Mar 328
24,469
32,052
14
7.84
5.87
1,682,000
H3
1st half Apr
328
24,469
42,667
17
7.84
5.97
2,127,000
27,600
35,733
50
6.90
6.13
2,415,500
2nd half Mar 393
H4
1st half Apr
399
27,215
38,452
28
6.87
6.14
2,607,200
35,906
60,900
27
6.66
5.36
3,920,000
2nd half Mar 573
H5
1st half Apr
573
34,902
75,393
30
6.66
5.48
4,818,000
0

0.7

1.4

2.1

2.8

3.5

55

0

ms

1.5

2.25

3

3.75

ms

f*

45

f*

50

0.75

50
40

45

35

40

30

35

25

iter

30
0

10

0

2

20

30

40

20
0

50

10

(a) D = 12
4

6

20

30

iter

40

10

0

ms

f*

50

2.5

5

7.5

10

75

ms

f*

65

80

0

25

(e) D = 24
0

6

12

18

24

30

0

ms

f*

40
30
20

iter

10
0

40

80

120

13

26

39

52

75

iter

100

160

65

8

16

24

32

(m) D = 55

15

f*

iter
0

25

50

8

16

75

24

100

32

40

48

60

150

200

50

iter

20

40

60

80

75

f*

50

100

150

200

100

0
240

4

0

ms

20

40

60

320

400

(n) D = 60

iter

60

75

80

8

12

16

20

ms

f*

30

60

90

iter

120

150

12

24

36

48

60

72

ms

f

*

iter

10
0

60

120

180

240

300

(l) D = 50
100

0

60

ms

50

iter

45

60

250

20

40

60

80

100 120

90

ms

75

f*

f*

60

30

45

20

30

10
160

0

30

40

iter
0

40

80

15

(k) D = 46

f*

0

0

50

10

250

6

ms

0

ms

20

100

5

(h) D = 34

30

50

4

f*

0

125

20
0

3

80
70
60
50
40
30
20
10

30

10

2

(d) D = 21
12

20

15
300

9

ms

0

30

240

6

10

40

45

180

75

30

60

iter

60

60

125

f * ms

0

*

45

40

78

f

120

3

30

40

200

ms

60

0

(j) D = 42

90
80
70
60
50
40
30
20
10
0

15

1

50
45
40
35
30
25
20
15

(g) D = 30

60

(i) D = 38
0

50

50

50

0

ms

iter
0

(f) D = 27

70
60

f

5.4
*

20

15

100

4.5

30

25
60

3.6

40

35

40

2.7

50

45

iter

1.8

(c) D = 18
12.5

55

20

0.9

(b) D = 15
8

55
50
45
40
35
30
25
20
15
0

0
90
80
70
60
50
40
30
20

15

iter

0
0

80

160

240

(o) D = 66

320

400

0
0

80

160

240

320

iter

400

(p) D = 72

Fig. 1. Convergency curves of the tabu search algorithm on subproblem instances. The bottom horizontal axis is the number of iterations, the top horizontal
axis is the CPU time (in milliseconds), the vertical axis is the objective function value, and f ∗ is the exact optimal objective function value.

gorithms in terms of the coverage (Cov) metric [55], i.e.,
Cov(X, X 0 ) is the fraction of solution set X obtained by an
algorithm that are strictly dominated by at least one solution

of set X 0 obtained by another algorithm. The results are clear
that 100% solutions obtained by the basic EA are dominated
by at least a solution obtained by its transform-and-divide

9

1

Q1

Min

Median

Max

Q3

1

Q1

Min

Median

Max

Q3

1

Q1

Min

Median

Max

Q3

1

0.8

0.8

0.8

0.8

0.6

0.6

0.6

0.6

0.4

0.4

0.4

0.4

0.2

0.2

0.2

0.2

0

0

0

0

(a) ZJHTCM, 1st half Mar
1

Q1

Min

Median

Max

Q3

(b) ZJHTCM, 2nd half Mar
1

Q1

Min

Median

Max

Q3

(c) ZJHTCM, 1st half Apr
1

Q1

Min

Median

Max

Q3

1

0.8

0.8

0.8

0.6

0.6

0.6

0.6

0.4

0.4

0.4

0.4

0.2

0.2

0.2

0.2

0

0

0

0

1

Q1

Min

Median

Max

(f) H1, 1st half Apr
Q3

1

Q1

Min

Median

Max

(g) H2, 2nd half Mar
Q3

1

Q1

Min

Median

Max

Q3

1

0.8

0.8

0.8

0.6

0.6

0.6

0.6

0.4

0.4

0.4

0.4

0.2

0.2

0.2

0.2

0

0

0

0

(j) H3, 1st half Apr
1

Q1

Min

Median

Max

(k) H4, 2nd half Mar
Q3

1

0.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0

(m) H5, 2nd half Mar

Q1

Min

Median

Max

Median

Max

Q3

Q1

Min

Median

Max

Q3

(h) H2, 1st half Apr

0.8

(i) H3, 2nd half Mar

Min

(d) ZJHTCM, 1st half Apr

0.8

(e) H1, 2nd half Mar

Q1

Q1

Min

Median

Max

Q3

(l) H4, 1st half Apr
Q3

(n) H5, 1st half Apr

Fig. 2. Comparison of hyperareas obtained by the algorithms on main problem instances. Each box plot shows the maximum, minimum, median, first quartile
(Q1), and third quartile (Q3) of hyperareas over the 30 runs of an algorithm.

counterpart, while none of solutions obtained by the transformand-divide EA is dominated by at least a solution obtained by

the corresponding basic EA. Consequently, decision-makers
always prefer to adopt solutions produced by transform-and-

10

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

10

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

12

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

12

10

10

8

8

6

6

4

4

2

2

2

0

0

8
6
4

0

10

20

30

40

50

60

70

80

90

10

10

20

30

40

50

60

70

80

90

0

10

(b) ZJHTCM, 2nd half Mar

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

10

8

8

6

6

4

4

2

2

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

0
0

(a) ZJHTCM, 1st half Mar
NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

20

30

40

50

60

70

80

90

(c) ZJHTCM, 1st half Apr
NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

8

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

6
4

0

2
0

0
0

10

20

30

40

50

60

70

80

90

0

10

20

(d) ZJHTCM, 1st half Apr
NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

6

30

40

50

60

70

80

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

6
5

4

4

3

3

2

2

1

1

0
20

30

40

50

60

70

80

90

6

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

8

10

20

30

40

50

60

70

80

0

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

20

30

40

50

60

70

80

90

10

20

30

40

50

60

70

80

90

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

5
4
3
2
1
0
0

10

20

(j) H3, 1st half Apr

30

40

50

60

70

80

90

0

10

20

(k) H4, 2nd half Mar

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

10

90

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

6

0
10

80

(i) H3, 2nd half Mar

2

0

0

90

4

1

70

0
0

6

2

60

2

8

3

50

4

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

4

40

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

(h) H2, 1st half Apr

5

30

6

(g) H2, 2nd half Mar
NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

20

(f) H1, 1st half Apr

0
10

10

(e) H1, 2nd half Mar

5

0

0

90

NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

NSGA-II vs NSGA-II-C
MOEA/D vs MOEA/D-C
MOPSO vs D2MOPSO

8

8

30

40

50

60

70

80

90

(l) H4, 1st half Apr
NSGA-II vs CMOEA
DEMOwSA vs DECMOSA

6

6
4
4
2

2
0

0
0

10

20

30

40

50

60

(m) H5, 2nd half Mar

70

80

90

0

10

20

30

40

50

60

70

80

90

(n) H5, 1st half Apr

Fig. 3. Pairwise comparison between each unconstrained multiobjective EA used in transform-and-divide and its constrained counterpart for the original
problem. The vertical axis is the ratio of the hyperarea obtained by the first algorithm to the maximum hyperarea obtained by the second algorithm, and the
horizontal axis is the CPU time (in minutes).

11

divide EAs, while solutions obtained by the basic EAs can
hardly provide reference. In practice, decision-makers choose
final solutions for implementation as follows:
• The best solutions of MOEA/D on the fourth instance of
ZJHTCM and the second instance of H4.
• The best solutions of DEMOwSA on the second instance
of ZJHTCM, the second instance of H1, the second
instance of H2, the second instance of H3, and the second
instance of H5.
• The best solutions of MOPSO on the remaining seven
instances.
VI. C ONCLUSION
This paper presents a transform-and-divide evolutionary
optimization approach to medical supplies procurement under
the background of COVID-19. Our approach first transforms
the original high-dimensional, constrained multiobjective optimization problem to a low-dimensional, unconstrained multiobjective optimization problem, and then evaluates each
solution to the transformed problem by solving a set of
simple single-objective optimization subproblems, such that
the problem can be efficiently solved by existing evolutionary multiobjective algorithms. We applied the transform-anddivide evolutionary optimization approach to six hospitals
in Zhejiang Province, China, during the peak of COVID19. Results showed that our approach exhibits significantly
better performance than that of directly solving the original
problem. Decision-makers of the hospitals always choose the
best solutions produced by the transform-and-divide method
for implementation and achieve promising results in balancing
epidemic control and common disease treatment in practice.
The proposed transform-and-divide evolutionary optimization based on problem-specific knowledge can be an efficient
solution approach to many other complex problems. For
example, considering a problem of personalizing healthcare
solutions for a large number of residents. As the number
of candidate healthcare medicines and treatment items are
large, the dimension of the problem is high. However, by
clustering the residents based on their health status and limit
the medicines and treatment items to each cluster, the problem
dimension can be significantly reduced, and we can solve
the subproblem of personalizing healthcare solutions for each
cluster much more efficiently. Another example is to distribute
m types of disaster relief supplies from n1 suppliers to n2
demanders, we need to determine the quantity of each supply
from each supplier to each demander. The dimension of
the problem is mn1 n2 . However, we can establish a virtual
“intermediary” and transform the problem to a new problem
of determining the quantity of each supply from each supplier
to the intermediary and that from the intermediary to each demander. Therefore, the dimension of the transformed problem
is m(n1+n2 ), but we need to solve additional subproblems of
determining at the intermediary which parts of supplies should
be sent to each demander. In many cases, the transform-anddivide strategy can greatly reduce the difficulty of problemsolving, but it often requires effective discovery and utilization
of problem-specific knowledge for problem transformation

and division. Although EAs are regarded as robust problemindependent search heuristics for a large variety of optimization problems [57], [58], we argue that proper exploitation of
problem-dependent knowledge can significantly improve the
efficiency of EAs in solving highly complex problems and,
therefore, enlarge the application field of EAs.
R EFERENCES
[1] G. B. Dantzig and P. Wolfe, “Decomposition principle for linear programs,” Oper. Res., vol. 8, pp. 101–111, 1960.
[2] H. Mühlenbein and T. Mahnig, “FDA - a scalable evolutionary algorithm
for the optimization of additively decomposed functions,” Evol. Comput.,
vol. 7, no. 4, pp. 353–376, 1999.
[3] S. Strasser, J. Sheppard, N. Fortier, and R. Goodman, “Factored evolutionary algorithms,” IEEE Trans. Evol. Comput., vol. 21, no. 2, pp.
281–293, 2017.
[4] Y. Zheng and J. Xue, “A problem reduction based approach to discrete
optimization algorithm design,” Computing, vol. 88, no. 1-2, pp. 31–54,
2010.
[5] M. A. Potter and K. A. De Jong, “Cooperative coevolution: An architecture for evolving coadapted subcomponents,” Evol. Comput., vol. 8,
no. 1, pp. 1–29, Mar. 2000.
[6] Z. Yang, K. Tang, and X. Yao, “Large scale evolutionary optimization
using cooperative coevolution,” Informat. Sci., vol. 178, no. 15, pp.
2985–2999, 2008.
[7] R. Chandra, “Competition and collaboration in cooperative coevolution
of elman recurrent neural networks for time-series prediction,” IEEE
Trans. Neural Netw. Learn. Syst., vol. 26, no. 12, pp. 3123–3136, 2015.
[8] X.-M. Hu, F.-L. He, W.-N. Chen, and J. Zhang, “Cooperation coevolution with fast interdependency identification for large scale optimization,” Informat. Sci., vol. 381, pp. 142–160, 2017.
[9] Q. Yang, W. Chen, and J. Zhang, “Evolution consistency based decomposition for cooperative coevolution,” IEEE Access, vol. 6, pp. 51 084–
51 097, 2018.
[10] J. Gomes, P. Mariano, and A. L. Christensen, “Dynamic team heterogeneity in cooperative coevolutionary algorithms,” IEEE Trans. Evol.
Comput., vol. 22, no. 6, pp. 934–948, 2018.
[11] Y. Wang, H. Liu, F. Wei, T. Zong, and X. Li, “Cooperative coevolution
with formula-based variable grouping for large-scale global optimization,” Evol. Comput., vol. 26, no. 4, pp. 569–596, 2018.
[12] S. Mahdavi, S. Rahnamayan, and M. Shiri, “Incremental cooperative
coevolution for large-scale global optimization,” Soft Comput,, vol. 22,
pp. 2045–2064, 2018.
[13] X. Peng, Y. Jin, and H. Wang, “Multimodal optimization enhanced cooperative coevolution for large-scale optimization,” IEEE Trans. Cybern.,
vol. 49, no. 9, pp. 3507–3520, 2019.
[14] X. Peng, K. Liu, and Y. Jin, “A dynamic optimization approach to
the design of cooperative co-evolutionary algorithms,” Knowledge-Based
Syst., vol. 109, pp. 174–186, 2016.
[15] X. Zhang, Y. Gong, Y. Lin, J. Zhang, S. Kwong, and J. Zhang, “Dynamic
cooperative coevolution for large scale optimization,” IEEE Trans. Evol.
Comput., vol. 23, no. 6, pp. 935–948, 2019.
[16] Y.-J. Zheng and S.-Y. Chen, “Cooperative particle swarm optimization
for multiobjective transportation planning,” Appl. Intell., vol. 39, no. 1,
pp. 202–216, 2013.
[17] S. Nguyen, M. Zhang, M. Johnston, and K. C. Tan, “Automatic design
of scheduling policies for dynamic multi-objective job shop scheduling
via cooperative coevolution genetic programming,” IEEE Trans. Evol.
Comput., vol. 18, no. 2, pp. 193–208, 2014.
[18] L. Sun, L. Lin, M. Gen, and H. Li, “A hybrid cooperative coevolution
algorithm for fuzzy flexible job shop scheduling,” IEEE Trans. Fuzzy
Syst., vol. 27, no. 5, pp. 1008–1022, 2019.
[19] X. Ma, X. Li, Q. Zhang, K. Tang, Z. Liang, W. Xie, and Z. Zhu, “A
survey on cooperative co-evolutionary algorithms,” IEEE Trans. Evol.
Comput., vol. 23, no. 3, pp. 421–441, 2019.
[20] Y. Zheng, Y. Du, H. Ling, W. Sheng, and S. Chen, “Evolutionary
collaborative human-UAV search for escaped criminals,” IEEE Trans.
Evol. Comput., vol. 24, no. 2, pp. 217–231, 2020.
[21] R. P. Wiegand, “An analysis of cooperative coevolutionary algorithms,”
Ph.D. TThesis, George Mason University, 2003.
[22] Q. Zhang and H. Li, “MOEA/D: A multiobjective evolutionary algorithm
based on decomposition,” IEEE Trans. Evol. Comput., vol. 11, no. 6,
pp. 712–731, 2007.

12

[23] L. Wang, Q. Zhang, A. Zhou, M. Gong, and L. Jiao, “Constrained
subproblems in a decomposition-based multiobjective evolutionary algorithm,” IEEE Trans. Evol. Comput., vol. 20, no. 3, pp. 475–480, 2016.
[24] Y. Mei, K. Tang, and X. Yao, “Decomposition-based memetic algorithm
for multiobjective capacitated arc routing problem,” IEEE Trans. Evol.
Comput., vol. 15, no. 2, pp. 151–165, 2011.
[25] X. Cai, Y. Li, Z. Fan, and Q. Zhang, “An external archive guided
multiobjective evolutionary algorithm based on decomposition for combinatorial optimization,” IEEE Trans. Evol. Comput., vol. 19, no. 4, pp.
508–523, 2015.
[26] M. A. Jan and Q. Zhang, “MOEA/D for constrained multiobjective
optimization: Some preliminary experimental results,” in UK Workshop
on Computational Intelligence, Colchester, UK, 2010, pp. 1–6.
[27] A. Konstantinidis and K. Yang, “Multi-objective k-connected deployment and power assignment in WSNs using a problem-specific constrained evolutionary algorithm based on decomposition,” Comput Commun., vol. 34, no. 1, pp. 83–98, 2011.
[28] Y. Zhang, J. Liu, M. Zhou, and Z. Jiang, “A multi-objective memetic
algorithm based on decomposition for big optimization problems,”
Memetic Comp., vol. 8, pp. 45–61, 2016.
[29] J. Chen, J. Li, and B. Xin, “DMOEA-εC : Decomposition-based
multiobjective evolutionary algorithm with the ε-constraint framework,”
IEEE Trans. Evol. Comput., vol. 21, no. 5, pp. 714–730, 2017.
[30] W. Fang, L. Zhang, S. Yang, J. Sun, and X. Wu, “A multiobjective
evolutionary algorithm based on coordinate transformation,” IEEE Trans.
Cybern., vol. 49, no. 7, pp. 2732–2743, 2019.
[31] S. Jiang, S. Yang, Y. Wang, and X. Liu, “Scalarizing functions
in decomposition-based multiobjective evolutionary algorithms,” IEEE
Trans. Evol. Comput., vol. 22, no. 2, pp. 296–313, 2018.
[32] A. Trivedi, D. Srinivasan, K. Sanyal, and A. Ghosh, “A survey of
multiobjective evolutionary algorithms based on decomposition,” IEEE
Trans. Evol. Comput., vol. 21, no. 3, pp. 440–462, 2017.
[33] K. C. Tan, Y. J. Yang, and C. K. Goh, “A distributed cooperative
coevolutionary algorithm for multiobjective optimization,” IEEE Trans.
Evol. Comput., vol. 10, no. 5, pp. 527–549, 2006.
[34] J. Wang, W. Zhang, and J. Zhang, “Cooperative differential evolution
with multiple populations for multiobjective optimization,” IEEE Trans.
Cybern., vol. 46, no. 12, pp. 2848–2861, 2016.
[35] L. Miguel Antonio and C. A. Coello Coello, “Coevolutionary multiobjective evolutionary algorithms: Survey of the state-of-the-art,” IEEE
Trans. Evol. Comput., vol. 22, no. 6, pp. 851–865, 2018.
[36] D. Gong, B. Xu, Y. Zhang, Y. Guo, and S. Yang, “A similarity-based
cooperative co-evolutionary algorithm for dynamic interval multiobjective optimization problems,” IEEE Trans. Evol. Comput., vol. 24, no. 1,
pp. 142–156, 2020.
[37] C. He, L. Li, Y. Tian, X. Zhang, R. Cheng, Y. Jin, and X. Yao, “Accelerating large-scale multiobjective optimization via problem reformulation,”
IEEE Trans. Evol. Comput., vol. 23, no. 6, pp. 949–961, 2019.
[38] N. Al Moubayed, A. Petrovski, and J. McCall, “D2 MOPSO: MOPSO
based on decomposition and dominance with archiving using crowding
distance in objective and solution spaces,” Evol. Comput., vol. 22, no. 1,
pp. 47–77, 2014.
[39] C. Dai, Y. Wang, and M. Ye, “A new multi-objective particle swarm
optimization algorithm based on decomposition,” Informat. Sci., vol.
325, pp. 541–557, 2015.
[40] X. Cai, Z. Mei, Z. Fan, and Q. Zhang, “A constrained decomposition
approach with grids for evolutionary multiobjective optimization,” IEEE
Trans. Evol. Comput., vol. 22, no. 4, pp. 564–577, 2018.
[41] X. Zhang, Y. Tian, R. Cheng, and Y. Jin, “A decision variable clusteringbased evolutionary algorithm for large-scale many-objective optimization,” IEEE Trans. Evol. Comput., vol. 22, no. 1, pp. 97–112, 2018.
[42] B. Wang, H. Li, Q. Zhang, and Y. Wang, “Decomposition-based multiobjective optimization for constrained evolutionary optimization,” IEEE
Trans. Syst. Man Cybern.: Syst., pp. 1–14, 2018.
[43] Q. Song, Y. Zheng, Y. Huang, Z. Xu, W. Sheng, and J. Yang, “Emergency drug procurement planning based on big-data driven morbidity
prediction,” IEEE Trans. Ind. Informat., vol. 15, no. 12, pp. 6379–6388,
2019.
[44] A. Dmitriev and V. Kotin, “Time series prediction of morbidity using
artificial neural networks,” Biomed. Eng., vol. 47, no. 1, pp. 43–45, 2013.
[45] P. J. Landrigan, C. B. Schechter, J. M. Lipton, M. C. Fahs, and
J. Schwartz, “Environmental pollutants and disease in american children:
estimates of morbidity, mortality, and costs for lead poisoning, asthma,
cancer, and developmental disabilities.” Environ. Health Perspect., vol.
110, no. 7, pp. 721–728, 2002.

[46] Q. Song, Y.-J. Zheng, Y. Xue, W.-G. Sheng, and M.-R. Zhao, “An evolutionary deep neural network for predicting morbidity of gastrointestinal
infections by food contamination,” Neurocomputing, vol. 226, pp. 16–
22, 2017.
[47] Q. Song, Y.-J. Zheng, and J. Yang, “Effects of food contamination
on gastrointestinal morbidity: Comparison of different machine-learning
methods,” Int. J. Env. Res. Public Health, vol. 16, no. 5, 2019.
[48] K. Deb, A. Pratap, S. Agarwal, and T. Meyarivan, “A fast and elitist
multiobjective genetic algorithm: NSGA-II,” IEEE Trans. Evol. Comput.,
vol. 6, no. 2, pp. 182–197, 2002.
[49] Y. G. Woldesenbet, G. G. Yen, and B. G. Tessema, “Constraint handling in multiobjective evolutionary optimization,” IEEE Trans. Evol.
Comput., vol. 13, no. 3, pp. 514–525, 2009.
[50] A. Zamuda, J. Brest, B. Boskovic, and V. Zumer, “Differential evolution
with self-adaptation and local search for constrained multiobjective optimization,” in IEEE Congress on Evolutionary Computation. Trondheim,
Norway: IEEE, 2009, pp. 195–202.
[51] ——, “Differential evolution for multiobjective optimization with self
adaptation,” in IEEE Congress on Evolutionary Computation. Singapore: IEEE, 2007, pp. 3617–3624.
[52] Y. Zheng, H. Ling, J. Xue, and S. Chen, “Population classification in
fire evacuation: A multiobjective particle swarm optimization approach,”
IEEE Trans. Evol. Comput., vol. 18, no. 1, pp. 70–81, 2014.
[53] J. J. Liang, A. K. Qin, P. Suganthan, and S. Baskar, “Comprehensive
learning particle swarm optimizer for global optimization of multimodal
functions,” IEEE Trans. Evol. Comput., vol. 10, no. 3, pp. 281–295,
2006.
[54] I. Derpich and J. R. Vera, “Improving the efficiency of the branch
and bound algorithm for integer programming based on “flatness”
information,” Eur. J. Oper. Res., vol. 174, no. 1, pp. 92–101, 2006.
[55] E. Zitzler and L. Thiele, “Multiobjective evolutionary algorithms: a
comparative case study and the strength pareto approach,” IEEE Trans.
Evol. Comput., vol. 3, no. 4, pp. 257–271, 1999.
[56] C. A. C. Coello, D. A. Van Veldhuizen, and G. B. Lamont, Evolutionary
algorithms for solving multi-objective problems. Boston, MA: Springer,
2002.
[57] I. Wegener, Methods for the Analysis of Evolutionary Algorithms on
Pseudo-Boolean Functions. Boston, MA: Springer US, 2002, pp. 349–
369.
[58] Y. Yu, C. Qian, and Z. Zhou, “Switch analysis for running time analysis
of evolutionary algorithms,” IEEE Trans. Evol. Comput., vol. 19, no. 6,
pp. 777–792, 2015.

