Optimal minimal-contact customer routing through grocery stores
Diptangshu Sena , Varun Ramamohana , and Prasanna Ramamoorthyb

arXiv:2011.00472v1 [math.OC] 1 Nov 2020

a

Department of Mechanical Engineering, Indian Institute of Technology Delhi, Hauz Khas,
New Delhi 110016, India.
b
Department of Management Studies, Indian Institute of Technology Delhi, Hauz Khas, New
Delhi 110016, India.
ARTICLE HISTORY
Compiled November 3, 2020
ABSTRACT
Grocery shopping has remained an essential activity even during the peak of the
COVID-19 pandemic. In this context, we present an optimization framework for
identifying routes through a grocery store that eliminate or minimize contacts between customers at grocery stock points while also minimizing the time spent within
the store. We develop a discrete-event simulation of the customer arrival process,
and simulate the arrival of customers with varying shopping list sizes and movement patterns. We then present two optimization formulations for generating optimal shopping routes on a real-time basis for each customer arriving to the store
given the route information of other customers already present in the store. The first
formulation eliminates contacts between customers whereas the second minimizes
contacts between customers. Both formulations are mixed-integer problems based on
extensions to the Miller-Tucker-Zemlin formulation of the traveling salesman problem. We also explore an alternate scenario for the deployment of these formulations
wherein the customers and the store can plan visits ahead of time. This framework
can be applied to more general contexts wherein minimizing contacts between randomly arriving agents needing to visit a subset of nodes in a connected network is
required.
KEYWORDS
Traveling salesman problem, mixed integer programming, grocery store shopping
collision free routing

1. Introduction
The COVID-19 pandemic has resulted in restrictions of physical movement in multiple
areas of commerce and trade, including in retail commerce. While retail spaces in
“containment” areas where infection prevalences are relatively high have for the most
part closed down, limited physical operation of retail spaces has remained in regions
with moderate and low infection prevalences (Vader, 2020). In particular, grocery retail
stores have remained operational even in many high-prevalence zones. In India, online
shoppers faced difficulties during the beginning of the pandemic in sourcing essential
groceries, while retail store shoppers, operating under social distancing and maskwearing restrictions, appeared to have lesser difficulty (Jaganmohan, 2020). Thus instore shopping for groceries remained an important option for sourcing groceries even
CONTACT Varun Ramamohan. Email: varunr@mech.iitd.ac.in

at the peak of the pandemic (Coppola, 2020; Vader, 2020).
In this context, developing a plan to shop safely within the grocery store is important. While mask-wearing and regular sanitization of the store space and on the
part of the customer is likely to form a major part of such a plan, social distancing
- i.e., maintaining a minimum distance between shoppers - will also help minimize
transmission of infections within the store. In this paper, we develop an optimization
framework for assigning routes to customers within a grocery store such that contacts
between customers are eliminated and/or minimized.
Our approach first involves constructing a simulation of the customer arrival process at a grocery store. The grocery store itself is modelled as a grid-like network
with grocery stock points represented by nodes, and each customer arriving to the
store is assigned a list of stock points to visit based on their grocery needs. We then
formulate the problem of assigning routes to each customer such that contacts are
eliminated and/or minimized and shopping time is minimized as an extension of the
Miller-Tucker-Zemlin (MTZ) integer programming formulation of the traveling salesman problem (TSP). Therefore, using information regarding the routes of customers
already in the store, we generate optimal no-contact or minimal-contact optimal routes
for each customer upon their arrival. We develop separate formulations for generating
routes that completely eliminate contacts (referred to hereafter as the TSP-NC formulation) and routes that minimize contacts between customers (hereafter the TSP-MC
formulation), respectively.
We also implement a scenario wherein the above formulations can be used to assign
no-/minimal-contact routes to customers when they indicate an approximate time of
arrival at the store by specifying a time window within which they would prefer to shop.
For this scenario, we propose an optimal method for the grocery store to assign slots
to customers within the time window such that the total shopping time of customers
assigned to each slot in the time window, based on inputs from the optimization
framework, is balanced across slots. We investigated this “load-balancing” approach
to demonstrate the deployment of the no-/minimal-contact formulations in a scenario
where store management can plan ahead, and not only assign routes to customers
upon arrival.
The remainder of the paper is organized as follows. Section 2 describes the related
literature and the contributions of this work. Section 3 describes the development of
the customer arrival simulation at the grocery store, and the TSP-NC and TSP-MC
formulations, along with numerical results and managerial insights. In Section 4, we
present an optimization framework wherein the TSP-NC and TSP-MC formulations
can be used in a scenario where the store management can plan customer visits ahead
of time. We conclude in Section 5 with a discussion of the potential impact of the
study, its limitations and avenues for future research.

2. Related Work
There appears to limited work in the literature that addresses optimization problems regarding managing customer movement in grocery stores. Hence we studied the
more general literature regarding extensions of TSP and multi-agent vehicle routing
problems that attempt to minimize contacts or collisions. Given a set of destinations
(nodes) to visit, a standalone TSP minimizes the length of the tour visiting all the
nodes while starting and ending the tour at the same node. In other words the optimal
solution to TSP is the smallest length cycle passing through all nodes in the network
2

visiting each node exactly once. The first known formulation of TSP was given by
Dantzig, Fulkerson, and Johnson (1954). If there are n nodes in the network, a feasible
solution of TSP should contain a cycle that passes through all n nodes. Therefore,
in order to avoid cycles of length less than n, the authors presented subtour elimination constraints in the network. In the DFJ formulation, the number of subtour
elimination constraints can be very large. To address this, Miller, Tucker, and Zemlin (1960) presented a variation of subtour elimination constraints which is written
for every pair of nodes (i, j) where i < j. The number of subtour elimination constraints in this case is much lesser than the subtour eliminations constraints in DFJ
formulation of TSP. TSP formulations with MTZ subtour elimination constraints are
widely used in literature even though they give poorer LP relaxations than the DFJ
formulation. Developing improvements of the MTZ formulation is an active research
area (Desrochers & Laporte, 1991; Kara, Laporte, & Bektas, 2004; Sherali & Driscoll,
2002; Yuan, Cattaruzza, Ogier, & Semet, 2020). In our study, we use the basic MTZ
formulation.
A variant of TSP that has some similarity with our current work is the m-Traveling
Salesman Problem. In this problem, m salesmen start out and end their tour at the
same node after visiting a set of cities. Here, each node can be visited by only one
salesman. The objective of an m-TSP is to minimize the total tour length of all salesmen. Our problem differs from this problem in two respects: i) In m-TSP, all salesmen
start out at the same time, while in the TSP-NC/TSP-MC formulations, the customers (analogous to salesmen) start as per their simulated arrivals. ii) Second, in
m-TSP each city is visited by only one salesman, whereas in our case a particular
stock point (analogous to cities) can be in the shopping list of multiple customers.
Interested readers are referred to Bektas (2006) for a more detailed review on m-TSP.
For a more detailed review on TSP and its related problems, readers are directed to
the following literature (Parker & Rardin, 1983), (Reinelt, 1991), (Applegate, Bixby,
Chvatal, & Cook, 2006), (Cook, 2011), (Toth & Vigo, 2014).
An application similar to ours on ensuring minimal-/no - contact between customers
is the research on collision free path planning of multiple robots or collision avoidance
in Automated Guided Vehicle (AGV) systems. The objective here is to minimize the
total cycle time of production. Given a set of tasks to be performed at a station, the
activities can be categorised into three problems: i) task allocation to multiple robots
in the station (Herrero-Perez & Martinez-Barbera, 2010), (Korsah, Stentz, & Dias,
2013), (Lee, Zaheer, & Kim, 2014) ii) routing problems to decide on the sequence in
which the tasks are to be completed for each robots (Bullo, Frazzoli, Pavone, Savla,
& Smith, 2011), (Spensieri, Carlson, Ekstedt, & Bohlin, 2015) iii) path planning to
decide on the path taken by the robots while accomplishing their tasks (Guillaume,
Michael, Abdelghani, Damien, & Mohamed, 2017). Typically, routing problems and
path planning problems in this application contain constraints to eliminate/minimize
collisions between robots. Our research differs here due to the asynchronous nature of
the arrival of our agents (customers).
In summary, our study describes a framework for assigning optimal no-contact
routes through a grocery store to randomly arriving shoppers. Given that the optimization framework consists of extensions of the TSP, we believe our framework is
applicable to general no-contact routing problems for randomly arriving agents needing to traverse a connected network. To the best of our knowledge, we also believe that
this is the first work to address asynchronous arrival of customers in an TSP setting
with minimal-/no- contact restrictions.

3

3. Simulation and Optimization Framework Development
In this section, we describe the development of our simulation and optimization framework. We begin by describing the discrete-event simulation of the arrival process of
customers to the grocery store. We then describe the TSP-NC formulations and the
results around shopping times and number of contacts generated by solving these
formulations for each customer arriving to the store.
3.1. Grocery Store Simulation Development
We model the store as having a rectangular layout composed of identical unit square
grids. The store we model has 70 grids, with 10 rows consisting of 7 grids each. Half
of these 70 grids are grocery stock points, and the rest represent aisles through which
customers can traverse the grid (move through the store) and access the grocery stock
points. Visualizations of the store along with example customer routes are provided
in Figure 1.
The store is divided into several sections based on the category of groceries stocked.
Each grocery item is mapped to a certain stock-point from which it can be gathered.
This need not necessarily mean that there is only a single item in each stock point;
the stock point can contain different varieties of a particular item class.
There is a fixed entry and exit grid - in our simulation, the grid [1,1] in Figure 1
represents both the entry and exit grid. Based on a customer’s shopping list, a feasible shopping tour is one that starts at the entry grid, visits all stock-points on the
customer’s list at least once, and exits.
Simulation Specifications
We implement the store shopping model in an event-based manner. The primary
event under consideration is arrival of customers to the supermarket. Given the rate
of arrival of customers and the distribution of inter-arrival times, the system simulates
only those time points at which an event (arrival) occurs.
a Arrival of Customers : We assume that customer arrivals follows a Poisson distribution, i.e., the inter-arrival times are exponentially distributed. For the rest
of the analysis, we take the mean of the Poisson arrival distribution as λ = 45
customers/hour.
b Shopping List Generation : We consider a shopping scenario where each customer
has a predetermined list of items to purchase. In a pandemic situation, we assume
that when a customer arrives at the grocery store, they are provided with a map
of the store that helps them identify the stock points they need to visit. In
our simulation, we generate a list of stock points directly and assign it to each
customer. Each stock point is associated with a probability of featuring in a
customer’s shopping list. This probability can be estimated, for example, from
historical customer shopping data. We set p = 0.3 for all stock points. Thus,
a uniform random vector of size 35 (number of stock points) is generated for
each customer and by comparing with the probability vector associated with the
stock points, the list of any given customer is generated.
c Customer Shopping Patterns: In real world, customers have a variety of ways in
which they shop for groceries in the store. In order to capture this diversity of
shopping patterns, we first searched the literature for documentation of shopping
patterns in grocery stores. Our search did not yield any relevant results; hence
we assumed and simulated two principal shopping patterns against which we
4

benchmark our optimal routes.
c.1 The first customer shopping pattern is that of a greedy customer who
always visits the nearest stocking point from their current location in the super
market. Upon entry, the customer identifies the closest section with stock points
containing items in their list and proceeds there. Within the section, they also
follow a greedy approach, moving to the next closest item until all items from
their list in that section are exhausted. The next section is again chosen in a
greedy manner, based on which of the remaining sections are closest from their
current position.
c.2. The second type is a preferential shopper who has a predetermined
order in which they wish to visit different stock points in the shop. However, we
assume that inside a section, they shop in a greedy manner, moving to the next
closest item within the section.
The rationale behind our choice of these two customer shopping patterns is
that realistically, buyer behaviors are likely to be some convex combination of
these types. Hence, our current choices for shopping patterns can help us capture
the entirety of the buyer spectrum.
d Customer Shopping Speed : We assume that the speed of customer movement
through the aisles is either 10 meters/minute or 20 meters/minute, and that the
speed stays constant throughout their time in the store. Further, we assume that
the time spent by a customer at any stock point is exponentially distributed with
a mean of 2 minutes.
In Figure 1 below, we depict the paths of both customer types. The grey grids
represent stock points and the white grids represent grocery store aisles - that is,
paths for movement for the customers. There are a total of nine sections available for
shopping, a through i. Each grid is of size 5m × 5m. We use the same specifications
of the supermarket throughout our analysis, unless otherwise mentioned.
In each case in Figures 1, we assume the customer has a list with six items. The list
involves visiting stock points at positions (1, 5), (3, 2), (4, 4), (6, 2), (6, 4) and (8, 4) in
the store. For the preferential customer example (the figure on the right), the order in
which the customer prefers to visit the sections associated with their list is given by
B− > F − > G− > C− > A.
Note that we use the same specifications of the grocery store throughout our analysis, unless otherwise mentioned.
We present the simulation results for the greedy and preferential customer shopping
patterns along with the results from the extended TSP formulations.
3.2. No-contact Customer Routing Formulation
For a given customer arrival rate, the greedy and preferential customer patterns lead
to a large number of contacts between customers. Here a contact is defined as at
least two customers being present at the same stock point at the same time. Further,
these customer shopping patterns are also non-optimal in terms of minimizing the
shopping time for a customer. Hence we propose to generate a route for each customer,
based on their shopping list, that eliminates contacts with other customers and also
minimizes their shopping time. Our formulation builds on the Miller-Tucker-Zemlin
integer programming formulation of the Traveling Salesman Problem Reinelt (1991).
This formulation is a mixed-integer program that provides an exact solution. The
formulation is based on recognizing that in order to avoid contacts, a customer should
5

Figure 1. Example routes for greedy (left) and preferential (right) customers.

avoid reaching a node (i.e., a stock point) when it is already occupied by another
customer. To implement this, we introduce a set of continuous time variables that
capture the time points when a customer reaches the different nodes on their shopping
tour. These time variables are then constrained to avoid overlap with the time windows
when the nodes are occupied by other customers. These time windows when the nodes
are occupied by other customers are provided as data to the formulation based on
the routes generated for customers already present in the store. The formulation is
provided below.
Parameters
• cij : Length (i.e., distance) of shortest path joining nodes i and j. Here i, j ∈
N = {1, 2, ..., n}, where n is the number of nodes.
• v : Speed of movement through aisles for a given customer.
• b : Expected shopping time at a stock-point.
• di = {di1 , di2 , ..., diKi } : A set of Ki time points indicating the time points dik ∈ di
at which node i will start to be occupied for the next b minutes by the Ki other
customers in the store, i ∈ N . Note that Ki will be dependent on each node i,
and hence the subscript.
• t0 : The time instant when a new customer arrives.
• M : A large positive number.
Decision Variables
• xij ∈ {0, 1} : Boolean variable with route 1 if path includes travel from node i
to node j; 0 otherwise.
• ui ∈ Z ∀ i ∈ N : Dummy variable indicating the position of node i in the list of
nodes arranged by order of visit.
• ti ∈ R ∀ i ∈ N : Time at which node i is reached.

6

• yik ∈ {0, 1} ∀ i ∈ N, k ∈ Ki : Dummy Boolean variable for either-or constraints.
No-contact TSP Formulation
min

n X
n
X

cij xij

i=1 j=1

subject to :
MTZ TSP formulation constraints :
xii = 0, ∀ 1 ≤ i ≤ n
n
X
xij = 1, ∀ 1 ≤ j ≤ n
i=1
n
X

xij = 1, ∀ 1 ≤ i ≤ n

j=1

u1 = 1
ui − uj + nxij ≤ n − 1, ∀ 1 ≤ i ≤ n, 2 ≤ j ≤ n, i 6= j
2 ≤ ui ≤ n, ∀ 2 ≤ i ≤ n
No-contact constraints :
t1 = t0
cij
, ∀ 1 ≤ j 6= i ≤ n
v
cij
tj − ti ≥ −M (1 − xij ) + b +
, ∀ 1 ≤ j 6= i ≤ n
v
ti + b ≤ dik + M yik , ∀ 2 ≤ i ≤ n, 1 ≤ k ≤ Ki
ti + M (1 − yik ) ≥ dik + b, ∀ 2 ≤ i ≤ n, 1 ≤ k ≤ Ki

tj − ti ≤ M (1 − xij ) + b +

Non-negativity and integrality constraints :
ti ≥ 0, ∀ 1 ≤ i ≤ n
xij ∈ {0, 1} ∀ 1 ≤ i, j ≤ n
yik ∈ {0, 1} ∀ 1 ≤ i ≤ n, 1 ≤ k ≤ Ki
The first (bookkeeping) constraint prevents an edge looping into the same node. The
second and third constraints allow only one edge to be directed towards and away from
a given node, forcing the fact that each node is visited only once. u1 = 1 and t1 = t0
initialize the fact the tour starts at the entry grid. The purpose of the constraints
involving ui and uj is to eliminate subtours. The new ti , tj constraints are in place to
force tj = ti + b + cvij if an edge exists between nodes i and j. If an edge does not exist
between nodes i and j, then the constraints ensure enough slack between ti and tj
in either direction to allow for sufficiently large differences between |ti − tj |. The last
two no-contact constraints ensure elimination of overlaps between the intervals when
the current customer occupies the ith node (the interval [ti , ti + b]) with the interval
[dik , dik + b] during which node i is expected to be occupied by another customer in
7

Figure 2. Depiction of a no-contact route assigned to a customer. Blocks with integer values denote nodes
(stock points) visited by the current customer in their no-contact route. The red blocks associated with a given
node denote the time windows during which the node is occupied by other customers. The green blocks denote
the time windows assigned to the current customer for which an optimal no-contact route is generated. Observe
that there is no overlap with a blocked window, indicating zero contacts.

the store.
Thus the formulation accounts for the fact that there can be multiple time windows
during which a node is blocked. The no-contact path generation exercise is carried out
when a new customer comes into the supermarket with a list of items to purchase.
Their path avoids contacts with all customers who are already shopping in the store.
An example optimal route generated for a customer under this formulation is depicted
in Figure 2.
Finding an optimal or even a feasible no-contact solution in reasonable runtimes
can be challenging under certain conditions, which we explore in Section 3.4. In such
cases, for a new customer who has just arrived, all the nodes on their shopping list
may be blocked such that an optimal no-contact route cannot be generated without a
change in the state of the store (e.g., a customer leaving the store after finishing their
shopping). In the framework of the above formulation, this implies infeasibility. To
address this problem, we propose a relaxed version of the above TSP-NC formulation
wherein we apply a penalty each time a contact occurs instead of forcing elimination
of all contacts between customers. This generates a route which is time-efficient and
also minimizes contacts to the extent possible. We present this formulation in the next
subsection.
3.3. Minimal Contact TSP Formulation
We refer to this relaxation of the TSP-NC formulation as the TSP-MC formulation
(the ‘MC’ stands for minimal contact). This formulation will yield a route with zero
contacts if such a route is feasible and yields a lower objective function value when
compared to a route with one or more contacts. However, if such a route is not feasible,
it will yield an optimal route with as few contacts as possible.
For this formulation, in addition to the parameters and decision variables introduced
for the TSP-NC formulation, we introduce the penalty parameter Pe , to be applied
each time a contact occurs between customers. We also introduce two new decision
variables as given below. The variables yik from the TSP-NC formulation are not used
in the TSP-MC formulation below.

8

• δik ∈ {0, 1}, ∀ i ∈ N, k ∈ Ki : Boolean variable that records contacts between
a pair of customers (i.e., δik = 1 if a contact occurs between two customers at
node i, 0 otherwise).
• zik : continuous non-negative variable used to determine whether contacts between the current customer and another customer occur at node i based on the
absolute value of the difference between ti and dik . The value of zik is determined
by the value of ti .

min

n X
n
X
i=1 j=1

cij xij + Pe

n
X

δi

i=1

subject to :
MTZ TSP formulation constraints :
xii = 0, ∀ 1 ≤ i ≤ n
n
X
xij = 1, ∀ 1 ≤ j ≤ n
i=1
n
X

xij = 1, ∀ 1 ≤ i ≤ n

j=1

u1 = 1
ui − uj + nxij ≤ n − 1, ∀ 1 ≤ i ≤ n, 2 ≤ j ≤ n, i 6= j
2 ≤ ui ≤ n, ∀ 2 ≤ i ≤ n
TSP-MC formulation constraints :
t1 = 0
cij
tj − ti ≤ M (1 − xij ) + b +
, ∀ 1 ≤ j 6= i ≤ n
v
cij
tj − ti ≥ −M (1 − xij ) + b +
, ∀ 1 ≤ j 6= i ≤ n
v
zik = |(ti − dik )/b|, ∀ 1 ≤ i ≤ n, 1 ≤ k ≤ Ki
M δik + zik ≥ 1, ∀ 1 ≤ i ≤ n, 1 ≤ k ≤ Ki
− M (1 − δik ) + zik ≤ 1, ∀ 1 ≤ i ≤ n, 1 ≤ k ≤ Ki
Non-negativity and integrality constraints :
ti ≥ 0, ∀ 1 ≤ i ≤ n
xij ∈ {0, 1} ∀ 1 ≤ i, j ≤ n
δik ∈ {0, 1} ∀ 1 ≤ i ≤ n, 1 ≤ k ≤ Ki
zik ≥ 0 ∀ 1 ≤ i ≤ n, 1 ≤ k ≤ Ki
The first three TSP-MC constraints are the same as those in the TSP-NC formulation. The fourth constraint, via the variable zik , records the extent of overlap between
the time spent by the current customer reaches the ith node and the time spent by any
9

Figure 3. Depiction of a minimum contact path assigned to a customer. Blocks with integer values denote
nodes (stock points) visited by the current customer in their route. The red blocks associated with a given node
denote the time windows during which the node is occupied by other customers. The green blocks denote the
time windows assigned to the current customer for which an optimal no-contact route is generated. Observe
that there is only one instance of overlap at node 25 with a blocked window (marked in yellow), indicating two
reported contacts.

other customer at the same node. If zik > 1, then there is no overlap, and hence no
contact occurs; otherwise there is a contact. The last two TSP-MC constraints ensure
that if a contact occurs, then the δik variable is set to 1, thus recording the contact.
Note that Pe can serve as a tuning parameter for the store manager. A higher value
of the penalty lowers the number of contacts at the expense of time-efficiency.
An example optimal route generated for a customer under the TSP-MC formulation
is depicted in Figure 3.
We now present the numerical results from implementing these formulations within
the simulation.
3.4. Numerical Experiments
In Table 1 below, we present numerical results from implementing the above formulations along with the outcomes from the “normal” customer shopping patterns - i.e.,
the greedy and preferential cases. In each case, the simulation is run for 10 simulation
clock hours, with the first two hours of simulation time considered as a warm-up period. Thus the results are generated from 8 hours of store operation. We also present
the results of using the normal TSP MTZ formulation to generate optimal routes for
customers. The majority of the numerical experiments were performed on an Intel
Xeon workstation with 4 cores and 32 gigabytes of memory.
It is evident from the table that all the TSP formulations yield shopping times
that are comparable to those generated from the greedy customer shopping pattern.
In particular, as is expected, we see that generating paths for customers using the
standard TSP MTZ formulation yields the lowest average shopping times. However,
the shopping times generated by the TSP-NC and TSP-MC formulations are comparable to those generated from the TSP formulation. Thus, the no-contact and minimal
contact-constraints do not impose a significant cost on the customer or the store in
terms of time-efficiency, while reducing the number of contacts by nearly two orders
of magnitude (for the TSP-MC formulation).
Further, with the TSP-NC formulation, it can be seen from Table 1 it may not be
possible to serve some proportion of customers because of the customer’s shopping
list and/or the prevailing state of the store in terms of the number of customers
10

Table 1. Numerical experiment results.

Route
generation
method

Customers/hour

Contacts/Infeasibilities
per hour*

Shopping
time**, 10
m/min (SD)

Shopping
time**, 20
m/min (SD)

Preferential

44.77

987.05

4.51 (0.84)

3.26 (0.73)

Greedy

44.8

978.17

3.89 (0.80)

2.93 (0.71)

TSP-NC

42.23

4.13*

3.70 (0.43)

2.91 (0.23)

TSP-MC

46.39

23.19

3.93 (1.44)

3.11 (1.23)

TSP

44.98

1086.29

3.43 (0.31)

2.71 (0.15)

All values reported in the table are average values, with standard deviations (SD) reported for the shopping
times.
*For the TSP-NC formulation, no contacts are allowed; hence we report the number of times a feasible path
could not be generated for a customer immediately upon their arrival - i.e., the number of infeasibilities.
**The average shopping times reported are based on customer shopping times normalized by the size of
the customer’s shopping list. For example, if the actual shopping time of a customer is 40 minutes, and
they have 10 items on their list, their normalized shopping time is recorded as 4 minutes.

in the store and their shopping lists. For the current store size and arrival rate (45
customers/hour), this proportion is 9.75%. It is this observation that motivated the
development of the TSP-MC formulation.
We now discuss the computational runtimes of the TSP-NC and TSP-MC formulations, provided in Table 2.
Table 2. Computational runtime-related results for TSP-NC and TSP-MC formulations.

Formulation
TSP-NC
TSP-MC

Mean
runtime (SD)
202.83
(948.89)
1.69 (3.24)

cust-list a

n-oth-cust b

n-oth-list c

10.91 (2.79)

22.88 (4.27)

11.58 (0.44)

10.77 (2.62)

24.23 (4.24)

11.38 (0.5)

SD = standard deviaton. Further, all runtimes are in CPU-seconds.
a Size of the list of current customer for whom the computational runtime of generating an optimal no/minimal-contact route is generated.
b Number of other customers in the store upon arrival of current customer for whom the computational
runtime of generating an optimal no-/minimal-contact route is generated.
c Average list size of other customers in the store upon arrival of current customer for whom the computational runtime of generating an optimal no-/minimal-contact route is generated.

The TSP-MC formulation yields substantially lower runtimes when compared to the
TSP-NC formulation. However, the average runtimes for TSP-NC include two outlier
samples with runtimes > 3800 CPU-seconds. If these are removed, we see that the
average runtime reduces to approximately 60 CPU-seconds. Only approximately 5%
of customers require runtimes exceeding 600 CPU-seconds, and 12% require exceeding
60 CPU-seconds. This implies that the TSP-NC formulation may indeed be deployed
in the store, especially if the customers and store management are particular about
eliminating all contacts.
The higher runtimes for the TSP-NC formulation are expected, given that the nocontact constraints can make finding feasible solutions difficult under certain conditions. However, the aggregate results in Table 2 do not indicate a clear relationship
between runtimes and the number or average list size of the other customers already
present in the store. Upon further investigation of this data for the TSP-NC formu-

11

lation, we see that the average cust-list value associated with runtimes > 600 CPUseconds is in the 90th percentile of its distribution, and the average n-oth-cust value
is in its 80th percentile. A monotonically increasing function of cust-list and n-oth-list
that we constructed was also found to be in its 90th percentile for all runtimes > 600
CPU-seconds. Therefore, it appears reasonable to conclude that combinations of large
cust-list and large n-oth-cust values may lead to larger runtimes for obtaining an optimal route via the TSP-NC formulation. However, this does not completely explain all
cases where high runtimes are observed, and neither does this explain all cases where
infeasibilities are observed. This is likely because finding feasible solutions can become
challenging under other possible scenarios that are not captured by the above parameters: for example, when a large fraction of the nodes on the current customer’s list
are blocked for a significant proportion of the current customer’s projected shopping
duration.
To further investigate this, we defined a parameter called the node coverage for
each customer. The node coverage value is calculated as follows: for each arriving
customer, we calculated their estimated shopping duration as a function of their list
size and assigned speed using the mean normalized shopping time estimates given in
Table 1. We then find, for each stock point in the customer’s list, the proportion of
the customer’s estimated shopping time for which the stock point is occupied starting
from the time at which the current customer arrives at the store. These proportions
estimated for each node (stock point) on the current customer’s list are then averaged
to generate the node coverage value for the customer under consideration.
We see that for customers for whom optimal routes are found, the average node
coverage value is approximately 22%, whereas for those customers for whom the TSPNC formulation is rendered infeasible, the average node coverage value is 35%. This
average coverage value corresponds to the approximately 94th percentile of the node
coverage distribution. Further, we see that a correlation of 0.38 exists between node
coverage and n-oth-cust, and a correlation of -0.68 between node coverage and custlist. The negative correlation between node coverage and cust-list implies that the
probability of the TSP-NC being infeasible for customers with smaller lists is higher.
Note that this does not imply that smaller cust-list values will lead to larger runtimes;
in fact, the correlation between cust-list and runtime is approximately 0.40, which
is consistent with our earlier discussion. Smaller lists may be more susceptible to
infeasible TSP-NCs because fewer nodes with high coverage are required to yield an
overall high node coverage value - particularly if n-oth-cust is also high for the customer
under consideration.
Next, we present a limited set of sensitivity analysis results for the TSP-MC formulation with different arrival rates. The results are presented in Table 3.
From Table 3, we can see that increases in the mean customer arrival rate primarily impacts the average number of contacts and the average runtimes. From the
customer’s perspective, shopping times are not affected; however, this comes at the
expense of a higher probability of coming in contact with another customer. Sensitivity analyses with a mean customer arrival rate greater than 50 customers per hour led
to substantially higher runtimes for each customer. This implies that the store size
may not be able to handle arrival rates above this threshold. Alternatively, this can
be overcome by decreasing the value of Pe . Thus for each value of Pe , the TSP-MC
formulation can be used to determine the customer arrival rate threshold up to which
optimal solutions can be generated in reasonable runtimes.
There are many possibilities for the deployment of this framework in a grocery store.
While the TSP-MC formulation may seem the obvious choice deployment if only one
12

Table 3. Results of the sensitivity analysis around the mean customer arrival rate for the TSP-MC formulation.

Mean customer
arrival rate
40
customers/hour
50
customers/hour

Shopping
time, 10
m/min (SD)

Shopping
time, 20
m/min (SD)

Contacts/hour

Runtime:
mean (SD)

3.8 (1.23)

3.11 (1.06)

5.8

10.28 (49.07)

3.78 (1.2)

3.21 (1.15)

21

17.14 (69.35)

All values reported in the table are average values, with standard deviations (SD) reported for the shopping
times.
Runtime units are CPU-seconds.

formulation can be deployed, both the TSP-NC and TSP-MC formulations can be
deployed and even run together for each arriving customer if sufficient computational
infrastructure is available. Where the TSP-NC formulation incurs high runtimes for
a customer or is infeasible, the customer can just wait until the state of the store
changes (i.e, one or more customers already in the store leave), after which the TSP-NC
formulation can be run again. Alternatively, the TSP-MC solution can be used for such
customers. The TSP-MC solutions alone may be used if the fraction of infeasibilities
crosses some threshold determined by the store management, for example, due to high
customer arrival rates. The TSP-MC framework can also be used to determine the
maximum arrival rate that can be entertained by the store such that the number of
contacts remain below some threshold.

4. Framework Deployment in a Plan-Ahead Scenario
In the above analyses, we considered scenarios where customer arrivals are completely
random. We now consider a situation wherein the TSP-NC and TSP-MC formulations
can be deployed in a scenario where both customers and the store management can
plan their visits ahead of time.
Specifically, we consider a situation wherein multiple time windows are available for
a customer to shop in at the store. Thus a customer can specify ahead of time which
time window they prefer, and also provide the store management with their shopping
list. For example, a store can offer a choice of two-hour time windows across the day
- 8 AM - 10 AM, 10 AM - 12 PM, 12 PM - 2 PM, etc. However, in order to ensure
that a large number of customers do not congregate at the same time within a time
window, we assign customers to different equally spaced slots within the time window.
For example, a two hour time window can be divided into half-hour slots - i.e., the slot
from 10 AM - 12 PM can be divided into four slots from 10 AM - 10:30 AM, 10:30 AM
- 11:00 AM, 11:00 AM - 11:30 AM, and 11:30 AM - 12 PM. Through the formulation
we present in this section, we perform this slot assignment in order to maximize the
variation in the total shopping times associated with customers assigned to a slot.
We choose this objective based on the results observed in Section 3.4, to prevent
assignment of customers with only small or large lists to a slot.
The formulation is given below.
Parameters
• N : Total number of customers who have indicated a preference to shop in the
13

time window.
• D : Duration of each time slot within the time window.
• s : Number of slots within the time window minus one - for example, if a two-hour
time window is divided into four half-hour slots, s = 3.
• E : Time point by which shopping tours of all customers in the time window
must finish.
• di : Estimated shopping duration for customer i, i = 1, 2, .., N . The di can be estimated automatically using the mean normalized shopping times observed when
customers randomly arrive to the store; in other words, they can be estimated
using the information in Table 1. In our case, because we implement the TSP-MC
formulation to generate paths for customers assigned to a slot within the time
window, we use the corresponding mean normalized shopping time to estimate
the di for the ith customer as di = mean normalized shopping time (TSP-MC) ×
shopping list size.
N
P
• W : Sum of estimated shopping durations for all N customers; i.e., W =
di .
i=1

Variables
• xi,k : Boolean variable indicating whether customer i is allocated to time slot k,
where i = 1, 2...N and k = 1, 2, ..s.
• starti : Continuous variable indicating the time-point when customer i starts
shopping.
• wk : Variable that records the total shopping time of customers assigned to shop
in time slot k.
Optimal Slot Assignment Formulation
min

s 
X

wk −

k=1

W
s

2

subject to :
s
X
xi,k = 1, ∀ 1 ≤ i ≤ N
k

starti =

s
X

D k xi,k , ∀ 1 ≤ i ≤ N

k=1

starti + di ≤ E, ∀ 2 ≤ i ≤ N
X
wk =
xi,k di , ∀ 1 ≤ k ≤ s
i

Non-negativity and integrality constraints:
starti ≥ 0, ∀ 1 ≤ i ≤ N
xik ∈ {0, 1} ∀ 1 ≤ i ≤ N, 1 ≤ k ≤ s
In this formulation, we do not consider the last slot for allotment, as we use that
slot to ensure that no customer shopping time spills over into the next time window.
Further, in the second constraint, customers are assigned shopping start times at the
end of the slot to which they are assigned. This can be considered a “worst-case”

14

approach. This is because by assigning start times at the end of the slot, and also
enforcing the third constraint, wherein we specify that shopping end times for each
customer must be within the end of the time window, we ensure that all customers
end their shopping tour within the time window under consideration even under the
worst-case scenario that all customers arrive at the end of the slots to which they
are assigned. Such a “worst-case” approach is feasible only if the last slot in the time
window is not considered for customer allocation. Finally, the fourth constraint records
the total shopping time of customers assigned to the k th slot.
4.1. Optimal Customer Slot Assignment: Numerical Results
Once the slot assignment based on the above formulation is generated, we consider
two options for implementing the assignment in practice. The first involves letting all
customers assigned to a slot arrive and start shopping at the beginning of the slot,
based on the optimal TSP-MC route generated for them. The second option involves
customers arriving randomly within the slot, with their arrival times sampled from the
uniform distribution on [0, D]. Upon a customer’s arrival within their assigned slot,
their route is generated via the TSP-MC formulation.
This is in contrast to the start time assigned to each customer from the formulation,
wherein customers are assigned start times at the end of the slot to which they are
assigned. Thus, we use the start time assigned by the formulation only to facilitate the
slot assignment and to ensure that in the worst case (all customers arrive at the end of
the slot), no customer’s estimated shopping end time exceeds the duration of the time
window. Once such a slot assignment is obtained, we ignore the start times obtained
from the formulation. We believe this is a more realistic approach, because once a slot
assignment is available, the store management may specify that all customers must
arrive at the beginning of the slot, or at any time before the end of the slot.
We present the numerical results from the slot assignment optimization (using the
TSP-MC formulation) in Table 4 below. The results are presented for two hour time
windows divided into half-hour slots. The number of customers indicating their preference to shop in the time window was generated using the same arrival rate (45
customers/hour) used in the simulations in Section 3.1.
Table 4. Results of simulation with optimal slot assignment.

Customer
arrival
method
Start of
slot*
Uniform
within
slot**

Customers/hour

Shopping
time, 10
m/min (SD)

Shopping
time, 20
m/min (SD)

42.1

3.71 (0.44)

2.92 (0.23)

21.40

39.6

3.69 (0.34)

2.94 (0.23)

19.80

Contacts/hour

All values reported in the table are average values, with standard deviations (SD) reported for the shopping
times.
*All customers arrive at the start of the slot. Optimal minimal-contact routes are generated for these
customers in a random order before they start shopping and the route information for other customers is
fed to the TSP-MC formulation for the customer under consideration as their dik values.
**Customer arrival within the slot is determined by a uniform distribution on [0, D], where D is the
duration of the slot in minutes.

From the table, we see that the average shopping times are comparable for both
15

within-slot customer arrival methods. Interestingly, both the average and the variance
of the shopping times associated with both customer arrival methods decrease when
compared to the TSP-MC row in Table 1. This is likely because the under this scenario,
there is less variance in the state of the store with respect to time when compared to
the scenario where customer arrivals are random. Further, we also see that the number
of contacts also remains similar when compared to the random arrivals case.

5. Discussion and Conclusions
In this study, we present an optimization framework for assigning routes to customers
wishing to shop at grocery stores. We demonstrate numerically, via deployment of this
framework in a discrete-event simulation of customers arriving to a grocery store, that
these formulations are successful in minimizing/eliminating contacts without leading
to a significant increase in shopping time when compared to the deployment of the
standard TSP for optimal route generation.
Among the limitations/concerns associated with this study, the restriction on the
movement of the customer through the store is key. Many customers may not prefer to
shop under such restrictions, and store management may also be hesitant in imposing
and enforcing such restrictions. In such cases, the optimal no-/minimal-contact routes
generated by our framework may be provided to customers as a suggested path through
the store, along with an explanation of the benefits of adhering to the suggested path.
However, given the general grid-like network model of the store that we propose in
this study, and the relatively straightforward TSP extensions that our framework
represents, we anticipate that this approach can be applied to many other similar
situations.
An immediate avenue of future work involves incorporating stochasticity into the
movement of the customer through the store, in terms of their speed of movement, time
spent at various nodes, their compliance with the suggested/assigned route, etc. We
do not present this analysis in this paper due to space limitations, and also because we
wished to introduce our framework with the simplest possible approach to generating
no-/minimal- contact routes for agents wishing to traverse the grid. Such stochasticity
can be incorporated either in the simulation or via the development of robust versions
of the TSP-NC and TSP-MC formulations. Another limitation, which can be addressed
as part of future work, involves the use of actual grocery store and customer data, such
as the size of the store, locations of stock points, customer shopping patterns, shopping
lists, etc., in the parameterization of the framework and the simulation.
Overall, we anticipate that this study can serve as a starting point in the development of such exact optimization frameworks for eliminating/minimizing contacts
among agents traversing connected networks, which may be useful given the prevalent
pandemic. The framework provides a variety of methods by which the network (store)
manager can reduce contacts between agents (customers), depending upon the customer arrival patterns, store management and customer preferences, and the available
computational infrastructure.

Acknowledgements
The authors gratefully acknowledge S.G. Deshmukh and Subhangshu Sen for their
useful suggestions during the course of the work.
16

References
Applegate, D. L., Bixby, R. E., Chvatal, V., & Cook, W. J. (2006). The traveling salesman
problem: a computational study. Princeton university press.
Bektas, T. (2006). The multiple traveling salesman problem: An overview of formulations and
solution procedures. Omega, 34 (3), 209–219.
Bullo, F., Frazzoli, E., Pavone, M., Savla, K., & Smith, S. L. (2011). Dynamic vehicle routing
for robotic systems. Proceedings of the IEEE , 99 (9), 1482–1504.
Cook, W. J. (2011). In pursuit of the traveling salesman: mathematics at the limits of computation. Princeton University Press.
Coppola, D.
(2020).
Percentage change in the visits to grocery stores during coronavirus (covid-19) outbreak in milan from 1st february to 4th march
2020.
(https://www.statista.com/statistics/1103115/grocery-shopping-habits
-during-covid-19-in-italy/, accessed 8th October 2020.)
Dantzig, G., Fulkerson, R., & Johnson, S. (1954). Solution of a large-scale traveling-salesman
problem. Journal of the operations research society of America, 2 (4), 393–410.
Desrochers, M., & Laporte, G. (1991). Improvements and extensions to the miller-tuckerzemlin subtour elimination constraints. Operations Research Letters, 10 (1), 27–36.
Guillaume, D., Michael, D., Abdelghani, B., Damien, T., & Mohamed, D. (2017). Decentralized
motion planning and scheduling of agvs in fms. Transactions on Industrial Informatics.
Herrero-Perez, D., & Martinez-Barbera, H. (2010). Modeling distributed transportation systems composed of flexible automated guided vehicles in flexible manufacturing systems.
IEEE Transactions on Industrial Informatics, 6 (2), 166–180.
Jaganmohan, M. (2020). Opinion about the coronavirus (covid-19) lockdown impact on purchasing essential goods in india in may 2020, by channel. (https://www.statista.com/
statistics/1106418/india-novel-coronavirus-impact-on-grocery-essential
-purchase-by-channel/, accessed 8th October 2020.)
Kara, I., Laporte, G., & Bektas, T. (2004). A note on the lifted miller–tucker–zemlin subtour
elimination constraints for the capacitated vehicle routing problem. European Journal of
Operational Research, 158 (3), 793–795.
Korsah, G. A., Stentz, A., & Dias, M. B. (2013). A comprehensive taxonomy for multi-robot
task allocation. The International Journal of Robotics Research, 32 (12), 1495–1512.
Lee, D.-H., Zaheer, S. A., & Kim, J.-H. (2014). A resource-oriented, decentralized auction
algorithm for multirobot task allocation. IEEE Transactions on Automation Science and
Engineering, 12 (4), 1469–1481.
Miller, C. E., Tucker, A. W., & Zemlin, R. A. (1960). Integer programming formulation of
traveling salesman problems. Journal of the ACM , 7 (4), 326–329.
Parker, R., & Rardin, R. (1983). The traveling salesman problem: An update of research.
Naval Research Logistics Quarterly, 30 (1), 69–96.
Reinelt, G. (1991). Tsplib—a traveling salesman problem library. ORSA journal on computing,
3 (4), 376–384.
Sherali, H. D., & Driscoll, P. J. (2002). On tightening the relaxations of miller-tucker-zemlin
formulations for asymmetric traveling salesman problems. Operations Research, 50 (4), 656–
669.
Spensieri, D., Carlson, J. S., Ekstedt, F., & Bohlin, R. (2015). An iterative approach for collision free routing and scheduling in multirobot stations. IEEE Transactions on Automation
science and Engineering, 13 (2), 950–962.
Toth, P., & Vigo, D. (2014). Vehicle routing: problems, methods, and applications. SIAM.
Vader, R. (2020, May). The realities of retailing in a covid-19 world. (https://home.kpmg/
xx/en/home/insights/2020/03/realities-of-retailing-in-covid-19-world.html,
accessed 10th October 2020.)
Yuan, Y., Cattaruzza, D., Ogier, M., & Semet, F. (2020). A note on the lifted miller–tucker–
zemlin subtour elimination constraints for routing problems with time windows. Operations
Research Letters, 48 (2), 167–169.

17

