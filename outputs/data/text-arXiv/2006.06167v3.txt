Evently: Modeling and Analyzing Reshare Cascades with
Hawkes Processes
Quyu Kong

Rohit Ram

Marian-Andrei Rizoiu

Australian National University &
UTS & Data61, CSIRO
Canberra, Australia
quyu.kong@anu.edu.au

University of Technology Sydney
Sydney, Australia
rohit.ram@uts.edu.au

University of Technology Sydney &
Data61, CSIRO
Sydney, Australia
marian-andrei.rizoiu@uts.edu.au

arXiv:2006.06167v3 [cs.SI] 8 Jan 2021

ABSTRACT
Modeling online discourse dynamics is a core activity in understanding the spread of information, both offline and online, and
emergent online behavior. There is currently a disconnect between
the practitioners of online social media analysis — usually social, political and communication scientists — and the accessibility to tools
capable of examining online discussions of users. Here we present
evently, a tool for modeling online reshare cascades, and particularly retweet cascades, using self-exciting processes. It provides a
comprehensive set of functionalities for processing raw data from
Twitter public APIs, modeling the temporal dynamics of processed
retweet cascades and characterizing online users with a wide range
of diffusion measures. This tool is designed for researchers with
a wide range of computer expertise, and it includes tutorials and
detailed documentation. We illustrate the usage of evently with
an end-to-end analysis of online user behavior on a topical dataset
relating to COVID-19. We show that, by characterizing users solely
based on how their content spreads online, we can disentangle
influential users and online bots.
ACM Reference Format:
Quyu Kong, Rohit Ram, and Marian-Andrei Rizoiu. 2021. Evently: Modeling
and Analyzing Reshare Cascades with Hawkes Processes. In Proceedings of
the Fourteenth ACM International Conference on Web Search and Data Mining
(WSDM ’21), March 8–12, 2021, Virtual Event, Israel. ACM, New York, NY,
USA, 4 pages. https://doi.org/10.1145/3437963.3441708

1

INTRODUCTION

The dissemination of information and opinion through social media, drives change in our societies today. The existence of viral
diffusion of information suggests that some users can exert a disproportionate influence on discourse [2], and that “malicious actors”
can exploit misinformation campaigns causing societal divisiveness [6]. Consequently, there is a clear need for tools to analyze
the dynamics and weaknesses of online discourse systems, and to
characterize users based on how their content diffuses online.
There seems to currently exist a disconnect between the practitioners of online social media analysis (who are most often social
and political scientists, journalists or communication scientists) and
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
WSDM ’21, March 8–12, 2021, Virtual Event, Israel
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8297-7/21/03.
https://doi.org/10.1145/3437963.3441708

tools facilitating this analysis. The latter — when they exist — either require extensive programming experience, or make particular
unrealistic assumptions about the usage flow. The result is that practitioners carefully curate large social media datasets, which remain
underutilized due to the lack of accessible tools. This work aims to
fill this gap by proposing an R package aimed at non-computing
experts — admittedly featuring some quantitative expertise —, to
analyze online discussions and users from the view of information
reshare cascades.
This work addresses two specific open questions concerning
the tools designed to model reshare cascades and analyze online
users. The first open question relates to modeling reshare cascades.
Recent works on information diffusion modeling [12, 17, 22] propose only individual scripts or packages of their proposed models,
often with with disconnected API designs and (potentially complex)
environmental setups. The open question is: does there exist a
tool that allows comparing multiple self-existing models on
real data, while remaining easily accessible to non-experts
in modeling? The second open question relates to describing users
based both on their activity dynamics, and how other users react
to their content. Informative temporal features of reshare cascades
have been explored in prior research [11, 12], but no existing tools
can extract such features at the user-level. The question is can we
extract reshare cascade features easily with a tool and show
their effectiveness in online user analysis.
In this work we address the above-mentioned open questions by
introducing evently1 , an R package dedicated to modeling online
information reshare cascades using self-exciting point processes.
The tool is open-source and available on GitHub1 , and it features
extensive documentation and usage tutorials2 . It currently supports fitting and sampling realizations of Hawkes processes [5]
and variants, using several decaying kernels, both unmarked and
with continuous event marks. evently exposes a number of functionalities around reshare cascades and online users. For online
cascades, it can fit any of its supported models to observed data, and
it can sample synthetic cascades from fitted models. It can be used
to continue likely unfoldings of partially observed cascades, and
compute their expected final popularity. For online users, evently
can jointly fit all cascades initiated by the same users and obtain a
descriptive model for the user. It also allows to build a large number of dynamic user descriptors, such as the viral score (i.e., the
expected size of a cascades posted by the user), and summaries of
cascade sizes. Starting from a dataset containing one day-worth of
1 evently

source code: https://github.com/behavioral-ds/evently
documentation and tutorials: https://www.behavioral-ds.ml/evently/
3 COVID-19 discussions online tutorial: https://github.com/behavioral-ds/user-analysis
2 evently

Online users
tweeting or

Raw data
from Twitter API

retweeting

evently
Reshare cascades
data

preprocessing

Self-exiting processes
cascade

Retweet time and user
attributes for each event

applications

modeling

- Cascade simulations,
- Temporal features,
- Popularity prediction,
…

Figure 1: A pipeline of functionalities (data preprocessing, cascade modeling and further applications) provided by evently
for analyzing reshare cascades of online users and characterizing the temporal dynamics of user online discussions.
Twitter discussion around COVID-19, we showcase the usage of
the tool to analyze the reshare cascades and the online users.
The main contributions of this paper are:
• evently — a software package dedicated to modeling reshare
cascades, and capable of characterizing online users based on
the reshare dynamics of the cascades they generate.
• A set of online tutorials showcasing how the tool can be used
by non-experts, and an example analysis of discussions around
COVID-19 on Twitter.
Related work. Most prior works provide the proposed models
as scripts mainly for reproducing experimental results [8, 12, 17].
Zhao et al. [22] ship their model in an R package as an accessible
tool for predicting the final popularity of retweet cascade. Unlike
the above which are mostly developed for demonstration purposes,
evently is designed with extendible, multi-purpose, unified set of
APIs for modeling with different Hawkes process variants.
There exist other tools that implement multiple models, which
emphasize specific aspects such as language-specific implementations (e.g., THAP [21] in matlab, PoPPy [20] in PyTorch), or network
Hawkes models (pyhawkes [9]). Among these, a Python package,
tick[1], has the most active community and supplies a comprehensive set of models and helper functions for general time-dependent
modeling including Hawkes processes. evently differs from these
toolboxes in two ways: it is a Hawkes process toolbox in the native R language with limited dependencies; it is designed with an
emphasis on online information diffusion modeling.

2

PRELIMINARIES

In this section, we briefly review the theoretical prerequisites concerning modeling reshare cascades using point processes.
Reshare cascades. evently analyzes the spread of online information in forms of online reshare cascades. A reshare cascade consists of an initial user post and some reshare events of the post
by other users. We denote a cascade observed up to time 𝑇 as
H (𝑇 ) = {𝑡 0, 𝑡 1, . . . } where 𝑡𝑖 ∈ H (𝑇 ) are the event times relative
to the first event (𝑡 0 = 0). We denote cascades with additional information about events — dubbed here as event marks — as marked cascades. We use the notation H 𝑚 (𝑇 ) = {(𝑡 0, 𝑚 0 ), (𝑡 1, 𝑚 1 ), . . . }, where
each event is a tuple of an event time and an event mark [12, 22].
The Hawkes processes. evently models reshare cascades using
Hawkes processes [5] — a type of point processes with the selfexciting property, i.e., the occurrence of past events increases the
likelihood of future events. The dynamics of event generation in a
Hawkes process is controlled by its event intensity function defined
Í
as 𝜆(𝑡 | H (𝑇 )) = 𝑡𝑖 <𝑡 𝜙 (𝑡 − 𝑡𝑖 ), where 𝜙 : R+ → R+ is a kernel
function capturing the decaying influence from a historical event.
Two widely adopted parametric forms for the kernel function 𝜙

include the exponential function 𝜙 𝐸𝑋 𝑃 (𝑡) = 𝜅𝜃𝑒 −𝜃𝑡 and the powerlaw function 𝜙 𝑃𝐿 (𝑡) = 𝜅 (𝑡 + 𝑐) −(1+𝜃 ) .
The branching factor 𝑛 ∗ is an important quantity for the Hawkes
and HawkesN processes (as discussed in Section 3) and is defined as
the expected number of events directly spawned by a single event.
The HawkesN process [17] is a finite-population variant of the
Hawkes processes. It assumes a finite 𝑁 — the maximum number
of events in the process —, and modulates the likelihood of future
event by the remaining proportion of total population.
SEISMIC [22] is a doubly stochastic formulation of Hawkes processes where the branching factor (dubbed as infectiousness in [22])
is a stochastic time-varying function 𝑛 ∗ (𝑡) estimated from the observed events H 𝑚 (𝑡).
Event simulations and parameter estimations. We apply the
rejection-sampling algorithm [13] to simulate events from Hawkes
and HawkesN processes and we estimate model parameters using
the general log-likelihood function for point processes [4].
Cascades joint modeling. When analyzing reshare dynamics of
online items (like Youtube videos and news articles) or users, it is
desirable to account for multiple cascades relating to them. Kong
et al. [7] proposed to jointly model a group of cascades with a
shared Hawkes model by summing the log-likelihood functions of
individual cascades. In Section 4, we model cascades initiated by
same users, and we show that the learned models can be used to
separate active Twitter users from bots.
Final popularity prediction. The final popularity of a reshare
cascade is the total number of events which occurred until the
cascade has ended. Predicting the final popularity of an active
cascade has been extensively explored in prior works [12, 17, 22].
Viral score 𝑣 describes a user or an online item, and it is defined as
the expected popularity of a newly started cascade relating to the
given user or item. It is obtained using the model jointly trained on
all observed cascades of the user (item) [18].
We refer to the documentation2 for detailed mathematical definitions of aforementioned and other quantities.

3

EVENTLY OVERVIEW

evently is an R package for modeling online reshare cascades — and
retweet cascades in particular — using Hawkes processes and their
variants. By design, it provides an integrated set of functionalities
to enable one to conduct cascade-level or user-level analysis of
reshare diffusion.
Design. evently is designed around the interactions among three
components: data (i.e., reshare cascades), models and diffusion measures. In applications, models can be used to simulate new cascades,
and diffusion measures are analyzed with off-the-shelf supervised
and unsupervised tools.

For cascade-level analysis, a reshare cascade is usually observed
until a certain time 𝑇 . A chosen model is then fitted on the cascade capturing its temporal dynamics. From the learned model,
evently characterizes the cascade with derived quantities such
as the branching factor. It can also simulate possible future developments of the cascade after time 𝑇 and, in addition, derive the
expectation of all future unfolding (i.e., the final popularity).
When performing user-level analysis, cascades are grouped based
on the user who initiates them. evently models these cascades
jointly, and the resulting fitted model encodes the reshare patterns
at a user level. Similarly, new reshare cascades can be simulated
from this model, and the viral score denoting the expected popularity of a new cascade from the same user can be derived. Other
temporal features for the user that can be derived from the group
of cascades include 6-point summaries (mean, first/third quarters,
median, minimum and maximum values) of cascade sizes, reshare
event time intervals and event magnitudes [12].
Implementation. evently contains two core functions in terms
of data and models: fit_series fits a model on given cascades;
generate_series simulates cascades from a provided model. A
model can be indicated by passing an model_type argument to
these functions where we use abbreviated strings to denote models. For example, EXP and PL stands for Hawkes processes with
an exponential kernel and a power-law kernel respectively, while
mEXP and mPL are their marked variants. We refer to the package
documentation2 for a complete table of model abbreviations.
Data structure. Cascades are structured as tables (or data.frames
in R) where a time column stores event timestamps relative to the
first event 𝑡 0 and an optional magnitude column holds the corresponding event mark information. The APIs of evently also work
with an R list of cascade data.frames assuming these cascades
share a same model.
Optimization. As mentioned in Section 2, the model parameter
estimation is performed by minimizing the log-likelihood function
of the point process [4] via AMPL, a modeling language designed to
describe and solve large-scale optimization problems. Compared
to other optimization tools which require precomputed or numerical gradients, AMPL provides automatic differentiation of functions
leading to model implementation efficiency. Moreover, it is also
compatible with a wide range of solvers including the state-of-theart non-linear solver IPOPT [19] and the global solver LGO [14].
Installation. evently can be installed in R directly from Github1 :
remotes::install_github(‘behavioral-ds/evently’). It automatically configures dependencies on its first load, which if performed manually would involve considerable effort.

4

CASE STUDY: COVID-19 DISCUSSIONS

As a demonstration of evently, we apply it to a dataset related to
online discussions about the COVID-19 [3] and present individual
functionalities with code snippets and the outputs. All steps and
results presented here are reproducible which can be accessed via
an online Rmarkdown notebook3 .
Dataset. We use a dataset of tweets concerning the novel coronavirus COVID-19 pandemic in 2020. Chen et al. [3] collected the
tweet IDs via Twitter’s streaming API with a set of manually selected accounts and keywords. We limit our dataset to tweets posted

on 31st Jan. The dataset is provided as a list of tweet IDs which require re-hydration with tools like twarc4 . As deleted tweets cannot
be recovered, we obtain 68.8% of the original dataset.
Import from raw data. Importing the COVID-19 dataset, and
extracting user and cascade information can be achieved by the
parse_raw_tweets_to_cascades function from evently. It reads
and derives pertinent information, including tweets which spawned
retweet cascades during the studied period. Our dataset contains
1, 566, 328 unique tweets from 919, 176 unique users. In total, evently
extracts 423, 443 retweet cascades, started by 280, 336 users.
Fit observed reshare cascades efficiently. evently fits Hawkes
processes efficiently by leveraging the AMPL interface with a range
of model choices. Fig. 2a depicts an example where we apply marked
Hawkes processes with the power-law kernel function to jointly fit
the cascades of two randomly selected Twitter users: @BobOngHugots
(account posting quotes from a Filipino author) and @Jaefans_Global
(account of a K-pop singer), respectively. We employ the function fit_series from evently and obtain the fitted models. The
learned kernel functions for the two users are plotted at lines 7–8,
and shown in the lower panel. We observe that, on average, tweets
posted by @BobOngHugots have an initial higher intensity but
demonstrate a faster decay trend in followers’ memory compared to
@Jaefans_Global. On the other hand, tweets from @Jaefans_Global
tend to influence followers for a longer period.
Simulate processes with a range of models. With a given model,
evently allows to sample entire synthetic new cascades, or continue partially observed cascades. For instance, in line 1–3 in Fig. 2b
we use evently to simulate a hypothetical cascade started by
@BobOngHugots using the model obtained in Fig. 2a. The lower
panel plots the simulated cascade which contains 21 reshare events
which is a pretty large cascade given that @BobOngHugots’s viral
score is 7.40). In another example at Fig. 2c, line 1–3, we partially
observe a real cascade from @BobOngHugots, and we use evently
to continue the cascade unfolding via simulation. 25 new events
are spawned following the observed history (line 2–6).
Compute popularity measures. The above-mentioned procedure outputs just one possible ending for a given cascade. Using
evently we can compute the cascade’s popularity, i.e. the expected
cascade size over all possible unfolding. At line 7–13, we obtain the
expected final popularity with two methods: a marked power-law
Hawkes process and the SEISMIC model, which output final sizes
values around 458 and 730, respectively. We note that the true final
popularity of the cascade is 472 obtained by checking the retweets
within following 10 days (1st Feb to 10th Feb). Another two diffusion measures are computed in the example: @BobOngHugots’s
branching factor, and their viral score.
Visualize users in a latent space. The aforementioned applications provide methods to study individual user, however it might
be desirable to analyze users in relation to each other. Here we
augment the user information with two additional user metrics,
user influence and botness scores, provided by an open source
tool, BirdSpotter [15]. We leverage the temporal features from
evently and the augmented user metrics to create a visualization
of the users in the dataset. We select the top 300 users who initiated the most number of cascades in the dataset. For these users,
4 https://github.com/DocNow/twarc

1
2
3
4
5
6
7

kernel function value

8

# "selected_users" are @BobOngHugots and @Jaefans_Global
# fit Hawkes process on cascades initiated by the selected users
user_cascades_fitted <- lapply(selected_users, function(user) {
fit_series(data = user_cascades[[user]], model_type = ’mPL’,
observation_time = times[[user]])
})
plot_kernel_function(user_cascades_fitted) +
scale_color_discrete(labels = c("@BobOngHugots", "@Jaefans_Global"))
0.04

model

0.03
0.02

@BobOngHugots
@Jaefans_Global

0.01

2
3

0

250

500

(a)

# simulate a new cascade from @BobOngHugots
sim_cascade <- generate_series(user_cascades_fitted[[1]], M = user_magnitude)
plot_event_series(cascade = sim_cascade, model = user_cascades_fitted[[1]])

intensity

0.04
0.02
0.00
0

1000

2000

time

2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

3000

4000

(b)

# simulate a cascade with a "selected_cascade" from @BobOngHugots
sim_cascade <- generate_series(user_cascades_fitted[[1]], M = user_magnitude,
init_history = selected_cascade)
sprintf(’%s new events simulated after cascade’,
nrow(sim_cascade[[1]]) - nrow(selected_cascade))
#> 25 new events simulated after cascade
predict_final_popularity(user_cascades_fitted[[1]],
selected_cascade, selected_time)
#> 458.3028
# predict with SEISMIC model, assume we have fitted the SEISMIC model
predict_final_popularity(user_cascades_SEISMIC_fitted[[1]],
selected_cascade, selected_time)
#> 729.923
get_branching_factor(user_cascades_fitted[[1]])
#> 0.7681265
get_viral_score(user_cascades_fitted[[1]])
#> 7.408275

(c)

Figure 2: Fitting and simulation of cascades from the COVID19 dataset with evently. Fig. (a) depicts kernel functions of
learned Hawkes processes and Fig. (b) draws a simulated reshare event history with intensity values.
we build their temporal features with evently using the function
generate_features. In Fig. 3, we apply the state-of-the-art dimension reduction tool t-SNE [10] to build a two-dimensional space
from the higher dimensional space of the temporal features. Finally,
we label as bots the users with a botness score higher than 0.6 [16],
and we color them based on their user influence scores.
From Fig. 3, we observe two obvious clusters that divide less influential users (top-right corner) from high influence users (bottomleft corner). Noticeably, most users who are classified as bots group
at the top-right corner, i.e., the less influential side. On the contrary,
users with high influence scores are less likely to be bots.

5

● ●
●
●
● ●●
●
●
●
● ●● ●
●
●●
●
●
●
●●

●●
●
●

●
●
●● ● ●
● ●
●
● ●
●
● ●●
●●
●
●
●
●
●●
●
●
●● ● ●● ●●
●
●●
● ●● ● ●
● ● ●● ● ●
●
●
●
● ●
●
●
●
● ●
●
●
● ● ●●
●●
●
●
●
●●
●
●
● ●●● ●●●●
●
●
●●
●
●● ●●● ●
●● ●
●
● ●
● ●●
● ●
● ●●
●
●● ●
●
● ●
● ●
●
●
● ● ●
● ●●
●
●
●
● ● ● ●
●
● ●●
●
●●●● ● ●
●
●
●
●
●●
●●
● ●

● ●●●
●
●
●
●●● ● ● ●
●
●
● ●
●
●
●
●
●
● ●●
● ●●
● ●● ●
●
●
● ● ●
●
● ●●● ● ● ● ● ●
●
●
● ● ● ●
●
●
●
●
● ● ●
●
●
●● ● ●
●
●
●
●●
●
●
●●
● ●●●
●
●
●●
●
●

Bot
influence

●

1

Not Bot
10

100

750

0.06

1

●

0.00

relative time
1

●
●
●

CONCLUSION AND FUTURE WORK

In this work, we present, evently, a tool for analyzing Twitter
users with an emphasis on their involvement in online information
diffusions. First, we provide the theoretical background information.
Then we give an overview of evently where it models reshare
cascades initiated by users. Lastly, given a dataset of tweets around
COVID-19, we demonstrate the applications.

Acknowledgments
This research was partially funded by the National Security College, at
the Australian National University through a Greenhouse Policy grant,
Facebook Research under the Content Policy Research Initiative grants and

Figure 3: Presenting users where the positions are obtained
via t-SNE [10] on temporal diffusion features from evently.
Circle colors indicate the user botness (darker blue suggests
higher botness values) and circle sizes show the user influence (larger sizes mean higher influence values).
the Defence Science and Technology Group of the Australian Department
of Defence, through the Modelling in the Gray Zone program.

REFERENCES
[1] Emmanuel Bacry, Martin Bompaire, Philip Deegan, Stéphane Gaïffas, and Søren V
Poulsen. 2017. Tick: a Python library for statistical learning, with an emphasis
on hawkes processes and time-dependent models. JMLR (2017).
[2] Manuel Cebrian, Iyad Rahwan, and Alex "Sandy" Pentland. 2016. Beyond viral.
Commun. ACM (2016).
[3] Emily Chen, Kristina Lerman, and Emilio Ferrara. 2020. Tracking Social Media
Discourse About the COVID-19 Pandemic: Development of a Public Coronavirus
Twitter Data Set. JMIR Public Health and Surveillance (2020).
[4] Daryl J Daley and David Vere-Jones. 2008. Conditional Intensities and Likelihoods.
In An introduction to the theory of point processes. Vol. I. Springer, Chapter 7.2.
[5] Alan G Hawkes. 1971. Spectra of some self-exciting and mutually exciting point
processes. Biometrika (1971).
[6] Dongwoo Kim, Timothy Graham, Zimin Wan, and Marian-Andrei Rizoiu. 2019.
Analysing user identity via time-sensitive semantic edit distance (t-SED): a case
study of Russian trolls on Twitter. Journal of Computational Social Science (2019).
[7] Quyu Kong, Marian-Andrei Rizoiu, and Lexing Xie. 2020. Describing and Predicting Online Items with Reshare Cascades via Dual Mixture Self-exciting Processes.
In CIKM.
[8] Quyu Kong, Marian-Andrei Rizoiu, and Lexing Xie. 2020. Modeling Information Cascades with Self-exciting Processes via Generalized Epidemic Models. In
WSDM’20.
[9] Scott Linderman and Ryan Adams. 2014. Discovering latent network structure
in point process data. In ICML.
[10] Laurens van der Maaten and Geoffrey Hinton. 2008. Visualizing data using t-SNE.
JMLR (2008).
[11] Travis Martin, Jake M Hofman, Amit Sharma, Ashton Anderson, and Duncan J
Watts. 2016. Exploring limits to prediction in complex social systems. In WWW.
[12] Swapnil Mishra, Marian-Andrei Rizoiu, and Lexing Xie. 2016. Feature Driven
and Point Process Approaches for Popularity Prediction. In CIKM.
[13] Yosihiko Ogata. 1981. On Lewis’ simulation method for point processes. IEEE
Transactions on Information Theory (1981).
[14] János D Pintér. 2007. Nonlinear optimization with GAMS/LGO. Journal of Global
Optimization (2007).
[15] Rohit Ram, Quyu Kong, and Marian-Andrei Rizoiu. 2021. Birdspotter: A Tool for
Analyzing and Labeling Twitter Users. WSDM.
[16] Marian-Andrei Rizoiu, Timothy Graham, Rui Zhang, Yifei Zhang, Robert Ackland,
and Lexing Xie. 2018. # DebateNight: The Role and Influence of Socialbots on
Twitter During the 1st 2016 US Presidential Debate. In ICWSM.
[17] Marian-Andrei Rizoiu, Swapnil Mishra, Quyu Kong, Mark Carman, and Lexing
Xie. 2018. SIR-Hawkes: on the Relationship Between Epidemic Models and
Hawkes Point Processes. In WWW.
[18] Marian-Andrei Rizoiu and Lexing Xie. 2017. Online Popularity Under Promotion:
Viral Potential, Forecasting, and the Economics of Time. In ICWSM.
[19] A Wächter and L T Biegler. 2006. On the Implementation of a Primal-Dual Interior
Point Filter Line Search Algorithm for Large-Scale Nonlinear Programming.
Mathematical Programming (2006).
[20] Hongteng Xu. 2018. PoPPy: A Point Process Toolbox Based on PyTorch. arXiv
(2018).
[21] Hongteng Xu and Hongyuan Zha. 2017. THAP: A matlab toolkit for learning
with Hawkes processes. arXiv (2017).
[22] Qingyuan Zhao, Murat A. Erdogdu, Hera Y. He, Anand Rajaraman, and Jure
Leskovec. 2015. SEISMIC: A Self-Exciting Point Process Model for Predicting
Tweet Popularity. In KDD.

