covid19.analytics: An R Package to Obtain, Analyze and Visualize Data from
the Corona Virus Disease Pandemic
Marcelo Ponce∗
SciNet HPC Consortium, University of Toronto
661 University Ave., Suite 1140. Toronto, ON M5G 1M1 - Canada

Amit Sandhel

arXiv:2009.01091v1 [cs.CY] 2 Sep 2020

Brampton, Ontario. Canada

Abstract
With the emergence of a new pandemic worldwide, a novel strategy to approach it has emerged. Several
initiatives under the umbrella of “open science” are contributing to tackle this unprecedented situation.
In particular, the “R Language and Environment for Statistical Computing” [1, 2] offers an excellent tool
and ecosystem for approaches focusing on open science and reproducible results. Hence it is not surprising
that with the onset of the pandemic, a large number of R packages and resources were made available for
researches working in the pandemic. In this paper, we present an R package that allows users to access and
analyze worldwide data from resources publicly available. We will introduce the covid19.analytics package
[3], focusing in its capabilities and presenting a particular study case where we describe how to deploy the
COVID19.ANALYTICS Dashboard Explorer.
Keywords: CoViD19, R package, ...

Contents
1 Introduction
2 The covid19.analytics R Package
2.1 Data Accessibility . . . . . . . . . . . . . . . . . . .
2.1.1 Data retrieval options . . . . . . . . . . . . .
2.1.2 Data Structure . . . . . . . . . . . . . . . . .
2.1.3 Data Integrity and Consistency . . . . . . . .
2.1.4 CoViD19 Genomic Data . . . . . . . . . . . .
2.1.5 Data Repositories . . . . . . . . . . . . . . .
2.2 Analytical & Graphical Indicators Functions . . . . .
2.2.1 Details and Specifications of the Analytical &
2.2.2 Modelling the Evolution of the Virus Spread

2
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Visualization Functions
. . . . . . . . . . . . . .

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

4
. 4
. 5
. 5
. 5
. 6
. 7
. 7
. 9
. 13

3 Examples and Applications
14
3.1 Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
3.2 Retrieving and Accessing Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
3.3 Basic Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
∗ Corresponding

author
Email addresses: mponce@scinet.utoronto.ca (Marcelo Ponce), amit.sandhel@gmail.com (Amit Sandhel)

Preprint submitted to Elsevier

September 3, 2020

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

15
16
18
20
21
21
24
28
30

4 Case Study: The covid19.analytics Dashboard Explorer
4.1 Dashboard’s Front End Implementation . . . . . . . . . . .
4.1.1 Accessing the covid19.analytics Dashboard Explorer .
4.1.2 Specific Libraries Needed in the Dasbhoard . . . . .
4.1.3 Dashboard Layout . . . . . . . . . . . . . . . . . . .
4.1.4 Additional Elements of the Dashboard . . . . . . . .
4.2 Dashboard’s Back End Implementation . . . . . . . . . . .
4.3 Dashboard’s Server Configuration . . . . . . . . . . . . . . .
4.3.1 Decentralized Systems and Services . . . . . . . . . .

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.

33
34
34
35
35
39
40
42
43

3.4
3.5
3.6

3.3.1 Identifying Geographical Locations
3.3.2 Reports . . . . . . . . . . . . . . .
3.3.3 Totals per Geographical Location .
3.3.4 Growth Rate . . . . . . . . . . . .
3.3.5 Trends . . . . . . . . . . . . . . . .
3.3.6 Interactive Visualization Tools . .
Modeling the Virus Spread . . . . . . . .
Working with your own data . . . . . . .
Genomics . . . . . . . . . . . . . . . . . .

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

5 Conclusions

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.

43

1. Introduction
In 2019 a novel type of Corona Virus was first reported, originally in the province of Hubei, China. In a
time frame of months this new virus was capable of producing a global pandemic of the Corona Virus Disease
(CoViD19), which can end up in a Severe Acute Respiratory Syndrome (SARS-COV-2). The origin of the
virus is still unclear [4, 5, 6], although some studies based on genetic evidence, suggest that it is quite unlikely
that this virus was human made in a laboratory, but instead points towards cross-species transmission [7, 8].
Although this is not the first time in the human history when humanity faces a pandemic, this pandemic has
unique characteristics. For starting the virus is “peculiar” as not all the infected individuals experience the
same symptoms. Some individuals display symptoms that are similar to the ones of a common cold or flu
while other individuals experience serious symptoms that can cause death or hospitalization with different
levels of severity, including staying in intensive-care units (ICU) for several weeks or even months. A recent
medical survey shows that the disease can transcend pulmonary manifestations affecting several other organs
[9]. Studies also suggest that the level of severity of the disease can be linked to previous conditions [10],
gender [11], or even blood type [12] but the fundamental and underlying reasons still remain unclear.
Some infected individuals are completely asymptomatic, which makes them ideal vectors for disseminating
the virus. This also makes very difficult to precisely determine the transmission rate of the disease, and
it is argued that in part due to the peculiar characteristics of the virus, that some initial estimates were
underdetermining the actual value [13]. Elderly are the most vulnerable to the disease and reported mortality
rates vary from 5 to 15% depending on the geographical location. In addition to this, the high connectivity
of our modern societies, make possible for a virus like this to widely spread around the world in a relatively
short period of time.
What is also unprecedented is the pace at which the scientific community has engaged in fighting this
pandemic in different fronts [14]. Technology and scientific knowledge are and will continue playing a
fundamental role in how humanity is facing this pandemic and helping to reduce the risk of individuals
to be exposed or suffer serious illness. Techniques such as DNA/RNA sequencing, computer simulations,
models generations and predictions, are nowadays widely accessible and can help in a great manner to
evaluate and design the best course of action in a situation like this [15]. Public health organizations are
relying on mathematical and data-driven models (e.g. [16]), to draw policies and protocols in order to try to
mitigate the impact on societies by not suffocating their health institutions and resources [17]. Specifically,
2

mathematical models of the evolution of the virus spread, have been used to establish strategies, like social
distancing, quarantines, self-isolation and staying at home, to reduce the chances of transmission among
individuals. Usually, vaccination is also another approach that emerges as a possible contention strategy,
however this is still not a viable possibility in the case of CoViD19, as there is not vaccine developed yet
[18, 19].
Simulations of the spread of virus have also shown that among the most efficient ways to reduce the
spread of the virus are [20]: increasing social distancing, which refers to staying apart from individuals so
that the virus can not so easily disperse among individuals; improving hygiene routines, such as proper
hand washing, use of hand sanitizer, etc. which would eventually reduce the chances of the virus to remain
effective; quarantine or self-isolation, again to reduce unnecessary exposure to other potentially infected
individuals. Of course these recommendations based on simulations and models can be as accurate and
useful as the simulations are, which ultimately depend on the value of the parameters used to set up the
initial conditions of the models. Moreover these parameters strongly depend on the actual data which can be
also sensitive to many other factors, such as data collection or reporting protocols among others [21]. Hence
counting with accurate, reliable and up-to-date data is critical when trying to understand the conditions for
spreading the virus but also for predicting possible outcomes of the epidemic, as well as, designing proper
containment measurements.
Similarly, being able to access and process the huge amount of genetic information associated with the virus
has proben to shred light into the disease’s path [22, 23].
Encompassing these unprecedented times, another interesting phenomenon has also occurred, in part
related to a contemporaneous trend in how science can be done by emphasizing transparency, reproducibility
and robustness: an open approach to the methods and the data; usually refer as open science. In particular,
this approach has been part for quite sometime of the software developer community in the so-called open
source projects or codes. This way of developing software, offers a lot of advantages in comparison to the
more traditional and closed, proprietary approaches. For starting, it allows that any interested party can
look at the actual implementation of the code, criticize, complement or even contribute to the project.
It improves transparency, and at the same time, guarantees higher standards due to the public scrutiny;
which at the end results in benefiting every one: the developers by increasing their reputation, reach and
consolidating a widely validated product and the users by allowing direct access to the sources and details
of the implementation. It also helps with reproducibility of results and bugs reports and fixes. Several
approaches and initiatives are taking the openness concepts and implementing in their platforms. Specific
examples of this have drown the Internet, e.g. the surge of open source powered dashboards [24], open data
repositories, etc.
Another example of this is for instance the number of scientific papers related to CoViD19 published
since the beginning of the pandemic [25], the amount of data and tools developed to track the evolution of
pandemic, etc. [26]. As a matter of fact, scientists are now drowning in publications related to the CoViD19
[27, 28], and some collaborative and community initiatives are trying to use machine learning techniques to
facilitate identify and digest the most relevant sources for a given topic [29, 30, 31].
The “R Language and Environment for Statistical Computing” [1, 2] is not exception here. Moreover,
promoting and based on the open source and open community principles, R has empowered scientists and
researchers since its inception. Not surprisingly then, the R community has contributed to the official CRAN
[32] repository already with more than a dozen of packages related to the CoViD19 pandemic since the
beginning of the crisis. In particular, in this paper we will introduce and discuss the covid19.analytics R
package [3], which is mainly designed and focus in an open and modular approach to provide researchers quick
access to the latest reported worldwide data of the CoViD19 cases, as well as, analytical and visualization
tools to process this data.
This paper is organized as follow: in Sec. 2 we describe the covid19.analytics , in Sec. 3 we present some
examples of data analysis and visualization, in Sec. 4 we describe in detail how to deploy a web dashboard
employing the capabilities of the covid19.analytics package providing full details on the implementation
so that this procedure can be repeated and followed by interested users in developing their own dashboards.
Finally we summarize some conclusions in Sec. 5.
3

2. The covid19.analytics R Package
The covid19.analytics R package [3] allows users to obtain live1 worldwide data from the novel
CoViD19. It does this by accessing and retrieving the data publicly available and published by two main
sources: the “COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at
Johns Hopkins University” [33] for the worldwide and US data, and the city of Toronto for the Toronto
data [34]. The package also provides basic analysis and visualization tools and functions to investigate these
datasets and other ones structured in a similar fashion.
The covid19.analytics package is an open source tool, which its main implementation and API is the
R package [3]. In addition to this, the package has a few more adds-on:
• a central GitHUB repository, https://github.com/mponce0/covid19.analytics where the latest
development version and source code of the package are available. Users can also submit tickets for
bugs, suggestions or comments using the "issues" tab.
• a rendered version with live examples and documentation also hosted at GitHUB pages, https:
//mponce0.github.io/covid19.analytics/;
• a dashboard for interactive usage of the package with extended capabilities for users without any
coding expertise, https://covid19analytics.scinet.utoronto.ca. We will discuss the details of
the implementation in Sec. 4.
• a “backup” data repository hosted at GitHUB, https://github.com/mponce0/covid19analytics.
datasets – where replicas of the live datasets are stored for redundancy and robust accesibility sake
(see Fig. 1).
2.1. Data Accessibility
One of the main objectives of the covid19.analytics package is to make the latest data from the
reported cases of the current CoViD19 pandemic promptly available to researchers and the scientific community In what follows we describe the main functionalities from the package regarding data accessibility.
The covid19.data function allows users to obtain realtime data about the CoViD19 reported cases from
the JHU’s CCSE repository, in the following modalities:
• aggregated data for the latest day, with a great ’granularity’ of geographical regions (ie.
provinces, states, countries)

cities,

• time series data for larger accumulated geographical regions (provinces/countries)
• deprecated : we also include the original data style in which these datasets were reported initially.
The datasets also include information about the different categories (status) "confirmed"/"deaths"/"recovered"
of the cases reported daily per country/region/city.
This data-acquisition function, will first attempt to retrieve the data directly from the JHU repository
with the latest updates. If for what ever reason this fails (eg. problems with the connection) the package will
load a preserved “image” of the data which is not the latest one but it will still allow the user to explore this
older dataset. In this way, the package offers a more robust and resilient approach to the quite dynamical
situation with respect to data availability and integrity.
In addition to the data of the reported cases of CoViD19, the covid19.analytics package also provides
access to genomics data of the virus. The data is obtained from the National Center for Biotechnology
Information (NCBI) databases [35, 36].
1 The

data usually is accessible from the repositories with a 24 hours delay.

4

argument
aggregated
ts-confirmed
ts-deaths
ts-recovered
ts-ALL
ts-dep-confirmed
ts-dep-deaths
ts-dep-recovered
ALL
ts-Toronto
ts-confirmed-US
ts-deaths-US

description
latest number of cases aggregated by country
Time Series data
time series data of confirmed cases
time series data of fatal cases
time series data of recovered cases
all time series data combined
Deprecated data formats
time series data of confirmed cases as originally reported (deprecated)
time series data of deaths as originally reported (deprecated)
time series data of recovered cases as originally reported (deprecated)
Combined
all of the above
Time Series data for specific locations
time series data of confirmed cases for the city of Toronto, ON - Canada
time series data of confirmed cases for the US detailed per state
time series data of fatal cases for the US detailed per state

Table 1: List of data retrieval functions available in the covid19.analytics package.

2.1.1. Data retrieval options
Table 1 shows the functions available in the covid19.analytics package for accessing the reported cases
of the CoViD19 pandemic. The functions can be divided in different categories, depending on what data
they provide access to. For instance, they are distinguished between agreggated and time series data sets.
They are also grouped by specific geographical locations, i.e. worldwide, United States of America (US) and
the City of Toronto (Ontario, Canada) data.
2.1.2. Data Structure
The Time Series data is structured in an specific manner with a given set of fields or columns, which
resembles the following format:
"Province.State" | "Country.Region" | "Lat" | "Long" | ... sequence of dates ...
One of the modular features this package offers is that if an user has data structured in a data.frame
organized as described above, then most of the functions provided by the covid19.analytics package for
analyzing Time Series data will just work with the user’s defined data. In this way it is possible to add
new data sets to the ones that can be loaded using the repositories predefined in this package and extend
the analysis capabilities to these new datasets.
Sec. 3.5 presents an example of how external or synthetic data has to be structured so that can use the
function from the covid19.analytics package. It is also recommended to check the compatibility of these
datasets using the Data Integrity and Consistency Checks functions described in the following section.
2.1.3. Data Integrity and Consistency
Due to the ongoing and rapid changing situation with the CoViD-19 pandemic, sometimes the reported
data has been detected to change its internal format or even show some anomalies or inconsistencies 1 .
For instance, in some cumulative quantities reported in time series datasets, it has been observed that
these quantities instead of continuously increase sometimes they decrease their values which is something
that should not happen2 . We refer to this as an inconsistency of “type II”.
1 See
2 See

https://github.com/CSSEGISandData/COVID-19/issues/.
for instance, https://github.com/CSSEGISandData/COVID-19/issues/2165.

5

Some negative values have been reported as well in the data, which also is not possible or valid; we call
this inconsistency of “type I”.
When this occurs, it happens at the level of the origin of the dataset, in our case, the one obtained from
the JHU/CCESGIS repository [33]. In order to make the user aware of this, we implemented two consistency
and integrity checking functions:
• consistency.check: this function attempts to determine whether there are consistency issues within
the data, such as, negative reported value (inconsistency of “type I”) or anomalies in the cumulative
quantities of the data (inconsistency of “type II”)
• integrity.check: this determines whether there are integrity issues within the datasets or changes
to the structure of the data
Alternatively we provide a data.checks function that will execute the previous described functions on
an specified dataset.
Data Integrity. It is highly unlikely that the user would face a situation where the internal structure of
the data or its actual integrity may be compromised. However if there are any suspicious about this, it is
possible to use the integrity.check function in order to verify this. If anything like this is detected we
urge users to contact us about it, e.g. https://github.com/mponce0/covid19.analytics/issues.
Data Consistency. Data consistency issues and/or anomalies in the data have been reported several times1
These are claimed, in most of the cases, to be missreported data and usually are just an insignificant number
of the total cases. Having said that, we believe that the user should be aware of these situations and we
recommend using the consistency.check function to verify the dataset you will be working with.
Nullifying Spurious Data. In order to deal with the different scenarios arising from incomplete, inconsistent
or missreported data, we provide the nullify.data function, which will remove any potential entry in the
data that can be suspected of these incongruencies. In addition ot that, the function accepts an optional
argument stringent=TRUE, which will also prune any incomplete cases (e.g. with NAs present).
2.1.4. CoViD19 Genomic Data
Similarly to the rapid developments and updates in the reported cases of the disease, the sequencing of
the virus is moving almost at equal pace. That’s why the covid19.analytics package provides access to
good number of the genomics data currently available.
The covid19.genomic.data function allows users to obtain the CoViD19’s genomics data from NCBI’s
databases [36]. The type of genomics data accessible from the package is described in Table 2.
Although the package attempts to provide the latest available genomic data, there are a few important
details and differences with respect to the reported cases data. For starting, the amount of genomic information available is way larger than the data reporting the number of cases which adds some additional
constraints when retrieving this data. In addition to that, the hosting servers for the genomic databases
impose certain limits on the rate and amounts of downloads.
In order to mitigate these factors, the covid19.analytics package employs a couple of different strategies
as summarized below:
• most of the data will be attempted to be retrieved live from NCBI databases – same as using
src=’livedata’.
• if that is not possible, the package keeps a local version of some of the largest datasets (i.e. genomes,
nucleotides and proteins) which might not be up-to-date – same as using src=’repo’.
1 See

https://github.com/CSSEGISandData/COVID-19/issues/.

6

type
genomic

description
a composite list containing different indicators and elements of the SARS-CoV-2 genomic information
genetic composition of the reference sequence of the
SARS-CoV-2 from GenBank

genome

fasta

genetic composition of the reference sequence of the
SARS-CoV-2 from a fasta file

ptree

phylogenetic tree as produced by NCBI data servers

nucleotide protein

list and composition of nucleotides/proteins from the
SARS-CoV-2 virus
FASTA sequences files for nucleotides, proteins and
coding regions

nucleotide-fasta
protein-fasta

source
https://www.ncbi.nlm.
nih.gov/sars-cov-2/
https://www.ncbi.nlm.
nih.gov/nuccore/NC_
045512
https://www.ncbi.nlm.
nih.gov/nuccore/NC_
045512.2?report=fasta
https://www.ncbi.nlm.
nih.gov/labs/virus/
vssi/#/precomptree
NCBI Virus DataHub

Table 2: Different types of genomic data retrieved by the covid19.analytics package.

• the package will attempt to obtain the data from a mirror server with the datasets updated on a
regular basis but not necessarily with the latest updates – same as using src=’local’.
These sequence of steps are implemented in the package using tryCath() exceptions in combination
with recursivity, i.e. the retrieving data function calling itself with different variations indicating which data
source to use.
2.1.5. Data Repositories
As the covid19.analytics package will try present the user with the latest data sets possible, different
strategies (as described above) may be in place to achieve this. One way to improve the realiability of the
access to and avialability of the data is to use a series of replicas of the datasets which are hosted in different
locations. Fig. 1 summarizes the different data sources and point of access that the package employs in
order to retrieve the data and keeps the latest datasets available.
Genomic data as mentioned before is accessed from NCBI databases. This is implemented in the
covid19.genomic.data function employing the ape [37] and rentrez [38] packages. In particular the
proteins datasets, with more than 100K entries, is quite challenging to obtain “live”. As a matter of fact, the
covid19.genomic.data function accepts an argument to specify whether this should be the case or not. If
the src argument is set to ’livedata’ then the function will attempt to download the proteins list directly
from NCBI databases. If this fail, we recommend using the argument src=’local’ which will provide an
stagered copy of this dataset at the moment in which the package was submitted to the CRAN repository,
meaning that is quite likely this dataset won’t be complete and most likely outdated. Additionaly, we offer
a second replica of the datasets, located at https://github.com/mponce0/covid19analytics.datasets
where all datasets are updated periodically, this can be accessed using the argument src=’repo’.
2.2. Analytical & Graphical Indicators Functions
In addition to the access and retrieval of the data, the covid19.analytics package includes several
functions to perform basic analysis and visualizations. Table 3 shows the list of the main functions in the
package.
Function

Description

Data Acquisition
7

Main Type of Output

covid19.data

covid19.Toronto.data

covid19.US.data

covid19.genomic.data
c19.refGenome.data
c19.fasta.data
c19.ptree.data
c19.NPs.data
c19.NP_fasta.data
data.checks
consistency.check
integrity.check
nullify.data

report.summary

tots.per.location

growth.rate

single.trend
mtrends
estimateRRs

total.plts

itrends

obtain live* worldwide data for
covid19 virus, from the JHU’s CCSE
repository [33]
obtain live* data for covid19 cases in
the city of Toronto, ON Canada, from
the City of Toronto reports [34]
obtain live* US specific data for
covid19 virus, from the JHU’s CCSE
repository [33]
Genomics
obtain genomic data from NCBI
databases – see Table 2 for details

Data Quality Assessment
run integrity and consistency checks
on a given dataset
run consistency checks on a given
dataset
run integrity checks on a given dataset
remove inconsistent/incomplete entries in the original datasets
Analysis
summarize the current situation, will
download the latest data and summarize different quantities
compute totals per region and plot
time series for that specific region/country
compute changes and growth rates per
region and plot time series for that
specific region/country

return dataframes/list with the collected
data
return dataframe/list with the collected
data
return dataframe with the collected data

depending on the type of query, it can be a
list or another type of composed object

diagnostics about the dataset integrity and
consistency
diagnostics about the dataset consistency
diagnostics about the dataset integrity
original dataset (dataframe) without “suspicious” entries
on screen table and static plots (pie and bar
plots) with reported information, can also
output the tables into a text file
static plots: data + models (exp/linear,
Poisson, Gamma), mosaic and histograms
when more than one location are selected
static plots:
data + models (linear,Poisson,Exp), mosaic and histograms
when more than one location are selected
interactive figures: heatmap and 3d-surface
representation

visualize different indicators of the compose of static plots: total number
“trends” in daily changes for a single of cases vs time, daily changes vs total
or multiple locations
changes in different representations
compute estimates for fatality and re- list with values for the estimates (mean and
covery rates on a rolling-window in- sd) of reported cases and recovery and faterval
tality rates
Graphics and Visualization
plots in a static and interactive plot static and interactive plot
total number of cases per day, the
user can specify multiple locations or
global totals
generates an interactive plot of daily interactive plot
changes vs total changes in a log-log
plot, for the indicated regions
8

live.map

generate.SIR.model
plt.SIR.model
sweep.SIR.models

generates an interactive map displaying cases around the world
Modelling
generates
a
Susceptible-InfectedRecovered (SIR) model
plot the results from the SIR model
generate multiple SIR models by varying parameters used to select the actual data

static and interactive plot
list containing the fits for the SIR model
static and interactive plots
list containing the values parameters, β, γ
and R0

Table 3: Overview of the main functions of the covid19.analytics package

2.2.1. Details and Specifications of the Analytical & Visualization Functions
Geographical Locations. An important element in the recorded data as shown in Sec. 2.1.2 is the indication
of the corresponding geographical location. In the reported data, this is mostly given by the Province/City
and/or Country/Region. In order to facilitate the processing of locations that are located geo-politically
close, the covid19.analytics package provides a way to identify regions by indicating the corresponding
continent’s name where they are located. I.e. "South America", "North America", "Central America",
"America", "Europe", "Asia" and "Oceania" can be used to process all the countries within each of these
regions.
The geographicalRegions function is the one in charge of determining which countries are part of what
continent and will display them when executing geographicalRegions().
In this way, it is possible to specify a particular continent and all the countries in this continent will be
processed without needing to explicitly specifying all of them.
Reports. As the amount of data available for the recorded cases of CoViD19 can be overwhelming, and
in order to get a quick insight on the main statistical indicators, the covid19.analytics package includes the report.summary function, which will generate an overall report summarizing the main statistical estimators for the different datasets. It can summarize the "Time Series" data (when indicating
cases.to.process="TS"), the "aggregated" data (cases.to.process="AGG") or both (cases.to.process="ALL").
The default will display the top 10 entries in each category, or the number indicated in the Nentries argument, for displaying all the records just set Nentries=0.
The function can also target specific geographical location(s) using the geo.loc argument. When a
geographical location is indicated, the report will include an additional "Rel.Perc" column for the confirmed
cases indicating the relative percentage among the locations indicated. Similarly the totals displayed at the
end of the report will be for the selected locations.
In each case ("TS" or/and "AGG") will present tables ordered by the different cases included, i.e.
confirmed infected, deaths, recovered and active cases.
The dates when the report is generated and the date of the recorded data will be included at the beginning
of each table.
It will also compute the totals, averages or mean values, standard deviations and percentages of various
quantities, i.e.
• it will determine the number of unique locations processed within the dataset
• it will compute the total number of cases per case type
• Percentages – which are computed as follow:
– for the "Confirmed" cases, as the ratio between the corresponding number of cases and the total
number of cases, i.e. a sort of "global percentage" indicating the percentage of infected cases with
respect to the rest of the world
9

SARS-CoV-2 Genomic Data
GenBank
src=“livedata”

“internal” scripts

NCBI

src=“repo”

Backup repo

covid19.analytics

https://github.com/mponce0/covid19analytics.datasets

JHU/CCSEGIS

src=“local”

Local data

City of Toronto
google-drive

CoViD19 Cases Data
“internal” rsync/git – when a new release is push to CRAN
Figure 1: Schematic of the data acquision flows between the covid19.analytics package and the different sources of data.
Dark and solid/dashed lines represent API functions provided by the package accesible to the users. Dotted lines are “internal”
mechanisms employed by the package to synchronize and update replicas of the data. Data acquisition from NCBI servers is
mostly done utilizing the ape [37] and rentrez [38] packages.

– for "Confirmed" cases, when geographical locations are specified, a "Relative percentage" is given
as the ratio of the confirmed cases over the total of the selected locations
– for the other categories, "Deaths"/"Recovered"/"Active", the percentage of a given category is
computed as the ratio between the number of cases in the corresponding category divided by the
"Confirmed" number of cases, i.e. a relative percentage with respect to the number of confirmed
infected cases in the given region
• For "Time Series" data:
– it will show the delta (change or variation) in the last day, daily changes day before that (t − 2),
three days ago (t − 3), a week ago (t − 7), two weeks ago (t − 14) and a month ago (t − 30)
– when possible, it will also display the percentage of "Recovered" and "Deaths" with respect to
the "Confirmed" number of cases
– the column "GlobalPerc" is computed as the ratio between the number of cases for a given country
over the total of cases reported
– The "Global Perc. Average (SD: standard deviation)" is computed as the average (standard
deviation) of the number of cases among all the records in the data
– The "Global Perc. Average (SD: standard deviation) in top X" is computed as the average
(standard deviation) of the number of cases among the top X records
A typical output of the summary.report for the "Time Series" data, is shown in the example 4 in
Sec. 3. In addition to this, the function also generates some graphical outputs, including pie and bar charts
representing the top regions in each category; see Fig. 2.
Totals per Location & Growth Rate. It is possible to dive deeper into a particular location by using the
tots.per.location and growth.rate functions. These functions are capable of processing different types
of data, as far as these are "Time Series" data. It can either focus in one category (eg. "TS-confirmed",
"TS-recovered", "TS-deaths",) or all ("TS-all"). When these functions detect different types of categories,
10

each category will be processed separately. Similarly the functions can take multiple locations, ie. just one,
several ones or even "all" the locations within the data. The locations can either be countries, regions,
provinces or cities. If an specified location includes multiple entries, eg. a country that has several cities
reported, the functions will group them and process all these regions as the location requested.
Totals per Location. The tots.per.location function will plot the number of cases as a function of time
for the given locations and type of categories, in two plots: a log-scale scatter one a linear scale bar plot
one.
When the function is run with multiple locations or all the locations, the figures will be adjusted to
display multiple plots in one figure in a mosaic type layout.
Additionally, the function will attempt to generate different fits to match the data:
• an exponential model using a Linear Regression method
• a Poisson model using a General Linear Regression method
• a Gamma model using a General Linear Regression method
The function will plot and add the values of the coefficients for the models to the plots and display a
summary of the results in the console. It is also possible to instruct the function to draw a "confidence band"
based on a moving average, so that the trend is also displayed including a region of higher confidence based
on the mean value and standard deviation computed considering a time interval set to equally dividing the
total range of time over 10 equally spaced intervals.
The function will return a list combining the results for the totals for the different locations as a function
of time.
Growth Rate. The growth.rate function allows to compute daily changes and the growth rate defined as
the ratio of the daily changes between two consecutive dates.
The growth.rate function shares all the features of the tots.per.location function as described above,
i.e. can process the different types of cases and multiple locations.
The graphical output will display two plots per location:
• a scatter plot with the number of changes between consecutive dates as a function of time, both in
linear scale (left vertical axis) and log-scale (right vertical axis) combined
• a bar plot displaying the growth rate for the particular region as a function of time.
When the function is run with multiple locations or all the locations, the figures will be adjusted to
display multiple plots in one figure in a mosaic type layout. In addition to that, when there is more than
one location the function will also generate two different styles of heatmaps comparing the changes per day
and growth rate among the different locations (vertical axis) and time (horizontal axis). Furthermore, if the
interactiveFig=TRUE argument is used, then interactive heatmaps and 3d-surface representations will be
generated too.
Some of the arguments in this function, as well as in many of the other functions that generate both static
and interactive visualizations, can be used to indicate the type of output to be generated. Table 4 lists some
of these arguments. In particular, the arguments controlling the interactive figures –interactiveFig and
interactive.display– can be used in combination to compose an interactive figure to be captured and used
in another application. For instance, when interactive.display is turned off but interactiveFig=TRUE,
the function will return the interactive figure, so that it can be captured and used for later purposes. This
is the technique employed when capturing the resulting plots in the covid19.analytics Dashboard Explorer
as presented in Sec. 4.2.
Finally, the growth.rate function when not returning an interactive figure, will return a list combining
the results for the "changes per day" and the "growth rate" as a function of time, i.e. when interactiveFig
is not specified or set to FALSE (which its default value) or when interactive.display=TRUE.
11

argument
staticPlt
interactiveFig
interactive.display

effect
when active, enables static plots to be displayed in
screen
when active, enables interactive visualizations features
when active, pushes the interactive figures into a
browser
When is turned off, but interactiveFig=TRUE, the
function will return the interactive figure, so that it
can be captured and used for later purposes.

default value
TRUE
FALSE
TRUE

Table 4: List of some of the arguments used in several functions to control the type of graphical output.

Trends in Daily Changes. The covid19.analytics package provides three different functions to visualize
the trends in daily changes of reported cases from time series data.
• single.trend, allows to inspect one single location, this could be used with the worldwide data sliced
by the corresponding location, the Toronto data or the user’s own data formatted as "Time Series"
data.
• mtrends, is very similar to the single.trend function, but accepts multiple or single locations generating one plot per location requested; it can also process multiple cases for a given location.
• itrends function to generate an interactive plot of the trend in daily changes representing changes in
number of cases vs total number of cases in log-scale using splines techniques to smooth the abrupt
variations in the data
The first two functions will generate "static" plots in a compose with different insets:
• the main plot represents daily changes as a function of time
• the inset figures in the top, from left to right:
– total number of cases (in linear and semi-log scales),
– changes in number of cases vs total number of cases
– changes in number of cases vs total number of cases in log-scale
• the second row of insets, represent the "growth rate" (as defined above) and the normalized growth
rate defined as the growth rate divided by the maximum growth rate reported for this location
Plotting Totals. The function totals.plt will generate plots of the total number of cases as a function of
time. It can be used for the total data or for a specific or multiple locations. The function can generate
static plots and/or interactive ones, as well, as linear and/or semi-log plots.
Plotting Cases in the World. The function live.map will display the different cases in each corresponding location all around the world in an interactive map of the world. It can be used with time series
data or aggregated data, aggregated data offers a much more detailed information about the geographical
distribution.

12

2.2.2. Modelling the Evolution of the Virus Spread
The covid19.analytics package allows users to model the dispersion of the disease by implementing
a simple Susceptible-Infected-Recovered (SIR) model [39, 40]. The model is implemented by a system of
ordinary differential equations (ODE), as the one shown by Eq.(1).

βIS
dS


=−


dt
N





dI
βIS
(1)
=
− γI

dt
N







 dR = γI
dt
where S represents the number of susceptible individuals to be infected, I the number of infected individuals and R the number of recovered ones at a given moment in time. The coefficients β and γ are the
parameters controlling the transition rate from S to I and from I to R respectively; N is the total number
of individuals, i.e. N = S(t) + I(t) + R(t); which should remain constant, i.e.
dS
dI
dR
dN
=
+
+
≡0
(2)
dt
dt
dt
dt
Eq.(1) can be written in terms of the normalized quantities, s(t) ≡ S(t)/N , i(t) ≡ I(t)/N , and r(t) ≡
R(t)/N ; as

ds


= −βi(t)s(t)


dt





di
(3)
= βi(t)s(t) − γi(t)

dt







 dr = γi(t)
dt
Although the ODE SIR model is non-linear, analytical solutions have been found [41]. However the
approach we follow in the package implementation is to solve the ODE system from Eq.(1) numerically.
The function generate.SIR.model implements the SIR model from Eq.(1) using the actual data from
the reported cases. The function will try to identify data points where the onset of the epidemic began
and consider the following data points to generate proper guesses for the two parameters describing the SIR
ODE system, i.e. β and γ.
It does this by minimizing the residual sum of squares (RSS) assuming one single explanatory variable,
i.e. the sum of the squared differences between the number of infected cases I(t) and the quantity predicted
˜
by the model I(t),
RSS(β, γ) =

X

2
˜
I(t) − I(t)

(4)

t

The ODE given by Eq.(1) is solved numerically using the ode function from the deSolve and the
minimization is tackled using the optim function from base R.
After the solution for Eq.(1) is found, the function will provide details about the solution, as well as,
plot the quantities S(t), I(t), R(t) in a static and interactive plot.
The generate.SIR.model function also estimates the value of the basic reproduction number or basic
reproduction ratio, R0 , defined as,
R0 =
13

β
γ

(5)

which can be considered as a measure of the average expected number of new infections from a single
infection in a population where all subjects can be susceptible to get infected.
The function also computes and plots on demand, the force of infection, defined as, Finf ection = βI(t),
which measures the transition rate from the compartment of susceptible individuals to the compartment of
infectious ones.
For exploring the parameter space of the SIR model, it is possible to produce a series of models by
varying the conditions, i.e. range of dates considered for optimizing the parameters of the SIR equation,
which will effectively “sweep” a range for the parameters β, γ and R0 . This is implemented in the function
sweep.SIR.models, which takes a range of dates to be used as starting points for the number of cases used
to feed into the generate.SIR.model producing as many models as different ranges of dates are indicated.
One could even use this in combination to other resampling or Monte Carlo techniques to estimate statistical
variability of the parameters from the model.
3. Examples and Applications
In this section we will present some basic examples of how to use the main functions from the covid19.analytics package.
3.1. Installation
We will begin by installing the covid19.analytics package. This can be achieved in two alternative
ways:
1. installing the latest stable version of the package directly from the CRAN repository. This can be
done within an R session using the install.packages function, i.e.
> install.packages("covid19.analytics")
2. installing the development version from the package’s GITHUB repository, https://github.com/
mponce0/covid19.analytics using the devtools package [42] and its install_github function. I.e.
#
>
#
>

begin by installing devtools if not installed in your system
install.packages("devtools")
install the covid19.analytics packages from the GITHUB repo
devtools::install_github("mponce0/covid19.analytics")

After having installed the covid19.analytics package, for accessing its functions, the package needs to
be loaded using R’s library function, i.e.
> library(covid19.analytics)
The covid19.analytics uses a few additional packages which are installed automatically if they are not
present in the system. In particular, readxl is used to access the data from the City of Toronto [34], ape is
used for pulling the genomics data from NCBI; plotly and htmlwidgets are used to render the interactive
plots and save them in HTML documents, deSolve is used to solve the differential equations modelling the
spread of the virus, and gplots, pheatmap are used to generate heatmaps.
3.2. Retrieving and Accessing Data
Lst. 1 shows how to use the covid19.data function to obtain data in different cases.
# obtain all the records combined for " confirmed " , " deaths " and " recovered " cases
# for the global ( worldwide ) * aggregated * data
covid19 . data . ALLcases <- covid19 . data ()
# obtain time series data for global " confirmed " cases
covid19 . confirmed . cases <- covid19 . data ( " ts - confirmed " )

14

# reads all possible datasets , returning a list
covid19 . all . datasets <- covid19 . data ( " ALL " )
# reads the latest aggregated data of the global cases
covid19 . ALL . agg . cases <- covid19 . data ( " aggregated " )
# reads time series data for global casualties
covid19 . TS . deaths <- covid19 . data ( " ts - deaths " )
# read " Time Series " data for the city of Toronto
Toronto . TS . data <- covid19 . data ( " ts - Toronto " )
# this can be also done using the covid19 . Toronto . data () fn
Tor . TS . data <- covid19 . Toronto . data ()
# or get the original data as reported by the City of Toronto
Tor . DF . data <- covid19 . Toronto . data ( data . fmr = " ORIG " )
# retrieve US time series data of confirmed cases
US . confirmed . cases <- covid19 . data ( " ts - confirmed - US " )
# retrieve US time series data of death cases
US . deaths . cases <- covid19 . data ( " ts - deaths - US " )
# or both cases combined
US . cases <- covid19 . US . data ()
Listing 1: Reading data from reported cases of CoViD19 using the covid19.analytics package.

In general, the reading functions will return data frames. Exceptions to this, are when the functions need
to return a more complex output, e.g. when combining "ALL" type of data or when requested to obtain
the original data from the City of Toronto (see details in Table 3). In these cases, the returning object will
be a list containing in each element dataframes corresponding to the particular type of data. In either case,
the structure and overall content can be quickly assessed by using R’s str or summary functions.
3.3. Basic Analysis
3.3.1. Identifying Geographical Locations
One useful information to look at after loading the datasets, would be to identify which locations/regions
have reported cases. There are at least two main fields that can be used for that, the columns containing
the keywords: ’country’ or ’region’ and ’province’ or ’state’. Lst. 2 show examples of how to achieve this
using partial matches for column names, e.g. "Country" and "Province".
# read a data set
data <- covid19 . data ( " TS - confirmed " )
# look at the structure and column names
str ( data )
names ( data )
# find ’ Country ’ column
country . col <- pmatch ( " Country " , names ( data ) )
# slice the countries
countries <- data [ , country . col ]
# list of countries
print ( unique ( countries ) )

15

# sorted table of countries , may include multiple entries
print ( sort ( table ( countries ) ) )
# find ’ Province ’ column
prov . col <- pmatch ( " Province " , names ( data ) )
# slice the Provinces
provinces <- data [ , prov . col ]
# list of provinces
print ( unique ( provinces ) )
# sorted table of provinces , may include multiple entries
print ( sort ( table ( provinces ) ) )
Listing 2: Identifying geographical locations in the data sets.

3.3.2. Reports
An overall view of the current situation at a global or local level can be obtained using the report.summary
function. Lst. 3 shows a few examples of how this function can be used.
# a quick function to overview top cases per region for time series and aggregated
records
report . summary ()

# save the tables into a text file named ’ covid19 - SummaryReport _ CURRENTDATE . txt ’
# where * CURRRENTDATE * is the actual date
report . summary ( saveReport = TRUE )
# summary report for an specific location with default number of entries
report . summary ( geo . loc = " Canada " )
# summary report for an specific location with top 5
report . summary ( Nentries =5 , geo . loc = " Canada " )
# it can combine several locations
report . summary ( Nentries =30 , geo . loc = c ( " Canada " ," US " ," Italy " ," Uruguay " ," Argentina " )
)
Listing 3: Reports generation

A typical output of the report generation tool is presented in Lst. 4.
Listing 4:
Typical output of the report.summary function.
This particular example was generated using
report.summary(Nentries=5,graphical.output=TRUE,saveReport=TRUE), which indicates to consider just the top 5 entries,
generate a graphical output as shown in Fig. 2 and a to save text file including the report which is the one shown here.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-------------------------------------------------------------------------------# ###############################################################################
# #### TS - CONFIRMED Cases -- Data dated : 2020 -06 -25 :: 2020 -06 -26 13:10:01
# ###############################################################################
Number of Countries / Regions reported : 188
Number of Cities / Provinces reported : 82
Unique number of distinct geographical locations combined : 266
-------------------------------------------------------------------------------Worldwide ts - confirmed Totals : 9609829
-------------------------------------------------------------------------------Country . Region Province . State Totals GlobalPerc LastDayChange
t -2
t -3
t -7 t -14 t -30
1
US
2422299
25.21
39972 34836 35189 31527 25396 18366
2
Brazil
1228114
12.78
39483 42725 39436 54771 25982 20599
3
Russia
613148
6.38
7105 7165 7413 7971 8961 8338
4
India
490401
5.10
17296 16922 15968 14516 11458 7293
5 United Kingdom
307980
3.20
1118
652
921 1346 1541 2013
-------------------------------------------------------------------------------Global Perc . Average : 0.38 ( sd : 1.85)
Global Perc . Average in top 5 : 10.53 ( sd : 8.96)
--------------------------------------------------------------------------------

16

================================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-------------------------------------------------------------------------------# ###############################################################################
# #### TS - DEATHS Cases -- Data dated : 2020 -06 -25 :: 2020 -06 -26 13:10:02
# ###############################################################################
Number of Countries / Regions reported : 188
Number of Cities / Provinces reported : 82
Unique number of distinct geographical locations combined : 266
-------------------------------------------------------------------------------Worldwide ts - deaths Totals : 489312
-------------------------------------------------------------------------------Country . Region Province . State Totals Perc LastDayChange t -2 t -3 t -7 t -14 t -30
1
US
124410 5.14
2425 754 829 692 846 1505
2
Brazil
54971 4.48
1141 1185 1374 1206 909 1086
3 United Kingdom
43230 14.04
149 154 280 173 202 412
4
Italy
34678 14.47
34 -31
18
47
56 117
5
France
29680 15.52
19
9
57
14
28
66
--------------------------------------------------------------------------------------------------------------------------------------------------------------================================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-------------------------------------------------------------------------------# ###############################################################################
# #### TS - RECOVERED Cases -- Data dated : 2020 -06 -25 :: 2020 -06 -26 13:10:02
# ###############################################################################
Number of Countries / Regions reported : 188
Number of Cities / Provinces reported : 68
Unique number of distinct geographical locations combined : 253
-------------------------------------------------------------------------------Worldwide ts - recovered Totals : 4838921
-------------------------------------------------------------------------------Country . Region Province . State Totals LastDayChange
t -2
t -3
t -7 t -14 t -30
1
Brazil
679524
19055 32506 26227 17051 15158 8054
2
US
663562
7401 8613 7350 7600 7094 6606
3
Russia
374557
6335 12375 12000 10442 8213 11079
4
India
285637
13940 13012 10495 9120 7135 3472
5
Chile
219327
4234 4523 5173 5050 4914 2625
--------------------------------------------------------------------------------------------------------------------------------------------------------------================================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# #################################################################################################################################
# #### AGGREGATED Data -- ORDERED BY CONFIRMED Cases -- Data dated : 2020 -06 -26 :: 2020 -06 -26 13:10:03
# #################################################################################################################################
Number of Countries / Regions reported : 188
Number of Cities / Provinces reported : 549
Unique number of distinct geographical locations combined : 3781
---------------------------------------------------------------------------------------------------------------------------------Location Confirmed Perc . Confirmed Deaths Perc . Deaths Recovered Perc . Recovered Active Perc . Active
1
Sao Paulo , Brazil
248587
2.59 13759
5.53
49295
19.83 185533
74.64
2
Moscow , Russia
217791
2.27
3669
1.68
142194
65.29 71928
33.03
3
Iran
215096
2.24 10130
4.71
175103
81.41 29863
13.88
4 New York City , New York , US
213699
2.22 22384
10.47
0
0.00 191315
89.53
5
Metropolitana , Chile
206246
2.15
4206
2.04
0
0.00 202040
97.96
==================================================================================================================================
# #################################################################################################################################
# #### AGGREGATED Data -- ORDERED BY DEATHS Cases -- Data dated : 2020 -06 -26 :: 2020 -06 -26 13:10:03
# #################################################################################################################################
Number of Countries / Regions reported : 188
Number of Cities / Provinces reported : 549
Unique number of distinct geographical locations combined : 3781
---------------------------------------------------------------------------------------------------------------------------------Location Confirmed Perc . Confirmed Deaths Perc . Deaths Recovered Perc . Recovered Active Perc . Active
1
England , United Kingdom
159696
1.66 38706
24.24
0
0.00 120990
75.76
2
France
191288
1.99 29680
15.52
71322
37.29 90286
47.20
3 New York City , New York , US
213699
2.22 22384
10.47
0
0.00 191315
89.53
4
Lombardia , Italy
93431
0.97 16608
17.78
64831
69.39 11992
12.84
5
Sao Paulo , Brazil
248587
2.59 13759
5.53
49295
19.83 185533
74.64
==================================================================================================================================
# #################################################################################################################################
# #### AGGREGATED Data -- ORDERED BY RECOVERED Cases -- Data dated : 2020 -06 -26 :: 2020 -06 -26 13:10:03
# #################################################################################################################################
Number of Countries / Regions reported : 188
Number of Cities / Provinces reported : 549
Unique number of distinct geographical locations combined : 3781
---------------------------------------------------------------------------------------------------------------------------------Location Confirmed Perc . Confirmed Deaths Perc . Deaths Recovered Perc . Recovered Active Perc . Active
1 Recovered , US
0
0.00
0
NaN
663562
Inf -739500
- Inf
2 Unknown , Chile
0
0.00
0
NaN
219327
Inf -219327
- Inf
3
Iran
215096
2.24 10130
4.71
175103
81.41
29863
13.88
4
Turkey
193115
2.01
5046
2.61
165706
85.81
22363
11.58
5 Unknown , Peru
0
0.00
0
NaN
151225
Inf -151225
- Inf
==================================================================================================================================
# #################################################################################################################################
# #### AGGREGATED Data -- ORDERED BY ACTIVE Cases -- Data dated : 2020 -06 -26 :: 2020 -06 -26 13:10:03
# #################################################################################################################################
Number of Countries / Regions reported : 188
Number of Cities / Provinces reported : 549
Unique number of distinct geographical locations combined : 3781
---------------------------------------------------------------------------------------------------------------------------------Location Confirmed Perc . Confirmed Deaths Perc . Deaths Recovered Perc . Recovered Active Perc . Active
1
Metropolitana , Chile
206246
2.15
4206
2.04
0
0.00 202040
97.96
2 New York City , New York , US
213699
2.22 22384
10.47
0
0.00 191315
89.53
3
Sao Paulo , Brazil
248587
2.59 13759
5.53
49295
19.83 185533
74.64
4
Lima , Peru
151225
1.57
4029
2.66
0
0.00 147196
97.34
5
England , United Kingdom
159696
1.66 38706
24.24
0
0.00 120990
75.76
==================================================================================================================================
Confirmed
Deaths Recovered
Active
Totals
9609829
489312 4838921 4205658
Average
2541.61
129.41 1279.8 1112.31

17

Standard Deviation
13197.35

1071.37 13601.24

15132.39

* Statistical estimators computed considering 3781 independent reported entries

********************************************************************************
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * OVERALL SUMMARY * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
********************************************************************************
* * * * Time Series Worldwide TOTS * * * *
ts - confirmed
ts - deaths
ts - recovered
9609829
489312 4838921
5.09%
50.35%
* * * * Time Series Worldwide AVGS * * * *
ts - confirmed
ts - deaths
ts - recovered
36127.18
1839.52 19126.17
5.09%
52.94%
* * * * Time Series Worldwide SDS * * * *
ts - confirmed
ts - deaths
ts - recovered
177717.39
9498.41 72771.61
5.34%
40.95%

* Statistical estimators computed considering 266 / 266 / 253 independent reported entries per case - type
********************************************************************************

A daily generated report is also available from the covid19.analytics documentation site, https:
//mponce0.github.io/covid19.analytics/.
3.3.3. Totals per Geographical Location
The covid19.analytics package allows users to investigate total cumulative quantities per geographical
location with the totals.per.location function. Examples of this are shown in Lst. 5.
# totals for confirmed cases for " Ontario "
tots . per . location ( covid19 . confirmed . cases , geo . loc = " Ontario " )
# total for confirmed cases for " Canada "
tots . per . location ( covid19 . confirmed . cases , geo . loc = " Canada " )
# total nbr of confirmed cases in Hubei including a confidence band based on
moving average
tots . per . location ( covid19 . confirmed . cases , geo . loc = " Hubei " , confBnd = TRUE )
# total nbr of deaths for " Mainland China "
tots . per . location ( covid19 . TS . deaths , geo . loc = " China " )
# ##
# read the time series data for all the cases
all . data <- covid19 . data ( ’ts - ALL ’)
# run on all the cases
tots . per . location ( all . data , " Japan " )
# ##
# total for death cases for " ALL " the regions
tots . per . location ( covid19 . TS . deaths )
# or just
tots . per . location ( covid19 . data ( " ts - confirmed " ) )
Listing 5: Calculation of totals per Country/Region/Province. In addition to the graphical output as shown in Fig. 3, the
function will provide details of the models fitted to the data.

18

TS−DEATHS Cases −− Data dated: 2 2020−06−25 :: 2020−06−26 13:10:02 TS−RECOVERED Cases −− Data dated: 2020−06−25 :: 2020−06−26 13:10:02

6e+05
1e+05
0e+00

0

0

20000

India
285637

US
2422299

Russia
613148

4e+05

5e+05
Chile
219327
Russia
374557

3e+05

80000
France
29680

Italy
34678

2e+05

United Kingdom
43230

60000

1000000

Russia
613148

Brazil
679524
US
663562

40000

Brazil
54971

United Kingdom
307980
India
490401

500000

Brazil
1228114

US
124410

1500000

US
2422299

100000

2000000

120000

TS−CONFIRMED Cases −− Data dated: 2020−06−25 :: 2020−06−26 13:10:01

US
124410

Italy
34678

Brazil
679524

Russia
374557

Chile
219327

AGGREGATED Data −− ORDERED BY CONFIRMED Cases
−−−Data dated: 2020−06−26 :: 2020−06−26 13:10:03

213699

Sao Paulo, Brazil
248587
Metropolitana, Chile
206246

0 150000

Moscow, Russia
217791
Iran
215096
New York City, New York, US

Sao Paulo, Brazil
248587

Iran
215096

Metropolitana, Chile
206246

England, United Kingdom
38706
Sao Paulo, Brazil
Lombardia,
13759 Italy
16608

0

France
29680
New York City, New York, US
22384

30000

AGGREGATED Data −− ORDERED BY DEATHS Cases −−Data dated: 2020−06−26 :: 2020−06−26 13:10:03

England, United Kingdom
38706

Lombardia, Italy
16608

6e+05

AGGREGATED Data −− ORDERED BY RECOVERED Cases
−− −Data dated: 2020−06−26 :: 2020−06−26 13:10:03

0e+00

Recovered, US
663562
Unknown, Peru
Unknown, Chile
Turkey
151225
Iran
219327
165706
175103

Recovered, US
663562

Iran
175103

Turkey
165706

Metropolitana, Chile
202040
England, United Kingdom
Lima,
Peru
120990
147196

0

New York City, New York, US
191315
Sao Paulo, Brazil
185533

150000

AGGREGATED Data −− ORDERED BY ACTIVE Cases −− Data dated: 2020−06−26 :: 2020−06−26 13:10:03

Metropolitana, Chile
202040

Lima, Peru
147196

Figure 2: Graphical output produced by the report.summary function. The top row shows bar plots and pie charts for each
respective category of reported cases, "confirmed", "deaths" and "recovered" for the top 5 entries for time series data. The
bottom row shows a combined plot for the aggregated data. This graphical output aim to complement the text report generated,
as shown in Lst. ??. The plots show the distribution of cases in the corresponding category for the locations list in the top
entries, in this case the top 5.

19

150

0

50

10000
0
2020−01−22 2020−02−23 2020−03−26 2020−04−27 2020−05−29

9 10
8
7

150

0

50

150

HUBEI

50000

lm−exp GR = 1.09
glm−Poisson GR = 1.03

100
days

CANADA
0e+00 4e+04 8e+04

ONTARIO
lm−exp GR = 1.08
glm−Poisson GR = 1.03

100
days

lm−exp GR = 1.01
glm−Poisson GR = 1
glm−Gamma GR = 1.01

20000

100
days

0

50

exp.model coefs: 9.825 ; 0.012
GLM−Poisson model coefs: 10.6 ; 0.005
GLM−Gamma model coefs: 10.491 ; 0.006

6

0
0

25000

nbr.of.cases (log)

12
4

6

8

exp.model coefs: 1.055 ; 0.084
GLM−Poisson model coefs: 7.498 ; 0.029

2

nbr.of.cases (log)

8 10
6
4
2
0

nbr.of.cases (log)

exp.model coefs: 0.487 ; 0.079
GLM−Poisson model coefs: 6.225 ; 0.03

2020−01−22 2020−02−23 2020−03−26 2020−04−27 2020−05−29

2020−01−22 2020−02−23 2020−03−26 2020−04−27 2020−05−29

Figure 3: Graphical output produced by the totals.per.location function for the first three examples shown in Lst. 5. Each
figure shows in the top row the number of cases in log-scale in the vertical axis and the number of days in the horizontal axis.
The upper panel also includes the possible fits as described in Sec. 2.2 that the function attempts to perform to the data. In
the lower panel, the number of cases is presented in linear scale and the horizontal axis shows the actual dates.

3.3.4. Growth Rate
Similarly, utilizing the growth.rate function is possible to compute the actual growth rate and daily
changes for specific locations, as defined in Sec. 2.2. Lst. 6 includes examples of these.
# read time series data for confirmed cases
TS . data <- covid19 . data ( " ts - confirmed " )
# compute changes and growth rates per location for all the countries
growth . rate ( TS . data )
# compute changes and growth rates per location for ’ Italy ’
growth . rate ( TS . data , geo . loc = " Italy " )
# compute changes and growth rates per location for ’ Italy ’ and ’ Germany ’
growth . rate ( TS . data , geo . loc = c ( " Italy " ," Germany " ) )
# ####
# Combining multiple geographical locations :
# obtain Time Series data
TSconfirmed <- covid19 . data ( " ts - confirmed " )
# explore different combinations of regions / cities / countries
# when combining different locations , heatmaps will also be generated comparing
the trends among these locations
growth . rate ( TSconfirmed , geo . loc = c ( " Italy " ," Canada " ," Ontario " ," Quebec " ," Uruguay " ) )
growth . rate ( TSconfirmed , geo . loc = c ( " Hubei " ," Italy " ," Spain " ," United ␣ States " ," Canada "
," Ontario " ," Quebec " ," Uruguay " ) )
growth . rate ( TSconfirmed , geo . loc = c ( " Hubei " ," Italy " ," Spain " ," US " ," Canada " ," Ontario " ,
" Quebec " ," Uruguay " ) )
# turn off static plots and activate interactive figures
growth . rate ( TSconfirmed , geo . loc = c ( " Brazil " ," Canada " ," Ontario " ," US " ) , staticPlt =

20

FALSE , interactiveFig = TRUE )
# static and interactive figures
growth . rate ( TSconfirmed , geo . loc = c ( " Brazil " ," Italy " ," India " ," US " ) , staticPlt = TRUE ,
interactiveFig = TRUE )
Listing 6: Calculation of growth rates and daily changes per Country/Region/Province.

3.3.5. Trends
In addition to the cumulative indicators described above, it is possible to estimate the global trends per
location employing the functions single.trend, mtrends and itrends. The first two functions generate
static plots of different quantities that can be used as indicators, while the third function generates an
interactive representation of a normalized a-dimensional trend. The Lst. 7 shows examples of the use of
these functions. Fig. 6 displays the graphical output produced by these functions.
# single location trend , in this case using data from the City of Toronto
tor . data <- covid19 . Toronto . data ()
single . trend ( tor . data [ tor . data $ status == " Active ␣ Cases " ,])
# or data from the province of Ontario
ts . data <- covid19 . data ( " ts - confirmed " )
ont . data <- ts . data [ ts . data $ Province . State == " Ontario " ,]
single . trend ( ont . data )
# or from Italy
single . trend ( ts . data [ ts . data $ Country . Region == " Italy " ,])

# multiple locations
ts . data <- covid19 . data ( " ts - confirmed " )
mtrends ( ts . data , geo . loc = c ( " Canada " ," Ontario " ," Uruguay " ," Italy " ) )
# multiple cases
single . trend ( tor . data )

# interactive plot of trends
# for all locations and all type of cases
itrends ( covid19 . data ( " ts - ALL " ) , geo . loc = " ALL " )
# or just for confirmed cases and some specific locations , saving the result in an
HTML file named " itrends _ ex . html "
itrends ( covid19 . data ( " ts - confirmed " ) , geo . loc = c ( " Uruguay " ," Argentina " ," Ontario " ,"
US " ," Italy " ," Hubei " ) , fileName = " itrends _ ex " )
# interactive trend for Toronto cases
itrends ( tor . data [ , - ncol ( tor . data ) ])
Listing 7: Calculation of trends for different cases, utilizing the single.trend, mtrends and itrends functions. The typical
representations can be seen in Fig. 6.

3.3.6. Interactive Visualization Tools
Most of the analysis functions in the covid19.analytics package have already plotting and visualization
capabilities. In addition to the previously described ones, the package has also specialized visualization
functions as shown in Lst.8. Many of them will generate static and interactive figures, see Table 3 for details
21

2020−04−04
2020−03−19
2020−06−02
2020−05−18
2020−04−15
2020−02−21
2020−02−17
2020−02−13
2020−02−09
2020−02−05
2020−01−30
2020−01−26
2020−02−03
2020−04−01
2020−03−01
2020−03−06
2020−02−29
2020−03−03
2020−06−11
2020−03−08
2020−03−27
2020−03−29
2020−03−28
2020−04−08
2020−06−30
2020−05−28
2020−05−20
2020−04−25
2020−05−30
2020−03−09
2020−07−06
2020−06−17
2020−05−29
2020−05−02
2020−07−03
2020−04−18
2020−03−20
2020−04−05
2020−06−18
2020−06−01
2020−06−25
2020−05−03

Count

0 300

2020−06−19
2020−07−03
2020−06−29
2020−06−24
2020−03−09
2020−01−30
2020−02−18
2020−02−14
2020−02−08
2020−01−29
2020−01−25
2020−02−01
2020−02−21
2020−02−23
2020−02−28
2020−03−04
2020−03−15
2020−03−13
2020−03−25
2020−03−21
2020−03−27
2020−04−27
2020−05−04
2020−05−10
2020−05−09
2020−04−17
2020−04−24
2020−04−03
2020−04−05
2020−04−02
2020−04−21
2020−04−26
2020−05−28
2020−06−05
2020−06−09
2020−06−04
2020−06−13
2020−05−14
2020−06−01
2020−06−14
2020−05−26
2020−05−19

−40000

−20

Count

0 200

Feb

Color Key
and Histogram

0

Color Key
and Histogram

0

Mar

Mar
Apr
May

Apr
May
Jun

Jun

Jun
Jul

Jul

Jul

time

US

INDIA

BRAZIL

US

22
20

May
0

4

Jul

0

Apr

Jun
0 5

0 8
Growth Rate

0

Nbr of Changes

May

0 12

Feb
Mar

Apr

0 6
Growth Rate

0

Nbr of Changes

Feb
Mar

0 8
Growth Rate

0

Nbr of Changes

Feb

0 8
Growth Rate

0

Nbr of Changes

BRAZIL
BRAZIL

2020−01−24 2020−03−17 2020−05−09 2020−07−01

time
time

ITALY
ITALY

time
2020−01−24 2020−03−17 2020−05−09 2020−07−01
time

INDIA
INDIA

2020−01−24 2020−03−17 2020−05−09 2020−07−01

time
time

US
US

2020−01−24 2020−03−17 2020−05−09 2020−07−01
time

Changes per day
50000

BRAZIL
40000

Value
40000
30000

20000

ITALY
10000

BRAZIL

10
0

BRAZIL

INDIA

ITALY

US

Growth Rate

20

15

Value

10

5

ITALY

0

ITALY

INDIA

INDIA

US

Figure 4: Graphical output produced by the growth.rate function when comparing the situation in "Brazil", "Italy", "India"

0

30000

10
8
0

2

4

6

8

10

0.0 0.6

10000

0

0

0

2

400

4

6

800

6
4
2

10000

Jun

norm.gr.rate

Apr

25

1200
1000

Feb

15

600

0

5

800

xvar.diff[mask.data]

0

200

400

Daily Changes

1200

10
8

30000

Nbr of Cases

Canada Ontario

0

1400

Figure 5: Interactive visualization of the daily changes in a heatmap (left) and 3d-surface (right) representation, generated by
the growth.rate function when activating the interactiveFig=TRUE.

Feb

Mar

Apr

May

Jun

Jul

Time (dates)

Figure 6: Static (left) and interactive (right) figures generated by the single.trend/mtrends and itrends functions respectively.
The static figure includes several representations of the daily changes as described in Sec. 2.2. The interactive figure, offers a
quick overview of the trend in particular compared to the straight diagonal line included which represents "exponential growth".

23

of the type of output. In particular the live.map function is an utility function which allows to plot the
location of the recorded cases around the world. This function in particular allows for several customizable
features, such as, the type of projection used in the map or to select different types of projection operators
in a pull down menu, displaying or not the legend of the regions, specify rescaling factors for the sizes
representing the number of cases, among others. The function will generate a live representation of the
cases, utilizing the plotly package and ultimately open the map in a browser, where the user can explore
the map, drag the representation, zoom in/out, turn on/off legends, etc.
# retrieve time series data
TS . data <- covid19 . data ( " ts - ALL " )
# static and interactive plot
totals . plt ( TS . data )
# totals for Ontario and Canada , without displaying totals and one plot per page
totals . plt ( TS . data , c ( " Canada " ," Ontario " ) , with . totals = FALSE , one . plt . per . page = TRUE
)
# totals for Ontario , Canada , Italy and Uruguay ; including global totals with the
linear and semi - log plots arranged one next to the other
totals . plt ( TS . data , c ( " Canada " ," Ontario " ," Italy " ," Uruguay " ) , with . totals = TRUE , one .
plt . per . page = FALSE )
# totals for all the locations reported on the dataset , interactive plot will be
saved as " totals - all . html "
totals . plt ( TS . data , " ALL " , fileName = " totals - all " )
# retrieve aggregated data
data <- covid19 . data ( " aggregated " )
# interactive map of aggregated cases -- with more spatial resolution
live . map ( data )
# or
live . map ()
# interactive map of the time series data of the confirmed cases with less spatial
resolution , ie . aggregated by country
live . map ( covid19 . data ( " ts - confirmed " ) )
Listing 8: Examples of some of the interactive and visualization capabilities of plotting functions. The typical representations
can be seen in Fig. 7.

3.4. Modeling the Virus Spread
Last but not least, one the novel features added by the covid19.analytics package, is the ability of
model the spread of the virus by incorporating real data. As described in Sec. 2.2, the generate.SIR.model
function, implements a simple SIR model employing the data reported from an specified dataset and a particular location. Examples of this are shown in Lst.9. The generate.SIR.model function is complemented
with the plt.SIR.model function which can be used to generate static or interactive figures as shown in
Fig. 8.
The generate.SIR.model function as described in Sec.2 will attempt to obtain proper values for the
parameters β and γ, by inferring the onset of the epidemic using the actual data. This is also listed in the
output of the function (see Lst.10), and it can be controlled by setting the parameters t0 and t1 or deltaT,
which are used to specify the range of dates to be considered for using when determining the values of β
and γ. The fatality rate (constant) can also be indicated via the fatality.rate argument, as well, as the
total population of the region with tot.population.
24

Figure 7: Examples of some of the interactive figures generated using the live.map (upper row, for time series and aggregated
data respectively) and totals.plt functions (lower row) representing the total number of cases vs the reported dates for the
selected regions. The latter visualization also allows the user to switch between a linear and a log-scale representation via a
pull-down menu.

25

# read time series data for confirmed cases
data <- covid19 . data ( " ts - confirmed " )
# run a SIR model for a given geographical location
generate . SIR . model ( data , " Hubei " , t0 =1 , t1 =15)
generate . SIR . model ( data , " Germany " , tot . population =83149300)
generate . SIR . model ( data , " Uruguay " , tot . population =3500000)
generate . SIR . model ( data , " Ontario " , tot . population =14570000 , add . extras = TRUE )
# the function will aggregate data for a geographical location , like a country
with multiple entries
generate . SIR . model ( data , " Canada " , tot . population =37590000 , add . extras = TRUE )
# ####
# modelling the spread for the whole world , storing the model and generating an
interactive visualization
world . SIR . model <- generate . SIR . model ( data , " ALL " , t0 =1 , t1 =15 , tot . population =7.8 e9
, staticPlt = FALSE )
# plotting and visualizing the model
plt . SIR . model ( world . SIR . model , " World " , interactiveFig = TRUE , fileName = " world . SIR .
model " , add . extras = TRUE )
Listing 9: Examples of SIR model generation using different datasets and locations via the generate.SIR.model function.
# ###############################################################################
# ###############################################################################
Processing ... CANADA
[1]
0
0
0
0
1
1
2
2
2
4
[11]
4
4
4
4
5
5
7
7
7
7
[21]
7
7
7
7
7
7
8
8
8
8
[31]
9
9
9
10
11
11
13
14
20
24
[41]
27
30
33
37
49
54
64
77
79
108
[51]
117
193
198
252
415
478
657
800
943
1277
[61]
1469
2088
2790
3251
4042
4682
5576
6280
7398
8527
[71]
9560 11284 12437 12978 15756 16563 17872 19141 20654 22059
[81] 23316 24299 25680 27035 28209 30809 32814 34356 35633 37658
[91] 39402 41663 43299 44919 46371 48033 49616 51150 52865 54457
[101] 56343 57926 60504 61957 63215 64694 66201 67674 68918 70091
[111] 71264 72419 73568 74781 75959 77206 78332 79411 80493 81575
[121] 82742 83947 85151 86106 87119 88090 88989 89976 90909 91681
[131] 92479 93288 93960 94641 95269 95947 96475 97178 97779 98241
[141] 98720 99159 99595 100043 100404 100763 101087 101491 101877 102314
[151] 102762 103078 103418 103767 104087 104463 104629 104878 105193 105830
[161] 106097 106288 106643 106962 107185
[1] 44
[1]
37
49
54
64
77
79 108 117 193 198 252 415 478 657 800
[16] 943 1277 1469 2088 2790 3251 4042 4682 5576 6280 7398
- - - - - - - - - - - - - - - - - - - - - - - - Parameters used to create model - - - - - - - - - - - - - - - - - - - - - - - Region : CANADA
Time interval to consider : t0 =44 - t1 = ; tfinal =90
t0 : 2020 -03 -06 -- t1 :
Number of days considered for initial guess : 26
Fatality rate : 0.02
Population of the region : 37590000
-------------------------------------------------------------------------------[1] " ERROR : ␣ ABNORMAL _ TERMINATION _ IN _ LNSRCH "
beta
gamma
0.6078298 0.3921703
R0 = 1 . 5 4 9 9 1 3 1 5 1 4 7 5 3 3
Max of infecteded : 2706321.58 ( 7.2 %)
Max nbr of casualties , assuming 2% fatality rate : 54126.43
Max reached at day : 60 == > 2020 -05 -05
================================================================================

Listing 10: Output from the generate.SIR.model function applied to the time series data of Canada. The output shows the
original data points, and the selected ones to be used to determine the transition rate parameters of the model, β and γ from
Eq.(1).

Fig.(8), also raises an interesting point regarding the accuracy of the SIR model. We should recall that
this is the simplest approach one could take in order to model the spread of diseases and usually more
refined and complex models are used to incorporate several factors, such as, vaccination, quarantines, effects
of social clusters, etc. However, in some cases, specially when the spread of the disease appears to have enter
the so-called exponential growth rate, this simple SIR model can capture the main trend of the dispersion
26

15

20

25

0

5

10

Day

15

20

25

0

5

10

Day

15

20

40
Day

60

80

25

Number of subjects

2500000

Number of subjects

0
20

5

10

15

20

25

Day

1000000

1e+07
1e+05
1e+03

Susceptible
Infected
Recovered

0

0

SIR model 2019−nCoV: URUGUAY

1e+01

0e+00

2e+07

Number of subjects

SIR model 2019−nCoV: CANADA

0

20

Day

40

60

80

0

Day

20

40
Day

60

80

1e+05

10

1e+03

5

Susceptible
Infected
Recovered

1e+01

0

Number of subjects

50 100

Infected

10
0

0

50

100

20

200

Infected

300

400

5000
1000

Infected

200

6000
4000
2000

Infected

Confirmed Cases 2019−nCoV: URUGUAY
500

Confirmed Cases 2019−nCoV: CANADA

0

20

40

60

80

Day

Figure 8: Graphical output of the SIR model produced by the examples from Lst. 9, applied to the cases of Canada (left) and
Uruguay (right). Each figure contains 4 plots, the upper ones display the actual data for the number of infected individuals
for the region in linear (left) and log-scale (right) as a function of time. The bottom panels, show the solution to the SIR
model defined in Eq.(1) in linear (left panel) and log-scale (right panel), in conjunction with the data points employed to
determine the transition rates parameters, β and γ, for the model. On the left figure (Canada): dashed lines represent time
derivatives, while the purple dash-dotted line represents the force of infection; these additional indicators can be added using the
add.extras=TRUE flag when invoking the generate.SIR.model/plt.SIR.model functions. An interestng observation, is that in
some cases the model can clearly trace a quite remarkable trend in accordance to the data, in particularly when an exponential
growth is present, while in others not – i.e. when the particular region has somehow manage to –usually the so-called– “flatten
(the growth of the) curve”.

27

(e.g. left plot from Fig.8). While in other cases, when the rate of spread is slower than the freely exponential
dispersion, the model clearly fails in tracking the actual evolution of cases (e.g. right plot from Fig.8).
Finally, Lst. 11 shows an example of the generation of a sequence of values for R0 , and actually any of the
parameteres (β, γ) describing the SIR model. In this case, the function takes a range of values for the initial
date t0 and generates different date intervals, this allows the function to generate multiple SIR models and
return the corresponding parameters for each model. The results are then bundle in a "matrix"/"array"
object which can be accessed by column for each model or by row for each paramter sets.
# read TimeSeries data
TS . data <- covid19 . data ( " TS - confirmed " )
# select a location of interest , eg . France
# France has many entries , just pick " France "
FR . data <- TS . data [ ( TS . data $ Country . Region == " France " ) & ( TS . data $ Province . State
== " " ) ,]
# sweep values of R0 based on range of dates to consider for the model
ranges <- 15:25
deltaT <- 35
params _ sweep <- sweep . SIR . models ( data = FR . data , geo . loc = " France " , t0 _ range = ranges ,
deltaT = deltaT )
# the parameters -- beta , gamma , R0 - - are returned
print ( params _ sweep )
#
[ ,1]
[ ,2]
[ ,3]
[ ,4]
# beta 0.5231031 0.5250777 0.5323438 0.5217565
# gamma 0.4768969 0.4749223 0.4676562 0.4782435
# R0
1.096889 1.105608 1.138323 1.090985
#
[ ,8]
[ ,9]
[ ,10]
[ ,11]
# beta 0.5668948 0.5753911 0.5835743 0.592407
# gamma 0.4331052 0.4246089 0.4164257 0.407593
# R0
1.308908 1.355108 1.401389 1.453428

in a " matrix " " array " object
[ ,5]
0.5355503
0.4644497
1.153086

[ ,6]
0.5473388
0.4526611
1.209158

[ ,7]
0.559132
0.440868
1.268253

# obtain the R0 values from the parameters
R0s <- unlist ( params _ sweep [ " R0 " ,])
# nbr of infected cases
FR . infs <- preProcessingData ( FR . data , " France " )
# average per range
# define ranges
lst . ranges <- lapply ( ranges , function ( x ) x :( x + deltaT ) )
# compute averages
avg . FR . infs <- lapply ( lst . ranges , function ( x ) mean ( FR . infs [ x ]) )
# plots
plot ( R0s , type = ’b ’)
# plot vs average number of infected cases
plot ( avg . FR . infs , R0s , type = ’b ’)
Listing 11: Example of SIR model generation using different ranges of dates for the initial date, t0, using the sweep.SIR.models
function.

3.5. Working with your own data
As mentioned before, the functions from the covid19.analytics package also allow users to work with
their own data, when the data is formated in the Time Series strucutre as discussed in Sec.2.1.2. This opens
28

a large range of possibilities for users to import their own data into R and use the functions already defined
in the covid19.analytics package. A concrete example of how the data has to be formatted is shown in
Lst. 12. The example shows how to structure the data in a TS format from “synthetic” data generated from
randomly sampling different distributions. However this could be actual data from other places or locations
not accesible from the datasets provided by the package, or some researchers may have access to their own
private sets of data too. The example also shows two cases, where the data can include the "status" column
or not, and whether it could be more than one location. As a matter of fact, we left the "Long" and "Lat"
fields empty but if one includes the actual coordinates, the maping function live.map can also be used with
these structured data.
# TS data structure :
#
" Province . State " " Country . Region " " Lat " " Long "

dates . . .

# First let ’ s create a ’ fake ’ location
fake . locn <- c ( NA , NA , NA , NA )
# names for these columns
names ( fake . locn ) <- c ( " Province . State " ," Country . Region " ," Lat " ," Long " )
# let ’ s set the dates
dates . vec <- seq ( as . Date ( " 2020 / 1 / 1 " ) , as . Date ( " 2020 / 4 / 09 " ) , " days " )
# data . vecX would be the actual values / cases
data . vec1 <- rpois ( length ( dates . vec ) , lambda =25)
# can also add more cases
data . vec2 <- abs ( rnorm ( length ( dates . vec ) , mean =135 , sd =15) )
data . vec3 <- abs ( rnorm ( length ( dates . vec ) , mean =35 , sd =5) )
# this will names the columns as your dates
names ( data . vec1 ) <- dates . vec
names ( data . vec2 ) <- dates . vec
names ( data . vec3 ) <- dates . vec
# merge them into a data frame with multiple entries
synthetic . data <- as . data . frame ( rbind (
rbind ( c ( fake . locn , data . vec1 ) ) ,
rbind ( c ( fake . locn , data . vec2 ) ) ,
rbind ( c ( fake . locn , data . vec3 ) )
))
# finally set you locn to somethign unqiue , so you can use it in the generate . SIR .
model fn
synthetic . data $ Country . Region <- " myLocn "
# one could even add " status "
synthetic . data $ status <- c ( " confirmed " ," death " ," recovered " )
# OR just one case per locn
synthetic . data2 <- synthetic . data [ , - ncol ( synthetic . data ) ]
synthetic . data2 $ Country . Region <- c ( " myLocn " ," myLocn2 " ," myLocn3 " )
# now we can use this ’ synthetic ’ dataset with any of the TS functions
# data checks
integrity . check ( synthetic . data )
consistency . check ( synthetic . data )
data . checks ( synthetic . data )

29

# quantitative indicators
tots . per . location ( synthetic . data )
growth . rate ( synthetic . data )
single . trend ( synthetic . data2 [3 ,])
mtrends ( synthetic . data )
# SIR models
synthSIR <- generate . SIR . model ( synthetic . data2 , geo . loc = " myLocn " )
plt . SIR . model ( synthSIR , interactiveFig = TRUE )
sweep . SIR . models ( synthetic . data2 , geo . loc = " MyLocn " )
Listing 12: Example of structuring data in a TS format, so that it can be used with any of the TS functions from the
covid19.analytics package.

3.6. Genomics
The covid19.analytics package provides access to genomics data available at the NCBI databases [35,
36]. The covid19.genomic.data is the master function for accesing the different variations of the genomics
information available as shown in Table 2. In addition to that there are a few helper functions which can also
be used for retrieving specific types, such as: c19.refGenome.data, c19.ptree.data, c19.fasta.data,
c19.NPs.data, c19.NP_fasta.data. Lst. 13 show examples of how to use these functions for retrieving
the different type of genomics data for the SARS-CoV-2 virus.
# test all sources ...
srcs <- c ( ’ livedata ’ , ’ repo ’ , ’ local ’)
results <- list ()
for ( sr in srcs ) {
print ( paste ( " ##### ␣ " ,sr , " ␣ ##### " ) )
# obtain reference genome data
results [[ ’ refGenome ’ ]][ sr ] <- c19 . refGenome . data ( src = sr )
# obtain phylogenetic tree
results [[ ’ tree ’ ]][ sr ] <- c19 . ptree . data ( src = sr )
# obtain FASTA sequences
results [[ ’ fasta ’ ]][ sr ] <- c19 . fasta . data ( src = sr )
# combine several types
if ( sr ! = ’ livedata ’) {
results [[ ’ genomics ’ ]][ sr ] <- c19 . genomic . data ( src = sr )
}
# obtain nucleotides data
results [[ ’ nucs ’ ]][ sr ] <- c19 . NPs . data ( src = sr , DB = ’ nucleotide ’)
if ( sr ! = ’ livedata ’) {
results [[ ’ ptns ’ ]][ sr ] <- c19 . NPs . data ( src = sr , DB = ’ protein ’)
}
# obtain FASTA sequences for nucleotides and proteins
results [[ ’ FASTAs ’ ]][[ ’ nucs ’ ]][ sr ] <- c19 . NP _ fasta . data ( target = ’ nucleotide ’
)
results [[ ’ FASTAs ’ ]][[ ’ ptns ’ ]][ sr ] <- c19 . NP _ fasta . data ( target = ’ protein ’)
}

30

# ####
gtypes <- c ( " genome " ," fasta " ," tree " ,
" nucleotide " ," protein " ,
" nucleotide - fasta " ," protein - fasta " ,
" genomic " )
results2 <- list ()
for ( gt in gtypes ) {
print ( gt )
results2 [[ gt ]] <- covid19 . genomic . data ( type = gt )
}
Listing 13: Example of how to retrieve the different types of genomics datasets provided by the covid19.analytics package.

Each of these functions return different objects, Lst. 14 shows an example of the different structures for
some of the objects. The most involved object is obtained from the covid19.genomic.data when combining
different types of datasets.
# str ( results )
List of 7
$ refGenome : List of 3
.. $ livedata : chr [1:29903] " a " " t " " t " " a " ...
.. $ repo
: chr [1:29903] " a " " t " " t " " a " ...
.. $ local
: chr [1:29903] " a " " t " " t " " a " ...
$ tree
: List of 3
.. $ livedata : int [1:13319 , 1:2] 8113 8114 8115 8116 8117 8118 8119 8120 8121 8122 ...
.. $ repo
: int [1:13319 , 1:2] 8113 8114 8115 8116 8117 8118 8119 8120 8121 8122 ...
.. $ local
: int [1:13319 , 1:2] 8113 8114 8115 8116 8117 8118 8119 8120 8121 8122 ...
$ fasta
: List of 3
.. $ livedata : raw [1:29903] 88 18 18 88 ...
.. $ repo
: raw [1:29903] 88 18 18 88 ...
.. $ local
: raw [1:29903] 88 18 18 88 ...
$ nucs
: List of 3
.. $ livedata : chr " MT821795 "
.. $ repo
: chr [1:11142] " NC _ 045512 " " MT772210 " " MT772215 " " MT772237 " ...
.. $ local
: chr [1:11142] " NC _ 045512 " " MT772210 " " MT772215 " " MT772237 " ...
$ FASTAs
: List of 2
.. $ nucs : List of 3
.. .. $ livedata : raw [1:29903] 88 18 18 88 ...
.. .. $ repo
: raw [1:29903] 88 18 18 88 ...
.. .. $ local
: raw [1:29903] 88 18 18 88 ...
.. $ ptns : List of 3
.. .. $ livedata : raw [1:118] a0 60 e0 48 ...
.. .. $ repo
: raw [1:118] a0 60 e0 48 ...
.. .. $ local
: raw [1:118] a0 60 e0 48 ...
$ genomics : List of 2
.. $ repo : List of 1
.. .. $ NC _ 045512.2: chr [1:29903] " a " " t " " t " " a " ...
.. .. - attr ( * , " species " ) = chr " Severe _ acute _ respiratory _ syndrome _ coronavirus _ 2 "
.. $ local : List of 1
.. .. $ NC _ 045512.2: chr [1:29903] " a " " t " " t " " a " ...
.. .. - attr ( * , " species " ) = chr " Severe _ acute _ respiratory _ syndrome _ coronavirus _ 2 "
$ ptns
: List of 2
.. $ repo : chr [1:117619] " YP _ 009742608 " " YP _ 009742609 " " YP _ 009742610 " " YP _ 009742611 " ...
.. $ local : chr [1:117619] " YP _ 009742608 " " YP _ 009742609 " " YP _ 009742610 " " YP _ 009742611 " ...
# str ( results [ ’ genomics ’])
List of 7
$ genome
: List of 1
.. $ NC _ 045512.2: chr [1:29903] " a " " t " " t " " a " ...
.. - attr ( * , " species " ) = chr " Severe _ acute _ respiratory _ syndrome _ coronavirus _ 2 "
$ fasta
: List of 1
.. $ gi |1798174254| ref | NC _ 045512.2| Severe acute respiratory syndrome coronavirus 2 isolate Wuhan - Hu -1 , complete genome : raw [1:29903] 88 18 18
88 ...
.. - attr ( * , " class " ) = chr " DNAbin "
$ annotation : ’ data . frame ’:
59 obs . of 9 variables :
.. $ seqid
: Factor w / 1 level " NC _ 045512.2 " : 1 1 1 1 1 1 1 1 1 1 ...
.. $ source
: Factor w / 1 level " RefSeq " : 1 1 1 1 1 1 1 1 1 1 ...
.. $ type
: Factor w / 7 levels " CDS " ," five _ prime _ UTR " ,..: 5 2 3 1 1 4 4 4 4 4 ...
.. $ start
: int [1:59] 1 1 266 266 13468 266 806 2720 8555 10055 ...
.. $ end
: int [1:59] 29903 265 21555 13468 21555 805 2719 8554 10054 10972 ...
.. $ score
: num [1:59] NA NA NA NA NA NA NA NA NA NA ...
.. $ strand
: Factor w / 1 level " + " : 1 1 1 1 1 1 1 1 1 1 ...
.. $ phase
: Factor w / 1 level " 0 " : NA NA NA 1 1 NA NA NA NA NA ...
.. $ attributes : chr [1:59] ...
$ nucleotides : ’ data . frame ’:
11142 obs . of 20 variables :
.. $ Accession
: chr [1:11142] " NC _ 045512 " " MT772210 " " MT772215 " " MT772237 " ...
.. $ SRA _ Accession
: chr [1:11142] " " " SRR12181112 " " SRR12181117 " " SRR12181117 " ...
.. $ Release _ Date
: chr [1:11142] " 2020 -01 -13 T00 :00:00 Z " " 2020 -07 -17 T00 :00:00 Z " " 2020 -07 -17 T00 :00:00 Z " " 2020 -07 -17 T00 :00:00 Z " ...

31

.. $ Species
: chr [1:11142] " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣ coronavirus " " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣
coronavirus " " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣ coronavirus " " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣ coronavirus " ...
.. $ Genus
: chr [1:11142] " Be t ac or o na vi r us " " B e ta co r on av i ru s " " B et ac o ro na v ir us " " Be ta c or on a vi ru s " ...
.. $ Family
: chr [1:11142] " Coronaviridae " " Coronaviridae " " Coronaviridae " " Coronaviridae " ...
.. $ Length
: int [1:11142] 29903 29800 29800 29800 29800 29800 29791 29800 29800 29800 ...
.. $ Sequence _ Type
: chr [1:11142] " RefSeq " " GenBank " " GenBank " " GenBank " ...
.. $ Nuc _ Completeness : chr [1:11142] " complete " " complete " " complete " " complete " ...
.. $ Genotype
: logi [1:11142] NA NA NA NA NA NA ...
.. $ Segment
: logi [1:11142] NA NA NA NA NA NA ...
.. $ Authors
: chr [1:11142] ...
.. $ Publications
: chr [1:11142] " 15680415 , ␣ 15630477 , ␣ 10482585 " " " " " " " ...
.. $ Geo _ Location
: chr [1:11142] " China " " India : ␣ Himatnagar " " India : ␣ Choryasi " " India : ␣ Choryasi " ...
.. $ U . S . _ State
: chr [1:11142] " " " " " " " " ...
.. $ Host
: chr [1:11142] " Homo ␣ sapiens " " Homo ␣ sapiens " " Homo ␣ sapiens " " Homo ␣ sapiens " ...
.. $ Isolation _ Source : chr [1:11142] " " " " " " " " ...
.. $ Collection _ Date : chr [1:11142] " 2019 -12 " " 2020 -06 -14 " " 2020 -06 -13 " " 2020 -06 -13 " ...
.. $ BioSample
: chr [1:11142] " " " SAMN15488404 " " SAMN15488426 " " SAMN15488426 " ...
.. $ GenBank _ Title
: chr [1:11142] " Severe ␣ acute ␣ respiratory ␣ syndrome ␣ coronavirus ␣ 2 ␣ isolate ␣ Wuhan - Hu -1 , ␣ complete ␣ genome " " Severe ␣ acute ␣
respiratory ␣ syndrome ␣ coronavirus ␣ 2 ␣ isolate ␣ SARS - CoV -2 / human / IND / GBRC242 / 2020 , ␣ complete ␣ genome " " Severe ␣ acute ␣ respiratory ␣ syndrome ␣
coronavirus ␣ 2 ␣ isolate ␣ SARS - CoV -2 / human / IND / GBRC264a / 2020 , ␣ complete ␣ genome " " Severe ␣ acute ␣ respiratory ␣ syndrome ␣ coronavirus ␣ 2 ␣ isolate ␣ SARS CoV -2 / human / IND / GBRC264b / 2020 , ␣ complete ␣ genome " ...
$ proteins
: ’ data . frame ’:
117619 obs . of 20 variables :
.. $ Accession
: chr [1:117619] " YP _ 009742608 " " YP _ 009742609 " " YP _ 009742610 " " YP _ 009742611 " ...
.. $ SRA _ Accession
: chr [1:117619] " " " " " " " " ...
.. $ Release _ Date
: chr [1:117619] " 2020 -03 -30 T00 :00:00 Z " " 2020 -03 -30 T00 :00:00 Z " " 2020 -03 -30 T00 :00:00 Z " " 2020 -03 -30 T00 :00:00 Z " ...
.. $ Species
: chr [1:117619] " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣ coronavirus " " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣
coronavirus " " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣ coronavirus " " Severe ␣ acute ␣ respiratory ␣ syndrome - related ␣ coronavirus " ...
.. $ Genus
: chr [1:117619] " B et ac o ro na v ir us " " Be ta c or on a vi ru s " " B et a co ro n av ir u s " " Be t ac or o na vi r us " ...
.. $ Family
: chr [1:117619] " Coronaviridae " " Coronaviridae " " Coronaviridae " " Coronaviridae " ...
.. $ Length
: int [1:117619] 180 638 1945 500 306 290 83 198 113 139 ...
.. $ Sequence _ Type
: chr [1:117619] " RefSeq " " RefSeq " " RefSeq " " RefSeq " ...
.. $ Genotype
: logi [1:117619] NA NA NA NA NA NA ...
.. $ Segment
: logi [1:117619] NA NA NA NA NA NA ...
.. $ Authors
: chr [1:117619] " Baranov , P . V . , ␣ Henderson , C . M . , ␣ Anderson , C . B . , ␣ Gesteland , R . F . , ␣ Atkins , J . F . , ␣ Howard , M . T . , ␣ Robertson , M . P . , ␣
Igel , H . , " | _ _ truncated _ _ " Baranov , P . V . , ␣ Henderson , C . M . , ␣ Anderson , C . B . , ␣ Gesteland , R . F . , ␣ Atkins , J . F . , ␣ Howard , M . T . , ␣ Robertson , M . P . , ␣ Igel , H . , "
| _ _ truncated _ _ " Baranov , P . V . , ␣ Henderson , C . M . , ␣ Anderson , C . B . , ␣ Gesteland , R . F . , ␣ Atkins , J . F . , ␣ Howard , M . T . , ␣ Robertson , M . P . , ␣ Igel , H . , " | _ _
truncated _ _ " Baranov , P . V . , ␣ Henderson , C . M . , ␣ Anderson , C . B . , ␣ Gesteland , R . F . , ␣ Atkins , J . F . , ␣ Howard , M . T . , ␣ Robertson , M . P . , ␣ Igel , H . , " | _ _ truncated
_ _ ...
.. $ Publications
: chr [1:117619] " 15680415 , ␣ 15630477 , ␣ 10482585 " " 15680415 , ␣ 15630477 , ␣ 10482585 " " 15680415 , ␣ 15630477 , ␣ 10482585 " " 15680415 , ␣
15630477 , ␣ 10482585 " ...
.. $ Protein
: chr [1:117619] " leader ␣ protein " " nsp2 " " nsp3 " " nsp4 " ...
.. $ Geo _ Location
: chr [1:117619] " China " " China " " China " " China " ...
.. $ U . S . _ State
: chr [1:117619] " " " " " " " " ...
.. $ Host
: chr [1:117619] " Homo ␣ sapiens " " Homo ␣ sapiens " " Homo ␣ sapiens " " Homo ␣ sapiens " ...
.. $ Isolation _ Source : chr [1:117619] " " " " " " " " ...
.. $ Collection _ Date : chr [1:117619] " 2019 -12 " " 2019 -12 " " 2019 -12 " " 2019 -12 " ...
.. $ BioSample
: chr [1:117619] " " " " " " " " ...
.. $ GenBank _ Title
: chr [1:117619] " leader ␣ protein ␣ [ Severe ␣ acute ␣ respiratory ␣ syndrome ␣ coronavirus ␣ 2] " " nsp2 ␣ [ Severe ␣ acute ␣ respiratory ␣ syndrome
␣ coronavirus ␣ 2] " " nsp3 ␣ [ Severe ␣ acute ␣ respiratory ␣ syndrome ␣ coronavirus ␣ 2] " " nsp4 ␣ [ Severe ␣ acute ␣ respiratory ␣ syndrome ␣ coronavirus ␣ 2] " ...
$ SRA
: List of 2
.. $ sra _ info : chr [1:6] " This ␣ download ␣ ( via ␣ FTP ) ␣ provides ␣ Coronaviridae ␣ family - containing ␣ SRA ␣ runs ␣ detected ␣ with ␣ NCBI ’ s ␣ kmer ␣ analysis ␣ ( STAT ) ␣
tool . ␣ " " It ␣ provides ␣ corresponding ␣ SRA ␣ run ␣ ( SRR ) ,␣ sample ␣ ( SRS ) ,␣ and ␣ submission ␣ ( SRA ) ␣ accessions , ␣ as ␣ well ␣ as ␣ BioSample ␣ an " | _ _ truncated _ _ "
The ␣ STAT ␣ kmer ␣ analysis ␣ was ␣ performed ␣ via ␣ a ␣ two - step ␣ process ␣ with ␣ a ␣ 32 - mer ␣ coarse ␣ database ␣ and ␣ a ␣ 64 - mer ␣ fine ␣ database . ␣ " " The ␣ database ␣ is ␣
generated ␣ from ␣ RefSeq ␣ genomes ␣ and ␣ the ␣ viral ␣ genome ␣ set ␣ from ␣ nt ␣ using ␣ a ␣ minhash - based ␣ approach . ␣ " ...
.. $ sra _ runs : ’ data . frame ’:
26776 obs . of 5 variables :
.. .. $ acc
: chr [1:26776] " ERR1857120 " " ERR1857132 " " ERR3955908 " " ERR3955909 " ...
.. .. $ sample _ acc : chr [1:26776] " ERS1572626 " " ERS1572627 " " ERS2783634 " " ERS2783635 " ...
.. .. $ biosample : chr [1:26776] " SAMEA1 008836 68 " " SAME A10088 4418 " " SAMEA4965217 " " SAMEA4965218 " ...
.. .. $ sra _ study : chr [1:26776] " ERP021740 " " ERP021740 " " ERP111280 " " ERP111280 " ...
.. .. $ bioproject : chr [1:26776] " " " " " " " " ...
$ references : List of 2
.. $ : chr " covid19 . analytics ␣ --␣ local ␣ data "
.. $ : chr " / Users / marcelo / Library / R / 4.0 / library / covid19 . analytics / extdata / "

Listing 14: Objects composition for the example presented in Lst. 13

One aspect that should be mentioned with respect to the genomics data is that, in general, these are
large datasets which are continuously being updated hence increasing theirs sizes even more. These would
ultimately present pragmatical challenges, such as, long processing times or even starvation of memory
resources. We will not dive into major interesting examples, like DNA sequencing analysis or building
phylogenetics trees; but packages such as ape, apegenet, phylocanvas, and others can be used for these
and other analysis.
One simple example we can present is the creation of dynamical categorization trees based on different
elements of the sequencing data. We will consider for instance the data for the nucleotides as reported from
NCBI.
The example on Lst. 15 shows how to retrieve either nucleotides (or proteins) data and generate categorization trees based on different elements, such as, hosting organism, geographical location, sequences length,
etc. In the examples we employed the collapsibleTree package, that generates interactive browsable trees
through web browsers.
library ( collapsibleTree )
# retrieve the nucleotides data
nucx <- covid19 . genomic . data ( type = ’ nucleotide ’ , src = ’ repo ’)

32

# identify specific fields to look at
len . fld <- " Length "
acc . fld <- " Accession "
geoLoc . fld <- " Geo _ Location "
seq . fld <- " Sequence _ Type "
host . fld <- " Host "
seq . limit1 <- 25000
seq . limit1 <- 29600
seq . limit2 <- 31000
# selection criteria , nucleotides with seq . length between 29600 and 31000
selec . ctr .1 <- nucx $ Length < seq . limit2 & nucx $ Length > seq . limit1
# remove nucletoides without specifying a " host "
targets <- nucx [ selec . ctr .1 & nucx $ Host ! = ’ ’ ,]
# categorization tree based on Host - type , geographical location , ...
c o l l a p s i b l e T ree Su mma ry ( targets ,
hierarchy = c ( host . fld , geoLoc . fld , acc . fld , c ( len . fld , seq . fld ) ) ,
attribute = len . fld ,
zoomable = FALSE , collapsed = TRUE )
#

categorization tree for nucleotides with seq . lengths smaller than 29600 or
bigger than 31000
c o l l a p s i b l e T ree Su mma ry ( nucx [ ! selec . ctr .1 ,] ,
hierarchy = c ( host . fld , geoLoc . fld , acc . fld , c ( len . fld , seq . fld ) ) ,
attribute = len . fld ,
zoomable = FALSE , collapsed = TRUE )

#

categorization tree for " human hosted " nucleotides with seq . lengths smaller
than 29600 or bigger than 31000
c o l l a p s i b l e T ree Su mma ry ( nucx [ ! selec . ctr .1 & nucx $ Host == ’ Homo ␣ sapiens ’ ,] ,
hierarchy = c ( host . fld , geoLoc . fld , acc . fld , c ( len . fld , seq . fld ) ) ,
attribute = len . fld ,
zoomable = FALSE , collapsed = TRUE )

Listing 15: Example of how to generate a dynamic browsable tree using some of information included in the nucleotides dataset.
Some of these trees representations are shown in Fig. 9.

4. Case Study: The covid19.analytics Dashboard Explorer
In this section we will present and discuss, how the covid19.analytics Dashboard Explorer is implemented. The main goal is to provide enough details about how the dashboard is implemented and works,
so that users could modify it if/as they seem fit or even develop their own. For doing so, we will focus in
three main points:
• the front end implementation, also know as the user interface, mainly developed using the shiny
package
• the back end implementation, mostly using the covid19.analytics package
• the web server installation and configuration where the dashboard is hosted
33

Figure 9: Browsable trees implemented using the nucleotides dataset in combination with the collapsibleTree package, as
presented in Lst. 15.

4.1. Dashboard’s Front End Implementation
The covid19.analytics Dashboard Explorer is built using the Shiny package [43] in combination with the
covid19.analytics package. Shiny allows users to build interactive dashboards that can work through a
web interface. The dashboard mimics the covid19.analytics package commands and features but enhances
the commands as it allows users to use dropdowns and other control widgets to easily input the data rather
than using a command terminal. In addition the dashboard offers some unique features, such as a Personal
Protective Equipment (PPE) model estimation, based on realistic projections developed by the US Centers
for Disease Control and Prevention (CDC).
The dashboard interface offers several features:
1. The dashboard can be run on the cloud/web allowing for multiple users to simultaneously analyze
the data with no special software or hardware requirements. The Shiny package makes the dashboard
mobile and tablet compatible as well.
2. It aids researchers to share and discuss analytical findings.
3. The dashboard can be run locally or through the web server.
4. No programming or software expertise is required which reduces technical barriers to analyzing the
data. Users can interact and analyze the data without any software expertise therefore users can focus
on the modeling and analysis. In these times the dashboard can be a monumental tool as it removes
barriers and allows a wider and diverse set of users to have quick access to the data.
5. Interactivity. One feature of Shiny and other graphing packages, such as Plotly, is interactivity, i.e.
the ability to interact with the data. This allows one to display and show complex data in a concise
manner and focus on specific points of interest. Interactive options such as zoom, panning and mouse
hover all help in making the user interaction enjoyable and informative.
6. Fast and easy to compare. One advantage of a dashboard is that users can easily analyze and compare
the data quickly and multiple times. For example users can change the slider or dropdown to select
multiple countries to see the total daily count effortlessly. This allows the data to be displayed and
changed as users analysis requirements change.
4.1.1. Accessing the covid19.analytics Dashboard Explorer
The dashboard can be laucnhed locally in a machine with R, either through an interactive R session
or in batch mode using Rscript or R CMD BATCH or through the web server accessing the following URL
https://covid19analytics.scinet.utoronto.ca.
34

For running the dashboard locally, the covid19.analytics package has also to be installed. For running
the dashboard within an R session the package has to be loaded and then it should be invoked using the
following sequence of commands,
> library(covid19.analytics)
> covid19Explorer()

The batch mode can be executed using an R script containing the commands listed above. When the
dashboard is run locally the browser will open a port in the local machine –localhost:port– connection, i.e.
http://127.0.0.1. It should be noted, that if the dashboard is launched interactively within an R session
the port used is 5481 –http://127.0.0.1:5481–, while if this is done through an R script in batch mode
the port used will be different.
4.1.2. Specific Libraries Needed in the Dasbhoard
To implement the dashboard and enhance some of the basic functionalities offered, the following libraries
were specifically used in the implementation of the dashboard:
• shiny [43]: The main package that builds the dashboard.
• shinydashboard [44]: This is a package that assists us to build the dashboard with respect to themes,
layouts and structure.
• shinycssloaders [45]: This package adds loader animations to shiny outputs such as plots and tables
when they are loading or (re)-calculating. In general, this are wrappers around base CSS-style loaders.
• plotly [46]: Charting library to generate interactive charts and plots. Although extensively used
in the core functions of the covid19.analytics , we reiterate it here as it is great tool to develop
interactive plots.
• DT [47]: A DataTable library to generate interactive table output.
• dplyr [48]: A library that helps to apply functions and operations to data frames. This is important
for calculations specifically in the PPE calculations.
The R Shiny package makes developing dashboards easy and seamless and removes challenges. For
example setting the layout of a dashboard typically is challenging as it requires knowledge of frontend
technologies such as HTML, CSS3 and Bootstrap4 to be able to position elements and change there asthetic
properties. Shiny simplifies this problem by using a built in box controller widget which allows developers
to easily group elements, tables, charts and widgets together. Many of the CSS properties, such as, widths
or colors are input parameters to the functions of interest. The sidebar feature is simple to implement and
the Shiny package makes it easy to be compatible across multiple devices such as tablets or cellphones. The
Shiny package also has built in layout properties such as FluidRow or Columns making it easy to position
elements on a page. The library does have some challenges as well. One challenge faced is theme design.
ShinyDashboard does not make it easy to change the whole color theme of the dashboard outside of the
white or blue theme that is provided by default. The issue is resolved by having the developer write custom
CSS and change each of the various properties manually.
4.1.3. Dashboard Layout
The dashboard contains two main components a sidebar and a main body. The sidebar contains a list
of all the menu options. Options which are similar in nature are grouped in a nested format. For example
the dashboard menu section called "Datasets and Reports", when selected, displays a nested list of further
35

options the user can choose such as the World Data or Toronto Data. Grouping similar menu options
together is important for making the user understand the data. The main body displays the content of a
page. The content a main body displays depends on the sidebar and the selected menu option the user
selects.
There are three main generic elements needed to develop a dashboard: layouts, control widgets and
output widgets. The layout options are components needed to layout the features or components on a page.
In this dashboard the layout widgets used are the following:
• Box: The boxes are the main building blocks of a dashboard. This allows us to group content together.
• TabPanels: TabPanels allow us to create tabs to divide one page into several sections. This allows
for multiple charts or multiple types of data to be displayed in a single page. For example in the
Indicators page there are four tabs which display four different charts with mosaic tab displaying the
charts in different configurations.
• Header and Title: these are used to display text, title pages in the appropriate sizes and fonts.
An example describing these elements and its implementation is shown in Lst. 16.
tableWorldDataUI <- function ( id ) {
ns <- NS ( id )
box ( width =12 ,
h1 ( ’ WORLD ␣ TABLE ’) , h4 ( ’ World ␣ data ␣ of ␣ all ␣ covid ␣ cases ␣ across ␣ the ␣
globe ’) ,
column (4 , selectInput ( ns ( " category _ list3 " ) , label = h4 ( " Category " ) ,
choices = category _ list ) ) ,
column (4 , downloadButton ( ns ( ’ downloadData ’) , " Download " ) ) ,
withSpinner ( DT :: dataTableOutput ( ns ( " table _ contents " ) ) )
)
}
Listing 16: Snippet of a code that describes the various features used in generating a dashboard. The ns(id) is a namespaced
id for inputs/outputs. WithSpinner is the shiny cssloaders which generates a loading gif while the chart is being loaded.

Shiny modules are used when a shiny application gets larger and complicated, they can also be used to
fix the namespacing problem. However shiny modules also allow for code reusability and code modularity
as the code can be broken into several pieces called modules. Each module can then be called in different
applications or even in the same application multiple times. In this dashboard we break the code into two
main groups user interface (UI) modules and server modules. Each menu option has there own dedicated
set of UI and associated server modules. This makes the code easy to build and expand. For each new menu
option a new set of UI and sever module functions will be built. Lst. 16 is also an example of an UI module,
where it specifies the desing and look of the element and connect with the active parts of the application.
Lst. 20 shows an example of a server function called reportServer. This type of module can update
and display charts, tables and valueboxes based on the user selections. This same scenario occurs for all
menu options with the UI/server paradigm.
Another way to think about the UI/server separation, is that the UI modules are in charge of laying
down the look of a particular element in the dahboard, while the sever is in charge of dynamically ‘filling’
the dynamical elements and data to populate this element.
Control widgets, also called input widgets, are widgets which users use to input data, information or
settings to update charts, tables and other output widgets. The following control widgets were used in this
dashboard:
• NumericalInput: A textbox that only allows for numerical input which is used to select a single
numerical value.
• SelectInput: a dropdown that may be multi select for allowing users to select multiple options as in
the case of the country dropdown.
36

Figure 10: Screenshot from the “covid19.analytics Dashboard Explorer”, "Mosaic" tab from the ’Indicators’ category. Four
interactive figures are shown in this case: the trends (generated using the itrends function), totals (genrated using the
totals.plt function) and two world global representations of CoViD19 reported cases (generated using the live.map function).
The two upper plots are adjusted and re-rendered according to the selection of the country, category of the data from the input
boxes.

37

• Slider: The slider in our dashboard is purely numerical but used to select a single numerical value
from a given range of a min and max range.
• Download Button: This is a button which allows users to download and save data in various formats
such as csv format.
• Radiobuttons: Used to select only one from a limited number of choices.
• Checkbox: Similar in purpose to RadioButtons that also allow users to select one option from a limited
number of options.
Output control widgets are widgets that are used to display content/information back to the user. There
are three main ouput widgets used in this dashboard:
• PlotlyOuput: This widget output and creates Plotly charts. Plotly is a graphical package library used
to generate interactive charts.
• RenderTable: Is an output that generates the output as an interactive table with search, filter and
sort capabilities provided out of the box.
• ValueBox: This is a fancy textbox with border colors and descriptive font text to generate descriptive
text to users such as the total number of deaths.
* Indicators
+ - - - - > iTrend Plot
+ - - - - > Growth Rate
+ - - - - > Total Plot
+ - - - - > Live Map
+ - - - - > Mosaic
* Models
+ - - - - > SIR Model
+ - - - - > Hospital PPE
+ - - - - > PPE
+ - - - - > PPE Advanced Settings
+ - - - - > Burn Rate Analysis
+ - - - - > Daily Usage
+ - - - - > Remaining Supply
+ - - - - > PPE per Patient
+ - - - - > Advanced Settings
* Datasets & Repots
+ - - - - > World Data
+ - - - - > Toronto Data
+ - - - - > Data Integrity
+ - - - - > Report
* References
+ - - - - > covid19 . analytics repo
+ - - - - > Documentation
+ - - - - > Data Sources
+ - - - - > External Dashboards
+ - - - - > Resources
* About Us

Listing 17: Map of the menues and functionalities offered through the covid19.analytics Dashboard Explorer, available at https://covid19analytics.scinet.utoronto.ca

The dashboard contains the menus and elements shown in 17 and described below:
• Indicators: This menu section displays different CoViD19 indicators to analyze the pandemic. There
are four notable indicators Itrend, Total Plot, Growth Rate and Live map, which are displayed in each
of the various tabs. Itrend displays the “trend” in a log-log plot, Total plot shows a line graph of total
number, Growth rate displays the daily number of changes and growth rate (as defined in Sec. 2.2),
Live map shows a world map of infections in an aggregated or timeseries format. These indicators are
shown together in the "Mosaic" tab.
• Models: This menu option contains a sub-menu presenting models related to the pandemic. The first
model is the SIR (Susceptible Infection Recovery) which is implemented in the covid19.analytics package. SIR is a compartmental model to model how a disease will infect a population. The second two
models are used to estimate the amount of PPE needed due to infectious diseases, such as Ebola and
CoViD19.
38

• Datasets and Reports: This section provides reporting capability which outputs reports as csv and
text files for the data. The World Data subsection displays all the world data as a table which can be
filtered, sorted and searched. The data can also be saved as a csv file. The Toronto data displays the
Toronto data in tabular format while also displaying the current pandemic numbers. Data Integrity
section checks the integrity and consistency of the data set such as when the raw data contains negative
numbers or if the cumulative quantities decrease. The Report section is used to generate a report as
a text file.
• References: The reference section displays information on the github repo and documentation along
with an External Dashboards section which contains hyperlinks to other dashboards of interest. Dashboards of interest are the Vaccine Tracker which tracks the progress of vaccines being tested for covid19,
John Hopkins University and the Canada dashboard built by the Dall Lana School of Epidemiology
at the University of Toronto.
• About Us: Contact information and information about the developers.
4.1.4. Additional Elements of the Dashboard
In addition to implementing some of the functionalities provided by the covid19.analytics package,
the dashboard also includes a PPE calculator. The hospital PPE is a qualitative model which is designed to
analyze the amount of PPE equipment needed for a single CoViD19 patient over a hospital duration. The
PPE calculation implemented in the covid19.analytics Dashboard Explorer is derived from the CDC’s
studies for infectious diseases, such as Ebola and CoViD19. The rationality is that Ebola and CoViD19 are
both contagious infections and PPE is used to protect staff and patients and prevent transmission for both
of these contagious diseases.
The Hospital PPE calculation estimates and models the amount of PPE a hospital will need during
the CoViD19 pandemic. There are two analysis methods a user can choose to determine Hospital PPE
requirement. The first method to analyze PPE is to determine the amount of PPE needed for a single
hospitalized CoViD19 patient. This first model requires two major component: the size of the healthcare
team needed to take care of a single CoViD19 patient and the amount of PPE equipment used by hospital
staff per shift over a hosptialization duration. The model is based off the CDC Ebola crisis calculation [49].
Alhough Ebola is a different disease compared to CoViD19, there is one major similarity. Both CoViD19
and Ebola are diseases which both require PPE for protection of healthcare staff and the infected patient.
To compensate the user can change the amount of PPE a healthcare staff uses per shift. That information
can be adjusted by changing the slider values in the Advanced Setting tab. The calculation is pretty
straightforward as it takes the PPE amount used per shift and multiplies it by the number of healthcare
staff and then by the hospitalization duration.
The first model has two tabs. The first tab displays a stacked bar chart displaying the amount of PPE
equipment user by each hospital staff over the total hospital duration of a single patient. It breaks each
PPE equipment by stacks. The second tab panel called Advanced settings has a series of sliders for each
hospital staff example nurses where users can use the slider to change the amount of PPE that the hospital
staff will user per shift.
The second model is a more recent calculation developed by the CDC [50]. The model calculates the
burn rate of PPE equipment for hospitals for a one week time period. This model is designed specifically for
Covid19. The CDC has created an excel file for hospital staff to input their information and also an android
app as well which can be utilized.
This model also implemented in our dashboard, is simplified to calculate the PPE for a one week setting.
The one week limit was implemented for two reasons, first to limit the amount of input data a user has to
enter into the system as too much data can overwhelm and confuse a user; second because the CoViD19
pandemic is a highly fluidic situation and for hospital staff to forecast their PPE and resource equipments
greater than a one week period may not be accurate.
Note that this model is not accurate if the facilitiy recieves a resupply of PPE. For resupplied PPE start
a new calculation. There are four tab panels to the burn rate calculation which displays charts and settings.
39

The first tab Daily Usage displays a multi-line chart displaying the amount of PPE used daily, ∆P P Edaily .
The calculation for this is a simple subtraction between two consecutive days, i.e. the second day (j + 1)
from the first day (j) as noted in Eq.(6).
∆P P Edaily ≡ (P P Ej+1 ) − P P Ej

(6)

The tab panel called Remaining Supply shows a multi line chart the number of days the remaining
PPE equipment will last in the facility. The duration of how long the PPE equipment can last in a given
facility, inversely depends on the amount of CoViD19 patients admitted to the hospital. To calculate the
remaining PPE one calculates the average amount of PPE used over the one week duration and then divides
the amount of PPE at the beginning of the day by the average PPE usage, as shown in Eq.(7),
remainingP P E ≡

∆P P Edaily
hP P Ei1week

(7)

where hiT denotes the time average over a T period of time.
The third panel called PPE per patient displays a multi line chart of the burn rate, i.e. the amount of
PPE used per patient per day. Eq.(8) represents the calculation as the remaining PPE supply divided by
the number of CoViD19 patients in the hospital staff during that exact day.
remainingP P E
PPE
≡
P atient
N patient

(8)

The fourth tab called Advanced settings is a series of show and hide “accordians” where users can input
the amount of PPE equpiment they have at the start of each day. There are six collapsed boxes for each PPE
equipment type and for CoViD19 patient count. Expanding a box displays seven numericalInput textboxes
which allows users to input the number of PPE or patient count for each day.
The equations describing the PPE needs, Eqs.(6,7,8) are implemented in the shiny dashboard using the
dplyr library. The dplyr library allows users to work with dataframe like objects in a quick and efficient
manner. The three equations are implemented using a single dataframe. The Advanced Setting inputs of
the Burn Rate Analysis tab are saved into a dataframe. The PPE equations –Eqs.(6-8)– are implemented
on the dataframe by creating new columns that are then appended to the existing dataframe. This results
in the final version of the dataframe as shown in Lst. 18 which is then used to generate the corresponding
charts.
d . Name glovediff n95diff maskdiff gownsdiff respdiff glove remain ing
1
day1
0
0
0
0
0
6.0
2
day2
200
25
50
100
20
5.2
3
day3
300
75
50
20
20
4.0
4
day4
NA
NA
NA
NA
NA
NA
5
day5
NA
NA
NA
NA
NA
NA
6
day6
NA
NA
NA
NA
NA
NA
7
day7
NA
NA
NA
NA
NA
NA
n95remaining maskremaining gownremaining respremaining glove _ per _ patient
1
10.0
10
8.333333
15
0.00000
2
9.5
9
6.666667
14
10.00000
3
8.0
8
6.333333
13
10.71429
4
NA
NA
NA
NA
NA
5
NA
NA
NA
NA
NA
6
NA
NA
NA
NA
NA
7
NA
NA
NA
NA
NA
n95 _ per _ patient mask _ per _ patient gown _ per _ patient resp _ per _ patient
1
0.000000
0.000000
0.0000000
0.0000000
2
1.250000
2.500000
5.0000000
1.0000000
3
2.678571
1.785714
0.7142857
0.7142857
4
NA
NA
NA
NA
5
NA
NA
NA
NA
6
NA
NA
NA
NA
7
NA
NA
NA
NA

Listing 18: Dataframe object employed in the PPE calculation.

4.2. Dashboard’s Back End Implementation
The back-end implementation of the dashboard is achieved using the functions presented in Sec.2 on the
server module of the dashboard. The main strategy is to use a particular function and connect it with the
40

input controls to feed the needed arguments into the function and then capture the output of the function
and render it accordingly.
Let’s consider the example of the globe map representation shown in the dashboard which is done using
the live.map function. Lst. 19 shows how this function connects with the other elements in the dashboard:
the input elements are accessed using input$... which in this are used to control the particular options
for the displaying the legends or projections based on checkboxes. The output returned from this function
is captured through the renderPlotly({...}) function, that is aimed to take plotly type of plots and
integrate them into the dashboard.
# livemap plot charts on the three possible commbinations
output $ ts _ livemap <- output $ ts2 _ livemap <- output $ ts3 _ livemap <- output $ ts4 _
livemap <- renderPlotly ({
legend <- input $ sel _ legend
projections <- input $ sel _ projection
live . map ( covid19 . data ( " ts - confirmed " ) , interactive . display = FALSE , no .
legend = legend , select . projctn = projections )
})
Listing 19: Example of how the live.map function is used to render the ineractive figures display on the dashboard.

Another example is the report generation capability using the report.summary function which is shown
in Lst. 20. As mentioned before, the input arguments of the function are obtained from the input controls.
The output in this case is rendered usign the renderText({...}) function, as the output of the original
function is plain text. Notice also that there are two implementations of the report.summary, one is for
the rendering in the screen and the second one is for making the report available to be downloaded which
is handled by the downloadHandler function.
reportServer <- function ( input , output , session , result ) {
output $ report _ output _ default <- renderText ({
# extract the vairables of the inputs
nentries <- input $ txtbox _ Nentries
geo _ loc <- input $ geo _ loc _ select6
ts <- input $ ddl _ TS
capture . output ( report . summary ( graphical . output = FALSE , Nentries =
nentries , geo . loc = geo _ loc , cases . to . process = ts ) ) }
, sep = ’\ n ’)
report <- reactive ({
nentries <- input $ txtbox _ Nentries
geo _ loc <- input $ geo _ loc _ select6
ts <- input $ ddl _ TS
report <- capture . output ( report . summary ( graphical . output = FALSE ,
Nentries = nentries , geo . loc = geo _ loc , cases . to . process = ts ) )
return ( report )
})
output $ downloadReport <- downloadHandler (
filename = function () {
paste ( " Report - " , Sys . Date () ," . txt " , sep = " " )
},
content = function ( file ) {
writeLines ( paste ( report () ) , file )
}
)
}
Listing 20: Report capabilites implemented in the dashboard using the report.summary function.

41

4.3. Dashboard’s Server Configuration
The final element in the deployment of the dashboard is the actual set up and configuration of the web
server where the application will run. The actual implementation of our web dashboard, accessible through
https://covid19analytics.scinet.utoronto.ca, relies on a virtual machine (VM) in a physical server
located at SciNet headquarters.
We should also notice that there are other forms or ways to "publish" a dashboard, in particular for
shiny based-dashboards, the most common way and perhaps straighforward one is to deploy the dashboard
on https://www.shinyapps.io. Alternatively one could also implement the dashboard in a cloud-based
solution, e.g. https://aws.amazon.com/blogs/big-data/running-r-on-aws/. Each approach has its
own advantages and disadvantages, for instance, depending on a third party solution (like the previous
mentioned) implies some cost to be paid to or dependency on the provider but will certainly eliminate some
of the complexity and special attention one must take when using its own server. On the other hand, a
self-deployed server will allow you for full control, in principle cost-effective or cost-controled expense and
full integration with the end application.
In our case, we opted for a self-controlled and configured server as mentioned above. Moreover, it is
quite a common practice to deploy (multiple) web services via VMs or “containers”. The VM for our web
server runs on CentOS 7 and has installed R version 4.0 from sources and compiled on the VM.
After that we proceeded to install the shiny server from sources, i.e. https://github.com/rstudio/
shiny-server/wiki/Building-Shiny-Server-from-Source.
After the installation of the shiny-server is completed, we proceed by creating a new user in the VM from
where the server is going to be run. For security reasons, we recommend to avoid running the server as root.
In general, the shiny server can use a user named "shiny". Hence a local account is created for this user, and
then logged as this user, one can proceed with the installation of the required R packages in a local library
for this user. All the neeeded packages for running the dashboard and the covid19.analytics package
need to be installed.
Lst. 21 shows the commands used for creating the shiny user and finalizing the configuration and details
of the log files.
# Place a shortcut to the shiny - server executable in / usr / bin
sudo ln -s / usr / local / shiny - server / bin / shiny - server / usr / bin / shiny - server
# Create shiny user
sudo useradd -r -m shiny
# Create log , config , and application directories
sudo mkdir -p / var / log / shiny - server
sudo mkdir -p / srv / shiny - server
sudo mkdir -p / var / lib / shiny - server
sudo chown shiny / var / log / shiny - server
sudo mkdir -p / etc / shiny - server
Listing 21: List of commands used on the VM to finalize the setup of the shiny user and server.
//github.com/rstudio/shiny-server.

Source:

https:

The R script containing the shiny app to be run should be placed in /etc/shiny-server and confiurations details about the shiny interface are adjusted in the /etc/shiny-server/shiny-server.conf
file.
Permissions for the application file has to match the identity of the user launching the server, in this
case the shiny user.
At this point if the installation was sucessful and all the pieces were placed properly, when the shiny-server
command is executed, a shiny hosted app will be accessible from localhost:3838.
Since the shiny server listens on port 3838 in plain http, it is necessary to setup an Apache web server to
act as a reverse proxy to receive the connection requests from the Internet on ports 80 and 443, the regular
http and https ports, and redirect them to port 3838 on the same host (localhost).
42

For dealing with the Apache configuration on port 80, we added the file /etc/httpd/conf.d/rewrite.conf
as shown in Lst. 22.
RewriteEngine On
RewriteCond %{ REQUEST _ SCHEME } = http
RewriteRule ^ https : / / %{ SERVER _ NAME }%{ REQUEST _ URI } [ QSA , R = permanent ]
Listing 22: Modifications to the Apache configurations, specified in the file rewrite.conf. These three lines rewrite any
incoming request from http to https.

For handling the Apache configuration on port 443, we added this file /etc/httpd/conf.d/shiny.conf,
as shown in Lst.23.
< VirtualHost _ default _ :443 >
SSLEngine on
Proxy PreserveHost On
ProxyPass / http : / / 0.0.0.0:3838 / app1 /
ProxyPassReverse / http : / / 0.0.0.0:3838 / app1 /
</ VirtualHost >
Listing 23: Content of the shiny.conf file, for the creation of a VirtualHost listening on port 443.

This VirtualHost receives the https requests from the Internet on port 443, establishes the secure
connection, and redirects all input to port 3838 using plain http. All requests to "/" are redirected to
"http://0.0.0.0:3838/app1/", where app1 in this case is a subdirectory where a particular shiny app is
located.
There is an additional configuration file, /etc/httpd/conf.d/ssl.conf, which contains the configuration for establishing secure connections such as protocols, certificate paths, ciphers, etc.
4.3.1. Decentralized Systems and Services
The main tool we use in order to communicate updates between the different elements we use in
the development and mantainance of the covid19.analytics package and dashboard web interface is
orchestrated via GIT repositories. In this way, we have in place version control systems but also offer decentralized with multiple replicas. Fig. 11 shows an schematic of how our network of repositories and service is connected. The central hub for our package, is located at the GIThub repo htttps:
//github.com/mponce0/covid19.analytics; we then have (and users can too) our own clones of local
copies of this repo –we usually use this for development and testing–. When a stable and substantial contribution to the package is reached, we submit this to the CRAN repository. Similarly, when an update is
done on the dashboard we can synchronize the VM via git pulls and deploy the updates on the server side.
5. Conclusions
In this paper we have presented and discussed the R covid19.analytics package, which is an open
source tool to obtain, analyze and visualize data of the CoViD19 pandemic. The package also incorporates
a dashboard to facilitate the access to its functionalities to less experienced users.
As today, there are a few dozen other packages also in the CRAN repository that allow users to gain
access to different datasets of the CoViD19 pandemic. In some cases, some packages just provide access to
data from specific geographical locations or the approach to the data structure in which the data is presented
is different from the one presented here. Nevertheless, having a variety of packages from which users can try
and probably combine, is an important and crucial element in data analysis. Moreover it has been reported
different cases of data misuse/misinterpretation due to different issues, such as, erroneous metadata or
data formats [51] and in some cases ending in articles’ retractions [52]. Therefore providing additional
functionalities to check the integrity and consistency of the data, as our the covid19.analytics package
43

GITHUB IO – web rendering
https://mponce0.github.io/covid19.analytics/

private instances

GITHUB repo – CENTRAL REPOSITORY
https://github.com/mponce0/covid19.analytics

Local copies

Local copies

Local copies

Local copies

shiny server, running on VM
https://covid19analytics.scinet.utoronto.ca

CRAN repo
https://cran.r-project.org/package=covid19.analytics

Figure 11: Schematic of the different repositories and systems employed by the covid19.analytics package and dashboard
interface.

does is paramount. This is specially true in a situation where the unfolding of events and data availability
is flowing so fast that sometimes is even hard to keep track of all the changes.
Moreover, the covid19.analytics package offers a modular and versatile approach to the data, by
allowing users to input their own data for which most of the package functions can be applied when the
data is structured using a time series format as described in this manuscript.
The covid19.analytics is also capable of retrieving genomics data, and it does that by incorporating
a novel, more reliable and robust way of accessing and designing different pathways to the data sources.
Another unique feature of this package is the ability of incorporating models to estimate the disease spread
by using the actual data. Although a simple model, it has shown some interesting results in agreement for
certain cases. Of course there are more sophisticated approaches to shred light in analyzing this pandemic;
in particular novel “community” approaches have been catalyzed by this too [53]. However all of these
approaches face new challenges as well[54], and on that regards counting with a variety, in particular of open
source tools and direct access to the data might help on this front.
Acknowledgments
MP wants to thank all his colleagues at SciNet, especially Daniel Gruner for his continous and unconditional support, and Marco Saldarriaga who helped us setting up the VM for installing the shiny server.
References
[1] R Core Team, R: A Language and Environment for Statistical Computing, R Foundation for Statistical Computing,
Vienna, Austria (2016).
URL https://www.R-project.org/
[2] R. Ihaka, R. Gentleman, R: A language for data analysis and graphics, Journal of Computational and Graphical Statistics
5 (3) (1996) 299–314.
URL https://doi.org/10.1080/10618600.1996.10474713
[3] M. Ponce, covid19.analytics: Load and Analyze Live Data from the CoViD-19 Pandemic, r package version 2.0 (2020).
URL https://CRAN.R-project.org/package=covid19.analytics
[4] D. Cyranoski, The biggest mystery: what it will take to trace the coronavirus source, Naturedoi:10.1038/
d41586-020-01541-z.
URL http://dx.doi.org/10.1038/d41586-020-01541-z

44

[5] S. Mallapaty, Animal source of the coronavirus continues to elude scientists, Naturedoi:10.1038/d41586-020-01449-8.
URL http://dx.doi.org/10.1038/d41586-020-01449-8
[6] P. Zhou, X.-L. Yang, X.-G. Wang, B. Hu, L. Zhang, W. Zhang, H.-R. Si, Y. Zhu, B. Li, C.-L. Huang, et al., A pneumonia
outbreak associated with a new coronavirus of probable bat origin, Nature 579 (7798) (2020) 270–273. doi:10.1038/
s41586-020-2012-7.
URL http://dx.doi.org/10.1038/s41586-020-2012-7
[7] K. G. Andersen, A. Rambaut, W. I. Lipkin, E. C. Holmes, R. F. Garry, The proximal origin of sars-cov-2, Nature Medicine
26 (4) (2020) 450–452. doi:10.1038/s41591-020-0820-9.
URL https://doi.org/10.1038/s41591-020-0820-9
[8] M. Letko, S. N. Seifert, K. J. Olival, R. K. Plowright, V. J. Munster, Bat-borne virus diversity, spillover and emergence,
Nature Reviews Microbiologydoi:10.1038/s41579-020-0394-z.
URL https://doi.org/10.1038/s41579-020-0394-z
[9] A. Gupta, M. V. Madhavan, K. Sehgal, N. Nair, S. Mahajan, T. S. Sehrawat, B. Bikdeli, N. Ahluwalia, J. C. Ausiello,
E. Y. Wan, et al., Extrapulmonary manifestations of covid-19, Nature Medicine 26 (7) (2020) 1017–1032. doi:10.1038/
s41591-020-0968-3.
URL http://dx.doi.org/10.1038/s41591-020-0968-3
[10] E. J. Williamson, A. J. Walker, K. Bhaskaran, S. Bacon, C. Bates, C. E. Morton, H. J. Curtis, A. Mehrkar,
D. Evans, P. Inglesby, et al., Opensafely: factors associated with covid-19 death in 17 million patients, Naturedoi:
10.1038/s41586-020-2521-4.
URL http://dx.doi.org/10.1038/s41586-020-2521-4
[11] E. P. Scully, J. Haverfield, R. L. Ursin, C. Tannenbaum, S. L. Klein, Considering how biological sex impacts immune
responses and covid-19 outcomes, Nature Reviews Immunologydoi:10.1038/s41577-020-0348-8.
URL https://doi.org/10.1038/s41577-020-0348-8
[12] C. Willyard, Coronavirus blood-clot mystery intensifies, Nature 581 (7808) (2020) 250–250.
doi:10.1038/
d41586-020-01403-8.
URL http://dx.doi.org/10.1038/d41586-020-01403-8
[13] J. D. Silverman, N. Hupert, A. D. Washburne, Using influenza surveillance networks to estimate state-specific prevalence of
sars-cov-2 in the united states, Science Translational MedicinearXiv:https://stm.sciencemag.org/content/early/2020/
06/22/scitranslmed.abc1126.full.pdf, doi:10.1126/scitranslmed.abc1126.
URL https://stm.sciencemag.org/content/early/2020/06/22/scitranslmed.abc1126
[14] C. V. Fry, X. Cai, Y. Zhang, C. S. Wagner, Consolidation in a crisis: Patterns of international collaboration in early
covid-19 research, PLOS ONE 15 (7) (2020) e0236307. doi:10.1371/journal.pone.0236307.
URL http://dx.doi.org/10.1371/journal.pone.0236307
[15] D. Singh Chawla, Critiqued coronavirus simulation gets thumbs up from code-checking efforts, Nature 582 (7812) (2020)
323–324. doi:10.1038/d41586-020-01685-y.
URL http://dx.doi.org/10.1038/d41586-020-01685-y
[16] D. Duque, D. Morton, B. Singh, Z. Du, R. Pasco, L. Meyers, Timing social distancing to avert unmanageable covid-19
hospital surges, PNAS; Proceedings of the National Academy of Sciences.
[17] D. Adam, Special report: The simulations driving the world’s response to covid-19, Nature 580 (7803) (2020) 316–318.
doi:10.1038/d41586-020-01003-6.
URL http://dx.doi.org/10.1038/d41586-020-01003-6
[18] P. J. Hotez, D. B. Corry, M. E. Bottazzi, Covid-19 vaccine design: the janus face of immune enhancement, Nature Reviews
Immunology 20 (6) (2020) 347–348. doi:10.1038/s41577-020-0323-4.
URL https://doi.org/10.1038/s41577-020-0323-4
[19] S. F. Ahmed, A. A. Quadeer, M. R. McKay, Covidep: a web-based platform for real-time reporting of vaccine target
recommendations for sars-cov-2, Nature Protocolsdoi:10.1038/s41596-020-0358-9.
URL https://doi.org/10.1038/s41596-020-0358-9
[20] P. Block, M. Hoffman, I. J. Raabe, J. B. Dowd, C. Rahal, R. Kashyap, M. C. Mills, Social network-based distancing
strategies to flatten the covid-19 curve in a post-lockdown world, Nature Human Behaviour 4 (6) (2020) 588–596. doi:
10.1038/s41562-020-0898-6.
URL https://doi.org/10.1038/s41562-020-0898-6
[21] D. Faranda, I. P. Castillo, O. Hulme, A. Jezequel, J. S. W. Lamb, Y. Sato, E. L. Thompson, Asymptotic estimates of sarscov-2 infection counts and their sensitivity to stochastic perturbation, Chaos: An Interdisciplinary Journal of Nonlinear
Science 30 (5) (2020) 051107. arXiv:https://doi.org/10.1063/5.0008834, doi:10.1063/5.0008834.
URL https://doi.org/10.1063/5.0008834
[22] B. Korber, W. M. Fischer, S. Gnanakaran, H. Yoon, J. Theiler, W. Abfalterer, N. Hengartner, E. E. Giorgi, T. Bhattacharya, B. Foley, K. M. Hastie, M. D. Parker, D. G. Partridge, C. M. Evans, T. M. Freeman, T. I. de Silva, A. Angyal,
R. L. Brown, L. Carrilero, L. R. Green, D. C. Groves, K. J. Johnson, A. J. Keeley, B. B. Lindsey, P. J. Parsons, M. Raza,
S. Rowland-Jones, N. Smith, R. M. Tucker, D. Wang, M. D. Wyles, C. McDanal, L. G. Perez, H. Tang, A. Moon-Walker,
S. P. Whelan, C. C. LaBranche, E. O. Saphire, D. C. Montefiori, Tracking changes in sars-cov-2 spike: Evidence that
d614g increases infectivity of the covid-19 virus, Celldoi:https://doi.org/10.1016/j.cell.2020.06.043.
URL http://www.sciencedirect.com/science/article/pii/S0092867420308205
[23] M. F. Boni, P. Lemey, X. Jiang, T. T.-Y. Lam, B. W. Perry, T. A. Castoe, A. Rambaut, D. L. Robertson, Evolutionary
origins of the sars-cov-2 sarbecovirus lineage responsible for the covid-19 pandemic, Nature Microbiologydoi:10.1038/
s41564-020-0771-4.

45

URL http://dx.doi.org/10.1038/s41564-020-0771-4
[24] E. Dong, H. Du, L. Gardner, An interactive web-based dashboard to track covid-19 in real time, The Lancet Infectious
Diseases 20 (5) (2020) 533–534. doi:10.1016/S1473-3099(20)30120-1.
URL https://doi.org/10.1016/S1473-3099(20)30120-1
[25] A. Palayew, O. Norgaard, K. Safreed-Harmon, T. H. Andersen, L. N. Rasmussen, J. V. Lazarus, Pandemic publishing
poses a new covid-19 challenge, Nature Human Behaviourdoi:10.1038/s41562-020-0911-0.
URL https://doi.org/10.1038/s41562-020-0911-0
[26] E. Callaway, Will the pandemic permanently alter scientific publishing?, Nature 582 (7811) (2020) 167–168. doi:10.1038/
d41586-020-01520-4.
URL http://dx.doi.org/10.1038/d41586-020-01520-4
[27] D. Kwon, How swamped preprint servers are blocking bad coronavirus research, Nature 581 (7807) (2020) 130–131.
doi:10.1038/d41586-020-01394-6.
URL http://dx.doi.org/10.1038/d41586-020-01394-6
[28] N. Vabret, R. Samstein, N. Fernandez, M. Merad, A. S. Schanoski, A. Rodriguez, A. Moreira, A. Chan, A. Charap,
A. Leader, A. Magen, B. Salomé, C. C. Bozkus, C. Moon, C. Gruber, D. F. Ruan, D. Lozano-Ojalvo, D. Jha, E. Meritt,
E. Risson, E. Dalla, E. Humblin, E. Cody, F. Cossarini, G. Lubitz, G. Britton, G. Martinez-Delgado, I. R. Torres,
J. Mateus-Tique, J. Redes, J. Tan, J. Shang, J. Kim, J. Grout, J. Chung, J. Catalan, J. Kodysh, J. Noel, K. Lindblad,
L. Malle, L. Pia, M. Agrawal, M. Casanova-Acebes, M. Kuksin, M. Suprun, M. Aleynick, M. Roberto, M. Brown, M. Lin,
M. Park, M. Spindler, M. Wilk, M. Belabed, M. Saffern, M. Ota, M. Centa, N. Vaninov, P. Hamon, R. Levantovsky,
S. Hegde, S. Chen, T. Plitt, T. O’Donnell, V. Pothula, V. Van Der Heide, Z. Mahmood, A. Khamporst, A. Horowitz,
B. Brown, D. Homann, D. Bogunovic, E. Grasset, E. Kenigsberg, J. Faith, K. Alexandropoulos, M. Lafaille, N. Bhardwaj,
P. Heeger, S. Mehandru, U. Laserson, T. S. I. R. Project, Trainees, Faculty, Advancing scientific knowledge in times of
pandemics, Nature Reviews Immunology 20 (6) (2020) 338–338. doi:10.1038/s41577-020-0319-0.
URL https://doi.org/10.1038/s41577-020-0319-0
[29] Epidy Health Research Ltd., COVID-19 Risk Factors: literature database & meta-analysis, accessed: 2020-07-21.
URL https://corona.epidy.com
[30] CoronaWhy, accessed: 2020-06-01 (2020).
URL http://coronawhy.org/
[31] V. Tykhonov, A. Polishko, A. Kiulian, M. Komar, CoronaWhy: Building a Distributed, Credible and Scalable Research
and Data Infrastructure for Open Science, SciNLP: Natural Language Processing and Data Mining for Scientific Text,
2020.
[32] The Comprehensive R Archive Network.
URL https://cran.r-project.org
[33] COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University,
accessed: 2020-06-01 (2020).
URL https://github.com/CSSEGISandData/COVID-19
[34] COVID-19: Status of Cases in Toronto, accessed: 2020-06-01 (2020).
URL
https://www.toronto.ca/home/covid-19/covid-19-latest-city-of-toronto-news/
covid-19-status-of-cases-in-toronto/
[35] National Center for Biotechnology Information, accessed: 2020-07-25.
URL https://www.ncbi.nlm.nih.gov/search/all/?term=sars-cov-2
[36] NCBI Resource Coordinators, Database resources of the National Center for Biotechnology Information, Nucleic Acids
Research 46 (D1) (2017) D8–D13. arXiv:https://academic.oup.com/nar/article-pdf/46/D1/D8/23162308/gkx1095.
pdf, doi:10.1093/nar/gkx1095.
URL https://doi.org/10.1093/nar/gkx1095
[37] E. Paradis, K. Schliep, ape 5.0: an environment for modern phylogenetics and evolutionary analyses in R, Bioinformatics
35 (2019) 526–528.
[38] D. J. Winter, rentrez: an r package for the ncbi eutils api, The R Journal 9 (2017) 520–526.
[39] W. O. Kermack, A. G. McKendrick, A contribution to the mathematical theory of epidemics, Proceedings of the royal
society of london. Series A, Containing papers of a mathematical and physical character 115 (772) (1927) 700–721.
[40] D. Smith, L. Moore, et al., The sir model for spread of disease: the differential equation model, Loci.(originally Convergence.) https://www. maa. org/press/periodicals/loci/joma/the-sir-model-for-spread-of-disease-the-differential-equationmodel.
[41] T. Harko, F. S. Lobo, M. Mak, Exact analytical solutions of the susceptible-infected-recovered (sir) epidemic model
and of the sir model with equal death and birth rates, Applied Mathematics and Computation 236 (2014) 184 – 194.
doi:https://doi.org/10.1016/j.amc.2014.03.030.
URL http://www.sciencedirect.com/science/article/pii/S009630031400383X
[42] H. Wickham, J. Hester, W. Chang, devtools: Tools to Make Developing R Packages Easier, r package version 2.3.0 (2020).
URL https://CRAN.R-project.org/package=devtools
[43] W. Chang, J. Cheng, J. Allaire, Y. Xie, J. McPherson, shiny: Web Application Framework for R, r package version 1.4.0.2
(2020).
URL https://CRAN.R-project.org/package=shiny
[44] W. Chang, B. Borges Ribeiro, shinydashboard: Create Dashboards with ’Shiny’, r package version 0.7.1 (2018).
URL https://CRAN.R-project.org/package=shinydashboard
[45] A. Sali, D. Attali, shinycssloaders: Add CSS Loading Animations to ’shiny’ Outputs, r package version 0.3 (2020).

46

URL https://CRAN.R-project.org/package=shinycssloaders
[46] C. Sievert, Interactive Web-Based Data Visualization with R, plotly, and shiny, Chapman and Hall/CRC, 2020.
URL https://plotly-r.com
[47] Y. Xie, J. Cheng, X. Tan, DT: A Wrapper of the JavaScript Library ’DataTables’, r package version 0.13 (2020).
URL https://CRAN.R-project.org/package=DT
[48] H. Wickham, R. François, L. Henry, K. Müller, dplyr: A Grammar of Data Manipulation, r package version 1.0.0 (2020).
URL https://CRAN.R-project.org/package=dplyr
[49] Centers for Disease Control and Prevention, Estimated Personal Protective Equipment (PPE) Needed for Healthcare
Facilities, accessed: 2020-07-14 (2020).
URL https://www.cdc.gov/vhf/ebola/healthcare-us/ppe/calculator.html
[50] Centers for Disease Control and Prevention, Personal Protective Equipment (PPE) Burn Rate Calculator, accessed: 202007-14 (2020).
URL https://www.cdc.gov/coronavirus/2019-ncov/hcp/ppe-strategy/burn-calculator.html
[51] H. Ledford, R. Van Noorden, High-profile coronavirus retractions raise concerns about data oversight, Nature 582 (7811)
(2020) 160–160. doi:10.1038/d41586-020-01695-w.
URL http://dx.doi.org/10.1038/d41586-020-01695-w
[52] L. M. Schriml, M. Chuvochina, N. Davies, E. A. Eloe-Fadrosh, R. D. Finn, P. Hugenholtz, C. I. Hunter, B. L. Hurwitz,
N. C. Kyrpides, F. Meyer, I. K. Mizrachi, S.-A. Sansone, G. Sutton, S. Tighe, R. Walls, Covid-19 pandemic reveals the
peril of ignoring metadata standards, Scientific Data 7 (1) (2020) 188. doi:10.1038/s41597-020-0524-5.
URL https://doi.org/10.1038/s41597-020-0524-5
[53] M. Luengo-Oroz, K. Hoffmann Pham, J. Bullock, R. Kirkpatrick, A. Luccioni, S. Rubel, C. Wachholz, M. Chakchouk,
P. Biggs, T. Nguyen, T. Purnat, B. Mariano, Artificial intelligence cooperation to support the global response to covid-19,
Nature Machine Intelligence 2 (6) (2020) 295–297. doi:10.1038/s42256-020-0184-3.
URL https://doi.org/10.1038/s42256-020-0184-3
[54] Y. Hu, J. Jacob, G. J. M. Parker, D. J. Hawkes, J. R. Hurst, D. Stoyanov, The challenges of deploying artificial intelligence models in a rapidly evolving pandemic, Nature Machine Intelligence 2 (6) (2020) 298–300. doi:
10.1038/s42256-020-0185-2.
URL https://doi.org/10.1038/s42256-020-0185-2

47

