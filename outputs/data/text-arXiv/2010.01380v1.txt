Predicting traffic overflows on private peering

arXiv:2010.01380v1 [cs.NI] 3 Oct 2020

ELAD RAPAPORT, Telekom Innovation Laboratories and Department of Software and Information Systems
Engineering Ben-Gurion University of the Negev, Israel
INGMAR POESE, BENOCS GmbH, Germany
POLINA ZILBERMAN, Telekom Innovation Laboratories Ben-Gurion University of the Negev, Israel
OLIVER HOLSCHKE, Telekom Innovation Laboratories, Germany
RAMI PUZIS, Telekom Innovation Laboratories and Department of Software and Information Systems
Engineering Ben-Gurion University of the Negev, Israel

Large content providers and content distribution network operators usually connect with large
Internet service providers (eyeball networks) through dedicated private peering. The capacity of
these private network interconnects is provisioned to match the volume of the real content demand
by the users. Unfortunately, in case of a surge in traffic demand, for example due to a content
trending in a certain country, the capacity of the private interconnect may deplete and the content
provider/distributor would have to reroute the excess traffic through transit providers. Although,
such overflow events are rare, they have significant negative impacts on content providers, Internet
service providers, and end-users. These include unexpected delays and disruptions reducing the
user experience quality, as well as direct costs paid by the Internet service provider to the transit
providers. If the traffic overflow events could be predicted, the Internet service providers would
be able to influence the routes chosen for the excess traffic to reduce the costs and increase user
experience quality. In this article we propose a method based on an ensemble of deep learning
models to predict overflow events over a short term horizon of 2-6 hours and predict the specific
interconnections that will ingress the overflow traffic. The method was evaluated with 2.5 years’
traffic measurement data from a large European Internet service provider resulting in a true-positive
rate of 0.8 while maintaining a 0.05 false-positive rate. The lockdown imposed by the COVID-19
pandemic reduced the overflow prediction accuracy. Nevertheless, starting from the end of April
2020 with the gradual lockdown release, the old models trained before the pandemic perform
equally well.
ACM Reference Format:
Elad Rapaport, Ingmar Poese, Polina Zilberman, Oliver Holschke, and Rami Puzis. 2020. Predicting traffic
overflows on private peering. 1, 1 (October 2020), 22 pages. https://doi.org/.

1

INTRODUCTION

Most of the Internet traffic consumed by end-users today is produced by a few largest content
providers and distributors. This is a result of a process that has taken place over the past decade
leading to a situation where ten Autonomous Systems (AS) produce more than 60% of total traffic
to networks, as depicted in Fig. 1 [16, 17]. We refer to the traffic produced by the major ASes as the
hyper-giant traffic. The increased volume of hyper-giant traffic correlates is a result of an increased
number of end-users consuming the services that are directly related to this traffic, see Fig. 2. The
Authors’ addresses: Elad Rapaport, eladr@post.bgu.ac.il, Telekom Innovation Laboratories and Department of Software
and Information Systems Engineering, Ben-Gurion University of the Negev, Beer-Sheva, Israel; Ingmar Poese, ingmar@
benocs.com, BENOCS GmbH, Berlin, Germany; Polina Zilberman, polinaz@bgu.ac.il, Telekom Innovation Laboratories,
Ben-Gurion University of the Negev, Beer-Sheva, Israel; Oliver Holschke, oliver.holschke@telekom.de, Telekom Innovation
Laboratories, Berlin, Germany; Rami Puzis, puzis@bgu.ac.il, Telekom Innovation Laboratories and Department of Software
and Information Systems Engineering, Ben-Gurion University of the Negev, Beer-Sheva, Israel.
2020. XXXX-XXXX/2020/10-ART $15.00
https://doi.org/.

, Vol. 1, No. 1, Article . Publication date: October 2020.

2

Puzis, et al.

share of Internet users in the United States in 2013 that were accessing online videos accounted for
75.7%. This share is constantly increasing and is projected to reach 83.3% in 2020. The subscriber
base of Netflix in the United States has doubled from approximately 30 million subscribers in
2013 to approximately 60 million subscribers in 2019. Netflix is considered to be among the top
ten hyper-giant ASes in many countries. Similar significant growth rates in customer bases of
hyper-giants can be observed in Central Europe as well.
The concentration of traffic on a few hyper-giants has significant effects on the Internet infrastructure. In order to optimize their performance, most hyper-giants setup and operate private
network interfaces (PNI) with the networks providing Internet services to the end-users (also
known as, eyeball networks). PNIs are dedicated to carrying only the traffic emanating from the
hyper-giant toward the end-users [30]. Due to the use of PNIs by hyper-giants, any disruption of
traffic typically delivered through a PNI negatively impacts a larger fraction of the end-users and a
larger portfolio of services. The degraded customer experience due to traffic shift from PNIs now
results in a greater chance of customer churn, more penalties due to SLA (service level agreement)
violations, and a negative impact on brand perception. The total value-at-risk by hyper-giant traffic
disruptions has risen significantly [6].
PNIs deliver a substantial volume of the consumed traffic directly into the eyeball network,
which reduces the need to upgrade general interconnection points with public peering networks.
1

2019 2016

.75

ECDF

2013
.5

2009
2007

.25

0

10

20

30

40

50

60

70

80

90

100 110 120 130 140 150 160

No. of Autonomous Systems (AS)

Fig. 1. Development of cumulative shares of Internet traffic distributed by ASes over past 13 years. The curves
for 2007 to 2016 are from [16, 17], for 2019 the underlying data is from the data set used in this study.
Hyper-giants' market share

Other's market share

Email
Messaging
Social networks
Online video
Consumer services
Financial services
Streaming audio
Video conferencing

0%

20%

40%

60%

80%

100%

Share of internet users

Fig. 2. Indicative usage of Internet applications and market shares of hyper-giants. The estimation is based
on statistics on online activities of adults in the US from 2017 [11] and our data on hyper-giant prevalence.
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

3

Unfortunately, a hyper-giant may experience a mapping issue, flash crowd, PNI link failure, or
any situation when the capacity of the PNI between the hyper-giant and the eyeball network is
exhausted. To prevent the loss of traffic, it falls back to deliver the traffic to the eyeball network
through the neglected public peering networks. We refer to such fall-backs as overflow events.
Since public peering interconnections are not well built for asymmetric traffic volumes, overflow
events can overload the public peering interconnections and result in service degradation not only
for the specific hyper-giant but also for all content providers that do not maintain their own PNIs.
The main consequence of overflow events is, thus, lost traffic and degraded service quality.
Timely and accurate prediction of overflow events would enable the eyeball network providers
to respond to such events with countermeasures such as requesting the hyper-giant to reroute
the traffic or remap the users to different clusters in a way that will cause fewer infrastructure
disruptions. Predicting network traffic and link failures is extremely challenging in a general
case [15]. However, user Internet consumption is largely predictable. For example, deep learning
was shown be effective in cellular and wireless traffic prediction tasks [14, 33, 34]. As we show in
this paper, traffic surge from hyper-giants is largely predictable as well.
Overflow events happen only during peak hours between 17:00-21:00. In order to allow a reasonable time for reaction, the prediction should be made at least two hours before the actual event. In
this article, we (1) define the overflow prediction problem and (2) propose an ensemble of deep
learning models to predict daily overflow events. The models:
(3) predict overflow events with a true-positive rate of 0.8, and false-positive rate of 0.05;
(4) pin-point the specific handovers which will carry the overflow traffic;
(5) survived the COVID-19 pandemic restoring the accuracy after lockdown release despite
being six months old.
Finally, (6) analysis of the trained models using explainable artificial intelligence (XAI) techniques,
shows that the most significant clues for overflow events are found in the traffic on the same day a
few hours before the event and on the same weekday a week before the event.
2
2.1

RELATED WORK
Deep learning (DL) for network traffic prediction

Network traffic prediction, a form of multivariate time-series (MTS) prediction, is a challenging
task that involves the leveraging of inter-dependencies between different variables over time, in
order to make predictions for a specific variable or a set of variables in the future.
Vector auto-regression (VAR) is one of the most simple and common methods for MTS prediction [35]. It is a linear model, where each predicted variable is a weighted sum of past measurements
(of itself and other variables in the time-series). Linear models usually fail to capture complex
intricacies of large MTS datasets, and this has been proved by the following related works.
Yu and Chen [31] implemented a simple 3-layer feed-forward neural network to predict video
traffic in an ISDN network. They have shown that their model is superior to linear based models,
such as autoregressive integrated moving average (ARIMA).
Mozo et al. [21] proposed a convolutional neural network architecture for predicting short-term
changes in the amount of traffic crossing a data center network. Their model receives a single
data stream at a time, sampled at different frequencies. Each sampling is fed into a different 1D
convolutional filter and the outputs of these filters are summed.
Andreoletti et al. [2] applied Diffusion convolutional recurrent neural networks for network
traffic prediction using multivariate data. They treated a specific backbone network as a graph, with
each node being a unit in the network and each edge representing the bits transferred between two
units in a certain time period. Their CNN is able to take advantage of the graph structure when

, Vol. 1, No. 1, Article . Publication date: October 2020.

4

Puzis, et al.

predicting the traffic amounts for the next time period, outperforming methods such as long-short
term memory (LSTM) units and multi-layer perceptrons.
Le et al. [18] approached the problem of traffic matrix prediction by using convolutional LSTM
networks, which apply recurrent operations to data that has been processed by convolution. They
used a bi-directional recurrent neural network to impute missing data, by learning from future data
in the time window fed to the predictor. Data imputation is helpful if the process of network data
collection is resource consuming and error-prone, making it is infeasible to collect data indefinitely.
In our approach all the data is ground-truth and the need for imputation is diminished.
Similar to the works above, we show that by using a CNN-based ensemble we are able to capture
complex inter-dependencies of traffic from several sources and destinations.
2.2

Network traffic routing

Routing as well as traffic engineering (TE) [3, 28, 29] is may be internal or external. When it
comes to internal traffic engineering, ISPs have free reign on how to implement this. However,
external TE is usually restricted to border gateway protocol (BGP) announcements, which are
either coarse-grained or produce much address space disaggregation [10]. In any case, TE aims to
distribute the load into and inside the network such that overloads are avoided.
Overflow traffic is defined as traffic that shifts from
Hyper-giant Private Network Interfaces (PNI) onto general Internet peering links. Since
most ingress traffic today enters eyeball networks via PNIs [23], the public peerings transfer less
traffic because they do not carry the bulk load of the content anymore. Thus, a fraction of rerouted
PNI traffic can overload a public peering link. This in turn affects the traffic from the hyper-giant
as well as the performance for all other sources utilizing the interconnection.
For a network provider to react to an overflow event before performance degrades two steps are
required. First, before the overflow happens, there needs to be a notification that an overflow is
imminent. This notification can, in classical scenarios, be done via email and/or phone call between
the hyper-giant and the ISP, but more often than not a more automated solution is required. We
define step one to be an automated detection of possible overflow events to happen in the near
future based solely on data available from the ISP itself.
When step one detects an imminent overflow, a reaction must follow. We find step two to be the
challenge of reacting in time to an overflow event to mitigate its effect on network performance.
3

TERMINOLOGY

In this section, we outline the essential concepts and relationships representing overflow traffic
and overflow event that will be used throughout the paper. We will mark important terms used
outside this section with boldface. Figure 3 displays a schematic overview of the concepts.
Autonomous System (AS) is part of the Internet infrastructure, owned by an ISP [12]. Eyeball
network is commonly used to refer to an AS through which end users look at the Internet. In this
study, the vantage point in which overflow traffic and events are observed is an eyeball network.
The following concepts are defined form the perspective of an eyeball network in order to clearly
convey topological positions and traffic directions.
Source AS from the perspective of the eyeball network is any AS which is the origin of the
traffic consumed by eyeball network’s end users. We denote source ASes as 𝑆 1, 𝑆 2, . . . , 𝑆𝑖 , . . ., where 𝑖
identifies the AS. We study overflow traffic originating from source ASes that can have a significant
impact on the eyeball network. Following the definition of hyper-giant by Pujol et al. [23] we
focus in this research on source ASes that (1) produce at least 1% of the total traffic delivered to
broadband customers of the eyeball network, (2) publicly identify themselves as a content delivery

, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

Source AS:

Handover AS:

Si

Hj

S1

H1

H14

Source & Handover AS based
traffic flow as time series:
𝑇𝑆𝑖,𝐻𝑗

label

𝑇𝑆1,𝐻1

R

S2

H2

, 𝑙𝑎𝑏𝑒𝑙(𝑇𝑆𝑖,𝐻𝑗 ) =

O

𝑇𝑆2,𝐻15O
𝑇𝑆2,𝐻2

R

“Regular traffic (R)”, where i = j
“Overflow traffic (O)”, where i ≠ j

“Eyeball Network” Autonomous System

𝑇𝑆𝑖,𝐻𝑗 ,

𝑇𝑆1,𝐻14 O
𝑇𝑆1,𝐻15

H15

5

𝑂𝑆1

𝑂𝑆2

𝑗≠𝑖
𝑚

𝑂𝑆𝑖 = ෍

𝑗,𝑗≠𝑖

𝑇𝑆𝑖 ,𝐻𝑗

Source AS based, perhandover overflow traffic
Source AS based, total
overflow traffic

In overflow event at [t] we label as “overflow”
in

𝑂𝑆𝑖
𝑇𝑆𝑖, ,𝐻𝑗

if

𝑂𝑆𝑖 𝑡 > 𝜃𝑆𝑖
𝑇𝑆𝑖,𝐻𝑗 [𝑡] > 𝜃𝑆𝑖 ,𝐻𝑗 ,

𝑗≠𝑖

otherwise as “non-overflow”.

Fig. 3. Schematic overview of Source AS based, total overflow traffic – in reference to the “Eyeball Network”
AS – as time-series 𝑂 𝑆 1 and 𝑂 𝑆 2 (here exemplary for two Source ASes 𝑆 1 and 𝑆 2 , employing two exemplary
Handover ASes 𝐻 14 and 𝐻 15 ) and their partial overflow traffic time-series 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑗 ≠ 𝑖. They are further
labeled as overflow at 𝑡 when they exceed threshold 𝜃 𝑆𝑖 and 𝜃 𝑆𝑖 ,𝐻 𝑗 , respectively – otherwise as non-overflow.

network (CDN) or are registered as a “content” or “enterprise network” in the database PeeringDB1
and (3) the majority of their traffic (>60%) is transferred through a dedicated PNI.
Handover is any AS that ingresses traffic into the eyeball network via a direct interconnection.
We denote handovers as 𝐻 1, 𝐻 2, . . . , 𝐻 𝑗 , . . . , 𝐻𝑚 , where the index 𝑗 identifies the handover AS.
Traffic emanating from a source AS may enter the eyeball network through one (or more) other
AS(es). The last AS transferring traffic is the handover AS. In this study, we focus on handover
ASes that deliver traffic emanating from hyper-giant source ASes.
Traffic emanating from a source AS 𝑆𝑖 and entering the eyeball network through a handover
𝐻 𝑗 is denoted as 𝑇𝑆𝑖 ,𝐻 𝑗 . Most hyper-giant source ASes establish direct connections to large eyeball
networks through private network interface (PNI) links as the dominant traffic delivery channel.
In such cases the source AS 𝑖 is also the handover AS 𝑖. Traffic delivered through a PNI link is,
therefore, denoted as 𝑇𝑆𝑖 ,𝐻𝑖 . We form traffic volume time-series by aggregating traffic volumes for
each pair of source and handover ASes on a hourly basis. 𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡] denotes the total traffic volume
emanating from 𝑆𝑖 , entering the eyeball network under investigation through 𝐻 𝑗 during the hour 𝑡.
𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡 1 : 𝑡 2 ] denotes the time-series of hourly traffic volumes from 𝑡 1 to 𝑡 2 .
The vast majority of the traffic emanating from a hyper-giant source AS 𝑆𝑖 enters the eyeball
network through its PNI: AVG𝑡 𝑇𝑆𝑖 ,𝐻𝑖 [𝑡] ≫ AVG𝑡 𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡] for any 𝑗 ≠ 𝑖. We refer to 𝑇𝑆𝑖 ,𝐻𝑖 as regular
traffic denoted by 𝑅 in Fig. 3. Nevertheless, a small fraction of traffic emanating from hyper-giant
source ASes is constantly delivered through non-PNI links. The reasons for the traffic flow through
non-PNI links may vary. For example, a CDN may incorrectly map some of the users to a distant
cluster [22, 23]. Such mapping issues may occur, for example, if the end-user uses a web proxy
while the CDN employs IP based localization or if the user default domain name system (DNS)
server settings are misconfigured and the CDN employs DNS based localization. In addition to
small scale traffic flows constantly delivered through non-PNI links, occasional flash crowd events
such as massive software updates or new TV series may cause PNI link over-utilization [5]. The
excess traffic is diverted by the hyper-giant to public peering interconnects. We refer to traffic
1 https://www.peeringdb.com/

, Vol. 1, No. 1, Article . Publication date: October 2020.

6

Puzis, et al.

Fig. 4. Two exemplary overflow traffic time-series 𝑂 𝑆 2 and 𝑂 𝑆 5 with threshold-crossing overflow events.

𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑖 ≠ 𝑗 that should have been delivered through a PNI link but is delivered through a non-PNI
link as overflow traffic, denoted by 𝑂 𝑆𝑖 or 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑖 ≠ 𝑗 in Fig. 3.
This study focuses on the rare events when the PNI links fail or their capacity is exhausted
causing massive utilization of non-PNI public peering links. We refer to such events, depicted in
Fig. 4 as overflow events. We identify overflow events as a point in time when the total overflow
traffic emanating from a source AS exceeds a certain predefined threshold 𝜃 𝑆𝑖 . It means that overflow
traffic volume is abnormally high and it is most likely to cause excessive costs to the CDN and user
experience degradation. We label an overflow traffic time-series measurement at a point in time as
“overflow” if 𝑂 𝑆𝑖 [𝑡] > 𝜃 𝑆𝑖 otherwise we label it as “non-overflow”.
No inter-hyper-giant interconnections: While technically feasible, interconnections between
hyper-giants - including the use of another CDN as a Handover AS to serve one’s own traffic to
the eyeball network - are not foreseen. Reasons for this follow business, strategic, and economic
considerations, as hyper-giants intend to serve their user base located in the eyeball networks
directly via PNIs, which they have the most control over (in both technical and economic sense).
Figure 6 depicts this non-occurrence of inter-hyper-giant traffic, based on our ISP data set. This
does not mean that these interconnections do not occur in the Internet. However, when they do it
is mostly due to operational fallacies or malicious behavior, and not out of business intent [27].
4

PROBLEM DEFINITION

We focus on the top-10 source ASes (volume-wise) according to the selection criteria defined in the
previous section, together providing more than 95% of traffic delivered into the eyeball network,
denoted as 𝑆 1, ..., 𝑆 10 . The top 10 source ASes employ 22 major handover ASes denoted as 𝐻 1, ..., 𝐻 22 .
The PNI handover ASes are 𝐻 1, ..., 𝐻 10 and thus, 𝑆𝑖 = 𝐻𝑖 for 𝑖 = 1, ..., 10. 𝐻 11, ..., 𝐻 22 represent the
non-PNI handover ASes. All predictions in our study are made for daily peak hours, which we
constrain to hours 17:00 - 21:00 UTC.
We define four overflow prediction problems organized along the following two dimensions:
• Problem type:
– Regression problem: Predicting the volume of the overflow traffic.
– Classification problem: Predicting whether an overflow event will happen, per day.
• Data granularity:
– Total overflow traffic: Whether the predicted variable is derived from the total overflow
traffic for source AS 𝑆𝑖 , i.e. 𝑂 𝑆𝑖 .
– Per-handover overflow traffic: Whether the predicted variable is derived from the overflow
traffic delivered through a specific handover AS 𝐻 𝑗 , i.e. 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑗 ≠ 𝑖.
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

7

Table 1. The four problems presented in the paper, regarding a certain source AS 𝑆𝑖 .

Problem type
Classification

Granularity

Regression

Total overflow traffic 𝑂 𝑆𝑖

(1) Predict 𝑂 𝑆𝑖 , total over- (3) Predict overflow events
flow traffic volume
for 𝑂 𝑆𝑖

Per-handover overflow traf- (2) Predict 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑖 ≠ 𝑗 per (4) Predict overflow events
fic 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑗 ≠ 𝑖
handover
for 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑗 ≠ 𝑖
The combination of these two factors, which define the four problems, are shown in Table 1. We
will reference the different problems by the numbering defined in this table.
4.1

Defining the regression problems

The regression problems (1 & 2) can be defined as follows: For source AS 𝑆𝑖 , at time 𝑡, given
𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡 − 𝑛 : 𝑡] for each 𝐻 𝑗 employed by 𝑆𝑖 (hourly traffic volumes from the last 𝑛 hours), predict:
• Sum prediction (problem 1): 𝑂 𝑆𝑖 [𝑡 + ℎ], the sum of overflow traffic for all non-PNI handovers
employed by source AS 𝑆𝑖 , at time 𝑡 + ℎ.
• Per handover prediction (problem 2): 𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡 + ℎ], 𝑖 ≠ 𝑗, the overflow traffic for a certain
non-PNI handover employed by source AS 𝑖, at time 𝑡 + ℎ.
In our study, we chose 𝑡=15:00 and ℎ = 2, 3, 4, 5, 6, which means we make daily predictions at 15:00
o’clock regarding the peak hours which are 17:00-21:00.
4.2

Defining the classification problems

In the classification approach (problems 3 & 4), each day in each overflow traffic series is labeled as
either overflow or non-overflow. This labeling requires:
• Defining a threshold 𝜃 for each overflow traffic time-series, above which traffic is regarded
as overflowing.
• Taking the maximum daily peak hour traffic amount of a total overflow traffic time-series,
𝑂 𝑆𝑖 (problem 3), or 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑖 ≠ 𝑗 (problem 4). If this daily value is above the corresponding
threshold (𝑂 𝑆𝑖 > 𝜃 𝑆𝑖 for problem 3, or 𝑇𝑆𝑖 ,𝐻 𝑗 > 𝜃 𝑆𝑖 ,𝐻 𝑗 for problem 4), the corresponding day is
labeled as “overflow”. Otherwise, it is labeled as “non-overflow”. The days for each overflow
traffic time-series are labeled independently.
The threshold 𝜃 𝑆𝑖 (𝜃 𝑆𝑖 ,𝐻 𝑗 ) for each traffic volume time-series 𝑂 𝑆𝑖 (𝑇𝑆𝑖 ,𝐻 𝑗 ) is assumed to be known
in advance and to represent rare events. The threshold for each traffic volume time-series conforms
to the formula 𝜃 𝑖 = AVG 𝑂 𝑆𝑖 + 𝑝 × STD 𝑂 𝑆𝑖 (𝜃 𝑆𝑖 ,𝐻 𝑗 = AVG 𝑇𝑆𝑖 ,𝐻 𝑗 + 𝑝 × STD 𝑇𝑆𝑖 ,𝐻 𝑗 ). 𝑝 is automatically
chosen for each traffic volume time-series such that at least 5% and at most 15% of days in the data
for the overflow time-series are labeled as “overflow”.
5

PROPOSED SOLUTION

Out of the four mentioned problems, the most complex is problem 2, where traffic volumes are
to be predicted for several traffic volume time-series individually. From the solution to problem
2, the solutions for all other defined problems can be derived via reduction. Let 𝑇𝑆𝑖 ,𝐻1 [𝑡 + 2 :
𝑡 + 6], ...,𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡 + 2 : 𝑡 + 6], for all 𝐻 𝑗 employed by 𝑆𝑖 be the solutions for problem 2, for source AS
𝑆𝑖 for a specific day. The derivations are:
• Problem 1: by computing
Í
𝑂 𝑆𝑖 [𝑡 + 2 : 𝑡 + 6] = 𝑗≠𝑖 𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡 + 2 : 𝑡 + 6].
• Problem 3: by checking if 𝑚𝑎𝑥 𝑂 𝑆𝑖 [𝑡 + 2 : 𝑡 + 6] > 𝜃 𝑆𝑖 .
, Vol. 1, No. 1, Article . Publication date: October 2020.

8

Puzis, et al.

• Problem 4: by checking if
𝑚𝑎𝑥 𝑇𝑆𝑖 ,𝐻 𝑗 [𝑡 + 2 : 𝑡 + 6] > 𝜃 𝑆𝑖 ,𝐻 𝑗 .
Empirically we have found that solving the classification problems 3 and 4 by widely accepted
classification methods is less accurate than predicting the exact traffic volumes by regression and
applying the reductions explained above. The average AUC (area under the receiver operating
characteristic curve) attained by a direct solution to problem 3, using a classification ensemble
trained by the NAS algorithm is 0.7, while the reduction approach explained yields 0.82. We assume
regression methods are better because by reducing the problem into binary classification, the
magnitude of each overflow is disregarded and the models are less able to adapt to various overflow
situations. Thus, all results shown in our study are achieved by regression, while classification
measures reported are extracted using the reduction explained above.
5.1 Applying neural architecture search (NAS)
We chose to apply deep learning to predict the overflow traffic volumes, after using classical
machine learning methods for time-series failed to give satisfactory results. Moreover, neural
networks have been shown to produce state-of-the-art results for related traffic volume prediction
problems given enough data (see Related Work section). We wished to derive the neural network
architectures automatically to further enhance performance, and for this reason, we chose to apply
a NAS method, developed by Rapaport et al. [24].
This NAS method is a genetic algorithm that searches for good convolutional neural network
(CNN) architectures, given data and an optimization problem. It was found to generate highperformance models for predicting time-series data in domains including finance, health, and
sensor data.
The main outline of the NAS method is:
(1) Generate a population of 𝑁 random CNN architectures.
(2) In each generation, select the better performing architectures on a hold-out validation set,
perform crossover (combining two architecture to create a new one) and mutation (performing
a minor alteration to an existing architecture) and repeat for a fixed number of generations.
(3) The selected architecture is the best performing one in the last generation.
The output of the NAS algorithm are CNN models, which are architectures + learned model
parameters, as learned throughout the NAS algorithm. The architectures are built from the most
basic building blocks used in deep learning, including convolutional layers, activation functions,
batch normalization, and dropout. We improved the method by creating an ensemble of the top
5 models generated in the last generation of the genetic algorithm. This increased the method’s
performance, as opposed to just taking the best model. The generated architectures are in table 2.
The “total overflow traffic” problem required models with an output size of 5, for each hour in
peak hours. In the “per handover overflow traffic” problem we used an output size of 5 × 22, for
each hour in peak hours for each handover AS.
5.2

Hyper parameter tuning

The ensemble of CNNs created by the NAS method is a simple average of model outputs. An
additional weighted ensembling method was tested, using a fully connected layer which receives the
outputs of all models and produces a final weighted output, but it underperformed the simple average.
Ensemble sizes of 1 to 10 models were tested, and a steady increase in prediction performance was
observed as the ensemble size increased. The performance improvement was very minor when
using over 5 models, as shown in figure 5, hence this number was chosen.
All models in the ensemble were trained for 50 epochs of the data, with early stopping after 3
non-improving epochs. The Adam [9] optimizer and mean squared error (MSE) loss are used for
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

9

Table 2. Top 5 model architectures generated by NAS for predicting overflow traffic per handover AS. Conv =
1D convolutional layer with a stride of 1 (F = number of filters, K = kernel size), MaxPool = 1D max pooling
layer (K = kernel size, S = stride), ELU is a non-linear activation function by Clevert et al. [7].

Layer

Model 1

Model 2

Model 3

Model 4

Model 5

1
2
3
4
5
6
7
8
9
10
11

Conv F: 28,K: 12
ELU
ELU
MaxPool K: 1,S: 2
ELU
MaxPool K: 1,S: 3
ELU
ELU
ELU
Conv F: 110,K: 39

ELU
ELU
ELU
MaxPool K: 1,S: 2
ELU
Conv F: 37,K: 2
ELU
ELU
MaxPool K: 2,S: 3
Conv F: 110,K: 40

ELU
ELU
ELU
MaxPool K: 1,S: 2
ELU
Conv F: 37,K: 2
ELU
MaxPool K: 2,S: 3
ELU
Conv F: 110,K: 40

ELU
ELU
ELU
MaxPool K: 1,S: 2
ELU
Conv F: 37,K: 2
ELU
ELU
MaxPool K: 2,S: 3
Conv F: 110,K: 40

ELU
ELU
ELU
MaxPool K: 1,S: 2
ELU
Conv F: 37,K: 2
ELU
ELU
MaxPool K: 2,S: 3
ELU
Conv F: 110,K: 40

Fig. 5. Performance of different ensemble sizes. PCC–Pearson correlation coefficient.

neural network training. A window size of 240 hours for the input data was chosen empirically after
testing the performance of 120, 240, and 480-hour windows. Thus, each input sample representing
data delivered from a certain source AS is a matrix of size 240 × 22. All code was written in Python
3.7, using the PyTorch deep learning framework.
6
6.1

EVALUATION AND RESULTS
Data description

We use hourly aggregated flow-based data, which is data regarding IP network traffic flows, as
they enter and exit network interfaces at the edge of the AS . The data was gathered inside a Tier-1
ISP over 2.5 years by the Flow Director (FD) system [23]. FD collects multiple flow-based protocols
(sFlow, NetFlow and IPFIX) and produces a harmonized, well-formatted, de-duplicated, in-order
flow stream that is the data basis for the hourly aggregated time series we use in this study. The
sample rate configured on router interfaces was equal on all interfaces in the ISP’s AS at a rate
of one to a low 4-digit number of packets. The users requesting content via the ISP network are
all located in the same time zone. For further details on the various steps of the data processing
pipeline of FD we refer to [23].
Each data sample given to the neural network ensemble is a 2D matrix representing 240 hourly
measurements of traffic volume for each handover AS employed by a certain source AS. Each source
AS employs a specific set of handover ASes, thus a common data representation is needed in order
to train the models with multiple ASes simultaneously. We defined each data sample as a matrix of
size 240 × 22. 240 represents time, for 240 hourly samples, and 22 for all of the handover ASes (240
rows and 22 columns). Only the columns representing handover ASes which are employed by a
certain source AS contain real data, while other, irrelevant, rows are filled with zeros. Formally,
, Vol. 1, No. 1, Article . Publication date: October 2020.

10

Puzis, et al.

in all samples representing source AS 𝑖, the columns representing 𝑇𝑆𝑖 ,𝐻𝑖 and 𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑖 ≠ 𝑗 for all
handover ASes 𝑗 employed by source AS 𝑖 contain real data, while other columns contain zeros
By using the above data representation, the weights of the neural networks capture the patterns
unique to each handover AS, which might be common across several source ASes that employ the
same handover AS. Figure 6 depicts the handovers used by each AS and the intensity of the data in
each AS/handover combination (after normalization).
In order to reduce the effect of the large volume of non-overflow PNI traffic volume on the
prediction, the data for each traffic volume series 𝑇 was normalized prior to prediction. The
normalization was done as follows:
𝑇𝑛𝑜𝑟𝑚𝑎𝑙𝑖𝑧𝑒𝑑 = (𝑇 − 𝑚𝑖𝑛 𝑇 )/(𝑚𝑎𝑥 𝑇 − 𝑚𝑖𝑛 𝑇 ).
With 𝑚𝑖𝑛 𝑇 (𝑚𝑎𝑥 𝑇 ) being the minimum (maximum) hourly measured volume for 𝑇 in the model
training data. The ensemble received data from 𝑇𝑛𝑜𝑟𝑚𝑎𝑙𝑖𝑧𝑒𝑑 as input.

Fig. 6. Shown is the normalized mean traffic flow for all source/handover AS combinations, over the 2.5 years
of data in the study. The diagonal in the first ten columns shows the PNI handover AS of each source AS, from
which the majority of data for each source AS is delivered. The latter columns show the non-PNI handover
ASes which are employed by each AS.

6.2

Experiments

The experiments in this study are intended to evaluate the traffic prediction capabilities of the deep
learning ensemble. They were conducted using 10-fold cross-validation in time, using forward
chaining, similar to the methods shown by Bergmeir et al [4]. This means that each traffic volume
time-series is split into 11 chronological parts indexed by [1, 2, 3, 4, 5, ..., 11]. We train 10 models:
• Model 1: Train data: [1], Test data: [2]
• Model 2: Train data: [1, 2], Test data: [3]
• Model 3: Train data: [1, 2, 3], Test data: [4], and so on...
The reported results were calculated by combining all test data predictions into one timeline, thus
receiving predicted data for segments [2, 3, 4, ..., 11], for all source ASes, and comparing them
with the actual traffic volumes for the time period represented by these data. This evaluation
approach ensures that our prediction model is trained using only past data, as in real-life situations.
Additionally, a unique model was developed by the NAS algorithm for each fold of the data, thus the
architectures of the neural networks are not affected by future data. Except for figure 8, all results
depict the average predictive performance for all of the peak hours (17:00-21:00). Furthermore, all
results are based on cross-validation in time, using the whole 2.5 years of available data.
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

11

Fig. 7. Pearson correlation coefficient (PCC), relative absolute error (RAE), and root relative squared error
(RRSE) for the prediction of traffic overflow volumes in the 10 source ASes in our study. Results are averaged
for the combined 10-fold test set in 5 independent ensemble training runs.

6.3

Traffic volume prediction by regression

To evaluate our deep learning ensemble predictor for overflow traffic we used the following
measures, which are widely accepted in the domain of MTS forecasting.
√︃
Í
ˆ 2
(𝑡 ) ∈Ω𝑇 𝑒𝑠𝑡 (𝑇 [𝑡] − 𝑇 [𝑡])
Root relative squared error (RRSE) = √︃Í
(1)
¯ 2
(𝑡 ) ∈Ω𝑇 𝑒𝑠𝑡 (𝑇 [𝑡] − 𝑇 )
Í
Root absolute error (RAE) =

(𝑡 ) ∈Ω𝑇 𝑒𝑠𝑡

Í

ˆ
|(𝑇 [𝑡] − 𝑇 [𝑡])|
|𝑇 [𝑡] − 𝑇¯ )|

(2)

(𝑡 ) ∈Ω𝑇 𝑒𝑠𝑡

Pearson correlation coefficient (PCC) =
ˆ − 𝑇¯ˆ )
− 𝑇¯ ) (𝑇 [𝑡]
√︃
√︃Í
ˆ − 𝑇¯ˆ ) 2
¯ 2 Í (𝑡 ) ∈Ω (𝑇 [𝑡]
(𝑡 ) ∈Ω𝑇 𝑒𝑠𝑡 (𝑇 [𝑡] − 𝑇 )
𝑇 𝑒𝑠𝑡
Í

(𝑡 ) ∈Ω𝑇 𝑒𝑠𝑡 (𝑇 [𝑡]

(3)

where 𝑇 denotes a traffic volume time-series, 𝑇ˆ denotes predicted volumes for 𝑇 , and 𝑇¯ denotes the
average peak hour values for 𝑇 in Ω𝑇 𝑒𝑠𝑡 , the total evaluated time period. The above measures are
taken for the daily predicted peak hours - daily measurements for the hours 17:00 to 21:00.
Results for problem 1 (predicting the volume of “total handover traffic”) in the 10-fold experiment
are shown in figure 7. Compared are two approaches to solving this problem. The first is by directly
predicting the sum of all non-PNI handover traffic–prediction of sum, and the second is making
predictions for each non-PNI handover individually and summing the results–sum of predictions.
Source AS 𝑆 8 does not appear in our results because it does not employ any non-PNI handover
ASes and thus generates no overflow traffic.
Regression results per hour of day are shown in figure 8. Prediction for the earlier hours is
generally more effective than for later hours in the day. These results are sensible because the
earlier hours in the peak hours are closer to the time window of the training data.
, Vol. 1, No. 1, Article . Publication date: October 2020.

12

Puzis, et al.

Fig. 8. Regression results per hour of day. It can be seen that, in average, prediction for the earlier hours is
more effective.

It is shown that summing the predictions for all overflow traffic volume series (𝑇𝑆𝑖 ,𝐻 𝑗 , 𝑖 ≠
𝑗) is better than predicting their sum (𝑂 𝑆𝑖 ). We assumed this is because when predicting the
values for each overflow traffic volume series individually, the models can account for the interdependencies between the times series of different handover ASes, by learning the convolutional
weights corresponding to different handover ASes simultaneously. When we aggregate the the
time series of different ASes into a sum (𝑂 𝑆𝑖 ) before model training, the models lose the capability
to account for inter-dependencies between ASes.
Prediction results along time are shown graphically for a selected 3 ASes in figure 9. Shown are the
results for the sum of predictions, for the concatenated test sets taken from 10-fold cross-validation
in time.
The notion that predicting the overflow traffic for each traffic volume series helps model the
dependencies between them is strengthened in figure 10. In this figure are results for 5 independent
experiment runs for each fold, and the linear trend observed. It is visible that the difference between
prediction of sum and sum of predictions increases in the higher folds of the 10-fold experiment.
In the higher folds more training data becomes available to the models (higher folds contain more
training data). We assume that as more training data became available, the neural networks were
able to better make use of the inter-dependencies between the output variables by incorporating this
knowledge into the convolution weights. The sum of predictions approach improves drastically as
more data becomes available, while the prediction of sums approach achieves similar performance
for all training set sizes.
In addition to the advantage in prediction accuracy for problem 1, per-handover resolution
prediction gives higher quality insights for the final goal of mitigating overflow events, thus solving
problems 2 and 4. Shown in figure 11 are detailed results for these problems for each source AS.
The caveat in measuring only the performance of the regression task is that the accepted measures
might miss the essence of the overflow prediction problem. In figure 7 we can see, for example,
that for AS 𝑆 2 our method scored an average RRSE of nearly 1 for the sum of predictions task.
According to the RRSE measure, our method is almost worse than the naive predictor (with RRSE =
1), which predicts the average value at all times. Despite this result, applying the threshold 𝜃 𝑆2 to
the predicted values and measuring the performance by classification metrics yielded a respectable
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

13

Fig. 9. Left: Overflow traffic predictions for 3 source ASes (for problem 1). Right: The AUC-ROC curve
regarding the threshold value 𝜃𝑖 shown on the left. Starred is the optimal point for an overflow prediction
system (problem 3), with minimal false-positives (<0.5%). Traffic volume units were omitted due to privacy
constraints. Time is in mm/yy.

Fig. 10. (Right + middle): The performance of both prediction methods with regard to the fold index, which
represents the amount of training data available to the network. (Left): The difference in Pearson correlation
results for overflow traffic prediction between the sum of predictions and prediction of sum, by data fold.

AUC of 0.85 for the same predicted values. Thus the regression targeted statistic of RRSE failed to
capture the essence of the overflow prediction task and additional measures are needed.
6.4

Overflow event prediction by classification

All classification measures were obtained by solving the regression problem and applying a threshold
on the results. Shown in figure 12 are the results for the overflow classification task, regarding 𝑂 𝑆𝑖 ,
the sum of overflow traffic in all non-PNI handovers, for each source AS 𝑖. Providing binary output
of whether an overflow will occur for a specific day or not gives actionable insights which may be
translated into the prevention of the predicted overflow.
As in the regression task, summing the predictions of each handover yielded better results than
predicting the sum of overflow traffic for all handovers. Despite the low RRSE and RAE results for
several source ASes, we achieved a usable true-positive rate (TPR) for almost all source ASes while
maintaining a very low false-positive rate (FPR) of below 5%.
, Vol. 1, No. 1, Article . Publication date: October 2020.

14

Puzis, et al.

Fig. 11. PCC and AUC results for the different source ASes. The points in a certain 𝑆𝑖 ’s column represent
prediction results for the different non-PNI handover ASes employed by 𝑆𝑖 , in each of 5 experiment iterations.

Fig. 12. AUC, TPR, precision and recall values for the binary classification problem of traffic overflow prediction
in each source AS. Results are averaged for the combined 10-fold test set in 5 independent ensemble training
runs. All TPR, precision and recall values reported relate to the point we defined as optimal, where the FPR is
just below 0.05.

Two different thresholds for the classification of overflow events exist. The first is the external
threshold, defined by us as 𝜃 𝑖 = AVG 𝑂 𝑆𝑖 + 𝑝 × STD 𝑂 𝑆𝑖 (𝜃 𝑆𝑖 ,𝐻 𝑗 = AVG 𝑇𝑆𝑖 ,𝐻 𝑗 + 𝑝 × STD 𝑇𝑆𝑖 ,𝐻 𝑗 ), with 𝑝
defined such that at least 5% and at most 15% of days are labeled as “overflow” for each overflow
traffic series. The external threshold defines what is an overflow, meaning when does an abnormal
peak in overflow traffic occur. The second threshold is internal to the prediction model. It is the
model’s decision threshold, as shown in the receiver operating characteristic (ROC) curve graphs
in figure 9. The internal threshold is always chosen such that a false-positive rate of no more than
5% will be maintained, no matter what the external threshold is.
It is important to note that the choice of threshold created imbalanced data for the model to train
on, thus we report a wide array of classification metrics (AUC, FPR, precision and recall) in our
results to ensure proper model assessment.
6.5

Comparison to state-of-the-art

In order to validate our method’s performance we conducted an evaluation against three other
time series forecasting methods.
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

15

• LSTNet [25]. An MTS forecasting RNN+CNN architecture, which achieved state of the art
performance on several benchmark MTS datasets. This method leverages periodicity in the
data via an attention mechanism, which accounts for the daily patterns in the data.
• a vanilla LSTM [13] recurrent neural network model, containing four LSTM layers with a
hidden dimension of 100 and a "dense" fully connected output layer.
• A CNN architecture automatically found by NSGA-Net by Lu et al. [19], another SOTA NAS
algorithm. This algorithm searches for good structures of CNN building blocks, and these
building blocks are eventually combined in a predefined manner to form a final network.
The comparison of the different methods shown figure 13 shows that ours is the most accurate.

Fig. 13. Comparison of regression measures amongst different MTS forecasting techniques. Results are
averaged for the combined 10-fold test set in 5 independent training runs per method.

6.6

Feedback from the ISP on method performance

We have shared the method and prediction results with network operations experts at the ISP
and requested feedback. The principal capability of predicting overflow events a few hours in
advance was generally perceived as a valuable means toward one of the ISP’s strategic objectives:
to be a market leader in customer experience regarding service usage over its network. Customer
experience is linked to overflow events because many popular Internet services including social
media and online gaming are delivered via hyper-giant infrastructures. There is a substantial risk of
some traffic flowing over non-PNIs (i.e. an overflow event), possibly meeting undersized interfaces
and ultimately leading to service degradation. Very popular services can easily be consumed by
1-digit million users that are customers of the ISP – and are potentially exposed to this risk. Negative
customer experiences today quickly surface on social media and are associated with the ISP in
public, negatively impacting the ISP’s brand perception. Therefore, any measures, that accelerate
the successful mitigation of such incidents, positively affect the ISP’s service quality perception and
minimize the the complaints. The predictive method presented here gives a chance to avoid service
degradation due to overflow events all together if the mitigation measures (section 8) are effective
and fast enough. As to the current prediction accuracy of the method the ISP network experts
rated the TPR of more than 0.75 for some of the major hyper-giant ASes acceptable. Yet, it needs to
be improved over time. The pegging of the FPR to 0.05 was highlighted as an important feature
in order to avoid unnecessary alarms to the network operations crew and to increase acceptance
levels regarding the method.
, Vol. 1, No. 1, Article . Publication date: October 2020.

16

6.7

Puzis, et al.

Overflow prediction during the COVID-19 outbreak

The COVID-19 pandemic has brought with it a major change in lifestyle for humans around
the globe. Restrictions such as social distancing and cancellations of public gatherings, with the
encouragement to stay home, had noticeable impact on network traffic, with people relying on
online tools to stay connected, and consume information and entertainment.
Figure 14 (bottom) shows the total ingress traffic into the ISP from the 10 source ASes before
and during the COVID-19 pandemic. A clear rise in traffic is seen in mid-March, about the time
the new restrictions took place across the world. Figure 14 (top) shows the overflow traffic rising
steadily in the same period, which means that in addition to heightened traffic volumes, probably
more overflow events occurred during the COVID-19 outbreak.

Fig. 14. Daily NetFlow traffic for the top-10 ASes before and during the COVID-19 crisis. Top: sum of the
overflow traffic series. Bottom: Sum of all traffic volume series, including PNIs. Time is in mm/yy.

Figure 15 shows our ensemble’s performance on the COVID-19 period data for problem 1 (shown
are the 3 source ASes which showed the highest rise in overflow traffic in the COVID-19 period).
The ensemble was trained with all data until Nov. 1st, 2019 and tested on data from Nov. 1st, 2019
onwards. Prediction quality worsens over time and this can be attributed to two main factors:
• The time range for prediction is longer than in our previous experiments. One ensemble
predicts 7 months of data (as opposed to 2.5 months ahead in the 10-fold experiment).
• Data in the selected source ASes, from February onwards, is noisier than previous periods,
most likely because of COVID-19, and its prediction is harder.
Despite the performance degradation during the peak of the COVID-19 crisis, a clear rise in
prediction performance is seen from April, around the time which governments around the globe
started lifting restrictions. The rise in performance shows that our model is robust when predicting
normal data which is not affected by COVID-19 era network traffic behavior, and suffers from
worse performance when dealing with data which is abnormal.
6.8

Computational resources

All experiments were run on an Intel Core i7-8700 CPU @ 3.20GHz machine with 32GB RAM,
utilizing a single Nvidia RTX 2080 GPU with 12GB RAM.
The ensemble, including all parameters, is 4.5 megabytes in size, which allows it to fit in almost
any dedicated system. Moreover, the model’s inference time for predicting 2.5 months of data is 0.05
seconds on average, which is more than enough to allow reaction in case of a predicted overflow.
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

17

Fig. 15. Network traffic prediction results for the COVID-19 pandemic period for three source ASes. A slight
increase in traffic volume is visible from late March, around the time various countries imposed movement
restrictions on citizens. Shown on top is the average prediction quality in PCC for 𝑂 𝑆 4 , 𝑂 𝑆 6 , 𝑂 𝑆 9 over time.
Actual traffic volumes are omitted due to privacy constraints. Time is in mm/yy.

A complete 10-fold experiment conducted in this study takes 36 hours to run on our system.
This run-time includes the genetic NAS algorithm as well. Thus it is feasible to completely retrain
our model on a monthly or even weekly basis without any specialized hardware.
7

DEEP LEARNING VISUALIZATION

There has been a recent surge in interest in the field of DL explainability, in order to unveil these
seemingly black-box models and try to explain the logic behind their decisions in a humanly
understandable manner. Following this trend, with the aim of understanding the decision making
process of our prediction neural network ensemble, we utilized three deep learning visualization
techniques to understand which parts of the input data affected the prediction and to what extent.
The methods we utilized are:
• Deeplift [26] by Shrikumar et al. attains the feature attribution of each part of the input by
comparing the error for each prediction with the error of a reference input (a matrix of all
zeros), using gradient descent.
• GradientSHAP [20] by Lundberg et al. computes an approximation of SHAP values for the
input data, which are based on Shapely values from game theory and have been shown to
represent importance attributions.
• Deconvolution [32] by Zeiler et al. constructs a neural network by stacking the layers of
the tested neural network in reverse order and computing the gradient of the target output
with respect to the input. The outputs of this model are the importance attributions.
In Figure 16 we see the absolute value importance attributions for each part of the input, when
using traffic volumes from 𝑆 2 as testing data (the ensemble was trained on all ASes), as calculated by
Deeplift. The original data contains 𝐻 1 and 𝐻 3, ..., 𝐻 10 but they were omitted from the chart since
no source AS in the study employs other source ASes as handovers. The importance attribution
values were calculated for every sample in the last fold of the 10-fold experiment and averaged in
the visualization. The same is shown for a trained and un-trained ensemble.
The highest attribution is given to the PNI data, as seen in the last row of both parts of the figure,
and this effect heightens in the trained ensemble compared to the untrained one. This means that
the models are able to identify to which AS each sample belongs and there is no need to include
the AS identity in the data representation.
, Vol. 1, No. 1, Article . Publication date: October 2020.

18

Puzis, et al.

Fig. 16. Average feature importance attributions for source AS 𝑆 2 , for all test samples of the last fold in the
10-fold experiment, calculated by the Deeplift technique. Shown are the feature importance values for a
trained and untrained ensemble.

Additionally, we can see that before training, high importance values are given to large portions
of each day. After training, higher attributions are given to the predicted peak hours of 17:00 to
21:00 in each day. It is also noticeable that the several hours prior to prediction have almost no
effect in the untrained ensemble while having a reasonable effect on the trained ensemble’s output.
This effect coincides with the results, as shown in figure 8, where prediction performance for the
hours close to the edge of the prediction window is higher. A reasonable assumption is that high
performance in the earlier peak hours of the predicted day is correlated with the high importance
of observations from the predicted day.
Figure 17 shows the average importance attributions for all training samples, for the three
visualization methods used, aggregated by day. Before ensemble training, all days prior to prediction
were given similar importance and no clear trend is seen amongst the three methods. After training,
a clear positive peak is seen a week before prediction, meaning that traffic volumes that ocurred a
week prior to prediction will have a strong effect on the predicted volumes. Moreover, the confidence
intervals are much smaller in the trained ensemble compared to the untrained one, which means
this pattern is consistent amongst many source AS/handover AS combinations in the data.
The second visible trend (in the Deeplift and Deconvolution methods) is that traffic in the 1-2
days prior to prediction has a very high positive effect on the predicted volumes. This trend explains
events such as public holidays, where video streaming traffic is high for several consecutive days.
8

OVERFLOW HANDLING

As overflows are induced by hyper-giants with enough capacity to disrupt other services, we
focus our attention there. Also, handling overflows needs to be done transparently to the users of
the network before performance issues arise. This means that the detection, communication, and
mitigation of overflows has to be seamless in a fully automated and preemptive fashion.
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

19

Fig. 17. Avg. importance attributions for: Deeplift, GradientSHAP and Deconvolution for trained and untrained
ensembles, aggregated by day before prediction. Confidence intervals calculated using bootstrapping [8].

In contrast, most overflows today are handled in retrospect and on the “political” layer of the
Internet. This usually happens in one of two ways:
(1) one of the involved parties notices the overflow after it has begun and contacts the other
parties via human channels (i.e. email, phone) to work out the issue.
(2) a party has prior knowledge that a traffic spike is going to happen due to scheduled events
(i.e. soccer games, large updates, etc) and preemptively announces that.
Both options are reactive. In case (1) the overflow has already happened. In case (2) the overflow
location is not yet known and needs to be handled once it arises, as in [5].
8.1

Predicting overflows on live data

In the 10-fold experiment we conducted, each trained model predicts 2.5 months ahead successfully.
Thus, retraining should occur at most every month. As explained in section 6.8, this is feasible.
8.2

Automated reaction

The automated reaction is fed by a continuous stream of data. In the case of overflow prediction,
the most valuable source of data is NetFlow and, to some extent BGP. NetFlow is used to identify
the amount and source of the traffic that is being ingressed into the Network, while BGP is used to
cluster the source IP addresses into autonomous system numbers (ASNs) to reduce the complexity
of the data. Figure 18 shows a sample processing layout on how this pipeline works which is built
upon the architecture of the Collaboration Engine[23]. The steps in processing are as follows:
1–3 These steps are pre-processing to handle multiple input streams in possible different flow
formats (*flow), target the correct links (filter) and correct for possible double counting as
well as correlate with additional data sources like SNMP (classification)
4 The overflow prediction is placed here. Based on the input stream from the classification, the
overflows are predicted here. Multiple prediction modules can be run in parallel, making it
easy to swap them when re-training.
5 As each network has different architecture, vendors, and strategy, a generic step is needed to
compile the list of actions required to mitigate the overflow. Furthermore, the action queue is
influenced by the communication channels that are available for general overflow mitigation.
6 With the given actions compiled, the schedule uses different channels to apply the changes to
the network. This step is generic and not complete in the schematic, as there are possibly
more interaction models available.
, Vol. 1, No. 1, Article . Publication date: October 2020.

20

Puzis, et al.

7 All information fed into the prediction model is also stored in long term storage. This allows
for offline re-training on arbitrary data at a later point in time.

2

Filter

3

Classification

7

Storage

1

*flow

2

Filter

4

Prediction

3

Classification

5

Action Queue

7

Storage

6

Schedule

Schedule
BGP

Collaboration
channel

Re-route

Collaboration
channel

Re-route

Fig. 18. Schematic overview of processing live data for automated reactions

All of the above steps are straight forward, with the exception of the Action Queue and the
Schedule of actions towards the Network.
When dealing with overflows, we first need to take a look at what means of communication
between the hyper-giant and the ISP are available. Depending on the scenario, the reactions will be
very different. To this end, we define three points that increase the collaboration.
8.3

Action Queue

An ISP has two options to build the action queue depending on mechanisms available for mitigation:
ISP Internal. An ISP itself has multiple options to influence ingress traffic depending on the hypergiant’s architecture. Possible reactions are (1) re-assigning end-users to different DNS clusters
to move users from one mapping region to another when the hyper-giant is using DNS-based
mapping. (2) Engineer the internal egress traffic. (3) Modify the external BGP announcement via
MED, de-aggregation or revoke to force traffic to shift to another ingress.
Collaboration Channel. The hyper-giant’s server selection and the networks need to have a direct
communication channel that allows for data exchange about mapping and available capacities
before an overflow is happening.
There are multiple protocols capable of transporting this information. Most commonly, (4)
mapping information is transported via BGP, either in MED, by prefix de-aggregation. However,
doing this via a BGP channel automatically combines the reachability with the connectivity. While
these two can overlap, the reachability of a prefix is orthogonal to the mapping infrastructure. To
separate the two, another option is (5) out-of-band BGP sessions. However, BGP was not designed
to transport multi-dimensional information or correlate prefixes (i.e. obtain the value of a certain
prefix in relation to another prefix) other than possibly pushing this into the communities. But
communities are “only” a 32-bit field. This space can be overloaded with the complexity of the data.
When an out-of-band channel is used, it is advantageous to use a protocol designed for this, i.e.
ALTO [1]. It runs out of band, is independent of BGP, and can correlate arbitrary groups of location
identifiers with preferences.
Note that, for the same ISP, it might need to run different solutions for traffic steering depending
on the architecture and collaboration channel available to different hyper-giants. Once the action
queue is built, this should be applied to the network and/or the Collaboration channel to take effect.
, Vol. 1, No. 1, Article . Publication date: October 2020.

Predicting traffic overflows on private peering

9

21

CONCLUSIONS

We presented a traffic overflow prediction technique relying on an ensemble of automatically
generated deep neural networks. We provided evidence for the robustness and accuracy of our
models by applying it to NetFlow data of a large European ISP quantifying traffic emanating from
ten hyper-giant ASes. Additionally, our model’s ability to pin-point the overflowing traffic link is
helpful for the goal of avoiding the predicted overflow events. We used regression models to solve
both the tasks of predicting overflow traffic volumes, and predicting overflow events.
To further assess long-term validity of the trained overflow prediction models, they were tested
on data from the COVID-19 outbreak period. As expected the performance of models trained on
2018-2019 data deteriorated during the peak of these extraordinary circumstances. Nevertheless, a
rise in performance was observed when movement limitations around the globe were lifted.
Using deep learning explainability methods, we have shown that the models we trained learned
sensible patterns. For example, The prediction is affected the most by data prior to the prediction
period and from the previous week.
Additionally, we proposed methods to mitigate overflow events. For future work, we plan to
implement these methods in a simulation environment to obtain evidence that real-time overflow
handling is achievable.
REFERENCES
[1] R. Alimi, R. Penno, Y. Yang, S. Kiesel, S. Previdi, W. Roome, S. Shalunov, and R. Woundy. 2014. Application-Layer Traffic
Optimization (ALTO) Protocol. RFC 7285. RFC Editor. https://tools.ietf.org/html/rfc7285
[2] Davide Andreoletti, Sebastian Troia, Francesco Musumeci, Giordano Silvia, Guido Alberto Maier, and Massimo
Tornatore. 2019. Network Traffic Prediction based on Diffusion Convolutional Recurrent Neural Networks. In
INFOCOM. 1–6.
[3] Theophilus Benson, Ashok Anand, Aditya Akella, and Ming Zhang. 2011. MicroTE: Fine Grained Traffic Engineering
for Data Centers. In Proceedings of the Seventh COnference on Emerging Networking EXperiments and Technologies
(CoNEXT ’11). Association for Computing Machinery, New York, NY, USA, Article 8, 12 pages. https://doi.org/10.1145/
2079296.2079304
[4] Christoph Bergmeir and José M Benítez. 2012. On the use of cross-validation for time series predictor evaluation.
Information Sciences 191 (2012), 192–213.
[5] Jeremias Blendin, Fabrice Bendfeldt, Ingmar Poese, Boris Koldehofe, and Oliver Hohlfeld. 2018. Dissecting Apple’s
Meta-CDN during an IOS Update. In Proceedings of the Internet Measurement Conference 2018 (IMC ’18). Association for
Computing Machinery, New York, NY, USA, 408–414. https://doi.org/10.1145/3278532.3278567
[6] Piotr Chołda, Eirik L. Følstad, Bjarne E. Helvik, Pirkko Kuusela, Maurizio Naldi, and Ilkka Norros. 2013. Towards
risk-aware communications networking. Reliability Engineering & System Safety 109 (2013), 160 – 174. https:
//doi.org/10.1016/j.ress.2012.08.009
[7] Djork-Arné Clevert, Thomas Unterthiner, and Sepp Hochreiter. 2015. Fast and accurate deep network learning by
exponential linear units (elus). arXiv preprint arXiv:1511.07289 (2015).
[8] Thomas J DiCiccio and Bradley Efron. 1996. Bootstrap confidence intervals. Statistical science (1996), 189–212.
[9] John Duchi, Elad Hazan, and Yoram Singer. 2011. Adaptive subgradient methods for online learning and stochastic
optimization. Journal of machine learning research 12, Jul (2011), 2121–2159.
[10] Nick Feamster, Jay Borkenhagen, and Jennifer Rexford. 2003. Guidelines for Interdomain Traffic Engineering. SIGCOMM
Comput. Commun. Rev. 33, 5 (Oct. 2003), 19–30. https://doi.org/10.1145/963985.963988
[11] Statista GmbH. 2017. Most popular daily online activities of adult internet users in the United States as of February 2017,
by age group [Graph]. Technical Report. Statista GmbH. https://www.statista.com/statistics/184541/typical-dailyonline-activities-of-adult-internet-users-in-the-us/
[12] J. Hawkinson and T. Bates. 1996. Guidelines for creation, selection, and registration of an Autonomous System (AS). RFC
1930. RFC Editor. https://tools.ietf.org/html/rfc1930
[13] Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural computation 9, 8 (1997), 1735–1780.
[14] Chih-Wei Huang, Chiu-Ti Chiang, and Qiuhui Li. 2017. A study of deep learning networks on mobile traffic forecasting.
In 2017 IEEE 28th Annual International Symposium on Personal, Indoor, and Mobile Radio Communications (PIMRC).
IEEE, 1–6.

, Vol. 1, No. 1, Article . Publication date: October 2020.

22

Puzis, et al.

[15] M Kodialam, TV Lakshman, and Sudipta Sengupta. 2006. Throughput guaranteed restorable routing without traffic
prediction. In Proceedings of the 2006 IEEE International Conference on Network Protocols. IEEE, 137–146.
[16] Craig Labovitz. 2016. The New Internet. Presentation given at Global Peering Forum 11 (April 11, 2016). Url:
https://www.globalpeeringforum.org.
[17] Craig Labovitz, Scott Iekel-Johnson, Danny McPherson, Jon Oberheide, and Farnam Jahanian. 2010. Internet interdomain traffic. SIGCOMM Comput. Commun. Rev. 41, 4 (Aug. 2010), –. http://dl.acm.org/citation.cfm?id=2043164.
1851194
[18] Phi Le Nguyen, Yusheng Ji, et al. 2019. Deep convolutional LSTM network-based traffic matrix prediction with partial
information. In 2019 IFIP/IEEE Symposium on Integrated Network and Service Management (IM). IEEE, 261–269.
[19] Zhichao Lu, Ian Whalen, Vishnu Boddeti, Yashesh Dhebar, Kalyanmoy Deb, Erik Goodman, and Wolfgang Banzhaf.
2019. NSGA-Net: neural architecture search using multi-objective genetic algorithm. In Proceedings of the Genetic and
Evolutionary Computation Conference. ACM, 419–427.
[20] Scott M Lundberg and Su-In Lee. 2017. A unified approach to interpreting model predictions. In Advances in neural
information processing systems. 4765–4774.
[21] Alberto Mozo, Bruno Ordozgoiti, and Sandra Gomez-Canaval. 2018. Forecasting short-term data center network traffic
load with convolutional neural networks. PloS one 13, 2 (2018), e0191939.
[22] Ingmar Poese, Benjamin Frank, Bernhard Ager, Georgios Smaragdakis, and Anja Feldmann. 2010. Improving content
delivery using provider-aided distance information. In Proceedings of the 10th ACM SIGCOMM conference on Internet
measurement. 22–34.
[23] Enric Pujol, Ingmar Poese, Johannes Zerwas, Georgios Smaragdakis, and Anja Feldmann. 2019. Steering Hyper-Giants’
Traffic at Scale. In Proceedings of the 15th International Conference on Emerging Networking Experiments And Technologies
(CoNEXT ’19). Association for Computing Machinery, New York, NY, USA, 82–95. https://doi.org/10.1145/3359989.
3365430
[24] Elad Rapaport, Oren Shriki, and Rami Puzis. 2019. EEGNAS: Neural Architecture Search for Electroencephalography
Data Analysis and Decoding. In International Workshop on Human Brain and Artificial Intelligence. Springer, 3–20.
[25] Shun-Yao Shih, Fan-Keng Sun, and Hung-yi Lee. 2019. Temporal pattern attention for multivariate time series
forecasting. Machine Learning 108, 8-9 (2019), 1421–1441.
[26] Avanti Shrikumar, Peyton Greenside, and Anshul Kundaje. 2017. Learning important features through propagating
activation differences. In Proceedings of the 34th International Conference on Machine Learning-Volume 70. JMLR. org,
3145–3153.
[27] Florian Streibelt, Franziska Lichtblau, Robert Beverly, Anja Feldmann, Cristel Pelsser, Georgios Smaragdakis, and
Randy Bush. 2018. BGP Communities: Even More Worms in the Routing Can. In Proceedings of the Internet Measurement
Conference 2018 (IMC ’18). Association for Computing Machinery, New York, NY, USA, 279–292. https://doi.org/10.
1145/3278532.3278557
[28] Hao Wang, Haiyong Xie, Lili Qiu, Yang Richard Yang, Yin Zhang, and Albert Greenberg. 2006. COPE: Traffic Engineering
in Dynamic Networks. In Proceedings of the 2006 Conference on Applications, Technologies, Architectures, and Protocols
for Computer Communications (SIGCOMM ’06). Association for Computing Machinery, New York, NY, USA, 99–110.
https://doi.org/10.1145/1159913.1159926
[29] Ning Wang, Kin Hon Ho, George Pavlou, and Michael Howarth. 2008. An overview of routing optimization for internet
traffic engineering. IEEE Communications Surveys Tutorials 10, 1 (2008), 36–56.
[30] Florian Wohlfart, Nikolaos Chatzis, Caglar Dabanoglu, Georg Carle, and Walter Willinger. 2018. Leveraging interconnections for performance: The serving infrastructure of a large CDN. In Proceedings of the 2018 Conference of the ACM
Special Interest Group on Data Communication. 206–220.
[31] Edmund S Yu and CY Roger Chen. 1993. Traffic prediction using neural networks. In Proceedings of GLOBECOM’93.
IEEE Global Telecommunications Conference. IEEE, 991–995.
[32] Matthew D Zeiler and Rob Fergus. 2014. Visualizing and understanding convolutional networks. In European conference
on computer vision. Springer, 818–833.
[33] C. Zhang, P. Patras, and H. Haddadi. 2019. Deep Learning in Mobile and Wireless Networking: A Survey. IEEE
Communications Surveys Tutorials 21, 3 (2019), 2224–2287.
[34] C. Zhang, H. Zhang, D. Yuan, and M. Zhang. 2018. Citywide Cellular Traffic Prediction Based on Densely Connected
Convolutional Neural Networks. IEEE Communications Letters 22, 8 (2018), 1656–1659.
[35] Eric Zivot and Jiahui Wang. 2006. Vector autoregressive models for multivariate time series. Modeling Financial Time
Series with S-Plus® (2006), 385–429.

, Vol. 1, No. 1, Article . Publication date: October 2020.

