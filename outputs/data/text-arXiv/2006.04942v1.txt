CRISP: A Probabilistic Model for Individual-Level
COVID-19 Infection Risk Estimation Based on
Contact Data

arXiv:2006.04942v1 [cs.SI] 9 Jun 2020

Ralf Herbrich∗
Zalando
Berlin, Germany
ralf@zalando.de

Rajeev Rastogi
Amazon
Bangalore, India
rastogi@amazon.com

Roland Vollgraf
Zalando
Berlin, Germany
roland.vollgraf@zalando.de

Abstract
We present CRISP (COVID-19 RIsk Score Prediction), a probabilistic graphical
model for COVID-19 infection spread through a population based on the SEIR
model where we assume access to (1) mutual contacts between pairs of individuals
across time across various channels (e.g., Bluetooth contact traces), as well as
(2) test outcomes at given times for infection, exposure and immunity tests. Our
micro-level model keeps track of the infection state for each individual at every
point in time, ranging from susceptible, exposed, infectious to recovered. We
develop a Monte Carlo EM algorithm to infer contact-channel specific infection
transmission probabilities. Our algorithm uses Gibbs sampling to draw samples of
the latent infection status of each individual over the entire time period of analysis,
given the latent infection status of all contacts and test outcome data. Experimental
results with simulated data demonstrate our CRISP model can be parametrized
by the reproduction factor R0 and exhibits population-level infectiousness and
recovery time series similar to those of the classical SEIR model. However, due to
the individual contact data, this model allows fine grained control and inference for
a wide range of COVID-19 mitigation and suppression policy measures. Moreover,
the algorithm is able to support efficient testing in a test-trace-isolate approach to
contain COVID-19 infection spread. To the best of our knowledge, this is the first
model with efficient inference for COVID-19 infection spread based on individuallevel contact data; most epidemic models are macro-level models that reason over
entire populations. The implementation of CRISP is available in Python and C++
at https://github.com/zalandoresearch/CRISP.

1

Introduction

The COVID-19 pandemic has spread rapidly around the world, with the number of infections and
deaths steadily growing. Most governments around the world have been completely unprepared to
deal with the COVID-19 outbreak, which UN Secretary-General Antonio Guterres has referred to
as humanity’s worst crisis since World War II. While governments around the world had plans in
place in the event of a pandemic, the peculiarities of COVID-19 (e.g., delayed onset of symptoms,
asymptomatic transmission) have challenged these preparations. Governments have reacted by
implementing measures such as nationwide lock-downs, that require people to stay inside their
homes, enforcing social distancing and therefore breaking the COVID-19 infection chain. However,
a blunt mechanism such as a lock-down (over an extended period) can cause severe damage to the
economy, and so, there is a need to find alternative measures to slow down or stop the spread without
incremental effects in other areas of society. These alternatives have to be built in a solid foundation
∗

The ordering of authors is alphabetical. All authors contributed equally to the paper.

Preprint. Under review.

such as widespread testing and the isolation of infected (or potentially infected) individuals via
contact-tracing.
Contact tracing technologies [20, 19] have shown promise in tracking the spread of the disease
across the population. These mobile apps capture social contact information between users such as
contact duration, distance, etc. using Bluetooth signals on devices. The fine-grained contact data of
individuals collected by the apps can enable:
• Individual risk score prediction. The contact data, combined with information about COVID19 positive test cases, can be used to predict the likelihood of infection for each individual.
The individual risk scores can be leveraged by governments and organizations to prioritize
testing as well as to identify individuals that need to enter isolation/quarantine.
• Hotspot detection. Tracing technologies can help authorities identify areas with a high
density of contacts and/or individuals with high infection risk. This can allow policymakers
to make more effective decisions, for example, by imposing highly restrictive measures
such as lock-downs, shelter-at-home, or school closures only in COVID-19 hotspots while
allowing activities to remain closer to normal in unaffected areas.
• Insights about infection spread. Contact tracing can provide insights into the relative importance of different modalities of disease transmission (e.g., through intermediate surfaces
vs individual contact), risk of infection transmission based on contact characteristics such
as duration and distance, most likely locations (e.g., schools, work, malls) for the spread
of disease, and "super spreaders" who come in close proximity with a large number of
individuals and so must be frequently tested for infection.
To achieve the above-mentioned benefits, we need to devise new models and inference algorithms for
analyzing contact tracing data. This is because existing epidemics models [3, 15, 14, 6, 5] focus on
estimating population-level statistics such as percentage of the population infected, number of days
for the epidemic to peak, etc. as opposed to the infection state of each individual in the population.
Other models [16, 17] that use ML-based inference techniques assume complete knowledge of the
infection state of each individual at each time instant. However, in the COVID-19 scenario, (1) the
infection status of individuals is not known until they are tested, and (2) infectious time of individuals
are unknown since individuals may infect others while asymptomatic. Finally, governments are using
contact tracing data [20, 19] to identify and test individuals who have come in direct contact with
COVID-19 positive test cases. However, the fact that asymptomatic individuals may have infected a
large number of people prior to displaying symptoms and being tested, delays the detection of these
newly infected individuals by only using contact tracing apps.
Our main contributions can be summarized as follows:
• We propose CRISP (COVID-19 RIsk Score Prediction), a probabilistic graphical model for
COVID-19 infection spread through diverse contacts channels between individuals. Our
model uses latent variables to represent the epidemiological states of individuals based on
the SEIR model [12] at different points in time, and captures both the transitions between
states as well as test outcomes.
• We develop a Monte Carlo EM algorithm to infer infection transmission probabilities across
a range of contact channels. Our algorithm uses block-Gibbs sampling to draw samples of
the latent infection status of each individual over the entire time period, given data about
contacts and test results.
• We provide implementation details to accelerate both the block-Gibbs sampling and the
forward sampling algorithm. A Python and C++ implementation of CRISP is available at
https://github.com/zalandoresearch/CRISP.
• We conduct experiments with simulated data which demonstrate that our CRISP model can
be parametrized by the reproduction factor R0 and exhibits population-level infectiousness
and recovery time series similar to those of the classical SEIR model. However, due to
the individual contact data, this model allows fine grained control and inference for a
wide range of COVID-19 mitigation and suppression policy measures. Furthermore, we
show that a testing-and-quarantining policy based on infection risk scores computed by the
CRISP algorithm is able to mitigate COVID-19 infection spread while quarantining fewer
individuals compared to other policies based on contact-tracing and symptom-based testing.
2

To the best of our knowledge, this is the first comprehensive model for COVID-19 infection spread
that (1) captures the infection states of individuals and transitions between them using the SEIR
model, and (2) leverages contact tracing and test outcome data to infer model parameters such
as contact-channel specific infection rates using scalable and computationally efficient inference
algorithms.

2

Related Work

We classify related work into four broad categories: epidemic models, Machine Learning (ML) based
inference of model parameters, influence maximization in social networks, and contact tracing apps.
2.1

Epidemic Models

In recent years, there has been research on modeling individual dynamics of epidemics [3, 15, 14].
However, this work typically resorts to mean-field theory to model virus spread over a network, and
thus does not characterize the dynamic infectious state of each individual over time.
Ferguson et al. [6, 5] use a compartmental transmission model to simulate the spread of influenza
across a population, and analyze interventions such as antiviral prophylaxis and social distancing to
halt a pandemic. The authors use a stochastic model of individuals co-located in households that are
randomly distributed across a geographical region, and infection risk from 3 sources – household,
place and random contacts in the community. The infection transmission rates for the 3 sources and
recovery rates are based on analysis of historical data. In contrast, we leverage real individual contact
tracing data and outcomes of tests on individuals to infer the infection transmission rate for each
contact and the likelihood of infection for each individual.
Lorch et al. [10] propose a spatiotemporal epidemic model that uses marked temporal processes
to represent the epidemiological condition of each individual (based on a variation of the SEIR
compartment models), individual mobility patterns, test outcomes, and testing and contact tracing
strategies. The authors design an efficient sampling algorithm for the model using Monte Carlo
roll-outs that is able to predict the spread of COVID-19 under different testing & tracing strategies,
social distancing measures, and business restrictions, given contact histories of individuals. They
use Bayesian optimization techniques to infer model parameters (e.g. infection transmission rate)
that minimize the difference between the real positive COVID-19 cases and those in the MonteCarlo simulations. In addition, they demonstrate the efficacy of their model using real COVID-19
data and mobility patterns of Tübingen, Germany. Our Monte Carlo EM inference algorithm for
model parameters is computationally much more efficient than the Bayesian optimization techniques
employed in [10].
2.2

Machine Learning-based Inference

In [16], the authors consider the problem of inferring latent social networks based on network
diffusion or disease propagation data. Given the times when nodes become infected, but not who
infected them, the authors identify the optimal network that best explains the observed data. The
authors present a maximum likelihood approach based on convex optimization with a L1 -like penalty
term (that encourages sparsity) to estimate the conditional probability of infection transmission
between every node pair. A key difference from our work is that [16] assumes complete knowledge
of infected nodes and infection times. In contrast, in the COVID-19 scenario, (1) the infection status
of nodes is not known until they are tested, and (2) infection times of nodes are unknown since nodes
may not show symptoms even though they are infected (and infecting others).
Warriyar et al. [17] introduce a novel R statistical software package EpiILM for simulating infectious disease spread, and carrying out Bayesian MCMC-based statistical inference for spatial and/or
(contact) network-based models in the Deardon et al. [4] individual-level modelling framework. In
individual-level models (ILMs), the epidemiological state of each individual (e.g., susceptible or
infected) is assumed to be perfectly known at each time instant, which makes it relatively straightforward to estimate model parameters such as infection transmission probabilities (as a function of
covariates) using maximum likelihood estimation or Bayesian inference using Metropolis-Hastings
MCMC. However, in the COVID-19 scenario, epidemiological states of individuals are hidden until
they are tested, and this complicates Bayesian inference in our probabilistic model setting.
3

z1,1

z1,2

z1,3

z1,4

z2,1

z2,2

z2,3

z2,4

o3,4

z3,1

2.3

z3,2

z3,3

z3,4

Figure 1: Graphical model of
the CRISP contact infection
spread model for 3 people over
4 time steps where individual
u = 1 meets both individual
u = 2 and u = 3 at time
t = 2 and one test outcome of
individual u = 3 at time t = 4.
Note that this model has no cycles as we assume the infection status zu,t only depends
on variables zv,t0 before time
step t, t0 < t. However, due
to the "memory" that the state
zu,t = E and zu,t = I have,
we require edges into the entire past of an infection trace.

Influence Maximization in Social Networks

The Influence Maximization problem aims to select k users in a social network that maximize
influence spread, and was first modeled as an algorithmic problem by Kempe et al. [8]. [9] presents a
comprehensive survey of different diffusion models that capture the information diffusion process and
approximation algorithms to maximize influence. The papers assume that diffusion model parameters
such as influence probabilities are given and focus on selecting k users to maximize influence spread.
In contrast, our paper focuses on the problem of estimating model parameters related to infection
transmission probabilities for each contact, given social contact information between users and
COVID-19 test results for users.
[11] addresses the problem of finding the "backbone" of an influence network. It employs network
sparsification to preserve only the links that play an important role in the propagation of information.
[7] considers the problem of estimating influence probabilities between users in a social graph. Given
a social graph and a log of actions by users, the Maximum Likelihood Estimator (MLE) of influence
probability of node u on node v is simply the fraction of actions performed by u that are also
performed by v. Unlike [7], in our setting, the infection status and times of nodes are latent, and need
to be inferred by our algorithms.

2.4

Contact Tracing Apps

To combat the spread of COVID-19, governments have launched contact tracing apps[20, 19] that
use Bluetooth signals on mobile phones to track contacts between users. Users who have come in
direct contact with COVID-19 positive test cases are considered to be at high risk of infection, and
subject to tests and quarantine actions. However, a key problem with this approach is that COVID-19
infected users are typically tested only after they show symptoms, and typically, infected users show
symptoms 5-6 days post infection. These asymptomatic users may have infected a large number of
users over multiple hops prior to displaying symptoms and being tested. This delays detection of
infected users using contact tracing apps, and limits their effectiveness to proactively test and isolate
infected users to contain the spread of COVID-19. In contrast, our probabilistic modeling algorithm
CRISP predicts the likelihood of a user getting infected with COVID-19 through a chain of social
contacts involving asymptomatic users, and identifies infected users early, even though they may be
multiple hops from a user who has tested positive for COVID-19 and even before they begin to show
symptoms. Our inference algorithm also learns infection transmission probabilities for each contact
channel.
4

3

CRISP Infection Spread Model

Our CRISP model is an SEIR model at the level of every individual (see [12] for an introduction).
Note that we consider discrete time steps t implicitly assumed to be at the level of single days. We
assume that we are given the following two datasets for a given set S of individuals:
J
• Dcontact = {(ui , vi , ti , xi )}N
i=1 ⊆ S × S × N × N of N quadruples of a pair of two
individuals (ui , vi ) who have met at time ti with specific features xi . Here we assume that
the feature vector xi describes the overall contact between ui and vi via the number xi,j
of mutual contacts over channel j (e.g., Bluetooth encounters, queuing together, sharing
public transportation). We assume Dcontact to be symmetric so that (u, v, t, x) ∈ Dcontact ↔
(v, u, t, x) ∈ Dcontact .

• Dtest := {(ui , ti , oi )}K
i=1 ⊆ S × N × {0, 1} of K triplets of individual ui taking a test at time
ti with the test outcome oi where oi = 0 indicates a negative test outcome.
We model the T discrete time steps of infection status for each individual. Our model has |S| × T
many latent variables Z := {zu,t }u∈S,t=1,...,T ∈ {S, E, I, R}|S|×T that represent the four stages of
infection2 :
•
•
•
•

zu,t
zu,t
zu,t
zu,t

= S: individual u has not been infected and is susceptible,
= E: individual u is infected but not contagious,
= I: individual u is infected and is contagious,
= R: individual u has recovered and is not contagious.

Let us use the notation Zu,t := {zu,1 , . . . S
, zu,t } to denote the set of latent states zu,t of individual
u up to and including time t and Zt := u Zu,t . In addition to the latent infection status of all
individuals at each time step, we also model K variables ou,t ∈ {0, 1} for the test outcomes in Dtest ,
that is, O := {ou,t
S : (u, t, ou,t ) ∈ Dtest }. Then, our graphical model G := (V, E) between the
variables V := Z O has the following edges:
S
1. Etime = u Eu and Eu := {(zu,t , zu,t0 )t<t0 }. All edges between the latent infection
states of a single individual u. The edges Eu will be used to describe the probability of
P(zu,t |zu,t−1 , . . . , zu,1 ) and describe the full time series of being susceptible, exposed,
infectious and then recovered.
S
2. Econtact := (u,v,t,x)∈Dcontact {(zu,t , zv,t+1 )}. All edges between two individuals u and v who
had a contact at time t.
S
3. Etest := (u,t,o)∈Dtest {(zu,t , ou,t )}. All edges between a test outcome at time t and the
corresponding infection status zu,t of individual u. These edges will be used to describe the
probabilities P(ou,t |zu,t ) of a test outcome given the infection status of u at that same time.
The full edge set E is the union of these three edge types: E = Etime ∪ Econtact ∪ Etest . Figure 3 shows
an example graphical model with these three edge components.
In order to define the joint probability distribution, note that all edges Etime and Econtact are pointing
forward in time. Thus, all {zu,t+1 }u∈S are conditionally independent of each other given all the past
states Zt . Also, all edges Etest have the property that a test outcome of individual u at time t only
depends on the infection status of u at t, zu,t . The joint probability distribution is given by
P (ZT , O) =
P (O|ZT ) =

P (O|ZT ) · P (ZT ) ,
Y Y
P(o|zu,t ) ,

(1)
(2)

u (t,o)∈Tu

P (ZT ) =

YY

P(zu,t+1 |Zt ) ,

(3)

u

t

where Tu = {(t, o) : (u, t, o) ∈ Dtest }. Since we are using an SEIR model, the only non-zero
probabilities P(zu,t+1 |Zt ) are the transitions S → S, S → E, E → E, E → I, I → I, I → R, R → R.
2

Note that we are assuming that recovered individuals are immune until time step T .

5


f(u, t, Zt )




1 − f(u, t, Zt )





1 − g(u, t, Zu,t )



g(u, t, Zu,t )
P(zu,t+1 |Zt ) =

1 − h(u, t, Zu,t )




h(u, t, Zu,t )




1



0

if zu,t = S ∧ zu,t+1 = S
if zu,t = S ∧ zu,t+1 = E
if zu,t = E ∧ zu,t+1 = E
if zu,t = E ∧ zu,t+1 = I
.
if zu,t = I ∧ zu,t+1 = I
if zu,t = I ∧ zu,t+1 = R
if zu,t = R ∧ zu,t+1 = R
otherwise

(4)

Infection Model In order to define f, we assume that an infection occurs from exogenous influences
with a fixed probability p0 ∈ [0, 1] or with probability of pj ∈ [0, 1] for every instance of a contact
through the contact channel j if the contact was already in the state I. Thus, the probability that no
infection occurred at time t equals
Y

f(u, t, Zt ) = (1 − p0 ) ·

J
Y
(1 − pj )xj .

(5)

(v,u,t,x)∈Dcontact :zv,t =I j=1

Infection Status Model In order to define g and h, let us assume we have a point density function
qE : N+ 7→ [0, 1] and qI : N+ 7→ [0, 1] for the probability qE (dE ) that the exposure (zu,t = E) lasts
for dE time steps (and similarly for the duration of the infectiousness). Examples of functions qE and
qI are the probability mass functions of the binomial, negative-binominal or geometric distributions.
However, for the case of COVID-19, we will use discrete probabilities established from analysis of
the population in [1] and [18]. Moreover, let
π(n; q) =

1−

q(n)
Pn−1
i=1

q(i)

=

P(d = n)
= P(d = n|d ≥ n) ,
P(d ≥ n)

(6)

be the conditional probability (according to q) that the duration is exactly n time steps given that the
duration is at least n time steps. Then,


0
0
g(u, t, Zu,t ) = π t − max
{t
:
z
=
S};
q
(7)
u,t
E
t0 ≤t


0
0 = E}; qI
(8)
h(u, t, Zu,t ) = π t − max
{t
:
z
u,t
0
t ≤t

Note that the first argument to both g and h is the number of E and I states up to and including time t
in the state sequence Zu,t .
Test Outcome Model Finally, we need to define the probability of a test outcome o given the
infection status zu,t of individual u at time t. Since there are two types of mistakes of a test, we use

α
if zu,t = I ∧ o = 0



1 − α if zu,t = I ∧ o = 1
P (o|zu,t ) =
.
(9)

1 − β if zu,t ∈ {S, E, R} ∧ o = 0


β
if zu,t ∈ {S, E, R} ∧ o = 1
We assume both 0 < α  1 and 0 < β  1. It is easy to implement more sophisticated test accuracy
models here, in particular to distinguish between different infection states. Also, we can easily model
α and β which are dependent on how many days an individual has been in state I; this change would
not affect the block-Gibbs sampling scheme in Section 4 in an adverse way.
Prior Model In order to complete the description of the full probabilistic model, we have to
specify P(Z1 ). For simplicity, we assume these probabilities to be a delta-peak at state S, that is,
P(zu,1 = S) = 1 for all u ∈ S.
6

4

Inference in the CRISP Model

For inference in the aforementioned model we are interested in computing the infection risk score
of every individual u at every time step t given the test outcomes O available as well as the hyperparameters θ := (p0 , p1 , . . . , pJ ) which cannot be set by knowledge of the diseases: the J parameters
pj represent the probabilities of COVID-19 infection transmission through the contact channel j and
p0 captures the probability that an infection occurs at any time-step from exogenous influences.
In order to estimate θ, we will maximize the log-likelihood of the data O, that is
θ∗ = argmaxθ log (P(O|θ))
= argmaxθ log

X

(10)
!

P(ZT |O, θ) · P(O|θ)

(11)

ZT

= argmaxθ log

X

!
P(ZT , O|θ)

,

(12)

ZT

where the second decomposition explicitly contains the posterior P (ZT |O). However, this posterior
is not analytically tractable and therefore we will approximate it by performing block-Gibbs sampling
of an infection trace zu := (zu,1 , . . . , zu,T ) of individual u keeping all other infection traces {zv:v6=u }
fixed. This requires a computationally efficient procedure to sample from the conditional probability
distribution P (zu | {zv:v6=u } , O, θ) which we describe in the following subsection.
4.1

Infection Risk Score Inference

Since we assume that the total number of days of the model, T , is not large3 , we will enumerate all possible sequences of infection traces zu and compute the un-normalized probability of
P (zu | {zv:v6=u } , O, θ) for all terms that depend on elements of the trace zu in order to re-normalize
and draw from this distribution. Also, as our model is an SEIR model, we know that each sample
zu can be uniquely represented by a triple ω = (t0 , dE , dI ) ∈ N × N+ × N+ of time steps with t0
being time steps individual u is in state S, dE being time steps in state E, dI being time steps in state
I and the remaining T − t0 − dE − dI being time steps in state R.
There are three groups of factors that (might) involve zu in the (un-normalized) conditional probability
distribution P (zu | {zv:v6=u } , O, θ):

T
−1
Y
t=1

|

P(zu,t+1 |Zt ) ·
{z

}

A(zu )

−1
Y TY
v6=u t=1

|

Y

P(zv,t+1 |Zt ) ·
{z
B(zu )

} |

P(o|zu,t ) .

(t,o)∈Tu

{z

(13)

}

C(zu )

The first set of factors, A(zu ), captures the temporal evolution of the infection state changes of zu
directly and can be reduced to three factors based on ω and all the contacts v that could have infected
individual u. The second set of factors, B(zu ), captures the factors where the infectiousness of u
might impact other individuals v. Finally, the third set of factors, C(zu ), captures the outcome of
tests on individual u.
Factors A(zu ) In order to derive a compact representation of A(zu ), we assume that it can be
written in terms of
A(zu ) = l0 (t0 ) · lE (dE ) · lI (dI ) · linfected
3

As of today, the COVID-19 pandemic is active for 90 days.

7

(14)

Since the infectious status, zv,t = I of other individuals v that had contact with u only affect u in the
susceptible state, we can derive l0 (t0 ) and linfected from (4) by collecting the f terms (see (5)):
tY
0 −1

f(u, t, Zt ) · (1 − f(u, t0 , Zt0 ))

(15)

t=1
tY
0 −1

=

!
· (1 − p0 )t0 −1 · (1 − (1 − p0 )pu,t0 )

(16)

! 

1 − (1 − p0 )pu,t0
pu,t ·
· (1 − p0 )t0 −1 p0 ,
|
{z
}
p0
l0 (t0 )
{z
}

(17)

pu,t

t=1
tY
0 −1

=
|

t=1

linfected

Q

Q
where pu,t := (v,u,t,x)∈Dcontact :zv,t =I j (1 − pj )xj . Note that l0 (t0 ) is the density function of the
geometric distribution. Similarly, given (4) and (7) we can derive lE (dE ) as
lE (dE ) =

dY
E −1

(1 − g(u, t0 + d, Zu,t0 +d )) · g(u, t0 + dE , Zu,t0 +dE ))

d=1

=

dY
E −1
d=1

=

dY
E −1
d=1

!
qE (d)
qE (dE )
1−
·
Pd−1
PdE −1
1 − i=1 qE (i)
1 − i=1
qE (i)
!
Pd
1 − i=1 qE (i)
qE (dE )
·
Pd−1
PdE −1
1 − i=1 qE (i)
1 − i=1 qE (i)

= qE (dE ) .

(18)

(19)
(20)

A similar derivation shows that lI (dI ) = qI (dI ) which proves that the computational complexity of
computing A(zu ) has been reduced to one factor for each contact during the S states of u and three
additional factors corresponding to the compact representation ω for zu . The number of factors do
not directly scale up with T .
Factors B(zu ) In order to derive a compact representation of B(zu ), we note that only the cases of
zv,t = S potentially contain the value of zu,t for v 6= u (see the value range of the function g and h
in (4)). In fact, looking at (5) it becomes evident that it requires zu,t = I. Thus, B(zu ) is defined by
T
Y

Y

Y

f(v, t, Zt )

t=1 v∈CS (u,t)

(1 − f(v, t, Zt )) ,

(21)

v∈CE (u,t)

where CS (u, t) and CE (u, t) are the individuals that u met at time t who were susceptible and have
either stayed susceptible or got exposed, respectively:
CS (u, t) := {v : (u, v, t, x) ∈ Dcontact ∧ zv,t = S ∧ zv,t+1 = S} ,
CE (u, t) := {v : (u, v, t, x) ∈ Dcontact ∧ zv,t = S ∧ zv,t+1 = E} .
4.2

Efficient Block-Gibbs Sampling

In this subsection, we describe how we can speed up the block-Gibbs sampling step for drawing a
sample infection trace zu for individual u.
Q
Constant terms A key observation is that the term C(zu ) =
(t,o)∈Tu P(o|zu,t ) in (13)—
corresponding to test outcomes for individual u—is a constant for each infection trace zu irrespective
of the values of other infection traces {zv:v6=u }. Thus, C(zu ) can be pre-computed at the start of
the block-Gibbs sampling algorithm for individual u and then reused every time we evaluate the
likelihood of an infection trace zu . Similarly, the terms l0 (t0 ) = (1 − p0 )t0 −1 p0 , lE (dE ) = qE (dE )
and lI (dI ) = qI (dI ) in A(zu ) in (14) are constant for each infection trace zu irrespective of the
infection traces of other individuals. Hence, these terms can also be pre-computed at the start of the
block-Gibbs sampling algorithm for individual u.
8

Contacts into u The remaining term linfected in A(zu ) (see (14)) captures the contribution due to
contacts into individual u from other (infectious) individuals v who are in state zv,t = I prior to
u herself getting infected at t0 . As a result, linfected depends on the values of other infection traces
{zv:v6=u } and needs to be recomputed during each block-Gibbs sampling step to draw sample zu . Let
us define

where pu,t :=

linfected (t)

:=

l0infected (t)

:=

Q

Q

(v,u,t,x)∈Dcontact :zv,t =I

linfected

=

j (1

pu,t ,
1 − (1 − p0 )pu,t
,
p0

(22)
(23)

− pj )xj (see also (17)). Then, we have

tY
0 −1

linfected (t) · l0infected (t0 )

(24)

t=1

Thus, at the start of each block-Gibbs sampling step, we pre-compute (22) and (23) for each time
step t, and then use (24) to compute linfected for a particular infection trace zu . Note that this involves
only t0 multiplications (or additions in the log-domain).
Contacts out from u We next turn our attention to computing B(zu ) for each infection trace zu
that captures the contribution due to contacts out from u. We introduce two states ZtI and Zt¬I which
are identical to Zt except for the value of infection state zu,t which is I is ZtI and one of {S, E, R} in
Zt¬I . Now, let
Y
Y
B(zu , t, Zt ) :=
f(v, t, Zt )
(1 − f(v, t, Zt ))
(25)
v∈CS (u,t)

v∈CE (u,t)

be the inner terms in (21). Note that for all
v, t, x) ∈ Dcontact , the terms B(zu , t, ZtI )
Q contacts (u,
¬I
xj
and B(zu , t, Z ) differ only in the factor j (1 − pj ) that is in f(v, t, ZtI ) but not in f(v, t, Zt¬I )
since u is infectious at this time t in ZtI but not in Zt¬I . Also, note that values of zu,t0 for t0 < t do
not affect B(zu , t, Zt ). We can then obtain B(zu ) for each infection trace zu value as
B(zu ) := Constant ·

t0 +d
E +dI
Y
t=t0 +dE

B(zu , t, ZtI )
,
B(zu , t, Zt¬I )

(26)

where Constant is the product of B(zu , t, Zt¬I ) over all time steps t and can be ignored due to
normalization of the sampling distribution. Again, the ratio B(zu , t, ZtI )/B(zu , t, Zt¬I ) can be precomputed for all time steps t at the start of the block-Gibbs sampling step for zu , and then used to
compute B(zu ) for each infection trace zu as in (26).
Putting it all together Note that the quantities linfected (t),
l0infected (t) and
I
¬I
B(zu , t, Zt )/B(zu , t, Zt ) only depend on the infection status of individual u at time t because the infection traces zv of all other individuals v are fixed when we are drawing a block-Gibbs
sample for zu . Thus, the (un-normalized) conditional probability for each zu value is obtained by
taking the product of A(zu ), B(zu ) and C(zu ), which in turn are computed efficiently as described
above from pre-computed values of l0 (t0 ), lE (dE ), lI (dI ) and C(zu ) at the start of the algorithm,
and linfected (t), l0infected (t) and B(zu , t, ZtI )/B(zu , t, Zt¬I ) for all time steps t at the start of the
block-Gibbs sampling step.
Additional implementation optimizations We use two additional ideas to accelerate the implementation of the block-Gibbs sampling algorithm:
• We never materialize the infection trace zu because it is uniquely described by the triple
ω = (t0 , dE , dI ); each value zu,t can be computed by no more than three comparisons of t
with t0 , t0 + dE and t0 + dE + dI . Thus, the whole state of the latent variable model is
represented by 3 × |S| integers.
• We carry out all computations of probabilities in the log-domain so all functions become
sums and products instead of products and powers.
9

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

16
17
18
19

Algorithm 1: Block-Gibbs sampling algorithm for CRISP model
/* Initialization
*/
Initialize each zu = S · 1
/* Precomputations independent of contact data
*/
forall (t0 , dE , dI ) ∈ N+ × N+ × N+ such that t0 + dE + dI ≤ T do
Pre-compute l0 (t0 ), lE (dE ) and lI (dI )
Construct the sequence zu with t0 states S, dE states E, dI states I and T − t0 − dE − dI states
R
Pre-compute C(zu ) according to (13)
repeat
Pick a random index u
/* Precomputations dependent on contact data
*/
forall time steps t do
Pre-compute linfected (t) using (22) and l0infected (t) using (23)
Pre-compute ratio B(zu , t, ZtI )/B(zu , t, Zt¬I ) using (25)
forall (t0 , dE , dI ) ∈ N+ × N+ × N+ such that t0 + dE + dI ≤ T do
/* Infection trace specific computations
*/
Construct the sequence zu with t0 states S, dE states E, dI states I and T − t0 − dE − dI
states R
Compute log(A(zu )) = log l0 (t0 ) + log lE (dE ) + log lI (dI ) + log(linfected ) using (24)
Compute log(B(zu )) using (26)
Set lt0 ,dE ,dI = log(A(zu )) + log(B(zu )) + log(C(zu ))
/* Block-Gibbs sampling step
*/
Sample (t∗0 , d∗E , d∗I ) with probability ∝ exp(lt∗0 ,d∗E ,d∗I − maxt0 ,dE ,dI (lt0 ,dE ,dI ))
Set zu with (S,E,I,R) states corresponding to (t∗0 , d∗E , d∗I )
return Z i = Z
until convergence

Block Glibbs Sampling Algorithm Algorithm 1 is block-Gibbs sampling algorithm for sampling
ZTi from our CRISP model. It cycles through (random) individuals u, sampling the vector of latent
variables zu from the conditional distribution P(zu |{zv:v6=u }, O, θ) until convergence. We can use the
samples ZT1 , . . . , ZTm drawn by this algorithm to compute the infection risk score for an individual u
at time t by taking the fraction of samples ZTi in which the latent infection state zu,t ∈ {E, I}.
4.3

Hyperparameter Inference

In order to estimate the hyper-parameters θ of the CRISP model, would like to find θ∗ that maximizes
the log-likelihood log (12). However, since this is intractable, we propose to use the Monte Carlo
Expectation-Maximization (EM) algorithm [2]. We will use EM to refine θ in successive iterations.
Let θold be the value of θ computed in the previous iteration. Then, in the E step of the current
iteration, we will estimate the expected complete-data log-likelihood
X
P(ZT |O, θold ) · log (P(ZT , O|θ)) .
(27)
ZT

We will use the block-Gibbs sampling procedure described in Algorithm 1 to approximate the
posterior distribution P(ZT |O, θold ) over the latent infection status of individuals u. If the samples
drawn from the posterior P(ZT |O, θold ) are ZT1 , . . . , ZTm , then in the M step, we will compute θ that
maximizes the expected complete-data log-likelihood
θnext = argmaxθ

m
X


log P ZTi , O|θ

(28)

i=1

= argmaxθ

m T
−1 X
X
X


log P ziu,t+1 , O|Zti , θ ,

i=1 t=1 u

10

(29)

where ziu,t+1 is the infection state for individual u at time t + 1 in sample ZTi . If ti0 denotes the
number of initial S states in the sample infection trace ziu , we note that by virtue of (4) only the first
ti0 terms depend on θ which reduces the above maximization term to only
i

m X tX
0 −1
X
i=1 u



log f ui , t, Zti |θ + log 1 − f ui , ti0 , Zti |θ .

t=1

We use stochastic gradient descent to compute the θ values that maximize the above expression. We
also note that for numerical stability, we re-parameterize pj via wj as pj = exp(wj )/(1 + exp(wj ))
which allows for an unconstrained optimization over w.
4.4

Federated Block-Gibbs Sampling

We can extend the block-Gibbs sampling algorithm in CRISP to a federated learning setting [13]
where local contact and test outcome data for an individual u are utilized to compute the block-Gibbs
sample zu on the individual’s mobile device without ever needing to be shared with anyone else. This
has two benefits: (1) We distribute the block-Gibbs sampling algorithm across hundreds of millions
of mobile devices in the world and thereby utilize their distributed computational power, and (2)
Contact and test outcome data for an individual are stored only on the individual’s mobile device and
not shared with other mobile devices—-this preserves a user’s privacy. In the federated setting, the
contact data is never centralized—instead for each individual u, her device executes the block-Gibbs
sampling step to draw sample zu only using the locally available contacts and test outcome data
for u, as well as additional “minimal statistics” sent to u by the devices of its past contacts. In the
following two paragraphs, we explain how to compute the factors A(zu ), B(zu ) and C(zu ) in (13) in
a federated setting (see Algorithm 2 for the pseudo-code which runs on every mobile device).
Factors A(zu ) and C(zu ) A key observation is that the terms l0 (t0 ), lE (dE ), lI (dI ) in A(zu ) as
well as the factor C(zu ) can all be computed locally on the device with the contact and test outcome
information available on the device. In order to compute the remaining term linfected in A(zu ), we
only require information on the individuals v who had a contact with u at each time step t and
the infection status zv,t of v at the time of the contact. Individual u’s mobile device already has
the contact information for u; thus all that is required to compute linfected are the current infection
traces zv for all individuals v who have had contacts with u. Since each infection trace is uniquely
characterized by a (t0 , dI , dE ) triple, we require the mobile devices of all individuals v who have
had a contact with u to send u’s device the (t0 , dI , dE ) triple corresponding to zv .
Factor B(zu ) In order to compute B(zu ) as defined in (21), we require the term f(v, t, Zt ) for
each individual v who has had a contact with u at time t and whose infection state zv,t = S. Let
f−u (v, t, Zt ) be defined as in (5) over all contacts of v at time t except for individual u. Then, the
device for each individual v who has had a contact with u at time t and whose infection state zv,t = S
sends to u’s device the quantity f−u (v, t, Zt ) computed based on v’s view of the infection traces of
its contacts. These terms are used by u’s device to compute B(zu ) as defined in (21).

5

Simulation-Based Experimental Results

In this section, we present two types of experimental evaluations:
1. Population Level COVID-19 Infection Spread. In the first set of experiments, we will
demonstrate that CRISP is capable of modelling infection spread across an entire population.
We will relate our individual-level parameters θ to more classical measures of infection
spread such as reproduction factor R0 and demonstrate that the structure of the contact
patterns allow more fine grained control of the infection spread which can be used for
alternative containment measures of the COVID-19 pandemic.
2. Test and Quarantine Efficacy of CRISP Model. In the second set of experiments, we will
assess the test and quarantine efficacy of the CRISP model by comparing the population
health after 5 months under three testing and quarantining policies: (1) symptom-based, (2)
contact-tracing-based, and (3) CRISP model-based.
11

1
2

Algorithm 2: Federated block-Gibbs Sampling algorithm for CRISP model
/* Initialization
Initialize zu = S · 1
Initialize Nv = (∞, 0, 0, ∅) for all v // Stores minimal statistics from contacts

*/

3

22

/* Precomputations independent of contact data
*/
repeat
/* Update minimal statistic received in the incoming queue
*/
forall {(tv0 , dvE , dvI , {f−u (v, t, Zt )})}v in the incoming message queue do
Nv ← (tv0 , dvE , dvI , {f−u (v, t, Zt )})
/* Precomputations of test outcomes
*/
forall (t0 , dE , dI ) ∈ N+ × N+ × N+ such that t0 + dE + dI ≤ T do
Pre-compute l0 (t0 ), lE (dE ) and lI (dI )
Pre-compute C(zu ) for this sequence according to (13)
/* Precomputations dependent on contact data
*/
forall time steps t do
Pre-compute linfected (t) using (22) and l0infected (t) using (23) and (tv0 , dvE , dvI ) in Nv for all
past contacts v
Pre-compute ratio B(zu , t, ZtI )/B(zu , t, Zt¬I ) using (25) and {f−u (v, t, Zt )} in Nv for all
past contacts v
forall (t0 , dE , dI ) ∈ N+ × N+ × N+ such that t0 + dE + dI ≤ T do
/* Infection trace specific computations
*/
Construct the sequence zu with t0 states S, dE states E, dI states I and T − t0 − dE − dI
states R
Compute log(A(zu )) = log l0 (t0 ) + log lE (dE ) + log lI (dI ) + log(linfected ) using (24)
Compute log(B(zu )) using (26)
Set lt0 ,dE ,dI = log(A(zu )) + log(B(zu )) + log(C(zu ))
/* Block-Gibbs sampling step
*/
Sample (t∗0 , d∗E , d∗I ) with probability ∝ exp(lt∗0 ,d∗E ,d∗I − maxt0 ,dE ,dI (lt0 ,dE ,dI ))
Set zu with (S,E,I,R) states corresponding to (t∗0 , d∗E , d∗I )
/* Send minimal statistic to all contacts
*/
forall v in past contact list do
F = {f−v (u, t, Zt ) : (u, v, t, x) ∈ Dcontact ∧ t ≤ t∗0 }
Send message (t∗0 , d∗E , d∗I , F) to v

23

until forever

4
5
6

7
8
9

10
11
12

13
14
15
16
17

18
19
20
21

In all these experiments, we use the parameters α = 0.001 and β = 0.01 in (9) and match the
distribution qE and qI of exposure and infectiousness duration to the empirical distributions provided
in the medical literature [1, 18]. This is both used in the generation of the simulated test outcome
data as well as for the CRISP inference algorithms as these parameters are publicly known. We will
use the notation qI for the expectation of the empirical distributions qI .
In order to simulate realistic epidemiological spread, we need to translate a reproduction factor R0 at
t = 0 into contact data. By definition, R0 is the average number of individuals that an infected person
will infect over the entire period of being infectious. Thus, for a reproduction factor R0 and a contact
channel j with transmission probability pj ∈ [0, 1], we need to generate C(R0 , pj ) := R0 /(qI · pj )
many connections on average for all individuals in each time step. Conversely, for any process that
generates ηj connections to unique and distinct individuals over channel j in each
P time step, the
effective R0 over contact channel j with 100% transmission probability equals qI j ηj . The actual
C(R ,p )

0
j
number of contacts is drawn form a binomial distribution with n = S − 1 and a rate p = 2(S−1)
.
Note that the rate is one half of the target contact rate because all contacts are symmetrically mirrored.

12

5.1

Population Level COVID-19 Infection Spread

In order to assess if the CRISP model is able to provide realistic population-level statistics for
COVID-19 infection spread, we simulate a population of |S| = 10, 000 individuals over a period of
274 days (9 months). We single out an individual u for whom we set p0 = 1 so that she will get
infected with probability 100% at t = 1 ("patient 0"); for all other people we assume a p0 = 10−6 to
model a miniscule chance of infection spread from exogenous sources. We assume a single contact
channel with a 1% chance of transmission, p1 = 0.01. We simulate five scenarios:
• No Mitigation. Since R0 of COVID-19 is estimated to be 2.5, at any time t we generate
C(2.5, p1 ) random connections for every individual at every time step.
• Social Distancing After 60 Days. Intuitively, the "locality" of the contact patterns should
play a role in the infection spread of COVID-19: if an individual is in contact with a broad
range of other individuals, the spread should be faster than if unique number of people in
contact over time is small. In order to demonstrate that this concept has indeed an effect
on the infection spread, we performed an additional simulation where we kept the unique
number of people that every individual meets in every time step at C(2.5, p1 ) but introduced
the concept of "social bubbles" where all individuals form groups of 20 who have a large
number of interactions with each other (i.e., equivalent to C(2, p1 ) but only rare interactions
with people from other bubbles equivalent to C(0.5, p1 ) (see Figure 3 for a picture of the
contact matrix with random connections and with "social bubbles").
• Mitigation After 60 Days. For t ≤ 60, we generate C(2.5, p1 ) random connections for
every individual at every time step. Afterwards, we assume that mitigation measures are
taken which reduce the reproduction rate to 1.0. Thus, we generate only C(1.0, p1 ) random
connections for every individual at every time step t > 60.
• Suppression After 60 Days. For t ≤ 60, we generate C(2.5, p1 ) connections for every
individual at every time step. Afterwards, we assume that lock-down measures are taken to
suppress the pandemic which reduce the reproduction rate to 0.5.
• Suppression After 60 Days and Release of Lock-down after 120 Days. This scenario is
similar to the previous scenario but we assume that due to very low infection numbers, the
lock-down is released after 60 days. Thus, we generate C(2.5, p1 ) random connections for
every individual for t > 120.
P
In Figure 2, we show the plot of
u P(zu,t = z) over
t = 1, . . . , 274 days for z ∈ {E, I, R} (orange = E, red = I,
blue = R) from 100 forward samples of the CRISP model for
these scenarios. As one can see, with no mitigation there is a
high peak around day t∗ = 180 and eventually herd-immunity
is achieved at 85% of infected population. Even though the
number of unique contacts in each time step is the same, "social bubbles" flatten the curve, thus slowing down the infection
but growth rates of infected people are still super linear until Figure 3: Snapshot of the contact
large parts of the population had been in contact with the dis- matrix of the first 200 individuals
ease. Note that a similar mitigation policy is currently used for random connections and with
in Belgium. In case of mitigation to R0 = 1.0, growth rates "social bubbles".
are pushed to sub linear but the pandemic is still continuously
going on after 9 months. Not surprisingly, suppression is most
effective at bringing the infections back to nearly 0% after 120 days. However, if the lock-down is
lifted after 120 days, a second wave of infections will cause an exponential increase in infectiousness
after only two weeks (dashed lines). Note that all these effects were computable by simply forward
sampling our individual-level CRISP model.
5.2

Test and Quarantine Efficacy of CRISP Model

In order to assess the test and quarantine efficacy of the CRISP model, we consider a population
of |S| = 1, 000 individuals for 150 days (5 months) with a uniformly random contact pattern of
C(2.5, 0.025) = 5.03 contacts on average per individual and day. We simulate the actual infection
spread by applying the following sequence in each time step (i.e., day): At the beginning of each time
13

no mitigation

mitigation with localized contact pattern

days after patient 0 got infected

days after patient 0 got infected

mitigation after 60 days

release after 60 days lock-down

days after patient 0 got infected

days after patient 0 got infected

Figure 2: Population level COVID-19 infection spread for three different scenarios: (top-left) No
mitigation (R0 = 2.5). (top-right) No mitigation until day 60 and then using "social bubbles". Note
that R0 remains at 2.5 the entire time. (bottom-left) Mitigation after 60 days by reducing R0 to 1.0.
(bottom-right) Lock-down at day 60 and reduction of R0 to 0.5 (solid lines). In dashed lines we show
the effect of a subsequent re-opening of a subsequent contact rate increase to R0 of 2.5 starting at day
120.
step, we query the testing-and-quarantining policy for a list of individuals which need to be tested
and need to be in quarantine during this step (this will only be done after t∗ = 30 to simulate an
undetected initial outbreak). Each policy is constrained to select no more than 10 test candidates per
day (1% of the total population). Given the quarantined individuals on that day, we remove contacts
from and to the quarantined individuals for that day and then use the CRISP forward model (4) and
CRISP test outcome model (9) to draw one sample of the next simulated infection state of every
individual as well as the actual test outcomes of the requested test candidates. If the infection state
of an individual changes from E to I in this sampling step, we assume that with 50% probability,
the individual generates symptoms. Finally, at the end of the time step, the testing-and-quarantining
strategy is revealed the test outcomes as well as the list of symptomatic individuals (again, provided
t ≥ t∗ ). We single out an individual u for whom we set p0 = 1 so that she will get infected with
probability 100% at t = 1 ("patient 0"); for all other people we assume a p0 = 10−4 to model a
small chance of infection spread from exogenous sources.
1. Symptom-Based Policy. For every time step t ≥ t∗ , we will request testing for up to 10
symptomatic individuals from the previous time step. For all individuals with a positive test
outcome on the previous day, we will institute a quarantine for ρ time steps where ρ ranges
from 2 to 21 days in our evaluation.
2. Contact-Tracing Policy. For every time step t ≥ t∗ , we will request testing for up to 10
symptomatic individuals from the previous time step. If there are less than 10 symptomatic
individuals, then we will request the remaining tests for individuals in quarantine sorted in
descending order of the number of contacts they have had in the past 7 days with people
who have tested positive. For every individual with a positive test outcome, we will not only
quarantine her but also all the contacts she had in the past 7 days for ρ time steps where ρ
ranges from 2 to 21 days in our evaluation; for every individual with a negative test outcome,
we will remove her from quarantine.
3. CRISP Model-Based Policy. For every time step t ≥ t∗ , we will use block-Gibbs sampling
of 100 infection traces zu to estimate P(zu,t ) for every individual u at the current time
step t based on the contacts and test outcomes prior to time step t. We will request testing
14

Figure 4: Effect of different mitigation policies on the infection
percentage and quarantine days after T = 150 days (5 months).
The y-axis shows the percentage
of population that got infected with
COVID-19 during the 150 days.
The x-axis shows the total number
of days that individuals were quarantined. The error-bars are computed as the standard deviation over
20 random initializations of the forward model simulating the T = 150
days while not affecting the randomization of the contact matrices.

for up to 10 symptomatic individuals from the previous time step. If there are less than
10 symptomatic individuals, then we will request the remaining tests for individuals (who
^ u,t = I). We will quarantine
have not tested positive before) in descending order of P(z
^ u,t ∈ {E, I})
any individual who is not yet quarantined but whose estimated probability P(z
exceeds a given policy threshold τEI ; we will release an individual from quarantine once
^ u,t ∈ {S, R}) exceeds a given policy threshold τSR . Note that
their estimated probability P(z
we increase p0 in the block-Gibbs sampling by a factor of 10 to account for "patient 0".
In order to gauge the efficacy of each policy, we measure two quantities at the end of the simulation
(t = 150): (1) Percentage of population that got infected during the 150 days, and (2) total number of
days that individuals were quarantined (e.g., if a policy locks down for the entire 150 days, this would
result in 150,000 quarantine days). Varying the policy parameters ρ, τEI and τSR results in curves on
the two dimensions of infection percentage and quarantine days. The closer a curve is to the origin,
the more effective is the policy in terms of "health" (infection) and "economic" (quarantining) cost.
In Figure 4, we plot curves for the three policies with ρ ∈ {2, 7, 14, 21}, τEI ∈ {0.2, 0.3, 0.4, 0.5},
τSR = 0.9. For comparison, we also show the two extreme points corresponding to "no mitigation"
(i.e., zero quarantine days but the largest infection percentage of 90%) and "full lock-down" (i.e.,
largest quarantine days of 120,000 and near-zero infection percentage). All three curves exhibit
a negative slope where a higher percentage of quarantine days corresponds to a more effective
mitigation of infection spread. Of the three policies, our CRISP-based policy achieves the best
performance in terms of the smallest number of quarantine days for a given infection percentage
(i.e., Pareto frontier). This is because our CRISP model is able to accurately identify infectious
users (even though they may be asymptomatic) and test/quarantine them proactively– this helps to
prevent infection from spreading across the population while at the same time quarantining fewer
individuals with a high likelihood of getting infected. In contrast, the symptom-based policy only
tests individuals with symptoms and then quarantines the individuals who have tested positive. As a
result, since 50% of the infected individuals are asymptomatic, they never get tested and quarantined,
thus resulting in a spread of infection to 60% of the population. Similarly, the contact-tracing policy,
by isolating all contacts of positive tested individuals (many of whom may have low likelihoods
of getting infected), is able to achieve the absolute smallest infection percentage but at the cost of
massive quarantining (30% of the population). Figure 5 shows a visualization of these effects in one
of the simulation runs for ρ = 14, τEI = 0.3, and τSR = 0.9.

6

Conclusions

In this paper, we proposed a probabilistic graphical model for COVID-19 infection spread through
individual contacts that captures the epidemiological state of each individual based on the SEIR
model. We developed a computationally efficient block-Gibbs sampling-based algorithm to infer
15

Figure 5: Infection trace and quarantining statistics for symptom-based (left), contact-tracing (middle),
and CRISP (τEI = 0.3,τSR = 0.9) model-based (right) testing-and-quarantining policy over the
duration of 150 simulated days (blue = S, orange = E, green = I, red = R). In the bottom plots, we
show a stacked bar chart of quarantined individuals per day grouped by actual infection status. While
the number of quarantined individuals for the symptom-based policy is small, the infection spread
is not contained and the quarantining keeps growing exponentially. In contrast, the contact-tracing
policy effectively suppresses infection spread while regularly quarantining more than 25% of the
population. The CRISP model-based policy is initially picking a large number of individuals for
quarantining but is then able to keep it at a low-level, in particular of susceptible individuals.

the COVID-19 infection risk score of all individuals at any time, given test outcome and mutual
contact information between individuals. An efficient C++-based Python implementation of our
inference algorithm is available at https://github.com/zalandoresearch/CRISP. Through experiments
with simulated data, we showed that the CRISP model is able to model macro-level characteristics of
the COVID-19 infection at county level (≈ 10, 000 individuals) and effectively mitigate COVID-19
spread by pro-actively quarantining and testing individuals with high risk of infections.
As part of future work, we would like to further accelerate our inference procedure using other
approximation techniques such as Variational Bayes and Expectation Propagation [2]. Our inference
algorithm can also be speeded up by exploiting the parallelism inherent in our block-Gibbs Sampling
algorithm. For example, it is possible to concurrently sample infection traces of two individuals
with no contacts in common. It is also known that the hyper-parameters of the SEIR model vary
with demographic attributes such as age, socio-economic status, or location (see, for example [10]
who present a location-varying infection spread model). We would like to extend our model with
group-level hyper-parameters to account for this variation. We would also like to explore the causal
impact of mitigation or suppression policy measures (e.g., school closures, shop closures, small group
gatherings) on COVID-19 infection spread when using contact-level data. Finally, we would like to
consider more sophisticated models of COVID-19 transmission through different modalities, and
contacts with varying duration and distance characteristics.
Acknowledgments We would like to thank Sebastian Munoz, Christopher Gandrud, Jasvinder
Kandola and Peter Herbrich for all their valuable input and feedback on earlier drafts of this paper.
We are also indebted to Christoph Thöns for his support with Python and C++ programming.

References
[1] Jantien A Backer, Don Klinkenberg, and Jacco Wallinga. Incubation period of 2019 novel
coronavirus (2019-nCoV) infections among travellers from Wuhan, China, 20-28 January 2020.
Euro Surveillance, 25(5), 2020.
[2] Christopher Bishop. Pattern Recognition and Machine Learning. Springer, 2006.
16

[3] D. Chakrabarti, Y. Wang, C. Wang, J. Leskovec, and C. Faloutsos. Epidemic thresholds in real
networks. ACM Transactions on Information and System Security, 10(4), 2008.
[4] R. Deardon, S. P. Brooks, B. T. Grenfell, M. J. Keeling, M. J. Tildesley, N. J. Savill, D. J. Shaw,
and M. E. Woolhouse. Inference for individual-level models of infectious diseases in large
populations. Statistica Sinica, 20(1), 2010.
[5] N. M. Ferguson, D. A. Cummings, C. Fraser, J. C. Cajka, P. C. Colley, and D. S. Burke.
Strategies for mitigating an influence pandemic. Nature, 442(7101):448–452, 2006.
[6] N. M. Ferguson, D.A. Cummings, S. Cauchemez, C. Fraser, S. Riley, A. Meeyai, S. Iamsirithaworn, and D. S. Burke. Strategies for containing an emerging influenza pandemic in southeast
asia. Nature, 437(7056):209–214, 2005.
[7] Amit Goyal, Francesco Bonchi, and Laks Lakshmanan. Learning influence probabilities in
social networks. In Web Search and Data Mining (WSDM), 2010.
[8] D. Kempe, J. Kleinberg, and E. Tardos. Maximizing the spread of influence through a social
network. In International Colloquium on Automata, Languages and Programming, 2003.
[9] Yuchen Li, Ju Fan, Yanhao Wang, and Kian-Lee Tan. Influence maximization on social graphs.
IEEE Transactions on Knwledge and Data Engineering, 30(10):1852–1872, 2018.
[10] Lars Lorch, William Trouleau, Stratis Tsirtsis, Bernhard Schölkopf, and Manuel GomezRodriguez. A spatiotemporal epidemic model to quantify the effects of contact tracing, testing,
and containment. arXiv:2004.07641v2, 2020.
[11] Michael Mathioudakis, Francesco Bonchi, Carlos Castillo, Aristides Gionis, and Antti Ukkonen.
Sparsification of influence networks. In International Conference on Knowledge Discovery and
Data Mining, 2011.
[12] Robert M. May. Infectious diseases of humans: dynamics and control. Oxford University Press,
1991.
[13] H.B. McMahan, E. Moore, D. Ramage, S. Hampson, and B.A. y Arcas. Communication-efficient
learning of deep networks from decentralized data. In Proceedings of the 20th International
Conference on Artificial Intelligence and Statistics, pages 1273–1282, 2017.
[14] P. Van Mieghem and J. Omic. In-homogeneous virus spread in networks. arXiv:1306.2588v2,
2014.
[15] P. Van Mieghem, J. Omic, and R. Kooij. Virus spread in networks. IEEE/ACM Transactions on
Networks, 2009.
[16] Seth Myers and Jure Leskovec. On the convexity of latent social network inference. In Neural
Information Processing Systems, 2010.
[17] Vineetha Warriyar K. V., Waleed Almutiry, and Rob Deardon. Individual-level modeling of
infectious disease data: Epiilm. arXiv:2003.04963v1, 2020.
[18] Roman Woelfel, Victor Max Corman, Wolfgang Guggemos, Michael Seilmaier, Sabine Zange,
Marcel A Mueller, Daniela Niemeyer, Patrick Vollmar, Camilla Rothe, Michael Hoelscher,
Tobias Bleicker, Sebastian Bruenink, Julia Schneider, Rosina Ehmann, Katrin Zwirglmaier,
Christian Drosten, and Clemens Wendtner. Clinical presentation and virological assessment
of hospitalized cases of coronavirus disease 2019 in a travel-associated transmission cluster.
medrxiv.org:10.1101/2020.03.05.20030502v1, 2020.
[19] WWW. Aarogya setu. https://www.mygov.in/aarogya-setu-app/, 2020. Accessed:
2020-05-10.
[20] WWW. Trace together. https://www.tracetogether.gov.sg, 2020. Accessed: 2020-0510.

17

