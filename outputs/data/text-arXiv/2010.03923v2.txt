rsta.royalsocietypublishing.org

Research

VECMAtk: A Scalable
Verification, Validation and
Uncertainty Quantification
Toolkit for Scientific
Simulations
D. Groen1,2 , H. Arabnejad1 , V.

Article submitted to journal

Jancauskas3 , W. N. Edeling4 , F.

arXiv:2010.03923v2 [cs.MS] 11 Oct 2020

Jansson4,11 , R. A. Richardson2,5 , J.
Subject Areas:
Keywords:
multiscale simulations, verification,
validation, uncertainty quantification

Author for correspondence:
Derek Groen
e-mail: derek.groen@brunel.ac.uk

Lakhlili6 , L. Veen5 , B. Bosak7 , P. Kopta7 , D.
W. Wright2 , N. Monnier8 , P. Karlshoefer8 ,
D. Suleimenova1 , R. Sinclair2 , M.
Vassaux2 , A. Nikishova9 , M. Bieniek2 , O.
O. Luk6 , M. Kulczewski7 , E. Raffin8 , D.
Crommelin4,10 , O. Hoenen6 , D. P. Coster6 ,
T. Piontek7 and P. V. Coveney2,9 ,
1 Department of Computer Science, Brunel University

London, London, UK
2 Centre for Computational Science, University College

London, London, UK
3 Leibniz Supercomputing Centre, Garching, Germany
4 Centrum Wiskunde & Informatica, Amsterdam, The

Netherlands
5 Netherlands eScience Center, Amsterdam, The

Netherlands
6 Max-Planck Institute for Plasma Physics - Garching,

Munich, Germany
7 Poznań Supercomputing and Networking Center,

Poznań, Poland
8 CEPP - Center for Excellence in Performance

Programming, Atos Bull, Rennes, France
9 University of Amsterdam, Amsterdam, The

Netherlands
10 Korteweg-de Vries Institute for Mathematics,

Amsterdam, The Netherlands
11©Delft
The Authors.
Published
by the Royal Society
under
University
of Technology,
Delft,
Thethe

terms of the

Creative Commons Attribution License http://creativecommons.org/licenses/

Netherlands
by/4.0/, which permits
source are credited.

unrestricted use, provided the original author and

1. Introduction
Computational models play an ever-growing role in predicting the behavior of real-world
systems or physical phenomena [1], using equations and/or heuristics to encode the natural
laws and theories of the world we inhabit. Because models are a simplified representation of
real-world systems, they can behave differently for a variety of reasons. Key model inputs, such
as initial conditions, boundary conditions and important parameters controlling the model, are
often not known with certainty or are inadequately described [2]. For example, in the case of
human migration simulations [36], the model may require knowledge of a wide range of input
parameters, such as details of transport modes, roads, settlement populations and conflict zones,
before we can execute the simulation. However, often these parameters are not precisely known
or cannot be obtained with high accuracy.
Another source of discrepancy between the model and reality are the assumptions and
simplifications that are made as part of creating the conceptual model. Simplifications can reduce
the computational cost of models, but also make them less accurate. And assumptions are by
definition uncertain, which makes it necessary to test the model accuracy when these assumptions
are adjusted to match realistic alternative scenarios.
The appropriate level of accuracy and reliability in the results can be obtained by ensuring
not only that the computational model accurately represents the underlying mathematical model
and its solution (Verification) [3,4], but the degree to which a model is an accurate representation
of the real world based on comparisons between computational results and experimental data
(i.e., the deviation of the model from reality) (Validation) [5], and how variations in the numerical
and physical parameters affect simulation outcomes (Uncertainty Quantification). Collectively, the
processes involved in evaluating our level of trust in the results obtained from models are known
as VVUQ. VVUQ processes provide the basis for determining our level of trust in any given model
and the results obtained using it [1,58,59].
Many scientific modelling challenges involve complex and possibly multiscale, multiphysics
phenomena, the results of which are unavoidably approximate. VVUQ then becomes essential
to determine whether the results can be trusted, and whether decision makers can rely on them
to guide subsequent actions, making our simulations actionable. Indeed, the impact of scientific
computing relies directly on its trustworthiness [4], and VVUQ provides the basis for determining
our level of trust in any given model and the results obtained using it [1].
Within this paper we describe the latest release of the VECMA toolkit. VECMA
(www.vecma.eu) is an EU-funded initiative that focuses on enabling VVUQ for large-scale and
complex simulations. The toolkit we present here facilitate the use of VVUQ techniques in
(multiscale) applications, as well as a range of Verification and Validation Patterns (VVPs) to
enable a systematic comparison of simulation results against a range of validation targets, such as
benchmarks or measurements. We review a range of related research and development efforts in

2

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

We present the VECMA toolkit (VECMAtk), a flexible software environment for single
and multiscale simulations that introduces directly applicable and reusable procedures for
verification, validation (V&V), sensitivity analysis (SA) and uncertainty quantication (UQ). It
enables users to verify key aspects of their applications, systematically compare and validate
the simulation outputs against observational or benchmark data, and run simulations
conveniently on any platform from the desktop to current multi-petascale computers. In
this sequel to our paper on VECMAtk which we presented last year [51], we focus on a
range of functional and performance improvements that we have introduced, cover newly
introduced components, and applications examples from seven different domains such
as conflict modelling and environmental sciences. We also present several implemented
patterns for UQ/SA and V&V, and guide the reader through one example concerning
COVID-19 modelling in detail.

2. Related Work
Several other toolkits share a subset of the added values that VECMAtk provides. In the area
of VVUQ, a well-known toolkit is Design Analysis for Optimization and Terascale Applications
(DAKOTA) 1 [6], which provides a suite of algorithms for optimization, UQ, parameter studies,
and model calibration. DAKOTA is a powerful tool, but has a relatively steep learning curve
due to the large number of tools available [7] and offers no way to coordinate resources
across concurrent runs [8,9]. Similarly, there are other toolkits that help with UQ directly, such
as UQTK [65] and UQLab 2 . One particularly efficient method to handle UQ for a range of
applications is the multi-level Monte Carlo Method [66].
In the area of VVUQ using HPC, there are several other relevant tools. OpenTURNS [10]
focuses on probabilistic modelling and uncertainty management, connects to HPC facilities,
and provides calibration/Bayesian methods and a full set of interface to optimization solvers.
Uranie leverages the ROOT 3 framework to support a wide range of uncertainty quantification
(UQ) and sensitivity analyses (SA) activities using local and HPC resources. A key requirement
for performing many types of UQ and SA is the ability to effectively run large ensembles
of simulations runs. In addition to QCG-PJ, presented in this paper, there are tools such as
RADICAL-Cybertools [11] that can be used to initiate and manage large simulation ensembles on
peta and exascale supercomputers. In the area of surrogate modelling, GPM/SA [12,13] helps to
create surrogate models, calibrate them to observations of the system, and give predictions of the
expected system response. There is also a portfolio of available solutions for rapidly processing
user-defined experiments consisting of large numbers of relatively small tasks. The examples are
Swift/T [15] and Parsl [14], both of which support execution of data-driven workflows.
Another range of relevant related tools include more statistically oriented approaches. For
instance, Uncertainpy [16] is a UQ and SA library that supports quasi-Monte Carlo (QMC)
and polynomial chaos expansions (PCE) methods. PSUADE [17] is a toolbox for UQ, SA and
model calibration in non-intrusive ways [18], while DUE [19] assesses uncertain environmental
variables, and generates realisations of uncertain data for use in uncertainty propagation analyses.
PyMC3 [20] is a Python package for Bayesian statistical modelling and probabilistic machine
learning which focuses on Markov Chain Monte Carlo approaches and variational fitting.
Similarly, SimLab 4 offers global UQ-SA based on non-intrusive Monte Carlo methods. UQLab
[21] and SAFE [22] are MATLAB-based tools that provide support for UQ (using e.g. PCE) and
SA (using e.g. Sobol’s method) respectively.

3. The VECMA toolkit (VECMAtk)
The main objectives of VECMAtk are to facilitate the implementation of (a) uncertainty
quantification and sensitivity analysis patterns (UQPs) and (b) verification and validation
patterns (VVPs). The UQP implementations automate routines for uncertainty quantification
and sensitivity analysis, while the VVP implementations enable verification and validation
procedures for high performance (multiscale) computing applications. Ye et al. present the
concepts of UQP on an algorithmic level [57], while an algorithmic paper on VVPs is still in
preparation. Both implementations support remote execution on petascale and emerging exascale
resources, as well as execution on local machines. In addition, we support a range of existing
1

https://dakota.sandia.gov
https://www.uqlab.com
http://root.cern.ch
4
https://ec.europa.eu/jrc/en/samo/simlab
2
3

3

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Section 2, and then provide a brief description of the toolkit as a whole in Section 3. We describe
the key aspects of each component in the toolkit in Section 4 and present a range of exemplar
applications in Section 5, while we discuss on the main performance and scalability aspects of the
toolkit in Section 6. Lastly, we share our main conclusions in Section 7.

(i)
(ii)
(iii)
(iv)

the need to fit into existing applications with minimal modification effort,
the need to support any application domain,
the flexible and recombinable nature of the toolkit itself,
the geographically distributed nature of the users and particularly the developers.

As a result, we position VECMAtk as a collection of elements that can be reused and
recombined in different workflows, interlinked with stable interfaces, data formats and APIs,
to facilitate VVUQ in any application. VECMAtk specifically allows users with (multiscale)
applications to combine generic, lightweight patterns to create a system-specific VVUQ
approach that covers all relevant space and time scales, including the scale-bridges between
them. The exemplar applications (which we present in Section 5) map to all three of the
established multiscale computing patterns: Extreme Scaling (ES), Replica Computing (RC) and
Heterogeneous Multiscale Computing (HMC) [23].

(a) Release schedule and changes compared to the initial release
The VECMA toolkit is an open-source and open development project, meaning that the latest
source and development notes can be accessed at any time. In terms of releases, we have adopted
a schedule with minor and major releases. Minor releases are made publicly every 3 months,
are advertised within the project, and have limited amount of additional documentation and
examples. The first major release was made in June 2019; the ensuing two releases will be made
in June 2020 and June 2021, and will be public and fully advertised. They are accompanied with
extensive documentation, tutorials, examples, training events and dedicated uptake activities. In
addition to these two release types, we provide informal periodic updates to the master code
branches, documentation and the integration of the components.
Since our first major release in June 2019, all VECMAtk components have improved
scalability, a range of new features and capabilities, extended and revised application tutorials,
improved technical documentation, and a wide range of user-requested bugfixes. We present the
fundamental improvements and changes in the development of each VECMAtk component since
the first major release as part of Appendix A.

4. Overview of the VECMAtk components
We present a graphical overview of the various components in VECMAtk in Fig. 1. VECMAtk
contains four main components: EasyVVUQ [26] simplifies the implementation and use of VVUQ
workflows with focus on large scale scenarios, FabSim3 [25] helps to automate computational
research activities, MUSCLE 3 [27] supports the coupling multiscale applications, and the QCG
tools 5 facilitate advanced workflows, and the process of design and execution of applications,
using HPC infrastructures. All these components can be flexibly combined with other VECMAtk
and third party components to create diverse application workflows. In addition, no single
component is essential to all applications: for example FabSim3 and QCG-Client are to a limited
degree interchangeable, and at least one application fully relies on a third party tool (the Mogp
emulator 6 ) instead of EasyVVUQ.
In this section we summarize each of the components that comprise VECMAtk, while we
refer to the VECMAtk website https://www.vecma-toolkit.eu/ for more detailed technical
information.
5
6

https://www.qoscosgrid.org
https://github.com/alan-turing-institute/mogp_emulator

4

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

VVUQ mechanisms and provide tools for users to facilitate the adoption of VVUQ in their
applications. As we want our toolkit to be general-purpose, taken up by users, and flexible, we
have four main factors that shape our development approach:

5

(a) EasyVVUQ
EasyVVUQ [24] [26] is a Python library designed to facilitate implementation of advanced nonintrusive VVUQ techniques, with a particular focus on high performance computing, middleware
agnosticism, along with single scale and multiscale modelling. Generally, non-intrusive VVUQ
workflows involve sampling the parameter space of the simulation. This usually means running
the simulation multiple times. This process is tedious and error prone if done in an ad hoc manner,
and further exacerbated if the parameter space is large with a corresponding large number of
runs (e.g. of order thousands to millions of runs), or if each simulation is very computationally
expensive. EasyVVUQ allows one to coordinate the whole process - from sample generation
through execution to analysis - although the execution stage is external to EasyVVUQ, and can
be done by tools such as QCG-PilotJob, FabSim3 or Dask, or even manually. EasyVVUQ seeks to
be agnostic to the choice of execution middleware, due to the large range of possible execution
patterns that may be required in an HPC workflow. Additionally, the library carefully tracks
and logs applications of the sampling elements along the way, allowing a reasonable level of
restartability and failure resistance.
EasyVVUQ breaks down the VVUQ process into five distinct stages.
(i) Application description, which further can be divided into the following items:
(a) Encoder - responsible for producing input files for the simulation.
(b) Decoder - responsible for parsing the output files of the simulation and extracting
the needed values.
(c) Execution action - describes how the simulation is run.
(ii) Sampling - this step is very dependent on the VVUQ technique in question. The main
task of sampling components is to produce a list of parameter sets for the simulation.
(iii) Execution - this is handled entirely externally to EasyVVUQ.
(iv) Collation - collects the outputs of the simulations and then stores them in the EasyVVUQ
database, to be retrieved later for analysis.
(v) Analysis - perform statistical analysis on the collected data. This analysis can then inform
further actions such as collecting more samples.
EasyVVUQ currently has support for variance-driven sensitivity analysis, stochastic
collocation and polynomial chaos expansion methods, as well as more basic statistical analysis
methods such as bootstrapping. Additionally, all components of EasyVVUQ are easily extensible,
allowing users to customize every stage of the VVUQ workflow to suit their needs. Nevertheless,
for many applications the built-in components provide out-of-the-box functionality, requiring the
user only to define input and output formats and perform analysis.

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Figure 1. Overview of the main components, and their role within the VECMA toolkit.

(b) FabSim3

6

Base
components

Campaign
Formats

Patterns

VVPs
UQPs

GSISSH
SSH

Patterns:
• Need to be generic.
• No FabSim3 deps.
• To be plugged into
directly into FabSim
and used by other
components.
FabFlee

Backends

QCG
<machine>

Plugins

FabMD
FabMUSC
FabDummy

Figure 2. High-level overview of the FabSim3 architecture, showcasing a few of the key plugins, patterns and back-end
functionalities available in the tool. Boxes in green are completed, while boxes in yellow are working, but subject to further
extensions and improvements.

In the context of VECMAtk, FabSim3 plays a key role in introducing application-specific
information in the Execution Layer, enabling users to combine different UQPs and VVPs, and
providing an approach to curate large sets of production runs. Also, FabSim3 can use QCG-Client
or QCG-SDK to submit ensemble runs via a "pilot job" mechanism [51,60] (see Subsection ii),
which boosts efficiency by starting and managing sub jobs without each of them needing to
individually wait for resources to become available.

(c) MUSCLE 3
The third version of the Multiscale Coupling Library and Environment [27] [28] (MUSCLE 3) is
intended to simplify the coupling of temporally or spatially scale-separated submodels into a
single (distributed) simulation. At run-time, the submodels are started in parallel, and exchange
information via the network. Submodels and other simulation components are unaware of each
other as MUSCLE 3 delivers the messages to receivers given in a configuration file. The Multiscale
Modelling and Simulation Framework (MMSF, [29,30]) may be used to determine how the
submodels should be coupled given their relative spatial and temporal scales.
MUSCLE 3 supports time-scale separated macro-micro couplings, including automatically rerunning the micro model as often as needed to match the macro model’s time steps. It also
7

https://github.com/djgroen/FabSim3

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

FabSim37 [25] is a Python-based toolkit for automating complex computational research activities
which has several aims: First it helps to automate and simplify the creation, management,
execution and modification of complex application workflows. To do so, FabSim3 supports
functionalities such as ensemble runs, remote executions, iterative processing and code couplings.
Second, it aims to help researchers become quicker and more systematic in handling complex
applications in particular. To support this, FabSim3 is designed to be easy to customize for use
on new machines and with new simulation codes, and automatically curates a wide range of
environment and state variables to aid the testing and debugging of application runs. As usage
examples, researchers may want to run and rerun static configurations, run a range of slightly
different workflows, define new types of complex applications altogether or construct a routine
to automatically validate their code.
FabSim3 also supports a range of adaptable mechanisms for code coupling, and domainagnostic code patterns that provide building blocks for enabling VVUQ in new applications. We
provide an overview of the FabSim3 architecture in Figure 2.

(d) QCG Tools
The QCG suite of tools help to facilitate advanced workflows, and the process of design and
execution of applications, using HPC infrastructures. Four specific QCG components form part
of VECMAtk: QCG-Client, QCG-PJ, EQI and QCG-Now, which we now describe in turn.

(i) QCG-Client
QCG-Client is a command line tool to access remote computing infrastructure. The tool allows
submission of different types of jobs, including complex workflows, parameter sweep tasks and
array jobs, on single or multiple clusters. It uses the QCG-Broker service to manage the execution
of workflows, e.g. through multi-criteria selection of resources. QCG-Client can be deployed as
a container and is in this form integrated with FabSim3. This allows users to select from both
command-line tools, QCG-Client and FabSim3, when they access QCG services.

(ii) QCG Pilot Job (QCG-PJ)
To perform UQ procedures, we must be able to flexibly and efficiently execute a large number of
simulations. This is because we need a large and dynamically created parameter-space, which
in turn feeds into an ensemble of model executions to get statistically correct results. Within
VECMAtk, we use QCG-PilotJob (QCG-PJ) by default to fulfil this requirement, primarily because
it can be installed automatically by users without admin rights, and because of its scalability and
limited dependency footprint. For instance, QCG-PJ can be set up by users without requiring
other components from the QCG environment.
QCG-PJ is designed to schedule and execute many small jobs inside one scheduling system
allocation on an HPC resource. Direct submission of a large group of jobs to a scheduling system
can result in a long completion time as each single job is scheduled independently and waits in
a queue. In addition, the submission of a group of jobs is often restricted (and sometimes even
prohibited) by system administrators. Some systems do support bespoke job array mechanisms,
but these mechanisms normally only allow jobs with identical resource requirements. Jobs that
are part of a multiscale simulation or application workflow by nature vary in requirements and
therefore need more flexible solutions.
To use QCG-PJ a user submits a job with a QCG-PJ Manager instance, which is executed
like a regular job. However, unlike regular jobs this job internally manages a user-defined
workflow consisting of many sub-jobs. The manager executes commands to submit jobs, cancel
jobs and report resources usage; it may either be preset or listen dynamically to requests from
the user. QCG-PJ then manages the resources and jobs in the system, taking into account resource
availability and mutual dependencies between jobs. Users can interact with QCG-PJ either using
a file-based or network-based interface. The file-based approach works well for static scenarios
where the number of jobs is known in advance, while the network interface allows users to
dynamically send new requests and track execution of previously submitted jobs at run-time.
Although intended for HPC resources, QCG-PJ Manager also supports a local execution mode
to allow users to test their scenarios on their own machines (with requiring a scheduling system
allocation).

7

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

supports space scale separation, which entails coupling a single macro model to a set of micro
models, via support of sets of multiple submodel instances and special vector ports that can be
used to communicate with them. Model settings (parameters and technical configuration) are
put in the single configuration file, and are transmitted to the individual instances automatically.
Components may be inserted into the simulation that generate a parameter overlay, which
combined with vector ports and sets of instances yields an ensemble for e.g. UQ. MUSCLE 3
supports a range of UQPs, including those for semi-intrusive UQ [31,57]. With MUSCLE 3, this
can be done by changing the configuration file to add a few more components and modifying the
connections; the submodels can remain unaltered.

(iii) EQI

(iv) QCG-Now
Since the traditional command-line interfaces may be perceived by many users to be too
complicated, within VECMAtk we decided to provision a easy-to-use graphical tool for users.
QCG-Now is graphical desktop program that enables the submission and management of jobs
on HPC resources. It also supports automatic notifications, data sending and receiving. Since the
first release of QCG-Now last year, several improvements have been made: for instance it is now
integrated with the QCG-Monitoring system which allows users to track progress of execution
of their tasks directly from its graphical interface. This capability is particularly important for
VECMAtk users who want to keep track of the progress of long-lasting executions of EasyVVUQ
and QCG-PJ workflows. Another new feature allows users to store frequently used execution
schemes as quick templates for easy reuse. We present a graphical demonstration of the tool in
Fig. 3.

Figure 3. QCG-Now with the embedded QCG-Monitoring view. The integration with QCG-Monitoring allows users to track
progress of execution of applications in a graphical way, for example presenting dynamically updated tables, images or,
as in this screenshot, charts.

8

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Many workflows involving EasyVVUQ require a large number of jobs to be executed, and
EasyVVUQ delegates this responsibility to other tools (either existing, or user created). QCGPJ is the main tool available in VECMAtk to fulfil that purpose, and it offers a flexible but generic
API that is less appropriate for specific use cases. To provide an API that is specifically adjusted
to EasyVVUQ, we have developed EQI, which is an acronym for the (E)asyVVUQ-(Q)CG-PJ
(I)ntegration API. This API introduces domain-oriented concepts, such as predefined tasks for
execution and encoding, that facilitate the easy integration of EasyVVUQ workflows with QCGPJ. With the API, users can perform VVUQ computations with QCG-PJ, invoking HPC resources.
The development life-cycle of EQI is synchronized with the releases of both EasyVVUQ and
QCG-PJ, to ensure a persistently up-to-date API.

(e) VECMAtk workflows

Figure 4. “Tube map” showing which VECMAtk components are used in the various exemplar applications. VECMAtk
components are given in boxes, and the application tutorials are indicated using coloured lines. Note that code using
the EasyVVUQ [24] library may be located either on the local desktop for ease of use or on a remote HPC resource for
improved performance. Source: https://www.vecma-toolkit.eu/toolkit/

Up to now, the following combinations have been particularly common:
• FabSim3 + QCG-Client : enables users to submit their job to QCG-Broker to schedule them
across multiple remote (QCG-supporting) machines. Additionally, FabSim3 tool support
other job scheduling system such as SLURM 8 , Portable Batch System (PBS) 9 .
• FabSim3 + EasyVVUQ : enables users to automate the VVUQ processes into their
applications workflow. After creating their EasyVVUQ campaigns, users can convert
them to FabSim3 ensembles using a one-liner (campaign2ensemble) command and
submit the ensemble jobs through FabSim3. Then they convert results back to EasyVVUQ
using the ensemble2campaign command, where it is decoded and further analyzed.
• FabSim3 + QCG Pilot Job : enables users to create and manage pilot jobs using FabSim3
automation.
• EasyVVUQ + QCG Pilot Job + EQI: enables EasyVVUQ users to execute their tasks
directly using pilot jobs.
There are also several examples of integrations with third party components. For instance,
there is an application example that uses the mogp emulator in place of EasyVVUQ 10 , and
a working EasyVVUQ example that relies on Dask instead of QCG-PilotJob 11 for ensemble
job submission. Other integration are indeed possible as well, and the inclusion of a different
job management and execution engine may be beneficial for individual applications and/or
resources. To name a few examples, RADICAL-Cybertools can offer exceptional performance on
machines where it is set up [11], Swift/T [15] can facilitate complex data flows with minimal
8

https://slurm.schedmd.com/overview.html
https://www.pbspro.org/
https://github.com/alan-turing-institute/mogp_emulator
11
https://easyvvuq.readthedocs.io/en/dev/dask_tutorial.html
9

10

9

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

In Figure 4 we show the main components and a few examples as to how they have been
combined, leveraging added values where relevant whilst maintaining a limited deployment
footprint. These components can be combined, but also integrated with third party components.

5. Exemplar applications
With VECMAtk we aim to provide a toolkit that can be applicable to any domain/application
where UQ and SA are required, and computational modelling and simulation can be applied.
To achieve this aim, we rely on an increasing number of leading-edge scientific applications to
support the testing and development of the toolkit. Within this paper, we present a selection
of these applications which cover the following topics: (a) future energy sources, (b) human
migration, (c) climate, (d) advanced materials, (e) urban air pollution and (f) biomedicine and
(g) epidemiology. For each application we show how the toolkit provides added value in terms
of enabling UQ. In addition, we describe how we use Verification and Validation Patterns
(VVPs) to help facilitate V&V for the first two applications. In each of these concise application
descriptions, we focus on how VECMAtk is being used by a range of different applications, which
components are primarily employed/invoked, and what primary benefits the toolkit delivers for
the application users.

(a) Fusion
Thermonuclear fusion has the potential of becoming a new source of energy that is carbon-free.
The dynamics of fusion plasmas span a wide range of scales in both time and space, as for
example micro-instabilities formed in plasma turbulence can interrupt the overall macroscopic
transport and destroy confinement. To simulate such phenomena, we have built a multiscale
fusion workflow that includes equilibrium, turbulence and transport physics to model the plasma
dynamics [32].
Our central purpose is to ensure that the results are reproducible and can become a
reliable representation of the experiment measurements. To achieve this, it is key to use VVUQ
approaches.

Figure 5. “Tube map” showing which VECMAtk components are used by the Fusion application.

10

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

serialization while Parsl [14] is optimised for the fast and flexible execution of Python programs
and Jupyter notebooks.
As indicated in Fig. 1 earlier, there are four components that provide a suitable entry point
for new users to the toolkit. EasyVVUQ facilitates users that initially focus on incorporating
VVUQ in their simulations. FabSim3 is aimed at users that initially focus on enabling complex and
curated workflows, which could involve ensemble or dynamic execution. QCG-Now is intended
for users that prefer a graphical interface for managing their simulations and VVUQ workflows.
And MUSCLE3 is well-suited for users whose primary concern is multiscale code coupling.

(b) Forced human migration
Forced migration reached record levels in 2019, and forecasting it is challenging as many forced
population data sets are small and incomplete, and armed conflicts are often unpredictable in
nature [33]. Nevertheless, forced migration predictions are essential to improve the allocation of
humanitarian support by governments and NGOs, to investigate the effects of policy decisions
and to help complete incomplete data collections on forced population movements. Through
the use of the FLEE 12 agent-based simulation code, we model and forecast the distribution of
incoming refugees across destination camps for African countries [34].
The VECMA toolkit provides us with the ability to automatically construct, execute and
analyse ensemble simulations of refugee movements [35], to efficiently compute the sensitivities
of key parameters in our simulation [36], to couple different types of models to form multiscale
workflows [38] and to facilitate the rapid execution of large job ensembles on supercomputers. We
also use a VVP named EnsembleValidation to systematically validate our simulations against
data from a range of conflicts (see e.g. here [37]). This VVP performs a validation on the output
directory of each run and uses an aggregation function to combine all output validation results
into a combined metric.
We summarize our main application workflows in Figure 6. We rely on the FabFlee plugin
in FabSim3 to automate the simulation activities required to analyse different policy decisions,
to provide the VVP functionality and to facilitate coupling with other models and data sources.
Examples include an acyclic coupling to a conflict model [38], but we are also working on a cyclic
macro-micro model for the South Sudan conflict. We also use EasyVVUQ with FabFlee to perform
sensitivity analyses for varying agent awareness levels, speed limits of refugee movements,
location move chances and other simulation parameters [36]. Lastly, we use QCG Pilot Job to
facilitate the very large number of runs required to do this analysis, which is required for our
more advanced workflows that so far involved up to 16,384 jobs.

(c) Climate
For climate modelling, the range of space and time scales present in (geophysical) turbulent flow
problems poses challenges, as this range is too large to be fully resolved in a numerical simulation.
As such, micro scale effects on the resolved macroscopic scales must be taken into account by
empirical parameterizations, see e.g. [39]. These parameterizations often involve a number of
coefficients, for which the value is only known in an approximate manner. In addition, they are
subject to so-called model error or model-form uncertainty, which is the uncertainty introduced
due to the assumptions made in the mathematical form of the parameterization scheme.
Within VECMA we focus on the uncertainty in time-averaged climate statistics of geophysical
flow models, due to various assumptions made in the parameterizations. EasyVVUQ allows us to
asses the uncertainty in the output statistics due to the imperfectly known coefficients. In addition,
we currently use EasyVVUQ for uncertainty quantification of an established local atmospheric
12

https://github.com/djgroen/flee-release

11

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

We integrated UQ methods using the EasyVVUQ library and performed a parallel execution
of samples in a single batch allocation with QCG-PJ through the EQI. Those tools, available as
part of the VECMA toolkit (see Figure 5) and in conjunction with the coupled workflow nature of
the fusion application, have proven to be simple to use and to allow a large variety of experiments
with different methods and models (please see [52] for further details). We also performed a
validation using the ValidationSimilarity VVP, which is implemented in EasyVVUQ and
help us find similarities between the probability distributions of the quantities of interest in our
simulation results and in the experimental measurements [53]. For this purpose we can choose
between several relevant metrics, such as Hellinger distance [55], Jensen–Shannon distance which
is a symmetrized and smoothed version of the Kullback–Leibler divergence [56] and Wasserstein
metrics [54].

12

given in boxes which enable users to include their added values while retaining a limited deployment footprint. The black
and grey lines define the FabFlee path using VECMAtk components for execution.

Figure 7. A Tube Map showing the VECMA components used in the climate application. Here "FabUQCampaign" is a
plugin used to run an ensemble of EasyVVUQ samples on HPC resources. Furthermore, "ADE" and "Ocean2D" are two
example applications (advection diffusion equation and a two-dimensional ocean model) for which tutorials can be found
in [44].

model, DALES [40,41], which is used to simulate atmospheric processes including turbulence,
convection, clouds, and rain. Here, we quantify the uncertainty in model output from different
sources, including uncertain physical input parameters, model choices and numerical settings,
and the stochastic nature of turbulence modelling. To run the EasyVVUQ ensemble of simulations
on HPC resources we use FabSim3, see Figure 7. To address the more fundamental model-form
uncertainty we are currently investigating the use of data-driven stochastic surrogates to replace
traditional deterministic parameterizations; see e.g. [42,43] for recent results.

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Figure 6. Tube Map showing which VECMAtk components are used in the FabFlee plugin. VECMAtk components are

(d) Advanced materials

(e) Urban air pollution
Predicting air quality in complex urban areas is a challenging field where researchers need to
balance accuracy against a practical turnaround time. There are numerous models for predicting
contamination transport and dispersion, ranging from simple Gaussian models (that are fast and
cheap but not necessarily accurate) to computational fluid dynamics simulations that are slower,
more costly and potentially very accurate.
In all cases the most important, and often missing part, is an accurate emission database that
contains pollutant emission rates for different types of sources: point (e.g. industrial chimneys),
line (e.g. road transportation) and areas (e.g. house heat appliances). The pollutants we consider
are N O2 /N Ox , SO2 and two types of particulate matter (also known as floating dust): P M2.5
for particles 2.5µm or less in diameter and P M10 for particles 10µm or less in diameter. We
use a mesoscale weather prediction model WRF [47] and an all-scale geophysical flow solver
EULAG [48] in our multiscale simulation [49] to address uncertainties coming from incomplete
emission database, and to provide a quantitative air quality prediction [50].
We use VECMAtk to automate sampling, ensemble generation, execution of simulation codes
on HPC machines, collating results and post-execution analysis. This automation simplifies the
provision of better prediction results, because we analyze many different initial conditions and
can automatically provide mean results (or some weighted ones) from all simulations. We are also
able to run sensitivity analysis of the input parameters to identify and select the most important
ones, thus limiting the number of required ensembles for future runs.
In terms of tools we rely on EasyVVUQ, coupled with QCG-PJ using EQI. Using Python
we define the parameter space to be sampled, application to be run in HPC environment,
hardware requirements (e.g. number of nodes and cores), and the parameters to be analysed after
simulations ended. We then use QCG client and QCG-PJ to submit and control jobs on the HPC
resources, EasyVVUQ to generate the samples, EQI for enabling the samples to be executed with
QCG-PJ and EasyVVUQ to analyze the results. We summarize our workflow in Figure 8.

(f) Biomedicine
In-stent restenosis (ISR) is the renewed occurrence of arterial stenosis (narrowing of an artery)
after it was initially treated by installing a metal stent, as a result of excessive cell growth. The
results of uncertainty and sensitivity analysis for a two-dimensional model of in-stent restenosis
(ISR2D) are presented in [61]. Improved effectiveness of uncertainty propagation was achieved
by applying a semi-intrusive metamodelling method and the results are demonstrated in [62]
and in [63].
13

https://www.mgi.gov/

13

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Developing novel advanced materials can be a very expensive and time consuming process,
often taking over 20 years from initial discovery to application 13 . Chemical and material
modelling techniques are well developed for single scales, but engineering applications require
understanding across many scales [45,46,67]. Making actionable predictions with these modelling
techniques, to improve on the laborious experimental development process, will require
harnessing multiple simulation techniques and providing tight error bars on their predictions.
Using VECMAtk, one can generate, execute, collate, and analyse ensemble simulations of
mechanical tests in an automatic fashion. This allows us to effectively gather statistics on a system
of interest and explore an input parameter space with minimal human oversight.
To do this we use EasyVVUQ to explore an input parameter space by generating ensembles
of simulations and to collate the results into an easily analysable object. To distribute the large
number of simulations to be run in each ensemble, we use FabSim3 to automate the submission
of jobs on remote HPC resources.

14

Current research on the design of the UQ and SA experiments for the three-dimensional
model of the ISR model (ISR3D) is ongoing. The ISR3D model is implemented using MUSCLE 3
discussed in Section 4(c), which allows performing more advanced semi-intrusive algorithms. In
particular, we plan to train a metamodel on the fly and combine that with a cross-validation test
of the effect of the approximation error on the results of the micro model.

(g) Coronavirus modelling
Since 2019, the world has been severely affected by the spread of the SARS-CoV-2 coronavirus,
and the COVID-19 disease it causes. Although many models are able to approximate the viral
spread on the national level, few solutions are available to forecast the spread on a local level,
e.g. in towns or city boroughs. Within the HiDALGO project 14 we are working on the Flu And
Coronavirus Simulator (FACS) 15 to help address this challenge.
We use VECMAtk primarily to systematically validate the code, analyse parameter
sensitivities, execute ensemble simulations to account for aleatory uncertainty in the code, and
to easily produce ensemble forecasts which involve a wide range of scenarios, applied to a range
of boroughs in London.
To achieve this, we primarily rely on FabCovid19, which is a FabSim3 plugin, as well as QCGPJ. Both tools combined allow us to automate these tasks, and seamlessly create, run and postprocess ensemble simulations. We also use EasyVVUQ to analyse parameter sensitivities, which
we present in the next subsection.

(h) Demonstration of a single example VVUQ analysis: COVID-19
application
To demonstrate the added value offered by VECMAtk more concretely, we showcase one specific
VVUQ procedure example, using the Flu And Coronavirus Simulator. We perform sensitivity
analysis across six different input parameters of FACS to identify their sensitivity relative to our
quantity of interest (QoI). In Table 1 we provide the default value for each parameter along with
the range of likely values. We use the Chaospy library16 in EasyVVUQ to generate samples from
the input parameters. Specifically, in this example we used the stochastic collocation method with
a sparse-grid sampling plan of 15,121 samples, which we then convert to simulation inputs using
14
15
16

http://hidalgo-project.eu
https://facs.readthedocs.io
https://pypi.org/project/chaospy/

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Figure 8. “Tube map” showing which VECMAtk components are used by the UrbanAir application.

Parameters
infection rate
mortality period
recovery period
mild recovery period
incubation period
period to hospitalisation

Type
float
float
float
float
float
float

Default value
0.07
8.0
8.0
8.05
3.0
12.0

Uniform range
(0.0035, 0.14)
(4.0, 16.0)
(4.0, 16.0)
(4.5, 12.5)
(2.0, 6.0)
(8.0, 16.0)

Table 1. Defining parameter space for the uncertain parameters of the Flu And Coronavirus Simulations (FACS).

We present the first-order Sobol sensitivity indices for each parameter in Table 1 and in Figure
9. These global sensitivity indices [64] measure the fraction of the output variance (over time here),
that can be attributed to a single input parameter. During the first twenty days, all parameters
except for the (non-mild) recovery period have a significant effect on the number of deaths.
However, as the simulation progresses, the number of deaths is mainly sensitive to the infection
rate (which describes how quickly the infection spreads) and the mild recovery period (which
describes how long people with mild COVID remain ill and infectious).

First order Sobol index

1

infection rate
mortality period
recovery period
mild recovery period
incubation period
period to hospitalisation

0.8
0.6
0.4
0.2
0
0

20

40

60

80

100

120

140

160

180

Days
Figure 9. The first order Sobol indices for each of the uncertain parameters of the Flu And Coronavirus Simulations
(FACS) for the London Borough of Brent.

6. Toolkit performance and scalability
The VECMA toolkit has been developed for use with large supercomputers, and therefore needs
to be both fast and scalable. In this section, we present a range of key performance aspects of
the toolkit, and discuss the advantages and limitations of VECMAtk in terms of scalability and
exascale readiness.
The main performance-critical aspects of the toolkit involve:
(a) The sampling of parameter values and creation of large numbers of simulation inputs.
(b) The submission, execution and retrieval of large ensembles of simulation jobs.
(c) The efficient movement of data between local and remote resources.

15

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

the EasyVVUQ encoder, and submit to the HPC resource using FabSim3. Once execution has
concluded, we then decode and collate the results and perform a Sobol sensitivity analysis relative
to our QoI (number of deaths over time).

(d) The efficient movement of data between coupled models.

16

Execution Time

10
15
8
6

10

4
5
2
0

0
1

2

3

4

5

6

Number of Threads

12

24

36

SpeedUp

200

15

150
10
100

SpeedUp

12

20

Elapsed Time (Minutes)

SpeedUp

SpeedUp

Elapsed Time (Minutes)

Execution Time

5

50

0

0
1

2

3

4

5

6

12

24

36

Number of Threads

(a) ensemble size = 15121, QCG-PilotJob= True (b) ensemble size = 4865, QCG-PilotJob= False
Figure 10. Time required to submit 15121/4865 jobs with FabSim3 (with/without QCG-PJ) relative to the number of job
submission threads used. Graph is made using average of 10 repetition of each ensemble size. Please note that, here we
only measure the job submission overhead, so, queuing time and job execution on computing nodes are not considered
in our test.

For FabSim3 ensembles without the use of QCG-PJ, we find that the job submission overhead is
2-3 seconds per job when using a single thread, but decreases to less than a second per job when
17

See VECMA Deliverable 5.2: https://www.vecma.eu/wp-content/uploads/2019/12/VECMA_D5.2_First-ReportInfrastructure_PSNC_20191208.pdf
18
https://github.com/djgroen/FabCovid19
19
The maximum number of jobs a user can have running and pending at a given time is 5000. If this limit is reached, new
submission requests will be denied until existing jobs in this association complete.

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

We will now briefly discuss the performance-related characteristics of VECMAtk in relation to
these four potential bottlenecks:
Sampling parameter values and creating large numbers of simulation inputs. There are
multiple ways in which EasyVVUQ helps with the issues involved in sampling many and
expensive simulation outputs. First of all, EasyVVUQ uses an SQL backend database that can
handle 10000s of samples or more. It also tracks the status of job execution, allowing users to
cope with hardware failures by restarting failed jobs without having to rerun successful ones.
Furthermore, EasyVVUQ allows one to sample in stages - appending more samples if results are
not yet sufficiently robust, without losing the results already in the database. Lastly, EasyVVUQ
can delegate the ensemble job submission to other scalable components, such as Dask or QCG-PJ.
These components then execute part or all of the simulations on HPC resources.
Submission and execution management of large ensembles of simulation jobs. Many
scientific applications need to run large ensemble simulations (1000+ runs) to perform UQ and
SA, which cannot be executed as individual jobs on most supercomputers due to scheduler
constraints, and require a pilot job mechanism such as QCG-PJ. QCG-PJ has been shown to
efficiently execute 10000 jobs with less than 10% overhead, even if those jobs only last for one
second each 17 .
To improve the FabSim3 ensemble submission performance, we integrated it with QCG-PJ
and enabled multi-threaded job submission from the local machine. To demonstrate the benefit
of this, we measured the total elapsed time of the job submission to a remote machine for the
epidemiology 18 application. Due to limitation of maximum number of submited job per user 19
on the Eagle supercomputer, we use ensembles sizes of 4,865 and 15,121 runs, and use up to 36
threads for the submission process. We enabled pilot jobs for the larger ensemble, but not for the
smaller ensemble. We present the results of this scalability test in Figure 10.

Usability

FabSim3 only
FabSim3 + QCG-PJ
QCG-PJ only

excellent
excellent
good

remote
file stage?
yes
yes
no

remote
deployment?
Not needed
user-space only
user-space only

submission overhead
per 100 jobs
per 1000 jobs
40-90s
not attempted
33-36 s
250-300 s
<5 s
40 s

Table 2. Comparison of the three main ensemble job submission approaches in VECMA, in terms of general usability,
whether files are staged to and from the remote resource as part of the approach, the need for remote deployment work,
and the overall performance.

using four or more threads. When using FabSim3 with QCG-PJ, the job submission overhead
reduces by a factor 2 for ensembles with 100 jobs to about 0.35 seconds per job. The overhead
further diminishes for larger ensembles, as we measure an overhead of about 0.275 seconds per
job for ensembles with 1000 jobs. In Table 2 we compare the three main ensemble submission
approaches in VECMA in terms of performance, usability and in regards to the need of any remote
deployment.
Efficient movement of data between local and remote resources. Large simulations, as
well as large ensembles of smaller simulations, are often accompanied by the production of
large amounts of complex data. Within the VECMA project, we find that the organising and
re-organising of this data is a cognitively intensive task that is prone to human error if not
automated. Both the FabSim3 and EasyVVUQ tools provide a range of data structure conventions
that transparently automate low-level data management aspects, allowing users to focus on
the complexities that occur at higher levels. For instance, FabSim3 automatically curates input
and output and while EasyVVUQ automates the encoding and decoding of simulation files. In
addition, FabSim3 and QCG-Client automatically perform file staging to and from HPC resources.
In terms of performance, we chose to focus less on optimising file transfer rates (although
FabSim3 and QCG-Client do support GridFTP), and more on limiting the number of file transfers
altogether. The clearest example of this optimisation is the tight integration of EasyVVUQ directly
with QCG-PJ. Using EQI, users can use HPC resources to generate, run and analyse their
simulation ensembles for VVUQ purposes, and do this iteratively and dynamically within a
single Python script. In this way, all the computations are brought to where the data is, and input
files only need to be staged in once in advance, even if the workflow contains a large number of
(dynamic) iterations.
The efficient movement of data between coupled models. MUSCLE 3 is primarily positioned
to address this bottleneck, and provides added value for instance by eliminating the need for file
I/O in the coupling.

7. Conclusions
In this paper we have presented the VECMA toolkit for the verification, validation and
uncertainty quantification (VVUQ) of single and multiscale applications. As showcased by the
wide range of applications that use the toolkit already, VECMAtk is unique in its ability to
combine a wide range of VVUQ procedures with a streamlined automation approach, and
trivially accessible capabilities to execute large job ensembles on pre-exascale resources. In
addition, VECMAtk components can be flexibly combined, allowing users to take advantage of
parts of the toolkit while retaining a very limited deployment footprint.
As part of this paper, we have described a number of exemplar applications from a diverse
range of scientific domains (fusion, forced migration, climate, advanced materials, urban air
pollution, biomedical simulation and coronavirus modelling), all used by researchers today.

17

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Approach

Data Accessibility.
Authors’ Contributions.
Competing Interests. The authors declare that they have no competing interests.
Funding. This work was supported by the VECMA project, which has received funding from the
European Union Horizon 2020 research and innovation programme under grant agreement No 800925.
The development of MUSCLE3 and its respective description was supported by the Netherlands eScience
Center and NWO under the e-MUSC project. The development of the migration and coronavirus modelling
applications was supported by the EU-funded HiDALGO project (grant agreement No 824115). The
calculations were performed in Poznan Supercomputing and Networking Center.

Acknowledgements.

18

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

All these examples are open source and accompanied with tutorials on http://www.vecmatoolkit.eu/, allowing new users to exploit them as building blocks for their own applications.
Through the VECMA toolkit, we aim to make VVUQ certification a standard practice and
to make it simpler to quantify uncertainties, parameter sensitivities and errors in scientific
simulations. VECMAtk is used to establish these procedures irrespective of the application
domain, allowing key VVUQ algorithms to be reused across disciplines. Because VVUQ is
essential to ensure that the key simulation results are indeed actionable, the VECMA toolkit is
an important tool to help ensure that scientific simulations can be responsibly used to inform
decision-making.

References

19

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

1. Roy CJ, Oberkampf WL. 2011. A comprehensive framework for verification, validation, and
uncertainty quantification in scientific computing. Computer methods in applied mechanics and
engineering 200(25-28), pp. 2131–2144. Elsevier. (doi:10.1016/j.cma.2011.03.016)
2. National Research Council of the National Academies. 2012. Assessing the reliability of
complex models: Mathematical and statistical foundations of verification, validation, and
uncertainty quantification. National Academies Press. (doi:10.17226/13395)
3. Schwer LE. 2009. Guide for verification and validation in computational
solid mechanics. In the 20th International Conference on Structural Mechanics
in
Reactor
Technology.
The
American
Society
of
Mechanical
Engineers.
https://repository.lib.ncsu.edu/bitstream/handle/1840.20/23659/3_paper_2010
4. Oberkampf WL, Roy CJ. 2010. Verification and validation in scientific computing. Cambridge
University Press. (doi:10.1017/CBO9780511760396)
5. Simmermacher T, Tipton G, Cap J, Mayes R. 2015. The Role of Model V&V in the Defining
of Specifications. In the Conference Proceedings of the Society for Experimental Mechanics
Series (eds H Atamturktur, B Moaveni, C Papadimitriou, T Schoenherr). Model Validation and
Uncertainty Quantification, Volume 3. pp. 257–263. Springer, Cham. (doi:10.1007/978-3-31915224-0_27)
6. Adams BM, Bohnhoff WJ, Dalbey KR, Eddy JP, Eldred MS, Gay DM, Haskell K, Hough
PD, Swiler LP. 2009. DAKOTA, a multilevel parallel object-oriented framework for design
optimization, parameter estimation, uncertainty quantification, and sensitivity analysis:
version 5.0 user’s manual. Sandia National Laboratories, Tech. Rep. SAND2010-2183.
(doi:10.2172/991841)
7. Lin G, Engel DW, Eslinger PW. 2012. Survey and evaluate uncertainty quantification
methodologies. Pacific Northwest National Lab.(PNNL), Richland, WA (United States).
(doi:10.2172/1035732)
8. Foley SS, Elwasif WR, Bernholdt DE, Shet AG, Bramley R. 2010. Many-task applications in the
Integrated Plasma Simulator. In the 3rd Workshop on Many-Task Computing on Grids and
Supercomputers. pp. 1–10 IEEE. (doi:10.1109/MTAGS.2010.5699425)
9. Elwasif WR, Bernholdt DE, Pannala S, Allu S, Foley SS. 2012. Parameter sweep and
optimization of loosely coupled simulations using the DAKOTA toolkit. In the 15th
International Conference on Computational Science and Engineering. pp. 102–110. IEEE.
(doi:10.1109/ICCSE.2012.24)
10. Baudin M, Dutfoy A, Iooss B, Popelin A. 2015. Open TURNS: An industrial software
for uncertainty quantification in simulation. Handbook of uncertainty quantification (eds R
Ghanem, D Higdon and H Owhadi). Springer. https://arxiv.org/abs/1501.05242
11. Balasubramanian V, Jha S, Merzky A, Turilli M. 2019. Radical-cybertools: Middleware
building blocks for scalable science. arXiv preprint. https://arxiv.org/abs/1904.03085
12. Gattiker JR. 2008. Gaussian process models for simulation analysis (GPM/SA) command,
function, and data structure reference. Los Alamos National Laboratory, Technical Report
LA-UR-08-08057. https://www.lanl.gov/org/docs/gpmsa-command-ref.pdf
13. Gattiker J, Myers K, Williams B, Higdon D, Carzolio M, Hoegh A. 2017. Gaussian processbased sensitivity analysis and Bayesian model calibration with GPMSA. Handbook of
uncertainty quantification. pp. 1-41. Springer, Cham. (doi:10.1007/978-3-319-11259-6_58-1)
14. Yadu Babuji, Anna Woodard, Zhuozhao Li, Daniel S. Katz, Ben Clifford, Rohan
Kumar, Lukasz Lacinski, Ryan Chard, Justin M. Wozniak, Ian Foster, Michael Wilde,
and Kyle Chard. 2019. Parsl: Pervasive Parallel Programming in Python. In Proceedings
of the 28th International Symposium on High-Performance Parallel and Distributed
Computing (HPDC ’19). Association for Computing Machinery, New York, NY, USA, 25–36.
(doi:10.1145/3307681.3325400)
15. Wozniak, J. M., T. G. Armstrong, M. Wilde, D. S. Katz, E. Lusk, and I. T. Foster. 2013. “Swift/T:
Large-Scale Application Composition via Distributed-Memory Dataflow Processing.” In 2013
13th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing, 95–102.
(doi:10.1109/CCGrid.2013.99).
16. Tennøe S, Halnes G, Einevoll GT. 2018. Uncertainpy: A python toolbox for uncertainty
quantification and sensitivity analysis in computational neuroscience. Frontiers in
Neuroinformatics 12 (49), pp.1–29. Frontiers. (doi:10.3389/fninf.2018.00049)

20

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

17. Lawrence Livermore National Laboratory. 2016. Non-Intrusive Uncertainty Quantification:
PSUADE. https://computing.llnl.gov/projects/psuade-uncertainty-quantification
18. Hittinger JA, Cohen BI, Klein RI. 2010. Uncertainty Quantification in the Fusion Simulation
Project Verification and Validation Activity. Lawrence Livermore National Laboratory.
(doi:10.2172/1119966)
19. Brown JD, Heuvelink GBM. 2007. The Data Uncertainty Engine (DUE): A software tool for
assessing and simulating uncertain environmental variables. Computers & Geosciences 33(2). pp.
172–190. Elsevier. (doi:10.1016/j.cageo.2006.06.015)
20. Salvatier J, Wiecki TV, Fonnesbeck C. 2016. Probabilistic programming in Python using PyMC3.
PeerJ Computer Science 2:e55, pp. 1-24. (doi:10.7717/peerj-cs.55)
21. Marelli S, Sudret B. 2014. UQLab: A framework for uncertainty quantification in Matlab. In the
2nd International Conference on Vulnerability, Risk Analysis and Management. pp. 2554–2563.
(doi:10.1061/9780784413609.257)
22. Pianosi F, Sarrazin F, Wagener T. 2015. A Matlab toolbox for global sensitivity
analysis.
Environmental
Modelling
&
Software
70,
pp.
80–85.
Elsevier.
(doi:10.1016/j.envsoft.2015.04.009)
23. Alowayyed S, Groen D, Coveney PV, Hoekstra AG. 2017. Multiscale computing in the exascale
era. Journal of Computational Science 22, pp. 15-25. Elsevier. (doi:10.1016/j.jocs.2017.07.004)
24. Richardson RA, Wright DW, Edeling W, Jancauskas V, Lakhlili J, Coveney PV.
2020. EasyVVUQ: A Library for Verification, Validation and Uncertainty Quantification
in High Performance Computing. Journal of Open Research Software, 8(11), pp. 1-8.
(doi:10.5334/jors.303)
25. Groen D, Bhati AP, Suter J, Hetherington J, Zasada SJ, Coveney PV. 2016. FabSim: Facilitating
computational research through automation on large-scale and distributed e-infrastructures.
Computer Physics Communications 270, pp. 375–385. (doi:10.1016/j.cpc.2016.05.020)
26. Jancauskas V, Lakhlili J, Richardson RA, Wright DW. 2020. EasyVVUQ.
https://github.com/UCL-CCS/EasyVVUQ
27. Lourens V. 2020. MUSCLE 3: The Multiscale Coupling Library and Environment.
https://github.com/multiscale/muscle3
28. Veen LE. and Hoekstra AG. (in press). Easing multiscale model design and coupling with muscle 3
Computational Science – ICCS 2020, Springer
29. Borgdorff J, Falcone J, Lorenz E, Bona-Casas C, Chopard B, Hoekstra AG. 2013. Foundations of
distributed multiscale computing: Formalization, specification, and analysis. Journal of Parallel and
Distributed Computing, 73(4), pp. 465–483. (doi:10.1016/j.jpdc.2012.12.011)
30. Chopard B, Borgdorff J, Hoekstra AG. 2014. A framework for multi-scale modelling. Philosophical
Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences,
372(20130378), pp. 1-13. (doi:10.1098/rsta.2013.0378)
31. Nikishova A, Hoekstra AG. 2019. Semi-intrusive uncertainty propagation for multiscale models.
Journal of Computational Science, 35, pp. 80-90. (doi:10.1016/j.jocs.2019.06.007)
32. Luk OO, Hoenen O, Bottino A, Scott BD, Coster DP. 2019. ComPat framework for multiscale
simulations applied to fusion plasmas. Computer Physics Communications, 239, pp. 126-133.
Elsevier. (doi:10.1016/j.cpc.2018.12.021)
33. Groen D. 2016, Simulating refugee movements: Where would you go? Procedia Computer
Science 80, pp. 2251–2255. (doi:10.1016/j.procs.2016.05.400)
34. Suleimenova D, Bell D, Groen D. 2017. A generalized simulation development approach for
predicting refugee destinations. Scientific Reports 7:13377. (doi:10.1038/s41598-017-13828-9)
35. Suleimenova D, Bell D, Groen D. 2017. Towards an automated framework for agent-based
simulation of refugee movements. In the Proceedings of the 2017 Winter Simulation Conference
(eds WKV Chan, A DAmbrogio, G Zacharewicz, N Mustafee, G Wainer, E Page), pp. 1240–1251.
IEEE, Las Vegas, Nevada. (doi:10.1109/WSC.2017.8247870)
36. Suleimenova D, Arabnejad H, Edeling W, Groen S. (in press). Sensitivity-driven simulation
development: A case study in forced migration. Philosophical Transactions of the Royal Society A.
37. Suleimenova D, Groen D. 2020. How policy decisions affect refugee journeys in South
Sudan: A study using automated ensemble simulations. Journal of Artificial Societies and Social
Simulation 23(1). (doi:10.18564/jasss.4193)
38. Groen D, Bell D, Arabnejad H, Suleimenova D, Taylor SJE, Anagnostou A. 2019. Towards
Modelling the Effect of Evolving Violence on Forced Migration. In the 2019 Winter Simulation
Conference (WSC). pp 297–307. (doi:10.1109/WSC40007.2019.9004683)

21

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

39. Gent PR, Mcwilliams JC. 1990. Isopycnal mixing in ocean circulation models. Journal of Physical
Oceanography, 20(1), pp. 150-155. (doi:10.1175/1520-0485(1990)020<0150:IMIOCM>2.0.CO;2)
40. Heus T, van Heerwaarden CC, Jonker HJJ, Pier Siebesma A, Axelsen S, van den Dries K,
Geoffroy O, Moene AF, Pino D, de Roode SR, Vilà-Guerau de Arellano J. 2010. Formulation of the
Dutch Atmospheric Large-Eddy Simulation (DALES) and overview of its applications. Geoscientific
Model Development, 3(2), pp. 415–444. (doi:10.5194/gmd-3-415-2010)
41. Jansson F, Edeling W, Attema J, Crommelin D. 2020. Assessing uncertainties from physical
parameters and modeling choices in an atmospheric LES model. Phil. Trans. R. Soc. A. (submitted).
42. Edeling W, Crommelin D. 2020. Reducing data-driven dynamical subgrid scale models by physical
constraints. Computers & Fluids. 201, pp. 1–11. (doi:10.1016/j.compfluid.2020.104470)
43. Crommelin D, Edeling W. 2020. Resampling with neural networks for stochastic
parameterization in multiscale systems. arXiv preprint. https://arxiv.org/abs/2004.01457
44. Edeling W, Groen D. 2019. FabUQCampaign. https://github.com/wedeling/FabUQCampaign
45. Vassaux M, Sinclair RC, Richardson RA, Suter JL, Coveney PV. 2020. Toward High Fidelity
Materials Property Prediction from Multiscale Modeling and Simulation. Advanced Theory and
Simulations, 3(1900122), pp. 1-18. Wiley Online Library. (doi:10.1002/adts.201900122)
46. Vassaux M, Richardson RA, Coveney PV. 2019. The heterogeneous multiscale method applied to
inelastic polymer mechanics. Philosophical Transactions of the Royal Society A, 377:20180150.
The Royal Society Publishing. (doi:10.1098/rsta.2018.0150)
47. Chen F, Kusaka H, Bornstein R, Ching J, Grimmond CSB, Grossman-Clarke S, Loridan
T, Manning KW, Martilli A, Miao S, Sailor D, Salamanca FP, Taha H, Tewari M, Wang X,
Wyszogrodzki AA, Zhang C. 2011. The integrated WRF/urban modeling system and its applications
to urban environmental problems. International Journal Climatology, 31, pp. 273–288. Royal
Meteorological Society. (doi:10.1002/joc.215810.1002/joc.2158)
48. Prusa JM, Smolarkiewicz PK, Wyszogrodzki A. 2008. EULAG a computational
model for multiscale flows. Computers & Fluids, 37(9), pp. 1193–1207. Elsevier.
(doi:10.1016/j.compfluid.2007.12.001)
49. Wyszogrodzki A, Miao S, Chen F. 2012. Evaluation of the coupling between mesoscale-WRF and
LES-EULAG models for simulating fine-scale urban dispersion. Atmospheric Research, 118(15), pp.
324–345. Elsevier. (doi:10.1016/j.atmosres.2012.07.023)
50. Wright DW, Richardson RA, Edeling W, Lakhlili J, Sinclair RC, Jancauskas V, Suleimenova
D, Bosak B, Kulczewski M, Piontek T, Kopta P, Chirca I, Arabnejad H, Luk OO, Hoenen O,
Weglarz J, Crommelin D, Groen D, Coveney PV. (in press). Building confidence in simulation:
Applications of EasyVVUQ. Advanced Theory and Simulations. (doi:10.1002/adts.201900246)
51. D. Groen, R. A. Richardson, D. W. Wright, V. Jancauskas, R. Sinclair, P. Karlshoefer,
M. Vassaux, H. Arabnejad, T. Piontek, P. Kopta, et al., 2019. Introducing vecmatk-verification,
validation and uncertainty quantification for multiscale and hpc simulations. International
Conference on Computational Science, pp. 479–492. Springer. (doi:10.1007/978-3-030-227470_36)
52. Lakhlili J., Hoenen O., Luk O.O., Coster D.P. 2020. Uncertainty Quantification for Multiscale
Fusion Plasma Simulations with VECMA Toolkit. In: Krzhizhanovskaya V. et al. (eds)
Computational Science - ICCS 2020. Lecture Notes in Computer Science, vol 12143. Springer,
Cham. (doi:10.1007/978-3-030-50436-6_53)
53. Luk O. O., Lakhlili J., Hoenen O., von Toussaint U., Scott B. D., Coster D.P. 2020 (in press).
Towards validated multiscale simulations for fusion. Phil. Trans. R. Soc. A.
54. Villani, C. 2016. Optimal Transport: Old and New. Springer Berlin Heidelberg: Grundlehren der
mathematischen (ISBN 9783662501801).
55. Nikulin, Mikhail S. 2001. Hellinger distance. Springer New York: Encyclopedia of mathematics
(volume 78).
56. Kullback, S. and Leibler, R. A. 1951. On Information and Sufficiency. The Institute of
Mathematical Statistics: Annals of Mathematical Statistics (22) pp. 79–86.
57. Ye D., Veen L., Nikishova A., Lakhlili J., Edeling W., Luk O., Krzhizhanovskaya V.V., Hoekstra
A.G. (in press). Uncertainty Quantification Patterns for Multiscale Models. Philosophical
Transactions of the Royal Society A.
58. Binois M, Gramacy R, and Ludkovski M. 2018. Practical heteroscedastic gaussian process modeling
for large simulation experiments. Journal of Computational and Graphical Statistics, 27, pp. 808–
821. Taylor & Francis. (doi.org/10.1080/10618600.2018.1458625)
59. Baker E, Barbillon P,Fadikar A, Gramacy R, Herbei R,Higdon D, Huang J, Johnson L,

Appendix A: improvements since first VECMAtk release
In Table 3 we present the fundamental improvements and changes in the development of each
VECMAtk component since the first major release:

22

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

Mondal A, Pires B, Sacks J, and Sokolov V. 2020. Stochastic Simulators: An Overview with
Opportunities. Springer. https://arxiv.org/abs/2002.01321
60. Luckow A, Santcroos M, Weidner O, Merzky A, Maddineni S, Jha S. 2012. Towards a common
model for pilot-jobs. Proceedings of the 21st international symposium on High-Performance
Parallel and Distributed Computing, pp. 123–124.
61. Nikishova A, Veen L, Zun P, Hoekstra AG. 2018. Uncertainty quantification of a multiscale
model for in-stent restenosis. Cardiovascular Engineering and Technology 9 (4) pp. 761–774.
(doi:10.1007/s13239-018-00372-4).
62. Nikishova A, Veen L, Zun P, Hoekstra AG. 2019. Semi-intrusive multiscale metamodelling
uncertainty quantification with application to a model of in-stent restenosis. Phil. Trans R. Soc.
A 377 (2142) 20180154. (doi:10.1098/rsta.2018.0154).
63. Ye D, Nikishova A, Veen L, Zun P, Hoekstra AG. 2020. Non-intrusive and
semi-intrusive uncertainty quantification of a multiscale in-stent restenosis model.
https://arxiv.org/abs/2009.00354
64. Saltelli A, Ratto M, Andres T, Campolongo F,Cariboni J,Gatelli D, Saisana M, and Tarantola S.
2008. Global sensitivity analysis: the primer. John Wiley & Sons. (doi.org/10.1002/9780470725184)
65. Debusschere B, Sargsyan K, Safta C, Rai P and Chowdhary K. 2018. UQTk: A
Flexible Python/C++ Toolkit for Uncertainty Quantification. Sandia National Lab.(SNL-NM),
Albuquerque, NM (United States).
66. Giles M. 2015. Multilevel monte carlo methods. Acta Numerica, 24, p.259.
67. Suter J, Sinclair R and Coveney P. 2020. Principles Governing Control of Aggregation and
Dispersion of Graphene and Graphene Oxide in Polymer Melts. Adv. Mater. 2003213.

VECMAtk
Component

List of improvements and changes in development
• Added support for multi-threaded job management
• Added automated installation and configuration of FabSim3 on
different OS
• Fixed synchronizing/copying for a large number of files and
folders
• Vastly improved the performance of run_ensemble
• Revamped the documentation

EasyVVUQ

•
•
•
•
•
a

Added support for vector-valued quantities of interest
Developed an extensive unit testing suite
Added support for Dask a as an execution back-end
Improved sparse-grid Stochastic Collocation sampler
Dimension-adaptive Stochastic Collocation sampler

https://dask.org

QCG Pilot Job

• Developed the node agent for more efficient launching of jobs
across many nodes
• Added more optimal way of handling iterative jobs
• Increased the test base and test code coverage
• Simplified execution of bash scripts as Pilot Job’s tasks
• Bugfixes for execution of multi-node Pilot Jobs and OMP jobs

MUSCLE3

•
•
•
•
•

EasyVVUQQCGPilotJob

• Provided a new API that simplifies the execution of EasyVVUQ
scenarios using the QCG Pilot Job system.
• Introduced a new mechanism to support custom encoders
usage.
• Made available a detailed tutorial that can be helpful for new
users.

QCG-Now

• Developed an internal view for monitoring of applications
(integration with QCG-Monitoring).
• Provided quick-template functionality for frequently submitted
tasks.

Newly added; contributed by the e-MUSC project
Submodel coupling for spatial and/or temporal scale separation
Submodel instance sets and ensembles
Messages may contain grids, lists, dictionaries and basic types
Support for Python, C++, Fortran and MPI, with tutorials and
API documentation
• Automatic building of its dependencies on a variety of platforms

Table 3. The list of modifications and enhancements in the development of each VECMAtk component since the first
annual release in June 2019

rsta.royalsocietypublishing.org Phil. Trans. R. Soc. A 0000000
..................................................................

FabSim3

23

