Dissecting contact tracing apps in the Android platform
Vasileios Kouliaridis1 , Georgios Kambourakis2 , Dimitrios Geneiatakis2 , and Hua
Wang3

arXiv:2008.00214v3 [cs.CR] 21 Sep 2020

1

Department of Information & Communication Systems Engineering, University of
the Aegean, Greece
2
European Commission, Joint Research Centre (JRC), 21027 Ispra (VA), Italy
3
Centre for Applied Informatics, Victoria University, Melbourne, Australia

Abstract: Contact tracing has historically been used to decelerate the spread of infectious
diseases, but if it is exercised manually, it is known to be a resource-intensive and quite deficient
process. Nowadays, digital contact tracing has swiftly arose as a valuable asset in the global
fight against the coronavirus pandemic. The paper at hand offers an analysis of all Android
contact tracing apps deployed hitherto by European countries. Each app was closely scrutinised
both statically and dynamically by means of dynamic instrumentation. The results reported from
static analysis include permissions, API calls, and possible connections to external URLs. Dynamic
analysis on the other hand collected data pertaining to Java classes, network traffic, and intents.
After defining a baseline policy regarding the permissions required by such an app under the prism
of the “exposure notification” system proposed by Apple/Google, we present several key findings
regarding both the aforementioned types of analysis with a focus on user privacy and personal
data protection.

1

Introduction

Digital contact tracing mobile apps have lately emerged as an invaluable weapon in the hands
of governments worldwide in the fight against the COVID-19 pandemic and novel epidemics in
general. Very quickly, a number of centralised or decentralised digital contact tracing architectures
have been proposed, while even Google and Apple have aligned their forces to develop a joint
privacy-preserving contact tracing framework API based on Bluetooth Low Energy (BLE) [1].
In the meanwhile, the topic of digital contact tracing has received considerable attention in the
literature. In the following, we only refer to works that are pertinent to ours, intentionally leaving
out others that are mostly concerned with frameworks [2], [3] and user privacy matters [4], [5].
Hyunghoon et al. [6] focus on the Singapore’s TraceTogether App and compare its characteristics
against four alternative contact tracing systems, namely polling-based model, polling-based model
with mixing, the use of a public database, and the exploitation of a private messaging system.
They concentrate on the required computational infrastructure per system and on user privacy by
considering a semi-honest model. Raskar et al. [7] outlined the different technological approaches
to mobile-based contact tracing and elaborated on the risks that these technologies may pose
to individuals and societies. Furthermore, the authors proposed a number of security enhancing
approaches that can mitigate certain risks.
Nadeem et al. [8] conducted a detailed overview of the existing contact tracing architectures as
well as its privacy and security issues. Furthermore, the authors surveyed several contact tracing
apps and analysed their privacy and security impact. Their work relies on public information
about existing tracing apps, and the authors’ own comprehension of the relevant protocols being
1

developed for upcoming apps. Jinfeng [9] et al. presented a short survey of the various data
regulations and technology protocols for contact tracing apps as well as a global overview of contact
tracing app deployment. Lately, Martin et al. [10] contributed a full-fledged comprehensive review
of both the emerged contact tracing architectures and the contact tracing apps that have been
already deployed by European countries. The discussion related to the apps is done in a rather
high-level manner, i.e., concentrating on its installation and functionality, without touching on
code analysis.
Our contribution: This paper aims at scrutinising both the visible and under-the-hood functionality of the already deployed Android contact tracing apps by European countries. This effort
should be considered as dynamic and constant given that the apps are frequently updated. As
seen in table 1, up to now, twenty-two apps are available. The emphasis is on promoting best
practices that facilitate the minimisation of the attack surface and prevent data leakage. We deliver hands-on results stemming from a full-spectrum static analysis, and in addition, we identify
(i) potentially privacy-invasive APIs and (ii) possible connections to external URLs, i.e., not APIrelated URLs that the app might try to connect to. Moreover, all apps have been dynamically
analysed by means of dynamic instrumentation. The coarse result in this case is not momentous,
that is, we did not noticed any unconventional or covert behaviour. However, given that dynamic
instrumentation basically depends on method hooking, and therefore needs intensive interaction
with the running app, the aforementioned result can only be considered as rudimentary and more
work is needed to examine and understand the exact behaviour of the code.
Given the above, to the best of our knowledge, the current work is the first to elaborately profile
the behaviour of each of these apps after delving into its code both statically and dynamically.
That is, in contrast to our work, all previous contributions in the literature deal with the security,
privacy, or usability characteristics of the various so far deployed apps based on information made
available in the app’s website or elsewhere. On top of that, in view of the fact that the great
majority of such apps exploit the Apple/Google decentralised framework [1], we position each of
them vis-à-vis a baseline privacy policy stemming from the aforementioned framework.
The rest of this paper is structured as follows. The next section details on the methodology
used. Section 3 outlines a baseline privacy policy based on the Apple/Google framework API.
Section 4 presents the results per app, while section 5 wraps up a number of key findings. The
last section concludes and provides pointers to future work.

2

3
‡

*

From ver. 2.0

Android ver. Google/Apple API
6+
3
4.4+
7‡
6+
3
5.0
7‡
5+
3*
6+
3
6+
3
6+
3
5+
7‡
6+
3
5+
7‡
6+
3
6+
3
6+
3
6+
3
5+
7‡
5+
3†
6+
3
5+
7‡
6+
3
6+
3
6+
3

Centralized/proprietary approach.

Analysed version(s)
Latest ver.
Installs Score
1.2.0.12, 2.0.4.1060-QA 248 2.0.4.1060-QA 248
100K+ 3.4/2,930
1.0.32
1.0.34
100K+ 3.1/1,292
1.0.0
1.1.0
10K+ 4.0/411
2.0.1
2.0.2
1K+ 4.2/13
1.0.437
2.1.560
100K+ 3.9/3,125
1.1
1.1
100K+ 3.6/977
1.0.1
1.0.2
50K+ 3.7/365
1.0.0.174
1.0.1+aba6841
1M+ 3.2/3,428
1.0.0
1.1.4
1M+ 2.8/9,694
1.0.4
1.3.0
5M+ 3.0/78,727
1.0.0
1.0.0
50K+ 3.2/286
1.0.2.52
1.0.2.52
500K+ 3.9/2,590
1.0.0, 1.3.1
1.4.1
1M+ 3.6/30,654
1.0.47
1.0.52
100K+ 3.2/851
1.0.1
1.0.2
500K+ 3.0/2,226
1.0.3
1.3.0
100K+ 2.2/2,137
3.0.3, 4.2.3, 4.3.0
4.3.1
500K+ 2.2/2,586
1.0.2
1.0.2
500K+ 4.0/2,117
1.1.0
Google Play URL seems dead
- 1.0
1.0.6
1M+ 3.8/7.490
1.0.1
1.0.9
500K+ 3.6/3,154
1.0.0.223, 3.1.0(41)
3.1.0(41)
100K+ 2.1/358

Table 1: Outline of the examined apps (data collected from Google Play on Sept. 21, 2020).
onward. Prior versions were based on a centralized framework. † Since ver. 4.0

App’s name
Country
Stopp Corona
Austria
ViruSafe
Bulgaria
Stop COVID-19
Croatia
CovTracer
Cyprus
eRouska
Czech Republic
Smittestop
Denmark
Hoia
Estonia
Koronavilkku
Finland
StopCovid
France
Corona-Warn-App
Germany
VirusRadar
Hungary
COVID Tracker
Ireland
Immuni
Italy
Apturi Covid
Latvia
CoronaMelder
Netherlands
Smittestopp
Norway
STOP COVID - ProteGO Safe Poland
STAYAWAY COVID
Portugal
ZostanZdravy
Slovakia
Radar COVID
Spain
SwissCovid
Switzerland
NHS COVID-19
UK

2

Methodology

The apps of interest were collected from the Google Playstore [11]. All basic pieces of information
per app, including its current evaluation score along with the number of reviews posted, the number
of app downloads, and whether the app is based on the Google/Apple decentralised framework
are summarised in Table 1. For a more detailed high-level presentation of each app, the interested
reader may refer to the work of Martin et al. [10]. As observed from the table, for four apps that
presented a major version update, we additionally analysed its most current version in order to
historically spectate any substantial changes in their settings or behaviour.
Each app has been statically analysed following the step-by-step procedure illustrated in Figure 1. Particularly, the corresponding Android Package (APK) archive has been extracted and
then decompiled using the apktool [12]. Next, (i) the manifest file has been unpacked and compared against the baseline policies given in section 3, and (ii) the API calls have been retrieved
from the smali files. The results have been cross-checked via the Androtomist tool [13]. At the
bare minimum, this kind of analysis provides insight on whether the app:
1. Follows the least privilege principle regarding its declared permissions.
2. Might trigger privacy-sensitive or “risky” operations as designated by the Android API [14].

Figure 1: High-level static analysis procedure
Code instrumentation, i.e., method hooking, was exploited for dynamic analysis using the
Androtomist tool [13]. In this case, the Nvidia Shield K tablet [15], running Android 7.0 (Nougat)
was used to run each app. Note that this device is SIM-less, which, depending on the case,
may affect the proper running of apps that require cellular services. Each app was exhaustively
exercised by hand, i.e., not via the use of a UI/App exerciser, to cover all possible operations.
As already pointed out, the features collected during this phase pertain to Java classes, network
traffic, and intents.
In the following, we detail on the instrumentation code fed to Androtomist. Specifically, code
Listing 1 contains the instrumentation code we used to log possible intents triggered during app
runtime. Precisely, the code hooks the constructors of the class android.content.Intent, which is
used by Android apps to trigger intents. On the other hand, listing 2 displays the instrumentation
code employed to log specific Java classes related to network traffic, location, camera, Bluetooth,
and mobile network, according to the API documentation, as follows:
• Network traffic: java.net.URLConnection,java.net.URL, including all relevant parameters, i.e., URLs, IP addresses, and network protocols.
• Location: android.location.Location, android.location.LocationManager, and andr
oid.location.LocationProvider.
4

• Camera: android.hardware.Camera and android.hardware.camera2.CameraManager.
• Bluetooth: android.bluetooth.BluetoothAdapter, android.bluetooth.BluetoothMana
ger, android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothClass.
• Mobile network: android.telephony.TelephonyManager
All the interesting data collected per app are given in the Appendix.
1
2
3
4
5
6

/* The primary pieces of information in intents are :
1. Action
The general action to be performed , such as
ACTION_VIEW , ACTION_EDIT , ACTION_MAIN , etc .
2. Data
The data to operate on , such as a person record in the contacts database ,
expressed as a URI */

7
8
9

Java . perform ( function () {
var intent = Java . use ( " android . content . Intent " ) ;

10
11
12
13
14
15

// constructor Intent ( String action )
intent . $init . overload ( ’ java . lang . String ’) . impl ementat ion = function ( action )
{
console . log ( " action " + action ) ;
}

16
17
18
19
20
21

// constructor Intent ( Intent o )
intent . $init . overload ( ’ android . content . Intent ’) . i mplement ation = function ( o )
{
console . log ( " intent " + o ) ;
}

22
23
24
25
26
27
28
29
30

// constructor Intent ( String action , Uri uri )
intent . $init . overload ( ’ java . lang . String ’ , ’ android . net . Uri ’)
. imp lementa tion = function ( action , uri )
{
console . log ( " action " + action + " , url " + uri ) ;
}
...
}) ;

Listing 1: The instrumentation code used to hook intents
1
2

// Objects to hook
var o b j e c t s T o L o o k F o r = [ " android . location . Location " ," android . location .
L oc at io n Ma na ge r " ," android . location . L o c a t i o n P r o v id e r " ," java . net . Socket " ," java .
net . URLConnection " ," java . net . URL " ," android . telephony . T e l e p h on y M a n a g e r " ," android
. bluetooth . B l u e t o o t h A d a p t e r " ," android . bluetooth . B l u e t o o t h M a n a g e r " ," android .
bluetooth . B lu et o ot hD ev i ce " ," android . bluetooth . B luetoot hClass " ," android . hardware
. Camera " ," android . hardware . camera2 . CameraManager " ," dalvik . system . DexCl assLoad er
" ];

3
4
5
6
7
8

9
10
11
12
13
14
15

for ( var i in ob j e c t s T o L o o k F o r ) {
Java . perform ( function () {
Java . choose ( o bj e c t s T o L o o k F o r [ i ] , {
" onMatch " : function ( instance ) {
console . log ( " \ nProcess has Instantiated instance of : " + o b j e c t s T o L o o k F o r
[ i ]) ;
console . log ( " Details : " + instance . toString () ) ;
},
" onComplete " : function () {
}
}) ;
}) ;
}

Listing 2: The instrumentation code exploited to hook Java classes related to network traffic

5

Moreover, we provide an overall evaluation of the security level of the external network domains
each app may visit, i.e., every URL found in its code. This assessment was done with the aid of
the “SSL Server Test” as offered by Qualys SSL labs [16]. Specifically, as detailed in [17], this
test thoroughly examines the configuration of any TLS web server based on four axes, namely,
certificate, protocol support, key exchange, and cipher strength. The results vary from “A+”
(best) to “T” (worse).

3

Baseline policy

Assuming the use of the “Privacy-Preserving Contact Tracing” also known as “COVID-19 Exposure Notifications System (ENS)” developed jointly by Apple/Google [1], as a baseline, contact
tracing apps based on Bluetooth Low Energy (BLE) require the following permissions [18, 19]:
• android.permission.BLUETOOTH. This permission is necessary for enabling any Bluetooth
communication, i.e., either requesting/accepting a connection or transferring data.
• android.permission.BLUETOOTH ADMIN. It is required to trigger device discovery or manipulate the Bluetooth settings. Note that if an app requires this permission, then the app
must also declare the android.permission.BLUETOOTH one.
• android.permission.ACCESS FINE LOCATION. On devices running Android 6.0 to 10, the
ENS relies on Bluetooth scanning, which in turn mandates the device location setting to
be turned on. It should be pointed out that according to [18], the smartphone’s location
setting should be enabled: “The system uses this to scan for Bluetooth signals. The system
does not collect or track your location”. And in [18], public health authority “apps that use
the ENS are not permitted to request permission to use your device location”. Note that
for devices running Android 11, ENS does not mandate the smartphone’s location setting to
be enabled: “We’re making this update for ENS only, given that ENS has been designed in
such a way that neither the system nor the apps using it can infer device location through
Bluetooth scanning, and apps that are allowed to use ENS are subject to additional policies
that disallow automatic collection of location” [20].
• android.permission.INTERNET. Enables the app to perform network operations. Note that
this permission goes hand in hand with the android.permission.ACCESS NETWORK STATE
one.
It is to be stressed out that any deviation from the above mentioned baseline profile does not
mean that the corresponding app does leak personal data, and thus this set of permissions is only
to be considered as indicative.
As already pointed out, API calls per app have been also analysed. However, in this case,
instead of providing a baseline, which is considered impractical, we only identify in section 5
certain API calls that may pose a threat to user privacy. For example, such APIs obviously
include:
• android/hardware/Camera; → open
• android/location/LocationManager; → getLastKnownLocation
• android/telephony/TelephonyManager; → getNetworkOperatorName
• android/telephony/TelephonyManager; → getNetworkOperator
• android/telephony/TelephonyManager; → getLine1Number

6

App
Stopp Corona
ViruSafe
Stop COVID-19
CovTracer
eRouska
Smittestop
Hoia
KoronaVilkku
StopCovid
Corona-WarnApp
VirusRadar
COVID Tracker
Immuni
Apturi Covid
CoronaMelder
Smittestopp
STOP COVID ProteGO Safe
STAYAWAY
COVID
ZostanZdravy
Radar COVID
SwissCovid
NHS COVID19

BLU
3
N/A
3
N/A
3
3
3
3
3
3

BLU.ADM
3
N/A
7
N/A
3
7
7
7
3
7

AFL
7
N/A
7
N/A
3
7
7
7
3
7

INTERNET
3
N/A
3
N/A
3
3
3
3
3
3

3
3
3
3
3
3
3

3
7
7
7
7
3
7

3
7
7
7
7
3
7

3
3
3
7
3
7
3

3

7

7

3

3
3
3
3

3
7
7
3

3
7
7
3

3
3
3
3

Table 2: Overview of requested permissions per app vis-à-vis the baseline. BLU, BLU.ADM,
and AFL stand for BLUETOOTH, BLUETOOTH.ADMIN, and ACCESS FINE LOCATION,
respectively)

4

Analysis of apps

This section outlines all noteworthy results per app in regard to static analysis. Table 2 summarises the requested (android.permission.) permissions per app with reference to the baseline
policy. Furthermore, all potentially privacy-invasive, namely, having a “dangerous” protection
level according to the API, permissions along with the security analysis of external network domains the app might connect to are given in the respective subsection.

4.1

Stopp Corona

With reference to tables 1 and 2, in addition to its baseline profile, the current latest version of
this app [21] requested for the following 5 (android.permission.) permissions: ACCESS NETWORK S
TATE,WAKE LOCK,RECEIVE BOOT COMPLETED, and FOREGROUND SERVICE. Also, it asked for the com
.google.android.c2dm.permission.RECEIVE permission, which caters for pushing notifications
to the app via Google Cloud Messaging (GCM). It is worthy of note that an older version of the
app, namely v.1.2.0.12 have in addition required ACCESS WIFI STATE,CHANGE NETWORK STATE,CH
ANGE WIFI STATE,ACCESS COARSE LOCATION, and REQUEST IGNORE BATTERY OPTIMIZATIONS. We
observe that the permission ACCESS COARSE LOCATION is potentially privacy-invasive as it allows
an app to access the approximate location of the device. Therefore, its protection level according
to API is defined as “dangerous”.
The app might connect to the external, i.e., not API-related URL: rca-coronaapp-rcpfd.azurefd.net/Rest/v2/, which is rated A by [16].

7

4.2

ViruSafe

This app [22] does not rely on BLE for contract tracing, but on GPS. It asked for the following 7
(android.permission.) permissions: ACCESS FINE LOCATION,INTERNET,ACCESS COARSE LOCATION
,CAMERA,FLASHLIGHT,GET ACCOUNTS,USE CREDENTIALS.
Given that, the app requested for the following potentially privacy-invasive permissions, which
all have a “dangerous” protection level according to the API.
• ACCESS FINE LOCATION. Given the use GPS, this permission allows the app to access the
precise location of the device.
• ACCESS COARSE LOCATION as already explained in subsection 4.1.
• CAMERA given that provides access to the camera device.
• GET ACCOUNTS as it allows access to the list of accounts in the Accounts Service.
The app might connect to the following external, i.e., not API-related URLs:
• https://www.paypal.com and https://twitter.com. Both these domains are rated A+
by [16].
• https://www.linkedin.com. The domain www.linkedin.com is rated A by [16].
• https://www.facebook.com, https://accounts.google.com, https://login.live.com,
and https://login.yahoo.com. All these 4 domains are rated B by [16].
• http://zxing.appspot.com/scan. This URL is not a https one, however the corresponding
webpage does not require any user input. The domain zxing.appspot.com is rated B by
[16]
• http://google.com/books and http://books.google.com. Both these URLs are not
https, but are promoted to https. The domains google.com and books.google.com are rated
B by [16].

4.3

Stop COVID-19

In addition to its baseline ones, this app [23] requested for the following 4 (android.permission.)
permissions: ACCESS NETWORK STATE,WAKE LOCK,RECEIVE BOOT COMPLETED,FOREGROUND SERVIC
E. Moreover, it asks for the com.google.android.c2dm.permission.RECEIVE and com.google
.android.finsky.permission.BIND GET INSTALL REFERRER SERVICE permissions. Lastly, the
app does not contain hyperlinks to external URLs.

4.4

CovTracer

As with ViruSafe, this app [24] does not employ BLE for contract tracing, but GPS. The app
asked for 17 (android.permission.) permissions as follows: BLUETOOTH,ACCESS FINE LOCATION,I
NTERNET,BLUETOOTH ADMIN,WRITE EXTERNAL STORAGE,ACCESS NETWORK STATE,ACCESS COARSE
LOCATION,ACCESS BACKGROUND LOCATION,WAKE LOCK,ACCESS LOCATION EXTRA COMMANDS,RECEI
VE BOOT COMPLETED,READ SYNC SETTINGS,WRITE SYNC SETTINGS,AUTHENTICATE ACCOUNTS,FOR
EGROUND SERVICE,ACCESS WIFI STATE,READ APP BADGE.
It also requested for the following 20 additional permissions: com.google.android.gms.perm
ission.ACTIVITY RECOGNITION,com.android.vending.CHECK LICENSE,com.google.android.
c2dm.permission.RECEIVE,edu.rise.ihnilatis.permission.C2D MESSAGE,com.google.andr
oid.finsky.permission.BIND GET INSTALL REFERRER SERVICE,com.sec.android.provider.
badge.permission.READ,com.sec.android.provider.badge.permission.WRITE,com.htc.la
uncher.permission.READ SETTINGS,com.htc.launcher.permission.UPDATE SHORTCUT,com.s

8

onyericsson.home.permission.BROADCAST BADGE,com.sonymobile.home.permission.PROVID
ER INSERT BADGE,com.anddoes.launcher.permission.UPDATE COUNT,com.majeur.launcher.
permission.UPDATE BADGE,com.huawei.android.launcher.permission.CHANGE BADGE,com.h
uawei.android.launcher.permission.READ SETTINGS,com.huawei.android.launcher.permi
ssion.WRITE SETTINGS,com.oppo.launcher.permission.READ SETTINGS,com.oppo.launcher
.permission.WRITE SETTINGS,me.everything.badger.permission.BADGE COUNT READ,me.ev
erything.badger.permission.BADGE COUNT WRITE.
Given the above list of permissions, the following android.permission. ones are potentially
privacy-invasive as they are characterised as “dangerous” by the API:
• ACCESS FINE LOCATION for the same reason as ViruSafe.
• WRITE EXTERNAL STORAGE as it allows an app to write to external storage.
• ACCESS COARSE LOCATION as already explained.
• ACCESS BACKGROUND LOCATION as it allows an app to access location in the background.
Moreover, the com.google.android.gms.permission.ACTIVITY RECOGNITION permission can be
used to discern when a user starts or ends a particular activity, say, a mileage tracking app could
begin tracking kilometers when a user starts walking, thus under certain circumstances it may be
privacy-invasive and lead to data leakage.
The app might connect to the following external, i.e., not API-related URLs:
• https://twitter.com/intent/tweet. The domain twitter.com is rated A+ by [16].
• http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd. This URL is not a https one,
but is promoted to https. The domain www.w3.org is rated A+ by [16].
• http://logback.qos.ch/codes.html. This URL is not a https one, however the corresponding webpage does not require any user input. The domain logback.qos.ch is rated
B by [16].
• https://www.facebook.com, https://plus.google.com, and https://pinterest.com. The
domains www.facebook.com, plus.google.com, and pinterest.com are rated B by [16].
• http://xml.org. This URL is not a https one. The server’s certificate is not trusted, so
the domain xml.org is rated T by [16].

4.5

eRouska

In addition to its baseline ones, this app [25] requested for the following 4 (android.permission.)
permissions: ACCESS NETWORK STATE,FOREGROUND SERVICE,RECEIVE BOOT COMPLETED,android.
permission.WAKE LOCK. In addition, it asks for the com.google.android.c2dm.permission.RE
CEIVE permission. As a result, no privacy-invasive permission was observed for this app. The app
might connect to the following external, i.e., not API-related URLs: https://github.com and
https://plus.google.com. The former is rated A+ and the latter B by [16].

4.6

Smittestop

In addition to its baseline ones, this app [26] requested for the following 4 (android.permission.)
permissions: ACCESS NETWORK STATE,FOREGROUND SERVICE,WAKE LOCK,RECEIVE BOOT COMPLETE
D. No links to external URLs are observed for this app.

9

4.7

Hoia

Additionally to its baseline ones, this app [27] asked for the next 5 (android.permission.) permissions: ACCESS NETWORK STATE,FOREGROUND SERVICE,WAKE LOCK,RECEIVE BOOT COMPLETE
D,REQUEST IGNORE BATTERY OPTIMIZATIONS. The app might connect to the following external, i.e., not API-related URLs: https://hoia.me, https://www.terviseamet.ee, and https:
//www.digilugu.ee. The first two are rated A+, while the latter B by [16].

4.8

KoronaVilkku

On top of its baseline ones, this app [26] requested for the following 4 (android.permission.)
permissions: ACCESS NETWORK STATE,FOREGROUND SERVICE,WAKE LOCK,RECEIVE BOOT COMPLE
TED. The app might connect to the following external, i.e., not API-related URLs: https://
taustajarjestelma.koronavilkku.fi and https://omaolo.fi. Both are rated A by [16].

4.9

StopCovid

Supplementary to its baseline permissions, this app [28] required the following (android.permission.)
ones: ACCESS COARSE LOCATION,ACCESS NETWORK STATE,CAMERA,FOREGROUND SERVICE,RECEIVE
BOOT COMPLETED,REQUEST IGNORE BATTERY OPTIMIZATIONS,WAKE LOCK. In view of the above, A
CCESS COARSE LOCATION and CAMERA permissions are potentially privacy-invasive.
The app might connect to the following external, i.e., not API-related URLs: https://api.
stopcovid.gouv.fr, https://stopcovid.gouv.fr. Both of them are rated B by [16].

4.10

Corona-Warn-App

In addition to its baseline permissions, this app [29] requested for the following 5 (android.permission.)
ones: ACCESS NETWORK STATE,CAMERA,FOREGROUND SERVICE,WAKE LOCK,RECEIVE BOOT COMPLET
ED. As already pointed out in subsection 4.2, the CAMERA permission is potentially privacy-invasive.
The app might connect to the following external, i.e., not API-related URLs:
https://svc90.main.px.t-online.de, https://submission.coronawarn.app, and https:
//verification.coronawarn.app. The first domain is rated A+, while the rest are rated B by
[16].

4.11

VirusRadar

The current app [30] asked for the following 6 additional (android.permission.) permissions: ACCES
S NETWORK STATE,ACCESS COARSE LOCATION,FOREGROUND SERVICE,RECEIVE BOOT COMPLETED,R
EQUEST IGNORE BATTERY OPTIMIZATIONS,WAKE LOCK. It also required the next 4 permissions: com
.google.android.c2dm.permission.RECEIVE,com.google.android.finsky.permission.BIN
D GET INSTALL REFERRER SERVICE,com.huawei.permission.external app settings.USE COM
PONENT,oppo.permission.OPPO COMPONENT SAFE. As already explained, ACCESS COARSE LOCATI
ON is potentially privacy-invasive. The app might connect to the following external, i.e., not APIrelated URLs: https://plus.google.com, https://github.com, https://f-droid.org, and
http://www.amazon.com. The domain github.com is rated A+, while the domains f-droid.org,
plus.google.com, and amazon.com are rated B by [16].

4.12

COVID Tracker

The following 3 supplementary to its baseline (android.permission.) permissions were requested by
this app [31]: ACCESS NETWORK STATE,ACCESS WIFI STATE,RECEIVE BOOT COMPLETED. Moreover,
the app might connect to https://expo.io, which is rated A+ by [16].

10

4.13

Immuni

The following 4 supplementary to its baseline (android.permission.) permissions were requested
by this app [32]: FOREGROUND SERVICE,ACCESS NETWORK STATE,RECEIVE BOOT COMPLETED,WAKE
LOCK. The app might connect to the external, i.e., not API-related URL: https://get.immuni.
gov.it, which is rated A by [16].

4.14

Apturi Covid

The next 4 extra to its baseline (android.permission.) permissions were requested by this app
[33]: ACCESS NETWORK STATE,WAKE LOCK,RECEIVE BOOT COMPLETED,FOREGROUND SERVICE. It
also required two additional permissions, namely com.google.android.c2dm.permission.REC
EIVE and com.google.android.finsky.permission.BIND GET INSTALL REFERRER SERVICE.
The app might connect to the external, i.e., not API-related URLs: https://www.facebook.
com, https://accounts.google.com, https://www.linkedin.com, and https://www.paypal.
com. All these four domains are rated B by [16].

4.15

CoronaMelder

On top of its baseline ones, this app [34] requested for the following 4 (android.permission.)
permissions: ACCESS NETWORK STATE,FOREGROUND SERVICE,WAKE LOCK,RECEIVE BOOT COMPLETE
D. The app might connect to the external URL https://coronamelder-api.nl, which is rated
A+ by [16].

4.16

Smittestopp

Supplementary to its baseline permissions, this app [35] required the following (android.permission.)
ones: ACCESS BACKGROUND LOCATION,ACCESS NETWORK STATE,FOREGROUND SERVICE,RECEIVE BO
OT COMPLETED,WAKE LOCK. From them, ACCESS FINE LOCATIONandACCESS BACKGROUND LOCATIO
N are potentially privacy invasive. As already mentioned, the former permission allows the app
to access the precise location of the device. This is because according to [36], this app uses GPS
in conjunction to BLE: “(...) collects the following data: (...) GPS position so that close contact
with other people / mobile phones can be traced. That is, movement patterns are continuously
recorded (latitude, longitude, speed, altitude, time at different locations) when Smittestopp is
activated and the mobile phone is switched on”.
The app might connect to the following external, i.e., not API-related URLs:
• https://pubapi.prod.corona.nntb.no/onboarding/register-device and https://pubapi.
prod.corona.nntb.no/permissions/revoke-consent. The domain pubapi.prod.corona.
nntb.no is rated A+ by [16].
• https://smittestopp.b2clogin.com/tfp/smittestopp.onmicrosoft.com/B2C_1A_phone_
SUS. The domain smittestopp.b2clogin.com is rated B by [16].
• https://login.microsoftonline.com and https://login.microsoftonline.com/common/
oauth2/v2.0/authorize. The domain login.microsoftonline.com is rated B by [16].
• https://smittestopp.onmicrosoft.com/backend/Device.Write. The domain smittestopp.
onmicrosoft.com cannot be resolved.

4.17

STOP COVID - ProteGO Safe

With reference to table 1, the current latest version of this app [37] required the following 4
(android.permission.) permissions, in addition to its baseline profile: ACCESS NETWORK STATE,WAK
E LOCK,FOREGROUND SERVICE,RECEIVE BOOT COMPLETED. The app also requested for the com.goo
gle.android.c2dm.permission.RECEIVE permission. It is to be noted that the older version 3.0.3
11

has additionally the android.permission.ACCESS BACKGROUND LOCATION permission. Lastly, the
app might connect to one external URL, namely https://safesafe.app. The domain safesafe.
app is rated A+ by [16].

4.18

STAYAWAY COVID

The following 5 extra to its baseline (android.permission.) permissions were requested by this
app [38]: ACCESS NETWORK STATE,WAKE LOCK,FOREGROUND SERVICE,RECEIVE BOOT COMPLETED,R
EQUEST IGNORE BATTERY OPTIMIZATIONS. The app might connect to the external, i.e., not APIrelated URLs https://stayaway.min-saude.pt and https://stayaway.incm.pt. Both these
respective domains are rated A by [16].

4.19

ZostanZdravy

The following 6 extra to its baseline (android.permission.) permissions were requested by this
app [39]: ACCESS NETWORK STATE,ACCESS BACKGROUND LOCATION,ACCESS WIFI STATE,FOREGR
OUND SERVICE,RECEIVE BOOT COMPLETED,WAKE LOCK. Additionally, the app requested for the
following permissions: com.google.android.c2dm.permission.RECEIVE,com.google.androi
d.finsky.permission.BIND GET INSTALL REFERRER SERVICE. From those, as already pointed
out in the previous subsections, ACCESS FINE LOCATIONandACCESS BACKGROUND LOCATION are
potentially privacy-invasive. Especially for the former, and according to [40], this app uses GPS
in certain cases: “If the smartphone will recognize any other close Bluetooth device and the
contact will exceed particular time duration, the application will record dissipated GPS position
and anonymous log of both to the server”.
The app might connect to the external, i.e., not API-related URL: https://t.mojeezdravie.
sk/api/v1/sygic/, which is rated B by [16].

4.20

Radar Covid

Additionally to its baseline ones, this app [41] requested for the following 5 (android.permission.)
permissions: ACCESS NETWORK STATE,FOREGROUND SERVICE,WAKE LOCK,RECEIVE BOOT COMPLE
TED,REQUEST IGNORE BATTERY OPTIMIZATIONS. Moreover, the app requested for the following
permissions: com.google.android.c2dm.permission.RECEIVE and com.google.android.fins
ky.permission.BIND GET INSTALL REFERRER SERVICE. The app might connect to the external
URL https://radarcovid.covid19.gob.es, which is rated A by [16].

4.21

SwissCovid

In addition to its baseline (android.permission.) permissions, this app [42] requested for the
following 5 ones: ACCESS NETWORK STATE,FOREGROUND SERVICE,RECEIVE BOOT COMPLETED,REQU
EST IGNORE BATTERY OPTIMIZATIONS,WAKE LOCK.
The app might connect to the following external, i.e., not API-related URLs: www.pt1-t.
bfs.admin.ch, www.pt-a.bfs.admin.ch, https://www.pt.bfs.admin.ch, https://codegenservice.bag.admin.ch. All these 4 domains are rated A by [16].

4.22

NHS COVID-19

The current latest version of the app [43] requested for the following 5 (android.permission.)
permissions, in addition to its baseline profile: CAMERA,RECEIVE BOOT COMPLETED,ACCESS NET
WORK STATE,FOREGROUND SERVICE,WAKE LOCK. It is to be noted that an older version, namely
v1.0.0.223 has additionally the ACCESS BACKGROUND LOCATION,ACCESS COARSE LOCATION,WRITE
INTERNAL STORAGE permissions, and also asked for the com.google.android.c2dm.permissio
n.RECEIVE one. However, this past version did not asked for the CAMERA permission, which as
already pointed out, is present in the current latest version. As explained previously, ACCESS BACK

12

GROUND LOCATION and ACCESS COARSE LOCATION are potentially privacy-invasive. The app might
connect to the external, i.e., not API-related URL: https://github.com, which is rated A+ by
[16]. It is worth noting that the current latest version of the app (v.3.1.0) is not compatible the
Nvidia Shield K tablet.

5

Key findings

This section recaps in brief the results given in the previous one and rolls them up into key
observations. To ease the reader, we summarise all potentially privacy-invading permissions per
app in table 3, as well as dynamic analysis outcomes in table 5.
App

Permission

Stopp Corona

ACCESS COARSE LOCATION (v1.2.0.12) - fixed in current latest version

ViruSafe

ACCESS FINE LOCATION,ACCESS COARSE LOCATION,CAMERA,GET ACCOUNTS

Stop COVID-19

NONE

CovTracer

ACCESS FINE LOCATION,WRITE EXTERNAL STORAGE,ACCESS COARSE LOCATION,A
CCESS BACKGROUND LOCATION,com.google.android.gms.permission.ACTIVIT
Y RECOGNITION

eRouska

NONE

Smittestop

NONE

Hoia

NONE

KoronaVilkku

NONE

StopCovid

ACCESS COARSE LOCATION,CAMERA

Corona-Warn-App

CAMERA

VirusRadar

ACCESS COARSE LOCATION

COVID Tracker

NONE

Immuni

NONE

Apturi Covid

NONE

CoronaMelder

NONE

Smittestopp

ACCESS FINE LOCATION,ACCESS BACKGROUND LOCATION

STOP COVID - ProteGO Safe

ACCESS BACKGROUND LOCATION (v3.0.3) - fixed in version 4.2.3

STAYAWAY COVID

NONE

ZostanZdravy

ACCESS FINE LOCATION,ACCESS BACKGROUND LOCATION

Radar COVID

NONE

SwissCovid

NONE

NHS COVID-19

CAMERA,ACCESS BACKGROUND LOCATION,ACCESS COARSE LOCATION - The last
two permissions apply to v1.0.0.223 and are fixed in current latest version

Table 3: Potentially privacy-invasive (android.permission.) permissions per app

5.1

Permissions

• ViruSafe and CovTracer do not rely on BLE for contact tracing, but on GPS. Naturally, for
these apps, the baseline policy given in section 3 does not apply.
• Smittestopp and ZostanZdravy use BLE in conjunction with GPS.
• eRouska, StopCovid, VirusRadar, STOP COVID - ProteGO Safe, ZostanZdravy, and NHS
COVID-19 use all the four baseline policy permissions. Stopp Corona, Corona-Warn-App,
and Smittestopp utilise three baseline permissions, Immuni and SwissCovid two, and Apturi Covid only one. As observed from table 3, from them, only Apturi Covid, Immuni,
SwissCovid, and eRouska require zero potentially privacy-invasive permissions.
13

App
Stopp Corona
ViruSafe
Stop COVID-19
CovTracer

Number of URLs
1
10
0
7

Domain ratings
A
A+, A, B
N/A
A+, B, T

eRouska
Smittestop
Hoia
KoronaVilkku
StopCovid
Corona-Warn-App
VirusRadar
COVID Tracker
Immuni
Apturi Covid
CoronaMelder
Smittestopp
STOP COVID - ProteGO Safe
STAYAWAY COVID
ZostanZdravy
Radar COVID
SwissCovid
NHS COVID-19

2
0
3
2
2
3
3
1
1
4
1
6
1
2
1
1
4
1

A+, B
N/A
A+, B, A+
A
B
A+, B
A+, B
A+
A
B
A+
A+, B
A+
A
B
A
A
A+

Comments
Use of http URLs
Use of http URLs, For one domain the server’s certificate is
untrustworthy
One URL is irresolvable
-

Table 4: External URLs per app
• Regarding “dangerous” (android.permission.) permissions, ACCESS COARSE LOCATION, ACCE
SS FINE LOCATION and ACCESS BACKGROUND LOCATION are exploited by 4 apps, CAMERA by
3 apps, and GET ACCOUNTS and WRITE EXTERNAL STORAGE by 1 app. Moreover, the com.go
ogle.android.gms.permission.ACTIVITY RECOGNITION is manifested by one app. With
reference to table 1, the above numbers apply to the current latest version of the app, if it
was analysed, otherwise to the analysed one.
• As observed from table 4, the code of all the apps but two contain at least one external,
not API-related, URL where the app might try to connect to. The security analysis of the
domains of these hyperlinks designate that most of them are classified in the range from A+
to B according to [16]. A limited number of problems were noticed pertaining to the use of
http instead of https, untrusted server’s certificates, and irresolvable URLs.
• Some apps, including VirusRadar and ViruSafe use vendor specific permissions.
• From the apps namely Stopp Corona, STOP COVID - ProteGO Safe, and NHS COVID-19
we re-analysed due to a major version change, it was evident that the developers removed
some potentially privacy-invasive permissions in all three cases. In one case however, a new
such permission was introduced.

5.2

Potentially privacy-invasive API calls

• All apps but ViruSafe include android/location/LocationManager; → getLastKnownLocatio
n, which gets the last known location, if any, from the given provider.
• Stopp Corona, Stopp COVID-19, Smittestop, NHS COVID-19, Hoia, KoronaVilkku, STAYAWAY COVID, Radar Covid, Corona Medler, COVID Tracker and STOP COVID - ProteGO Safe include the android/location/Location; → getLatitude and android/location/Lo

14

App
Stopp Corona
ViruSafe
Stop COVID-19
CovTracer
eRouska
Smittestop
Hoia
KoronaVilkku
StopCovid
Corona-WarnApp
VirusRadar
COVID Tracer
Immuni
Apturi Covid
CoronaMelder
Smittestopp
STOP COVID ProteGO Safe
STAYAWAY
COVID
ZostanZdravy
Radar COVID
SwissCovid
NHS COVID-19

Net. traffic
3
7
3
3
7
7
7
3
3
3

Location
7
7
3
3
7
7
7
3
7
7

Telephony
3
3
3
3
7
3
3
3
7
3

Bluetooth
3
7
3
3
3
3
3
3
7
3

3
3
3
3
3
3
7

7
7
3
3
3
7
7

3
7
3
3
3
3
3

7
3
3
3
3
7
3

3

7

3

3

3
3
7
3

7
7
7
3

3
3
7
3

7
3
3
3

Table 5: Dynamic analysis results.
cation; → getLongitude API calls, which are used to get the latitude and longitude of the
device.
• ViruSafe, StopCovid, Corona-Warn-App and Apturi Covid include android/hardware/Cam
era; → open, which creates a new Camera object to access the first back-facing camera on
the device, if any.
• CovTracer includes (a) android/telephony/TelephonyManager; → getNetworkOperatorNam
e, which returns the alphabetic name of current registered operator, (b) android/telephony/
TelephonyManager; → getNetworkOperator, which returns the Mobile Country Code (MCC)
and Mobile Network Code (MNC) of the current registered operator, and (c) android/tele
phony/TelephonyManager; → getLine1Number, which returns the phone number string for
line 1, e.g., the Mobile Station International Subscriber Directory Number (MSISDN) for a
GSM phone for a specific subscription.
• Apturi Covid includes android/hardware/Camera; → takePicture, which triggers an asynchronous image capture.

5.3

Dynamic analysis

As already pointed out, the results produced by dynamic analysis are summarised in Table 5.
Note that the last four columns correspond to the detailed information given in the appendix, and
designate if the examined app has (i) produced network traffic, (ii) instantiated the Java class android.location.LocationManager, (iii) instantiated the Java class android.telephony.TelephonyManager,
and (iv) instantiated either or both the Java classes android.bluetooth.BluetoothAdapter, android.bluetooth.BluetoothManager, respectively. For an unknown reason, StopCovid and ZostanZdravy continued crashing after short-term user interaction, so the dynamic analysis for these two

15

apps is incomplete. Both these apps is said to support the Android Nougat version, while the
ZostanZdravy is not available for download anymore.
1. Stop COVID-19, CovTracer, KoronaVilkku, Immuni, CoronaMelder, Apturi Covid and NHS
COVID-19 employ the android.location.LocationManager class, which provides access
to the system’s location services and allows apps to obtain periodic updates of the device’s
geographical location. This result confirms the outcomes of subsection 5.2 with reference to
android/location/LocationManager API call.
2. All apps except eRouska, StopCovid, COVID Tracer and SwissCovid used the class android.telephony.TelephonyManager. This outcome comes in addition to that of subsection
5.2 in relation to the android/telephony/TelephonyManager API call.
3. All apps except ViruSafe, eRouska, Smittestop, Hoia, STOP COVID - ProteGO Safe and
SwissCovid produced network traffic, meaning they visited specific URLs as detailed in
section 4 and the appendix.
4. All apps except ViruSafe, StopCovid, VirusRadar, Smittestopp and ZostanZdravy instantiated either or both the android.bluetooth.BluetoothAdapter and android.bluetoot
h.BluetoothManager Java classes during the course of dynamic analysis. The first class
lets the app conduct basic Bluetooth tasks, including starting up device discovery, while
the latter offers a high level manager employed to get an instance of an BluetoothAdapter
and to perform overall Bluetooth management. For ViruSafe this is expected because this
app does not rely on the Bluetooth service. For the other four, which do ask for both
Bluetooth permissions according to the baseline, this is contradictory, and it is explained
by the fact that (i) VirusRadar required the user’s phone number in order to run properly,
hence the dynamic analysis for this app did not yield complete results, (ii) as already mentioned, StopCovid and ZostanZdravy keep crashing, and (iii) Smittestopp seems to call the
android.telephony.TelephonyManager prior to initiating the Bluetooth service, and thus it
can be assumed that this app requires the user’s telephone to be equipped with a SIM card.

6

Conclusions

The merit of mobile digital contact tracing apps in swiftly and accurately identifying and alerting
individuals at risk is rather unquestionable. Nevertheless, along with other considerations, for
such a privacy-sensitive app to gain widespread adoption, certain security and data protection
requirements need to be met. In fact, this reluctance can be perceived from the information
collected in table 1, where it seems that (i) based on the app downloads, the penetration of
each of them in the population is still not very high, and (ii) the average ≈3.3 evaluation score
can be translated as an indication of undesired, unneeded, or sometimes buggy or problematic
functionality.
This work attempts to answer a rudimentary but decisive question; do the currently deployed
apps reduce their functionality to the bare minimum? If so, user privacy is well-preserved, data
protection is ensured, and the attack surface is decreased. To answer this matter in a tangible
way, we meticulously analysed all mobile contact tracing apps currently deployed by European
countries. The results stemming for static analysis reveal a limited but not insignificant number
of deviations in both the permissions of the apps as well as the use of potentially privacy-invasive
API calls by some of them. On the other hand, dynamic analysis also yielded significant, but not
striking outcomes. In any case, dynamic analysis is further to be addressed in a future work by
hooking additional operations, i.e., refining the instrumentation code, and via the use of control
flow graphs. Besides, the data provided in the Appendix along with the instrumentation code given
in section 2 can be a rich source of information for anyone interested in analysing the runtime
behavior of this kind of apps.
Last but not least, an app may include code (logged in static or triggered during dynamic
analysis) for which they did not ask permission in the manifest file. Normally, in such a case, the
16

app cannot use these pieces of code, but this situation does not apply to rooted phones. That
is, any permission listed in the manifest file provide access to some of the data and functions
offered by the Android OS, but root privileges grant access to data and functions that were never
intended to be shared or used. Not to mention, of course, the fact that an app with root access
can automatically configure all permissions as will. Therefore, a sound design and implementation
practice for such privacy-sensitive apps would involve the app to check if the smartphone is rooted.

Appendices
A

Dynamic Analysis Results

A.1

Stopp Corona

Java classes: android.telephony.TelephonyManager,android.bluetooth.BluetoothAdapter
Network traffic:
• Details: Socket[address=app.prod-rca-coronaapp-fd.net/13.107.246.10,port=443,
localPort=58750

A.2

ViruSafe

Java classes: android.telephony.TelephonyManager

A.3

Stop COVID-19

Java classes: android.location.LocationManager,android.telephony.TelephonyManager,a
ndroid.bluetooth.BluetoothAdapter
Network traffic:
• Details: https://in.appcenter.ms/logs?api-version=1.0.0
• Details: Socket[address=firebaseinstallations.googleapis.com/2a00:1450:4001:8
1b::200a,port=443,localPort=47528]
• Details: Socket[address=firebase-settings.crashlytics.com/2a00:1450:4001:81d:
:2003,port=443,localPort=51287]
• Details: Socket[address=en.apis-it.hr/185.20.29.152,port=443,localPort=58923]
• Details: Socket[address=play.google.com/2a00:1450:4001:821::200e,port=443,loc
alPort=55635]

A.4

CovTracer

Java classes: DexClassLoader,android.telephony.TelephonyManager,android.location.Lo
cationManager,android.bluetooth.BluetoothAdapter,android.bluetooth.BluetoothMana
ger
Network traffic:
• Details: Socket[address=csi.gstatic.com/216.58.222.35,port=443,localPort
• Details: Socket[address=clients4.google.com/172.217.18.14,port=443,localPort=
53667]

17

A.5

eRouska

Java classes: android.bluetooth.BluetoothAdapter,android.bluetooth.BluetoothManager

A.6

Smittestop

Java classes: android.bluetooth.BluetoothAdapter,android.telephony.TelephonyManager

A.7

Hoia

Java classes: android.telephony.TelephonyManager,android.bluetooth.BluetoothAdapter

A.8

KoronaVilkku

Java classes: android.location.LocationManager,android.telephony.TelephonyManager,a
ndroid.bluetooth.BluetoothAdapter
Network traffic:
• Details: Socket[address=repo.thl.fi/193.167.195.71,port=443,localPort=36111]
• Details: Socket[address=taustajarjestelma.koronavilkku.fi/91.202.112.12,port=
443,localPort=38541]

A.9

StopCovid

Network traffic:
• Details: Socket[address=app.stopcovid.gouv.fr/148.253.97.95,port=443,localPor
t=57796]
• Details: Socket[address=app.stopcovid.gouv.fr/148.253.97.95,port=443,localPor
t=57794]
• Details: Socket[address=app.stopcovid.gouv.fr/148.253.97.95,port=443,localPor
t=57798]

A.10

Corona-Warn-App

Java classes: android.telephony.TelephonyManager,android.bluetooth.BluetoothAdapter
Network traffic:
• Details: Socket[address=svc90.main.px.t-online.de/87.140.208.251,port=443,loc
alPort=38228]

A.11

VirusRadar

Java classes: android.telephony.TelephonyManager
Network traffic:
• Details: https://play.google.com/store/apps/details?id=hu.gov.virusradar
• Details: Socket[address=firebaseinstallations.googleapis.com/172.217.16.202,p
ort=443,localPort=43637]
• Details: Socket[address=virusradar.hu/193.224.20.135,port=443,localPort=33720
]
Intents:
• com.google.android.c2dm.intent.REGISTER
• com.google.android.gms.measurement.START
18

A.12

COVID Tracker

Java classes: android.telephony.TelephonyManager
Network traffic:
• Details: Socket[address=app.covidtracker.ie/52.85.158.13,port=443,localPort=5
7840]

A.13

Immuni

Java classes: android.location.LocationManager,android.telephony.TelephonyManager,a
ndroid.bluetooth.BluetoothAdapter,android.bluetooth.BluetoothManager
Network traffic:
• Details: Socket[address=get.immuni.gov.it/2.19.51.176,port=443,localPort=4530
4

A.14

Apturi covid

Java classes: android.bluetooth.BluetoothAdapter,android.telephony.TelephonyManager
,android.location.LocationManager
• Details: Socket[address=apturicovid-files.spkc.gov.lv/212.70.163.116,port=443
,localPort=50457]

A.15

CoronaMelder

Java classes: android.location.LocationManager,android.telephony.TelephonyManager,a
ndroid.bluetooth.BluetoothAdapter,android.bluetooth.BluetoothManager
Network traffic:
• Details: Socket[address=productie.coronamelder-dist.nl/195.121.65.164,port=44
3,localPort=50668]

A.16

Smittestopp

Java classes: android.telephony.TelephonyManager
Network traffic:
• Details: Socket[address=in.appcenter.ms/52.232.216.86,port=443,localPort=3864
4]

A.17

STOP COVID - ProteGO Safe

Java classes: android.telephony.TelephonyManager,android.bluetooth.BluetoothAdapter
,android.bluetooth.BluetoothManager

A.18

STAYAWAY COVID

Java classes: android.telephony.TelephonyManager,android.bluetooth.BluetoothAdapter
Network traffic:
• Details: Socket[address=stayaway.incm.pt/193.17.0.222,port=443,localPort=5210
9]

19

A.19

ZostanZdravy

Java classes: android.telephony.TelephonyManager
Network traffic:
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42760]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42764]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42716]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42732]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42750]
• Details: Socket[address=covid-gateway.azurewebsites.net/23.97.214.177,port=44
3,localPort=53294]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42722]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42724]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42744]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42752]
• Details: Socket[address=settings.crashlytics.com/172.217.22.35,port=443,local
Port=52864]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42746]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42754]
• Details: Socket[address=firebaseinstallations.googleapis.com/216.58.212.170,p
ort=443,localPort=42756]

A.20

Radar COVID

Java classes: android.telephony.TelephonyManager,android.bluetooth.BluetoothAdapter
Network traffic:
• Details: Socket[address=radarcovid.covid19.gob.es/52.85.158.69,port=443,local
Port=59576]
• Details: Socket[address=radarcovid.covid19.gob.es/52.85.158.69,port=443,local
Port=59577]

A.21

SwissCovid

Java classes: android.bluetooth.BluetoothAdapter
20

A.22

NHS COVID19

Java classes: android.telephony.TelephonyManager,android.bluetooth.BluetoothAdapter
,android.location.LocationManager
Network traffic:
• Details: https://in.appcenter.ms/logs?api-version=1.0.0
• Details: Socket[address=in.appcenter.ms/20.185.75.141,port=443,localPort=4335
7]

References
[1] Privacy-preserving contact tracing.
Accessed on: Sep 20, 2020.

https://www.apple.com/covid19/contacttracing.

[2] Decentralized privacy-preserving proximity tracing. https://github.com/DP-3T. Accessed
on: Sep 20, 2020.
[3] Pan-european privacy-preserving proximity tracing. https://www.pepp-pt.org. Accessed
on: Sep 20, 2020.
[4] Fraunhofer AISEC. Pandemic contact tracing apps: Dp-3t, pepp-pt ntk, and robert from a
privacy perspective. Cryptology ePrint Archive, Report 2020/489, 2020. https://eprint.
iacr.org/2020/489.
[5] Gennaro Avitabile, Vincenzo Botta, Vincenzo Iovino, and Ivan Visconti. Towards defeating
mass surveillance and sars-cov-2: The pronto-c2 fully decentralized automatic contact tracing
system. Cryptology ePrint Archive, Report 2020/493, 2020. https://eprint.iacr.org/
2020/493.
[6] Hyunghoon Cho, Daphne Ippolito, and Yun William Yu. Contact tracing mobile apps for
covid-19: Privacy considerations and related trade-offs. arXiv 2003.11511v2, March 2020.
[7] Ramesh Raskar et al. Apps gone rogue: Maintaining personal privacy in an epidemic. arXiv
2003.08567v1, March 2020.
[8] Nadeem Ahmed, Regio A. Michelin, Wanli Xue, Sushmita Ruj, Robert Malaney, Salil S.
Kanhere, Aruna Seneviratne, Wen Hu, Helge Janicke, and Sanjay Jha. A survey of covid-19
contact tracing apps. arXiV 2006.10306v2, June 2020.
[9] Jinfeng Li and Xinyi Guo. Covid-19 contact-tracing apps: a survey on the global deployment
and challenges. arXiv 2005.03599, July 2020.
[10] Tania Martin, Georgios Karopoulos, Jos L. Hernndez-Ramos, Georgios Kambourakis, and
Igor Nai Fovino. Demystifying covid-19 digital contact tracing: A survey on frameworks and
mobile apps. arXiv 2007.11687v1, July 2020.
[11] Playstore. https://play.google.com/store. Accessed on: Sep 20, 2020.
[12] Apktool. https://ibotpeaches.github.io/Apktool/. Accessed on: Sep 20, 2020.
[13] Vasileios Kouliaridis, Georgios Kambourakis, Dimitris Geneiatakis, and Nektaria Potha. Two
anatomists are better than one-dual-level android malware detection. Symmetry, 12(7):1128,
2020.
[14] Api reference. https://developer.android.com/reference. Accessed on: Sep 20, 2020.
[15] Nvidia shield tablet. https://www.nvidia.com/en-us/shield/tablet/. Accessed on: Sep
20, 2020.
21

[16] Ssl server test free online service. https://www.ssllabs.com/ssltest/index.html, . Accessed on: Sep 20, 2020.
[17] Qualys ssl labs, ssl server rating guide. https://github.com/ssllabs/research/wiki/SSLServer-Rating-Guide, . Accessed on: Sep 20, 2020.
[18] Covid-19 exposure notifications system. https://support.google.com/android/answer/
9888358?hl=en, . Accessed on: Sep 20, 2020.
[19] Decentralized privacy-preserving proximity tracing - androidmanifest.xml. https://github.
com/DP-3T/dp3t-app-android/blob/develop/app/src/main/AndroidManifest.xml. Accessed on: Sep 20, 2020.
[20] An update on exposure notifications. https://blog.google/inside-google/companyannouncements/update-exposure-notifications/, . Accessed on: Sept 10, 2020.
[21] Stopp corona.
https://play.google.com/store/apps/details?id=at.roteskreuz.
stopcorona. Accessed on: Sep 20, 2020.
[22] Virussafe.
https://play.google.com/store/apps/details?id=io.uslugi.nramobile.
Accessed on: Sep 20, 2020.
[23] Stop
covid-19.
https://play.google.com/store/apps/details?id=hr.miz.
evidencijakontakata. Accessed on: Sep 20, 2020.
[24] Covtracer.
https://play.google.com/store/apps/details?id=edu.rise.ihnilatis.
Accessed on: Sep 20, 2020.
[25] erouska.
https://play.google.com/store/apps/details?id=cz.covid19cz.erouska.
Accessed on: Sep 20, 2020.
[26] Smittestop.
https://play.google.com/store/apps/details?id=com.netcompany.
smittestop_exposure_notification. Accessed on: Sep 20, 2020.
[27] Hoia. https://play.google.com/store/apps/details?id=ee.tehik.hoia. Accessed on:
Sep 20, 2020.
[28] Stopcovid.
https://play.google.com/store/apps/details?id=fr.gouv.android.
stopcovid. Accessed on: Sep 20, 2020.
[29] Corona-warn-app.
https://play.google.com/store/apps/details?id=de.rki.
coronawarnapp. Accessed on: Sep 20, 2020.
[30] Virusradar. https://play.google.com/store/apps/details?id=hu.gov.virusradar. Accessed on: Sep 20, 2020.
[31] Covid tracker. https://play.google.com/store/apps/details?id=com.covidtracker.
hse. Accessed on: Sep 20, 2020.
[32] Immuni.
https://play.google.com/store/apps/details?id=it.
ministerodellasalute.immuni. Accessed on: Sep 20, 2020.
[33] Apturi covid.
https://play.google.com/store/apps/details?id=lv.spkc.gov.
apturicovid. Accessed on: Sep 20, 2020.
[34] Coronamelder. https://play.google.com/store/apps/details?id=nl.rijksoverheid.
en. Accessed on: Sep 21, 2020.
[35] Smittestopp.
https://play.google.com/store/apps/details?id=no.simula.
smittestopp. Accessed on: Sep 20, 2020.
22

[36] Smittestopp website. https://helsenorge.no/smittestopp. Accessed on: Sep 20, 2020.
[37] Protego. https://play.google.com/store/apps/details?id=pl.gov.mc.protegosafe.
Accessed on: Sep 20, 2020.
[38] Stayaway covid.
https://play.google.com/store/apps/details?id=fct.inesctec.
stayaway. Accessed on: Sep 21, 2020.
[39] Zostanzdravy.
https://play.google.com/store/apps/details?id=sk.nczi.covid19.
Accessed on: Sep 20, 2020.
[40] Covid19 zostanzdravy. https://www.old.korona.gov.sk/en/COVID19-ZostanZdravy.php.
Accessed on: Sep 20, 2020.
[41] Radar covid. https://play.google.com/store/apps/details?id=es.gob.radarcovid.
Accessed on: Sep 21, 2020.
[42] Swisscovid. https://play.google.com/store/apps/details?id=ch.admin.bag.dp3t. Accessed on: Sep 20, 2020.
[43] Nhs covid-19.
https://play.google.com/store/apps/details?id=uk.nhs.covid19.
production. Accessed on: Sep 20, 2020.

23

