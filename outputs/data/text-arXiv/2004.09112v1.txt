1

COVID-19 Time-series Prediction
by Joint Dictionary Learning and Online NMF

arXiv:2004.09112v1 [cs.LG] 20 Apr 2020

Hanbaek Lyu, Christopher Strohmeier, Georg Menz, and Deanna Needell

Abstract‚ÄîPredicting the spread and containment of COVID19 is a challenge of utmost importance that the broader scientific
community is currently facing. One of the main sources of
difficulty is that a very limited amount of daily COVID-19
case data is available, and with few exceptions, the majority
of countries are currently in the ‚Äúexponential spread stage,‚Äù and
thus there is scarce information available which would enable one
to predict the phase transition between spread and containment.
In this paper, we propose a novel approach to predicting the
spread of COVID-19 based on dictionary learning and online
nonnegative matrix factorization (online NMF). The key idea is
to learn dictionary patterns of short evolution instances of the
new daily cases in multiple countries at the same time, so that
their latent correlation structures are captured in the dictionary
patterns. We first learn such dictionary patterns by minibatch
learning from the entire time-series and then further adapt them
to the time-series by online NMF. As we progressively adapt
and improve the learned dictionary patterns to the more recent
observations, we also use them to make one-step predictions by
the partial fitting. Lastly, by recursively applying the one-step
predictions, we can extrapolate our predictions into the near
future. Our prediction results can be directly attributed to the
learned dictionary patterns due to their interpretability.
Index Terms‚ÄîCOVID-19, time-series, prediction, dictionary
learning, online Nonnegative Matrix Factorization

I. I NTRODUCTION
The rapid spread of coronavirus disease (COVID-19) has
had devastating effects globally. The virus first started to grow
significantly in China and then in South Korea around January
of 2020, and then had a major outbreak in European countries
within the next month, and as of April the US alone has over
400,000 cases with over 12,000 deaths. Predicting the rapid
spread of COVID-19 is a challenge of utmost importance that
the broader scientific community is currently facing.
A conventional approach to this problem is to use compartmental models (see, e.g. [15], [8] ), which are mathematical
models used to simulate the spread of infectious diseases
governed by stochastic differential equations describing interactions between different compartments of the population
(e.g. susceptible, infectious, and recovered). Namely, one may
postulate a compartmental model tailored to COVID-19 and
find optimal parameters for the model by fitting it them the
available data. An alternative approach is to use data-driven
machine learning techniques, especially deep learning algorithms [11], [2], [10], which have had great success in various
CS and DN supported in part by NSF CAREER #1348721 and NSF
BIGDATA #1740325.
Authors are with the Department of Mathematics, University of California,
Los Angeles CA 90095 USA (e-mail: hlyu@math.ucla.edu).
Codes are available at https://github.com/HanbaekLyu/ONMF-COVID19

problems including image classification, computer vision, and
voice recognition [16], [6], [13], [1].
In this paper, we propose an entirely different approach
to predicting the spread of COVID-19 based on dictionary
learning (or topic modeling), which is a machine learning
technique that is typically applied to text or image data in
order to extract important features of a complex dataset so that
one can represent said dataset in terms of a reduced number
of extracted features, or dictionary atoms [24], [5]. Although
dictionary learning has seen a wide array of applications in
data science, to our best knowledge this work is the first to
apply such an approach to time-series data and time-series
prediction.
Our proposed method has four components:
1. (Minibatch learning) Use online nonnegative matrix factorization (online NMF) to learn ‚Äúelemental‚Äù dictionary
atoms which may be combined to approximate short time
evolution patterns of correlated time-series data.
2. (Online learning) Further adapt the minibatch-learned
dictionary atoms by traversing the time-series data using
online NMF.
3. (Partial fitting and one-step prediction) Progressively improve our learned dictionary atoms by online learning
while concurrently making one-step predictions by partial
fitting.
4. (Recursive extrapolation) By recursively using the onestep predictions above, extrapolate into the future to
predict future values of the time-series.
Our method enables us to learn dictionary atoms from
a diverse collection of correlated time-series data (e.g. new
daily cases of COVID-19, number of fatal and recovered
cases, and degree of observance of social distancing measures).
The learned dictionary atoms describe ‚Äúelemental‚Äù short-time
evolution patterns from the correlated data which may be
superimposed to recover and even predict the original timeseries data. Online Nonnegative Matrix Factorization is at the
core of our learning algorithm, which continuously adapts and
improves the learned dictionary atoms to newly arrived timeseries data sets.
There are a number of advantages of our proposed approach
that may complement some of the shortcomings of the more
traditional model-based approach or large-data-based machine
learning approach. First, Our method is completely modelfree and has the universality of data types, as the dictionary
atoms directly learned from the data serve as the ‚Äòmodel‚Äô
for prediction. Hence a similar method could be applied
to predict not only the spread of the virus but also other
related parameters. These include the spread of COVID-19

2
(rank-r basis)

In this article, we demonstrate our general online NMFbased time-series prediction method on COVID-19 time-series
data by learning a small number of fundamental time evolution patterns in joint time-series among the six countries in
three different cases (confirmed/death/recovered) concurrently.
Our analysis shows that we can indeed extract interpretable
dictionary atoms for short-time evolution of such correlated
time-series and use them to get accurate short-time predictions with a small variation. This approach could further be
extended by augmenting various other types of correlated timeseries data set that may contain nontrivial information on the
spread of COVID-19 (e.g. time-series quantifying commodity,
movement, and media data).
This paper is organized as follows. In Section II, we give
a brief overview of dictionary learning by nonnegative matrix
factorization, and provide the full statement of our learning
and prediction algorithms. In Subsection III-A, we give a
description of the time-series data set of new COVID-19
cases and discuss a number of pre-processing methods for
regularizing high fluctuations in the data set. Then we discuss
our data analysis scheme and simulation setup in Subsection
III-B. In the following subsections III-C-III-E, we present
our main simulation results. Finally, we conclude and suggest
further directions in Section IV.

ùëü

ùëõ
√ó

ùëë

ùëã

‚âÖ

ùëë

Dictionary

Data

ùêª

ùëü

ùëä

Code

# of sq. patches sampled

Fig. 1. Illustration of matrix factorization. Each column of the data matrix
ùëò combination of the columns of the dictionary
is approximated by the linear
matrix with coefficients given by the corresponding column of the code matrix.
ùëò

‚âà

media information, medical and food supply shortages and
demands, patient subgroup infections, immunity and many
more. Second, our method does not lose interpretability as
some of the deep-learning-based approaches do, which is
particularly important in making predictions for health-related
areas. Third, our method is computationally efficient and can
be executed on a standard personal computer in a short time.
This enables our method to be applied in real-time in onlinesetting to generate continuously improving prediction. Lastly,
our method has a strong theoretical foundation based on the
recent work [19].

ùëõ

NMF

2
1 0 1 1
2
3 kX
0 1‚àí 0W1HkF
inf
r√ón
d√ór
4
0 1 1 0
, H‚ààR 4
W ‚ààR

+ ŒªkHk1 ,

ùëò

Sample sq. patches
Nonnegative matrix
factorization (NMF) is an instance of
matrix factorization where one seeks two nonnegative matrices
√ó
whose product approximates a given nonnegative
data matrix.
Below we give an extension of NMF with an extra sparsity
constraint on the code matrix which is particularly suited
for dictionary learning problems [14]. Given a data matrix
d√ón
X ‚àà R‚â•0
, the goal is to find Dictionary
a nonnegative dictionary
Code
W ‚àà Rd√ór and nonnegative code matrix H ‚àà Rr√ón by
1 2 3 4
solving 1the2following
optimization
problem:
3
1
0 1 0 0

‚â•0

(1)

‚â•0

P
2
2
Matrix
Pixel picture
where kAkGraph
F =
i,j Aij denotes the matrix Frobenius norm
and Œª ‚â• 0 is the L1 -regularization parameter for the code
matrix H.
A consequence of the nonnegativity constraints is that
one must represent the data using the dictionary W without
exploiting cancellation. This is a critical mechanism that gives
a parts-based representation of the data (see [17]). Many
efficient iterative algorithms for NMF are based on block
optimization schemes that have been proposed and studied
following the introduction of the first, and most well-known,
multiplicative update method by Lee and Seung [18] (see [12]
for a survey).
B. Our algorithms

II. T IME - SERIES P REDICTION BY O NLINE NMF

A. Dictionary learning by nonnegative matrix factorization
Matrix factorization provides a powerful mathematical setting for dictionary learning problems. We first organize n observations of d-dimensional samples a data matrix X ‚àà Rd√ón ,
and then seek a factorization of X into the product W H
for some W ‚àà Rd√ór and H ‚àà Rr√ón . This means that
each column of the data matrix is approximated by the linear
combination of the columns of the dictionary matrix W with
coefficients given by the corresponding column of the code
matrix H (see Figure 1). This problem has been extensively
studied under many names, each with different constraints:
dictionary learning, factor analysis, topic modeling, component analysis. It has also found applications in text analysis,
image reconstruction, medical imaging, bioinformatics, and
many other scientific fields [23], [3], [4], [9], [25], [7], [21].

In this section, we provide algorithms for online dictionary
learning and prediction for ensembles of correlated time-series.
At the core of our online dictionary learning algorithm is the
well-known online nonnegative matrix factorization (ONMF)
algorithm [20], [19], which is an online extension of NMF
that learns a sequence of dictionary matrices from a sequence
of data matrices.
We first illustrate the key idea in the simplest setting of timeseries data for a single entity. Suppose we observe a single
numerical value xs ‚àà R at each discrete time s. By adding
a suitable constant to all observed values, we may assume
without loss of generality that xs ‚â• 0 for all s ‚â• 0. Fix
integer parameters k, N, r ‚â• 0. Suppose we only store N past
data points at any given time, due to memory constraints. So
at time t, we hold the vector Dt = [xt‚àíN +1 , xt‚àíN +2 , ¬∑ ¬∑ ¬∑ , xt ]
in our memory. The goal is to learn a dictionary of k-step
evolution patterns from the observed history (xs )0‚â§s‚â§t up to
time t. A possible approach is to form a k by N ‚àík+1 Hankel
matrix Xt (see, e.g., [22]), whose ith column consists of the k
consecutive values of Dt starting from its ith coordinate. We

3

can then factorize this into k by r dictionary matrix W and r
by t ‚àí k code matrices using an NMF algorithm:
Ô£Æ
Ô£π
xt‚àíN +1
xt‚àíN +2
¬∑ ¬∑ ¬∑ xt‚àík+1
Ô£Øxt‚àíN +2
xt‚àíN +3
¬∑ ¬∑ ¬∑ xt‚àík+2 Ô£∫
Ô£Ø
Ô£∫
Xt = Ô£Ø
..
..
..
.. Ô£∫ ‚âà W H. (2)
Ô£∞
.
.
.
. Ô£ª
xt‚àíN +k

xt‚àíN +k+1

¬∑¬∑¬∑

xt

This approximate factorization tells us that we can approximately represent any k-step evolution pattern from our past
data (xs )t‚àíN <s‚â§t by a nonnegative linear combination of the
r columns of W . Hence the columns of W can be regarded
as dictionary patterns for all k-step time evolution patterns in
our current data set Dt for each time t.
Below we provide an online mini-batch implementation of
the above sketch of dictionary learning for time-series data in
an online setting, as well as an online prediction algorithm.
Algorithm 1 Online dictionary learning for time-series data

arg min
r√ó(N ‚àík+1)
H‚ààR‚â•0

(3)

(3)

||Xt ‚àí Wt‚àí1 H||2F + Œª||H||1 , (3)

(3)

where Xt is the mode-3 unfolding of the d √ó k √ó (N ‚àí
(3)
k +1) tensor Xt (similarly for Wt‚àí1 ), whose mode-1 slices
Xt (1), ¬∑ ¬∑ ¬∑ , Xt (d) are given by the following Hankel matrix
Ô£π
Ô£Æ
xt‚àíN +1 (i)
xt‚àíN +2 (i)
¬∑ ¬∑ ¬∑ xt‚àík+1 (i)
Ô£Øxt‚àíN +2 (i)
xt‚àíN +3 (i)
¬∑ ¬∑ ¬∑ xt‚àík+2 (i)Ô£∫
Ô£∫
Ô£Ø
Xt (i) = Ô£Ø
Ô£∫.
..
..
..
..
Ô£ª
Ô£∞
.
.
.
.
xt‚àíN +k (i) xt‚àíN +k+1 (i) ¬∑ ¬∑ ¬∑

xt (i)
(4)

Aggregate data:
At = (1 ‚àí t‚àíŒ≤ )At‚àí1 + t‚àíŒ≤ Ht HtT
Bt = (1 ‚àí t

‚àíŒ≤

)Bt‚àí1 + t

‚àíŒ≤

Ht XtT

d√ó1
Input: Time-series (xt )t‚àík+2‚â§s‚â§t , xt ‚àà R‚â•0

Dictionary tensor Wt ‚àà Rd√ók√ór
Output: Prediction xÃÇt+1 for xt+1
Variables: Œª0 > 0
Do:
Partial fitting:
ft H||2F + Œª0 ||H||1 ,
H‚àó = arg min ||e
xt ‚àí W

(8)

H‚ààRr√ó1
‚â•0

d(k‚àí1)√ó1

et ‚àà R‚â•0
where x
is obtained by concatenating the
columns of the following matrix
Ô£Æ
Ô£π
xt‚àík+2 (1) ¬∑ ¬∑ ¬∑ xt‚àík+2 (d)
Ô£Ø
Ô£∫
..
..
..
Ô£∫
Ô£Ø
.
.
.
(9)
Ô£Ø
Ô£∫,
Ô£∞ xt‚àí1 (1)
¬∑¬∑¬∑
xt‚àí1 (d) Ô£ª
xt (1)
¬∑¬∑¬∑
xt (d)
d(k‚àí1)√ór

Input: Time-series (xt )1‚â§t‚â§T , xt ‚àà Rd√ó1
‚â•0
Variables: N ‚â• k ‚àà N, Œª > 0, Œ≤ > 0,
r√ódk
W0 ‚àà Rd√ók√ór
, A0 ‚àà Rr√ór
‚â•0
‚â•0 , B0 ‚àà R‚â•0
for t = k, ¬∑ ¬∑ ¬∑ , T do
Update sparse code:
Ht =

Algorithm 2 Partial fitting and Prediction

(5)
(6)

ft ‚àà R
and W
is the mode-3 unfolding of the d √ó (k ‚àí
‚â•0
1) √ó r tensor Wt [:, : (k ‚àí 1), :] that consists of the first (k ‚àí 1)
entries of W in mode 2.
Prediction:
xÃÇt+1 = the last row of the k √ó d matrix obtained by reshaping
(3)
(3)
Wt H ‚àó , where Wt is the mode-3 unfolding of Wt
Algorithm 3 Minibatch dictionary learning for time-series
data
d√ó1
Input: Time-series (xt )1‚â§t‚â§T , xt ‚àà R‚â•0
d√ók√ór
Output: Dictionary tensor WM ‚àà R‚â•0
and aggregate
r√ór
r√ódk
matrices AM ‚àà R‚â•0 , BM ‚àà R‚â•0
Variables: N ‚â• k ‚àà N, Œª > 0, Œ≤ > 0, M ‚àà N
Random initialization:
Randomly initialize the tensors W0 ‚àà Rd√ók√ór , A0 ‚àà
r√ór
R‚â•0 , B0 ‚àà Rr√ódk
so that the entries are i.i.d. Uniform([0, 1])
‚â•0
variables.
for j = 1, 2, ¬∑ ¬∑ ¬∑ , M do
Choose t uniformly at random from {T ‚àí N + 1, T ‚àí N +
2, ¬∑ ¬∑ ¬∑ , T }
Update Wj ‚Üê Wj‚àí1 by using (3) - (7) in Algorithm 1.
end for

Update dictionary:
Wt = arg min tr(W(3) At (W(3) )T ) ‚àí 2 tr(Bt W(3) )
W‚ààRd√ók√ór
‚â•0

(7)
end for
The dictionary update rule in both Algorithms 1 and 3 are
based on the well-known online NMF algorithm in [20], [19].
Furthermore, in Algorithms 1 and 2, we also outline how to
make predictions using the online-learned dictionary atoms via
partial fitting (Algorithm 2) and extrapolation. Algorithm 3 is
useful for initializing the dictionary tensor W0 in Algorithm
1, especially when the time-series data is limited (small T )
so that one may not expect the online dictionary learning in

Algorithm 1 in T steps. Also, we may use a different timeseries (yt )1‚â§t‚â§T to find a dictionary tensor WM and use it
as the initial dictionary for the given time-series (xt )1‚â§t‚â§T in
Algorithm 1. This ‚Äútransfer learning‚Äù would be effective when
the two time-series share a similar structure.
The sparse coding problems in (3) and (8) can be solved by
LASSO, whereas the constrained quadratic problem (7) can be
solved by projected gradient descent algorithms. See [19] for
more details and background. For practical use, we provide
a python implementation of our algorithms in our GihHub
repository (see the footnote of the front page).
We also remark that, using the recent contribution of Lyu,
Needell, and Balzano [19] on online matrix factorization

Joint dictionary of 6-day evolution of three COVID_19 cases in six countries
Confirmed

Death

4

Recovered

Fig. 2. 24 Joint dictionary atoms of 6-day evolution patterns of new daily cases (confirmed/death/recovered) in six countries (S. Korea,

China, US, Italy, Germany, and France). Each dictionary atom is a 6 ‚àó 6 ‚àó 3 = 108 dimensional vector corresponding to time ‚àó country ‚àó
case type. The corresponding importance metric is shown below each atom. 50 atoms are learned and the figure shows top 24 with the
highest importance metric.

algorithms on dependent data streams, we can give a theoretical guarantee of convergence of the sequence of learned
dictionary atoms by Algorithm 1 under suitable assumptions.
The essential requirement is that the time-series data satisfies a
weak ‚Äústochastic periodicity‚Äù condition. A complete statement
of this result and proof will be provided in our follow-up paper.
While this is a substantial extension of the usual independence assumption in the streaming data set, unfortunately,
most COVID-19 time-series do not verify any type of weak
periodicity condition directly, which is one of the biggest
challenges in predicting the spread of COVID-19. In the
next section, we describe our experiment setting and how
we may overcome this issue of ‚Äúlack of periodicity‚Äù by
combining the minibatch and online learning algorithms. It is
important to note that minibatch learning algorithm (Algorithm
3) converges for fixed T as M ‚Üí ‚àû, as it is a version of
online NMF on a i.i.d. sequence of data, which satisfies our
stochastic periodicity condition.
III. A PPLICATION TO COVID-19 TIME - SERIES DATA SETS
A. Data set and pre-processing
To illustrate our dictionary learning and prediction algorithms for time-series data, we analyze the historical daily
reports of confirmed/death/recovered COVID-19 cases in six
countries ‚Äì South Korea, China, US, Italy, Spain, and Germany
‚Äì from Jan 19, 2020 to Apr. 12, 2020. The input data can be
represented as a tensor of shape 6 √ó 80 √ó 3 corresponding to
countries, days, and types of cases, respectively1 . In order to
1 Raw data obtain from https://github.com/CSSEGISandData/COVID-19/
tree/master/csse covid 19 data

apply our dictionary learning algorithms, we first unfold this
data tensor into a matrix X of shape (d √ó T ) = (6 √ó 3) √ó 80,
whose tth column, which we denote by xt , gives the full 18 dimensional observation in day t, 0 ‚â§ t ‚â§ 80. Also, we find that
the fluctuation in the original data set is too large to yield stable
representations, let alone predictions. In order to remedy this,
we pre-process the time-series data by taking a 5-day moving
average and then entry-wise log-transform x 7‚Üí log(x + 1).
After applying dictionary learning and prediction algorithms,
we take the inverse transform x 7‚Üí exp(x) ‚àí 1 and plot the
result.
B. Analysis scheme and experiment setup
As the COVID-19 time-series data set we analyze here only
consists of T = 80 highly non-repetitive observations, applying the online dictionary learning algorithm (Algorithm 1) with
random initialization is not sufficient for proper learning and
accurate prediction. We overcome this by using the minibatch
learning algorithm (Algorithm 3) for the initialization for the
online learning and prediction. Namely, we use the following
scheme:
1. (Minibatch learning) Use minibatch Algorithm 3 for the
time-series (xt )0‚â§t‚â§T to obtain dictionary tensor WM ‚àà
d√ók√ór
R‚â•0
and aggregate matrices AM ‚àà Rr√ór
‚â•0 , BM ‚àà
r√ódk
R‚â•0 .
2. (Online learning and one-step prediction) Use the output
in step 1 as the initialization for Algorithm 1. For each
t = 1, ¬∑ ¬∑ ¬∑ , T , iterates the steps in Algorithm 1 as well as
Algorithm 2. This outputs a dictionary tensor WT and a
prediction (xÃÇt )k‚â§t‚â§T +1 .

5

Prediction of COVID-19 daily new confirmed cases

Joint dictionary of 6-day evolution

Fig. 3. Joint dictionary learning and prediction for the time-series of new daily cases (confirmed/death/recovered) in six countries (S. Korea,

China, US, Italy, Germany, and France). After joint dictionary atoms are learned by minibatch learning, they are further adapted to the
time-series data by concurrent online learning and predictions. (Right) Joint dictionary atoms of 6-day evolution patterns of new confirmed
COVID-19
daily
neweach
deaths
Joint
6-day
cases. The corresponding Prediction
importance of
metric
is shown
below
atom. (Left) Plot of the original
anddictionary
predicted of
daily
newevolution
confirmed cases
of the six countries. The errorbar in the red plot shows standard deviation of 1000 trials.

3. (Recursive extrapolation) For T < t ‚â§ T + L, recursively
use Algorithm 2
The hyperparameters we used in each steps above are given
below:
1. (Minibatch learning)

observation at time t is not used, wherease in the other extreme
case Œ≤ = ‚àû only the present observation is used.
C. Simulation results - Minibatch learning

An example of dictionary atoms obtained from the minibatch learning algorithm (Algorithm 3) from the COVID-19
daily new cases time-series data set is presented in Figure 2.
M = 20
(# of minibatch iterations)
We note that the time evolution structure in the data set
k=6
(segment length)
is not used in this minibatch learning process, as slices of
Œª=3
(L1 -regularizer of sparse coding in (3))
length k evolution are sampled independently and uniformly
at random from the entire history. Each dictionary atom is
r = 50
(Number of dictionary atoms)


a 6 ‚àó 6 ‚àó 3 = 108 dimensional vector corresponding to
learning rate exponent for
Œ≤=1
time
‚àó country ‚àó case type.
minibatch learning
To each atom, we associate an ‚Äúimportance metric‚Äù first
2. (Online learning and one-step prediction)
introduced in [19] as a measure of the total contribution of
the atom in representing the original data set. Namely, the
N = 100
(Memory size)
importance metric of Joint
each dictionary
atom is the
of its linear
Prediction of COVID-19 daily new recovered cases
of total
6-daysum
evolution
k=6
(segment length)
coefficients in the sparse coding problem (3) during the entire
learning process. This is computed as the row sums of the
Œª0 = 1
(L1 -regularizer of sparse coding in (8))
sum of all code matrices Ht in (3) obtained from the learning
r = 50
(Number of dictionary atoms)


process.
learning rate exponent for
For example, the (1, 1) atom (in matrix coordinates) with
Œ≤=4
online learning
importance
0.23 in Figure 2 indicates that the number of
Œª0 = 0
(L1 -regularizer of sparse coding in (8))
daily new confirmed cases in all six countries are almost
constant and that China has significantly higher values than
3. (Recursive extrapolation)
other countries. Also, the (1, 4) atom (in matrix coordinates)
with importance 0.07 in Figure 2 indicates that the number of
Œª0 = 0
(L1 -regularizer of sparse coding in (8))
daily new confirmed cases are growing rapidly in Korea and
L = 30
(Future extrapolation length)
Italy, while for the other four countries the values are almost
The role of the parameter Œ≤ becomes clear when examining constant. It is important to note that these dictionary atoms
the equations (5) and (6). It weights how much of the past are learned by a nonnegative matrix factorization algorithm,
data is used when updating the new dictionary matrix Wt . so they maintain their individual interpretation we described
For example, in (7), in the extreme case Œ≤ = 0 the present before in representing the entire data set. Indeed, such patterns
N = 100

(Memory size)

6

Prediction of COVID-19 daily new deaths

Joint dictionary of 6-day evolution

Fig. 4. Joint dictionary learning and prediction for the time-series of new daily cases (confirmed/death/recovered) in six countries (S. Korea,

China, US, Italy, Germany, and France). After dictionary atoms representing fundamental joint time-series patterns are obtained by minibatch
learning, they are further adapted to the time-series data by online learning while making predictions. (Right) Joint dictionary atoms of 6-day
evolution patterns of Prediction
new death cases.
The corresponding
importancecases
metric is shown below each atom. (Left) The plot of the original and
of COVID-19
daily new recovered
Joint dictionary of 6-day evolution
predicted daily new death cases of the six countries. The error bar in the red plot shows the standard deviation of 1000 trials.

were dominant in the COVID-19 time-series data during the
period of Jan. 21 - Mar. 1, 2020 (see e.g. the blue plot in
Figure 3). Similarly, a direct interpretation of other dictionary
atoms can be associated with features in the original data set.
D. Simulation results - Online learning and one-step prediction
The learned dictionary atoms in Figure 2 are not only
directly interpretable but also provide a compressed representation of the original data set. Namely, we will be able to
approximate any 6-day evolution pattern in the data set by
only using the 24 atoms in Figure 2 with suitable nonnegative
linear coefficients found from the sparse coding problem (3).
Obtaining a global approximation of the entire data set based
on such local approximations by dictionary atoms is called
reconstruction (see for instance the image reconstruction example in [19]). Our partial fitting and prediction algorithm
(Algorithm 2) extends this reconstruction procedure by using
the learned patterns to make one step predictions adapted to
the time-series data.
The main point of our application is to illustrate that we
may obtain reasonable predictions on our very limited T = 80
COVID-19 time-series data set by learning a small number of
fundamental patterns in joint time evolution among the six
countries in three different cases (confirmed/death/recovered)
concurrently. This approach could further be extended by
augmenting various other types of correlated time-series which
contain nontrivial information on the spread of COVID-19
(e.g. time-series quantifying commodity, movement, and media data trends). One can think of learning the highly correlated temporal evolution patterns across different countries
and cases as a model construction process for the joint time
evolution of the data set. There are relatively few hyper-

parameters to train in our algorithm compared to deep neural
network-based models, and parameters in our method are in
some sense built-in to the temporal dictionary atoms so that
one does not need to begin by choosing the model to use.
However, recall that the dictionary atoms learned by the
minibatch algorithm are not adapted to the temporal structure
of the data set. We find that further adapting them in the direction of time evolution by using our online learning algorithm
(Algorithm 1) according to the scheme in subsection III-B
significantly improves the prediction accuracy by reducing the
standard deviation of the prediction curves over a number of
trials. An example of the result of this further adaptation of
the minibatch-learned dictionary atoms is shown in Figures
3, 4, and 5. In each figure, the online-improved dictionary
atoms are shown in the right, and the original time-series data
and its prediction computed by Algorithms 1-2 are shown in
blue and red, respectively. Prediction curves also show error
bars of one standard deviation from 1000 trials of the entire
scheme (minibatch + online + extrapolation) under the same
hyperparameters in Subsection III-B.
By comparing the corresponding dictionary atoms in Figures 2 and 3 for example, we find that the online learning
process does not change the importance metric on the top
24 atoms, and only a few atoms change in their shape
significantly (especially the curves for China in atoms at
(1, 1), (1, 2), (1, 3), (2, 1), and (4, 2)). Such new patterns were
not able to be learned by the minibatch learning, but they
were picked up by traversing the time-series data from the
past to the present with our online learning algorithm. The
‚Äúcorrectness‚Äù of the learned dictionary atoms can be verified
by the accuracy of the 1-step prediction up to time T = 80
(the end of blue curve in Figure 3) in Figures 3, 4, and 5.
We remark that our one-step predictions up to time T = 80

7

Prediction of COVID-19 daily new recovered cases

Joint dictionary of 6-day evolution

Fig. 5. Joint dictionary learning and prediction for the time-series of new daily cases (confirmed/death/recovered) in six countries (S. Korea,

China, US, Italy, Germany, and France). After joint dictionary atoms are learned by minibatch learning, they are further adapted to the
time-series by online learning while making predictions. (Right) Joint dictionary atoms of 6-day evolution patterns of new recovered cases.
The corresponding importance metric is shown below each atom. (Left) The plot of the original and predicted daily new recovered cases of
the six countries. The errorbar in the red plot shows the standard deviation of 1000 trials.

are not exact predictions, as our initial dictionary tensor for this
step, learned by the minibatch algorithm, uses all information
in the entire time-series data. More precisely, one can think
of this as a reconstruction procedure without seeing the last
coordinate. This would have been a proper prediction if our
initialization were independent of the data, but we find that
online learning alone without the minibatch initialization gives
inferior reconstruction results. We believe this is due to the
fact that the COVID-19 time-series data set is too short (and
far from periodic) for the online dictionary learning algorithm
to converge in a single run. Nevertheless, in some sense the
mini-batch method is implemented to compensate for the lack
of data; given a sufficient amount of data, we could omit this
step.
E. Simulation results - Recursive extrapolation
NextNext, we discuss the recursive extrapolation step, which
gives the 30-day prediction of the new daily cases of all three
types and all six countries simultaneously, shown as in Figures
3, 4, and 5. For instance, by partially fitting the first five
coordinates of the length-6 dictionary atoms to the last five
days of the data, we can use Algorithm 2 to obtain a prediction
of the future values at time T + 1. We can then recursively
continue this extrapolation step using the predicted data into
the future ad infinitum. Our 30-day prediction results show
reasonable variation among trials. However, the variation in
prediction grows in the prediction length, so only a moderate
range of predictions would have meaningful implications.
We remark that we did not enforce any additional assumption on the prediction curves (e.g. finite carrying capacity,
logistic-like growth for the total, SIR-type structure) that are
standard in many epidemiological models. Instead, we chose
our hyperparameters in subsection III-B so that the future

prediction curves approximately satisfy such assumptions,
highlighting the model-free nature of our approach. This highlevel fitting is not without compromise in the uncertainty of
the prediction. For example, choosing large values of the L1 regularization parameter Œª0 used in the recursive extrapolation
step reduces the variability of prediction significantly, but the
prediction curve drops to zero very rapidly right after the end
of the current data, which is absurd.
Lastly, we also mention that our recursive extrapolation
defines a deterministic dynamical system in multidimensional
space (dimension 18 in this case). The evolution is determined
by the hyperparameters and the set of dictionary atoms at
the end of the given time-series data (T = 80 in this
case). Even though our dictionary learning algorithms are
randomzied, we find our 30-day predictions over many trials
are within a modest standard error. However, we find that
the mean trajectory of the prediction could vary significantly
with respect to changes in the hyperparameters. Developing a
more systematic method of choosing these hyperparameters is
a future direction of inquiry.
IV. C ONCLUSION
With the rapidly changing situation involving COVID-19, it
is critical to have accurate and effective methods for predicting
short-term and long-term behavior of many parameters relating
to the virus. In this paper, we proposed a novel approach that
uses dictionary learning to predict time-series data. We then
applied this approach to analyze and predict the new daily
reports of COVID-19 cases in multiple countries. Usually,
dictionary learning is used for text and image data; often with
impressive results. To our best knowledge, our work is the first
to implement dictionary learning to time-series data.

8

There are a number of advantages of our approach that may
complement some of the shortcomings of the more traditional
model-based approach or the large-data-based machine learning approach. First, our method is completely model-free as
the dictionary atoms directly learned from the data serve as the
‚Äòmodel‚Äô for prediction. Our approach also works with universal
data types. For example, it could be applied to predict not only
the spread of the virus but also other related parameters. These
include the spread of COVID-19 media information, medical
and food supply shortages and demands, subgroup infections,
immunity and many more. Second, the method works with
small data sets. Most machine-learning methods need either
model-specific input or large data sets. Because COVID19
only appeared recently, there are no large data sets yet available. Third, the method does not lose interpretability as some
of the deep-learning-based approaches do. This is particularly
important when making predictions for health-related areas.
The learned dictionary atoms are not only interpretable but
also identify hidden correlations between multiple entities.
Fourth, our approach uses only a few hyperparameters that
are model-free and independent of the data set. Therefore
our approach avoids the issue of over-fitting. Furthermore,
the method is computationally efficient and can be executed
on a standard personal computer in a short time. Hence, it
could be applied in real-time or online-settings to generate
continuously improving predictions. Lastly, the method has a
strong theoretical foundation: Convergence of the minibatch
algorithm is always guaranteed and the convergence of the
online learning algorithm is guaranteed under the assumption
of quasi-periodicity. Therefore we expect our method to be
robust i.e. small changes to the data-set or to the parameters
should not destroy the learning outcome.
There are a number of future directions that we are envisioning. First, one could apply our method to county-level
time-series data. One would obtain dictionary atoms describing
county-wise correlation and prediction. This analysis could
be critically used in distributing medical supplies and also in
measuring the effect of re-opening the economy successively
by a few counties at a time. Second, as not every individual
can be tested, it is valuable to be able to transfer the knowledge
on tested subjects to the ones yet to be tested. This ‚Äòtransfer
learning‚Äô could naturally be done with our method, by learning
a dictionary from one subject group and apply that to make
predictions for the unknown group. Lastly, one may extend the
method to a fully tensor-based setting, where a large number
of related variables of different types could be encoded in
a single tensor. Then one could use various direct tensorfactorization methods to learn higher-order dictionary atoms.
For example, this might be useful in identifying a critical
subgroup of variables for clinical data and therapeutics.
R EFERENCES
[1] Dario Amodei, Rishita Anubhai, Eric Battenberg, Carl Case, Jared
Casper, Bryan Catanzaro, Jingdong Chen, Mike Chrzanowski, Adam
Coates, Greg Diamos, et al. End to end speech recognition in english
and mandarin. 2016.
[2] Yoshua Bengio. Deep learning of representations: Looking forward. In
International Conference on Statistical Language and Speech Processing, pages 1‚Äì37. Springer, 2013.

[3] Michael W Berry and Murray Browne. Email surveillance using nonnegative matrix factorization. Computational & Mathematical Organization Theory, 11(3):249‚Äì264, 2005.
[4] Michael W Berry, Murray Browne, Amy N Langville, V Paul Pauca,
and Robert J Plemmons. Algorithms and applications for approximate
nonnegative matrix factorization. Computational statistics & data
analysis, 52(1):155‚Äì173, 2007.
[5] David Blei, Lawrence Carin, and David Dunson. Probabilistic topic
models: A focus on graphical model design and applications to document
and image analysis. IEEE signal processing magazine, 27(6):55, 2010.
[6] Y-Lan Boureau, Jean Ponce, and Yann LeCun. A theoretical analysis
of feature pooling in visual recognition. In Proceedings of the 27th
international conference on machine learning (ICML-10), pages 111‚Äì
118, 2010.
[7] Rostyslav Boutchko, Debasis Mitra, Suzanne L Baker, William J Jagust,
and Grant T Gullberg. Clustering-initiated factor analysis application
for tissue classification in dynamic brain positron emission tomography.
Journal of Cerebral Blood Flow & Metabolism, 35(7):1104‚Äì1111, 2015.
[8] Fred Brauer. Compartmental models in epidemiology. In Mathematical
epidemiology, pages 19‚Äì79. Springer, 2008.
[9] Yang Chen, Xiao Wang, Cong Shi, Eng Keong Lua, Xiaoming Fu, Beixing Deng, and Xing Li. Phoenix: A weight-based network coordinate
system using matrix factorization. IEEE Transactions on Network and
Service Management, 8(4):334‚Äì347, 2011.
[10] Li Deng. A tutorial survey of architectures, algorithms, and applications
for deep learning. APSIPA Transactions on Signal and Information
Processing, 3, 2014.
[11] Li Deng, Jinyu Li, Jui-Ting Huang, Kaisheng Yao, Dong Yu, Frank
Seide, Michael Seltzer, Geoff Zweig, Xiaodong He, Jason Williams,
et al. Recent advances in deep learning for speech research at microsoft.
In 2013 IEEE International Conference on Acoustics, Speech and Signal
Processing, pages 8604‚Äì8608. IEEE, 2013.
[12] Nicolas Gillis. The why and how of nonnegative matrix factorization.
Regularization, optimization, kernels, and support vector machines,
12(257):257‚Äì291, 2014.
[13] Awni Hannun, Carl Case, Jared Casper, Bryan Catanzaro, Greg Diamos,
Erich Elsen, Ryan Prenger, Sanjeev Satheesh, Shubho Sengupta, Adam
Coates, et al. Deep speech: Scaling up end-to-end speech recognition.
arXiv preprint arXiv:1412.5567, 2014.
[14] Patrik O Hoyer. Non-negative matrix factorization with sparseness
constraints. Journal of machine learning research, 5(Nov):1457‚Äì1469,
2004.
[15] Matt J Keeling and Ken TD Eames. Networks and epidemic models.
Journal of the Royal Society Interface, 2(4):295‚Äì307, 2005.
[16] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet
classification with deep convolutional neural networks. In Advances
in neural information processing systems, pages 1097‚Äì1105, 2012.
[17] Daniel D Lee and H Sebastian Seung. Learning the parts of objects by
non-negative matrix factorization. Nature, 401(6755):788‚Äì791, 1999.
[18] Daniel D Lee and H Sebastian Seung. Algorithms for non-negative
matrix factorization. In Advances in neural information processing
systems, pages 556‚Äì562, 2001.
[19] H. Lyu, D. Needell, and L. Balzano. Online matrix factorization for
markovian data and applications to network dictionary learning. 2019.
Submitted.
[20] Julien Mairal, Francis Bach, Jean Ponce, and Guillermo Sapiro. Online
learning for matrix factorization and sparse coding. Journal of Machine
Learning Research, 11(Jan):19‚Äì60, 2010.
[21] Bin Ren, Laurent Pueyo, Guangtun Ben Zhu, John Debes, and Gaspard DucheÃÇne. Non-negative matrix factorization: robust extraction of
extended structures. The Astrophysical Journal, 852(2):104, 2018.
[22] J Rissanen. Algorithms for triangular decomposition of block hankel
and toeplitz matrices with application to factoring positive matrix
polynomials. Mathematics of computation, 27(121):147‚Äì154, 1973.
[23] Arkadiusz Sitek, Grant T Gullberg, and Ronald H Huesman. Correction
for ambiguous solutions in factor analysis using a penalized least squares
objective. IEEE transactions on medical imaging, 21(3):216‚Äì225, 2002.
[24] Mark Steyvers and Tom Griffiths. Probabilistic topic models. Handbook
of latent semantic analysis, 427(7):424‚Äì440, 2007.
[25] Leo Taslaman and BjoÃàrn Nilsson. A framework for regularized nonnegative matrix factorization, with application to the analysis of gene
expression data. PloS one, 7(11):e46331, 2012.

