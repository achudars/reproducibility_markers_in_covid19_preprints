1

Measuring economic activity from space: a case
study using flying airplanes and COVID-19
Maurı́cio Pamplona Segundo, Member, IEEE, Allan Pinto, Member, IEEE, Rodrigo Minetto, Member, IEEE,
Ricardo da Silva Torres, Member, IEEE, and Sudeep Sarkar, Fellow, IEEE

arXiv:2104.10345v1 [cs.CV] 21 Apr 2021

F

This work introduces a novel solution to measure economic activity through remote sensing for a wide range
of spatial areas. We hypothesized that disturbances in human behavior caused by major life-changing events leave
signatures in satellite imagery that allows devising relevant image-based indicators to estimate their impacts and
support decision-makers. We present a case study for the
COVID-19 coronavirus outbreak, which imposed severe mobility restrictions and caused worldwide disruptions, using
flying airplane detection around the 30 busiest airports in
Europe to quantify and analyze the lockdown’s effects and
post-lockdown recovery. Our solution won the Rapid Action
Coronavirus Earth observation (RACE) upscaling challenge,
sponsored by the European Space Agency and the European
Commission, and now integrates the RACE dashboard. This
platform combines satellite data and artificial intelligence
to promote a progressive and safe reopening of essential
activities. Code and CNN models are available at https:
//github.com/maups/covid19-custom-script-contest.
Index Terms—Remote sensing, CNN-based object detection, human
and economic activity assessment, COVID-19 pandemic.

1

INTRODUCTION

Our planet is experiencing an increase in disasters [1] and
disease outbreaks [2] over the past decades. Therefore, developing methods and tools to provide meaningful information for assertive decision-making during emergencies, thus
implementing safety and welfare measures, is of paramount
importance. Such a demand has led the research community to focus on finding indicators to support the different
phases of emergency management [3]–[7]. One of the main
challenges in designing an indicator, especially when its
coverage area is beyond the country level, is collecting
data that helps analyze a phenomenon and improves our
•
•
•
•

M. Pamplona Segundo and S. Sarkar are with Department of Computer
Science and Engineering, University of South Florida (USF), Tampa, FL,
USA. E-mail: {mauriciop,sarkar}@usf.edu
A. Pinto is with Universidade Estadual de Campinas (UNICAMP),
Brazil. E-mail: allan.pinto@ic.unicamp.br
R. Minetto is with Universidade Tecnológica Federal do Paraná (UTFPR),
Brazil. E-mail: rminetto@utfpr.edu.br
R. da Silva Torres is with Norwegian University of Science and Technology, Department of ICT and Natural Sciences, Alesund, Norway. E-mail:
ricardo.torres@ntnu.no

understanding of its causes and symptoms. Depending on
the required information (e.g., data from cell phones [8],
social media, press releases), different factors spoil this
process, including access limitations, varying technologies,
lack of infrastructure, sovereignty restrictions, and language
mismatch, to list a few. We hypothesize that disruptions of
this magnitude impact social behaviors and leave signatures
in satellite imagery that can be automatically detected and
quantified. And unlike other data sources, remote sensing
stands out for its global coverage and versatility – it can
integrate new indicators and new locations with little effort
– while eliminating collection and format conversion complications. These characteristics are highly advantageous in
fast response scenarios.
The most recent global crisis, yet to be resolved, is the
COVID-19 coronavirus pandemic. As of April 2021, this
outbreak reached an unprecedented scale, with more than
three million deaths and more than 140 million confirmed
cases [9]. According to the United Nations’ framework
for the immediate socio-economic response to COVID-19
[10], this critical period is far more than a health hazard.
The socio-economic impact is tremendous and will increase
poverty and inequalities globally, jeopardizing lives and
livelihoods, especially for vulnerable groups. Other issues
include the lack of adequate social protection, losses in
income and jobs, increased food insecurity, and a decline
in global trades. These problems show the value of acting
fast to mitigate adverse effects when a proper response is
not timely possible and the recovery extension is unknown.
To support such actions, we combine machine learning and
satellite data to provide accessible COVID-19 information
agilely.
Researchers explored different human signatures visible from space in the literature. Night-time lights disclose urbanization and population levels and can indicate
wealthiness [11] and socio-economic dynamics [12]. The
tropospheric nitrogen dioxide concentration, primarily affected by fossil fuel consumption, directly correlates with
economic activity variations [13]. The food supply chain
is evaluable through land use classification of agricultural
sites [14], [15] or transportation infrastructure monitoring
[16], [17]. Along this line, aircraft are of particular interest to
unveil human and economic activities (e.g., travel, tourism,
freight) and track disease spread due to in-flight transmission [18]–[20].

2

For those reasons, aircraft detection is present in the
most advanced aerial scene recognition benchmarks [21],
[22], and there is extensive literature addressing airport
operation, the great majority devoted to stationary aircraft
[23]–[26]. However, the number of parked airplanes is
not directly correlatable with airport traffic. For instance,
Paris’ Charles de Gaule Airport and Rome’s Leonardo da
Vinci–Fiumicino Airport have, on average, approximately
the same number of airplanes on the ground every day [27],
even though the former has about 50% more flights in the
same period [28]. Traffic estimation requires detecting flying
aircraft, whose literature is not so developed. Zhao et al. [29]
designed ingenious heuristics to perform this task using the
water vapor absorption channel from LandSat-8 thanks to
the observation that reflectance increases for high-altitude
surfaces and generates bright spots on aircraft locations.
Despite the high accuracy in ideal conditions, this method
is affected by weather conditions (e.g., high clouds) and
low altitudes (e.g., aircraft during take-off and landing).
Besides, Landsat-8’s repeat cycle of 16 days [30] hinders the
ability to use temporal data to cope with these difficulties.
Heiselberg [31] and Liu et al. [32] utilized images captured
by the Sentinel-2 satellites for the same job. These satellites’
multispectral instrument design makes them observe the
earth’s surface at different times in each spectral band [33].
As the ground serves as a reference to merging bands, the
resulting multispectral images (from MSI sensor on-board
Sentinel-2) present inter-band measurement displacements
due to parallax for objects at high altitudes and high-speed
movement for objects at any elevation. Figure 1 illustrates
how these displacements create a colored pattern for flying
airplanes in the three MSI bands of visible light. The works
of Heiselberg [31] and Liu et al. [32] also relied on experts to
handcraft heuristics for the airplane detection, which may
prevent immediate analyses in outbreaks that require a fast
response.
In this work, we take advantage of the advances driven
by deep learning algorithms [34] – bio-inspired neural networks that learn representations with multiple abstraction
levels and discover intricate patterns in massive data – to
devise a dependable and adaptable detector. Our approach
goes beyond the detection of flying airplanes as we use our
airplane detector to built a time series of the number of
landing or take-off airplanes in airports. We then process
those time series to estimate structural breaks (caused by
lockdown restriction at the beginning of the pandemic) and
to compute the recovery rate for the monitored airports. The
presented framework supports decision-making during the
COVID-19 pandemic by measuring how fast the airports
are recovering toward getting into their normal operation
and if such recovery is in accordance with opening and
lockdown policies, which should be defined considering
the number of cases and deaths of COVID-19 pandemic.
Furthermore, our approach was designed to require a small
amount of labeled data for training the proposed flying
airplane detector, without loss of generality. We validate our
approach by monitoring the 30 busiest airports in countries
with some integration to the European Union. The results
show the effectiveness of our solution to measure such
activities and the recovery rate of such airports.
In summary, this study presents several contributions in

(a) Satellite movement

Satellite’s heading
Airplane’s heading

(c)

(b) Object movement

Satellite’s heading
Airplane’s heading

(d)

Satellite’s heading
Airplane’s heading

(e)

Fig. 1. Airplane color patterns in Sentinel-2 images: these satellites
observe the ground surface at different times in each spectral band, creating (a) a parallax effect for airplanes at high altitudes and (b) a similar
color separation effect for airplanes in high-speed at any elevation; both
effects combined produce the colored patterns shown in figures (c), (d),
and (e). This figure contains modified Sentinel-2 data processed by Euro
Data Cube.

some subjects relevant to the research field in which this
study inserts itself and to the society toward facing the negative aspect of the COVID-19 pandemic. First, this method
is currently fully integrated into the Rapid Action Coronavirus
Earth (RACE) observation dashboard [35], which is an open
platform of the European Space Agency (ESA) that uses
Earth observation satellite data and artificial intelligence
to measure the impact of the COVID-19 lockdown and
to monitor post-lockdown recovery. This study also shows
how to design and train a shallow neural network to detect
flying airplanes using remote sensing imagery and with
a minimum amount of annotated images. Flying airplane
detection task is still an open problem in the current literature, and this study contributes with the proposal of a new
technique for this task that has been successfully used in a
challenging and practical scenario related to combating the
COVID-19 pandemic. The third contribution of this study
relies on the construction of a new dataset, along with the
ground-truth annotations of flying airplanes, to support future researches involving flying airplane detection through
satellite images. The fourth contribution refers to the analysis of time series built with our flying airplanes detector
to estimate breakouts and recovery rate, automatically, and
to support decision-making to opening and closing airports
taking into account the official numbers of COVID-19 cases
and deaths. Finally, the source code of our solution, the
trained models, and the annotated data are freely available
to the scientific community, encouraging reproducibility of
our results and the use of our solution in similar situations
in the future.

3

a) AOI selection

b) Image acquisition

c) Flying airplane detection

5×5×16 Conv
+
ReLU
+
BN
+
5×5 MaxPool

f) Activity indicator

e) Recovery estimation

5×5×32 Conv
+
ReLU
+
BN
+
5×5 MaxPool

5×5×64 Conv
+
ReLU
+
BN
+
5×5 MaxPool

5×5×64 Conv
+
ReLU
+
BN
+
5×5 MaxPool

5×5×64 Conv
+
ReLU
+
BN
+
5×5 MaxPool

11×11×1 Conv
+
Sigmoid

d) Time series analysis

Fig. 2. The main steps of the proposed approach for detecting flying airplanes and to measure breakouts and recovery rates of airports activities.
This figure contains modified Sentinel-2 data processed by Euro Data Cube.

2

P ROPOSED APPROACH

This study introduces a new approach for measuring airport
activities using satellite to support decision-making during
the COVID-19 outbreak, as illustrated in Figure 2. More
precisely, we proposed a new method for detecting flying
airplanes on Sentinel-2 satellite that enables the monitoring
of airport activity in wide areas (Figures 2(a) and 2(b)). We
adopted the use of shallow fully convolutional networks
(FCN) to devise a lightweight architecture (Figure 2(c))
containing few trainable parameters and thus requiring
lower amounts of training data than other deep learning
architectures available in the literature addressing the object
detection problem [36]. We summarized the detected flying
airplanes in a time series representation associated with the
number of airplanes around each monitored airport over
time (in days). Next, we performed a time series analysis to
estimate breaking points associated with the first lockdown
restriction related to the COVID-19 pandemic (Figure 2(d)).
Then, we fitted a log-linear regression model to estimate
the recovery rates for the airports considered in this study,
which allowed us to correlate the estimated recovery rates
with the cases and deaths of coronavirus disease in those
locations (Figure 2(e)). Finally, we compiled this knowledge into an activity indicator (Figure 2(f)) to support the
conception, planning, implementation, and evaluation of
disease-containment actions. These stages are detailed in the
following sections.
2.1

Data collection

The first stage of this study consisted of creating a dataset to
analyze human travel behavior in the European Union. Our
analysis relies on detecting flying airplanes from satellite

images and measuring the volume of flights over time.
To capture traffic dynamics through remote sensing, the
satellite must have a high revisit rate, it must perceive highspeed objects, and imaging resolution must be sufficiently
high so that airplanes are visible. The Copernicus Sentinel2 constellation meets all of these requirements [33]. The
Sentinel-2 mission includes two identical satellites in the
same sun-synchronous polar orbit, 180◦ apart from each
other, that revisit any Earth location every 2 to 5 days
(higher frequency for areas close to the poles). They capture
the visible bands of their multi-spectral images (Red, Green,
and Blue (RGB)) with a ground sampling distance (GSD)
of 10 meters and a time-lapse of approximately 0.5 seconds
between consecutive bands (red-green and green-blue).
The proposed method operates on sequences of satellite
images from Areas of Interest (AOI), which are rectangles
with 1.05 longitude degrees in width and 0.7 latitude degrees in height, centered at the geographical coordinates of
the 30 busiest airports (i.e., airports that had the highest
number of passengers in 2019) in countries with some
integration to the European Union. Thus, the AOIs have
an area of 6,000 km2 , on average, and the selected airports cover 26 different cities and 18 different countries.
Figure 2(a) highlights their location, and the complete list
of International Air Transport Association (IATA) airport
codes is shown in Figure 3(a). The specified AOI provides an
observation window of approximately 20 minutes around
each airport. More specifically, a satellite image captured at
timestamp t shows flight arrivals in the range [t, t + 20min]
and departures in the range [t − 20min, t] for the depicted
airport.
We downloaded Sentinel-2 RGB images using the
Sentinel-Hub engine [37]. We divided each AOI into a 7 × 7

4

grid and evaluated each grid cell’s viability considering the
following criteria: (1) cells cannot have more than 30% of
cloud coverage; and (2) cells cannot have more than 10%
of missing data. The average number of viable cells per
image is 15. Figure 3(a) shows the number of images and
viable cells per airport, while Figure 3(b) shows the total
number of images and viable cells over time. These images
were captured by Sentinel-2 satellites between June 26th,
2015 and July 30th, 2020.
Number of viable cells
15000

1000

12000

750

9000

500

6000

250

3000

AW
ZR
H

TX
L
VI
E

W

Y

SL
PM
I
ST
N

O

C

XP

R

U

M

O

AD

AN
M

M

M

LI
S
LT
N

0

AG
P
AM
S
AR
N
AT
H
BC
N
BR
U
C
D
G
C
PH
D
U
B
D
U
S
FC
O
FR
A
H
EL
IS
T
LG
W
LH
R

0

# vialble cells

# images

Number of images
1250

(a)
Number of viable cells
10000

600

7500

400

5000

200

2500

0

# viable cells

# images

Number of images
800

0

Jan/2016

Jan/2017

Jan/2018

Jan/2019

Jan/2020

(b)
Fig. 3. Data collection statistics. The total number of images and viable
cells per airport(a) and number of images and viable cells per month for
all airports (b).

2.2

Shallow FCN for detecting flying airplanes

Current state-of-the-art detectors either use region proposal
or feature pyramid networks to estimate both bounding
box coordinates and classes of objects in a scene [36], [38].
Such detectors take advantage of deep architectures [39]
that contain hundreds of millions of trainable parameters
and thus require large training data. With this in mind,
we hypotheses the use of shallow architectures is more
adequate for modeling our problem due to the absence of
a large training data with annotated ground-truth. Shallow
architectures have fewer trainable parameters, in comparison to deep architectures, and thus require a reduced
amount of labeled data during the training stage. It is
important to notice that labeling data is a costly and a timeconsuming process, which may become prohibitive when
a rapid response is necessary. Furthermore, as we are only
interested in counting airplanes, information like bounding
boxes and airplane size, in terms of pixels, is not relevant to
us. With this in mind, we can reduce the complexity of our
architecture by modeling the problem of counting airplanes
as a classification problem devised to classify each pixel of
the image as being or not the center of a flying airplane
(green dot in Figures 1(c)-1(e)).
To validate our hypothesis, we designed a shallow
FCN [40] to produce a probability value for each pixel of
an input image, as illustrated in Figure 2(c). More precisely,
the receptive field around each pixel was set to a region of
51 × 51 pixels, which perceives airplanes traveling up to

1,800 kilometers per hour, twice as much as the typical commercial cruise speed. This surplus handles the variability
introduced by parallax and altitude changes. The proposed
shallow FCN architecture consists of five consecutive 5 × 5
convolutional layers, each followed by a rectified linear unit
activation [41], batch normalization [42], and a 5 × 5 max
pooling. Then, we added an 11 × 11 convolutional layer
with sigmoid activation to output values between 0 and
1. All layers use unit strides so that the output resolution
is the same as the input. This architecture has a total of
277,745 learnable parameters, which correspond to a model
size of only ∼1.1MB. Finally, non-maximum suppression
[43] returns unique detections, and a threshold of 0.5 selects
the ones that most likely represent an airplane.
Due to the global nature of the COVID-19 pandemic,
the generalization is an important aspect to consider. More
precisely, it is essential to detect flying airplanes in unknown
areas without the need for retraining our model. To evaluate
this competence, we used the airports with the first 15 IATA
codes in alphabetical order for training (see Figure 3(a)),
and remaining 15 airports were used for testing only. With
this split we can measure our detector’s performance in
airports that were not seen during training to validate its
generalization capability. Besides, we only used images from
January 1, 2020 to June 30, 2020 for training. Thus, we can
also use images outside this time period to evaluate our
detector’s behavior in unseen images from known areas
(training airports).
We adopted a semi-automatic strategy to obtain enough
annotations even when a rapid response is required. First,
we manually annotate as many instances of the target object
as possible in a small number of images (in this work,
we annotated 190 flying airplanes in 18 images from the
Charles de Gaulle Airport). Then, we gradually expand this
set of annotations by alternating between training a model
with the existing annotations and manually inspecting the
detection results to update the annotation set. In our case,
we trained an initial model using our 18 annotated images
and used it to detect airplanes in all training images. We
removed all false alarms from the set of detected airplanes
through a visual inspection, and used the coordinates of
the remaining detections as the new set of annotations.
We repeated this process once more, but this time we also
adjusted the detected coordinates to overlay the green dot of
the flying airplane pattern (see Figures 1(c)-1(e)). We ended
up with 1782 flying airplanes in our final annotation set,
which was used to train our final detection model. Every
training repetition was carried out by Algorithm 1, with
N = 1 and M = ∞ for temporary models and N = 10
and M = 50 for the final detector. N is a patience parameter
used to stop the training early if the model does not improve
for N consecutive epochs, and M is the maximum number
of epochs.
2.3

Time series generation

As shown in Figure 7, satellite images do not always cover
the entire AOI due to cloud occlusions or to a misalignment
between the satellite visible area and the AOI. Thus, estimating the airplane count within a day is not accurate enough
for further calculations. We alleviate this problem by using

5

1
2

3
4
5

6
7
8
9
10
11
12
13
14
15

Input: Training images, Flying airplane annotations
Result: FCN model that detects flying airplanes on satellite images
Randomly initialize the learnable parameters of the FCN model;
Follow the strategy shown in Figure 4 to build an initial set of training samples by using airplane annotations to extract
image patches with 51 × 51 pixels of positive and negative samples from the input images; extract additional negative
patches from random locations that are at least 25 pixels away from all annotations until a 1:2 ratio between the amount
of positive and negative samples is reached;
Set score = 0;
repeat
Run one training epoch (3,000 model update iterations) using: (1) mini-batches with 256 random samples, (2) random
flips (horizontal and vertical) and 90-degree rotations over samples as data augmentation operations, and (3) the
Adam algorithm with a learning rate of 10−4 to optimize the binary cross-entropy loss function;
Run the current model over the training images and save the list of detected airplanes;
Initially mark all detections as false alarms;
foreach annotated airplane do
Find the closest detection to the current annotation and mark this detection as a true positive if the distance
between them is less than or equal to 25 pixels (half of the patch size);
end
Compute the detection rate DR as the number of detections marked as true positives divided by the number of
annotated airplanes;
Compute the false discovery rate F DR as the number of detections marked as false alarms divided by the total
number of detections;
Set score = DR(1 − F DR), and save the current model if score increases;
Update the set of training samples by randomly replacing up to half of the negative patches with 51 × 51 patches
extracted from detections annotated as false alarms in this iteration;
until score does not increase for N epochs or the maximum number of epochs M is reached;

Algorithm 1: Pseudo-algorithm for training our FCN model.

In some cases, satellite images may present some artifacts caused by the misalignment between color bands
or sun-glint (see Figure 5). Although their occurrence is
rare, these artifacts tend to produce several false positives
close to each other. If ignored, this problem considerably
affects individual cell averages and the final airplane count.
To cope with these noisy regions, given that no grid cell
in the training set has more than 4 annotated airplanes
(considering the final annotation set used for training), we
ignore cells that have more than 5 detected airplanes (set
k
ckij = 0 and vij
= 0 if ckij > 5).
Fig. 4. Sampling strategy for training: for each annotation (point shown
in blue), we extract positive image patches centered on blue and green
points. Green points are dp pixels away from the blue one in one or
both axes (dp = 3). Negative image patches are centered on red points,
which are dn pixels away from the blue one in one or both axes (dn =
25). This figure contains modified Sentinel-2 data processed by Euro
Data Cube.

a temporal window w. The set of satellite images Iw within
this window are used to produce an average airplane count
Cw , as shown in Equation (1):
7 X
7
X

(a)

k
k∈Iw cij
P
Cw =
k}
max{1, k∈Iw vij
i=1 j=1

(b)

P

(1)

where ckij is the airplane count for the cell in the i-th row and
k
j -th column of the k -th image, and vij
is 1 if this cell is viable
and 0 otherwise. As can be seen, we compute averages at
cell level for our 7 × 7 AOI grids and then sum all cell
averages to obtain a count estimate at image level. We use a
window size of 30 days with a step size of one day to create
our time series (see examples in Figure 9(c)).

Fig. 5. RGB noise patterns in satellite images caused by (a) misalignment between color bands or by (b) sun-glint. This figure contains
modified Sentinel-2 data processed by Euro Data Cube.

2.4

Time series analysis

To estimate the airports’ activity in normal and exceptional
periods, including the COVID-19 outbreak, we proposed a
temporal analysis of time series built from the number of
airplanes flying around airports considered in this work.

6

We adopted the use of the concept of the structural breaks,
which has been applied in other remote sensing-related
problems [44]–[46]. Thus, we characterize the breaks as a
position in the time series in which an abrupt shift (or
decrease) is observed [44].
To detect a breaking point in the time series, we
adopted two approaches: the simple moving-average (SMA)
crossover [47] and Twitter’s Breakout Detection [48]. The
simple SMA crossover comprises two simple movingaverage to follow short-term and long-term tendencies.
While the short-term moving average is more reactive to
variations, the long-term moving average aggregate changes
over a long time and thus produced a smoothed curve.
When the curve resultant of these two moving average
crosses, then we might have a change of tendency. In turn,
the Twitter algorithm employs the E-Divisive with Medians
(EDM) method [49] to automatically detect breakouts in
time series. The authors employed the E-statistics to locate
changes in mean without any assumption regarding the
data distribution. According to authors, this approach was
designed to work in presence of anomalies. A more indepth discussion regarding the mathematics and statistical
theories regarding this method can be found in the literature [48], [49]. We evaluate these two algorithms to detect
a breaking point in our time series to find the instant t (in
days) in which the airport starts recovering from a very low
activity state.
After finding the breaking point in time series for each
airport, the next stage of our analysis consists of computing
the recovery rate of airports’ activity [50]. First, we computed a baseline YB , which is the average of the short-term
moving average. Then, we define the recovery rate using the
following exponential model [51], as follows:

dy
= −λ(YB − Yt )
(2)
dt
where Yt is the observed trend in the instant t and λ is
the recovery rate computed by fitting a linear regression of
−ln(YB − Yt ) against time. Figures 2(d) and 2(e) illustrate
the methodology used to compute the recovery rate. In
Figure 2(d), for a given time series, the baseline YB is
shown as a green line and the breaking point as a red
line. Then, we compute the differences between the baseline
and all Y values after the breaking point. These values are
transformed into a logarithm scale and used to fit a linear
regression (Figure 2(e)). Finally, the slope coefficient of the
fitted line represents the recovery rate for that time series.

3
3.1

R ESULTS
FCN-based detection results

To assess the effectiveness of our approach to detect flying
airplanes, we designed two experiments in order to measure
detection errors in practical scenarios: (1) visual inspections
around each detection to determine the proportion of false
alarms and (2) comparison to existing publicly available
flight records to quantify the occurrence of false negatives.
In the context of this work, false alarms occur when our
method classifies background patches as a flying airplane,
while false negatives occur when the method classifies
flying airplane patches as background.

3.1.1

Visual inspection to quantify false alarms

We conducted an error analysis to determine the number
of false alarms of our method in detecting flying airplanes
by visually inspecting the detection results in images that
were not seen during training. To this end, we first extracted
patches around each detection in images captured between
June 2015 and December 2019 from the 15 training AOIs.
After manually classifying each patch as a true positive
(T P ) or a false alarm (F A), we compute the false discovery
A
rate (F DR = T PF+F
A ) for unseen data from AOIs seen
during training. We adopted this strategy because it allows
accurately estimating FDR in the absence of ground truth
annotations. From the total number of 25,747 detections, 410
were false alarms, which corresponds to a 1.59% FDR. This
results in 7.6 false alarms per month, i.e., less than one false
alarm per airport each month. Knowing that each AOI has
an average of 10 images per month and each image has up to
20 million airplane candidates, the incidence of false alarms
in areas observed during training is minimal.
To evaluate the generalization capability of our detector
operating in unknown areas, we repeated the previous analysis using the images captured between June 2015 and June
2020 from the AOIs not seen during training. There were 616
false alarms in the midst of 30,958 detections, a 1.99% FDR.
The average number of false alarms per month was 10.1,
which again resulted in less than one false alarm per airport
each month. These values are similar to the ones reported
for training AOIs and show that our detector is equally
applicable to AOIs that were not seen during training but
have a similar setup.
We show several examples of regions depicting correct
detections and false alarms in Figure 6. These examples
show the robustness of our detector to a wide range of
variations and illustrate the most common causes of misdetection.
3.1.2 Analysis of publicly available of flight records to quantify false negatives
Given the vast amount of data collected in this work, a
comprehensive annotation of flying airplanes that allows
a precise estimation of the number of false negatives is
unfeasible. Thus, to quantitatively measure the detection
accuracy, we used publicly available flight track records
from the OpenSky Network [52] as a reference. To do so, we
retrieved all records whose portrayed airplanes are inside
one AOI at the same moment that the area is imaged by
a Sentinel-2 satellite from January 2020 to June 2020 (older
records were not available at OpenSky).
As shown in Figure 7, these records not necessarily
include all airplanes that appear in one image, either due
to the absence of tracks for some flights or to the registering
of incomplete tracks. Also, not all airplanes whose tracks
are available within a certain AOI can be detected by our
approach. In most cases, this occurs because these airplanes
appear over non-viable cells. In other cases, small airplanes
are not visible in the satellite image.
For this analysis, we created two time series with
monthly estimates of the number of flights for each AOI, one
using our detection results and the other using the OpenSky records. The time series for training and testing AOIs

7

(a)

(b)

(c)

(d)

(e)

(f)
(a)

(g)

(h)

(i)

(j)

(k)

(l)

(m)

(n)

Fig. 6. Examples of satellite image patches surrounding automatic detections. Samples classified as true positives: (a-b) large airplanes,
whose shape contours are visible, some of them with contrails; (c)
medium airplanes, which are still highly visible but have no shape cues;
(d) airplanes at low-speed (captured during landing or take off); (e)
incomplete airplanes due to missing data; (f) moderate cloud occlusions; (g) small airplanes, which are barely visible even after further
magnification; (h) severe cloud occlusions. Samples classified as false
alarms caused by: (i) image stitching in cloud areas; (j) parallax in cloud
edges; (k) sun-glint over water surface; (l) colored buildings; (m) ground
lights; and (n) movement patterns from vehicles in roadways. This figure
contains modified Sentinel-2 data processed by Euro Data Cube.

are presented in Figures 8(a) and 8(b), respectively. When
comparing the two series of the same AOI, we obtained a
Root Mean Squared Error (RMSE) of 2.9 and a Mean Signed
Deviation (MSD) of −0.8 on average for training AOIs, and
a 2.7 RMSE and a −1.4 MSD on average for testing AOIs.
Once again, the results for known and unknown AOIs are
close and reinforce our detector’s generalization power. The
RMSE values show that, when looking into individual AOIs,
our results are comparable to OpenSky records, exhibiting
similar volume of flights and trends in airport activity.
The MSD values reveal that our estimates are consistently
lower than their respective OpenSky values. This negative
bias approximates the average number of false negatives
per image. These false negatives, however, can either be
caused by detection failure (Figure 7(a)) or data absence

(b)

Fig. 7. Visual comparison between our detection results (filled yellow
circles) and the OpenSky Network flight records (unfilled pink circles).
The green lines represent the OpenSky tracks, from which we trace
the location of the airplanes at the image acquisition timestamp. Many
airplanes are depicted in both circle styles, and the displacement between yellow and pink circles is caused by different factors (e.g., airplane
altitude and speed, satellite viewpoint). Sometimes detected airplanes
do not have a corresponding OpenSky location due to incomplete tracks
during take-off and landing (blue rectangle in (a)) or to missing track
records (cyan rectangle in (a)). In turn, some OpenSky locations were
not detected by our method because airplanes were too small (red
rectangle in (a)) or because they were located over non-viable cells
(red rectangle in (b)). This figure contains modified Sentinel-2 data
processed by Euro Data Cube.

(Figure 7(b)).
If we consider the average time series from several AOIs
(thick black lines in Figures 8(a) and 8(b)), the RMSE is reduced by two thirds for known airports (from 2.9 to 1.0) and
by half for unknown airports (from 2.7 to 1.4). By averaging
multiple AOIs from different countries, we not only obtain
stabler series but also integrate airport activity at continental
level. To illustrate how accurate those measurements can
be, we recreate the real number of flights per month from
42 European countries (data from March to September of
2019 and 2020 made available by Eurocontrol [28]) using
the monthly average of the 30 AOIs considered in this work
(data from August to September of 2020 generated by the
live version of our approach at the RACE dashboard [35]).
As both series are in different scales, we normalized them
by their maximum values in the considered period, and the
outcome is presented in Figure 8(c). This result shows that
our monthly estimates are directly proportional to the real
number of flights. Thus, despite noisy, our time series for
individual AOIs fluctuate around their expected values and
allow us to conduct AOI-specific analyses.
3.2

Time series analysis results

This section presents the time series analysis applied in this
study to discover outbreaks in airports’ activities caused
by the COVID-19 pandemic and to estimate their recovery
rate. In both analyses, we use the proposed flying airplane
detection algorithm to build a time series associated with
the number of flying airplanes in each AOI considered in
this study.
3.2.1

Structural break detection

We assess the effectiveness of both SMA crossover [47]
and Twitter’s Breakout Detection [48] by analyzing their

8

(a)
2019 (real)

values ranging from 0.1 to 1.0. Before applying the twitter
algorithm for detecting breaking points, we first use a
smoothing technique to remove random variations and thus
reveals underlying trends clearly. From these experiments,
we could observe a better performance considering a msize
and beta parameter values of 64 and 0.2, respectively. As
a result, we observed a 19.7 MAE and a 23.4 RMSE for
the SMA crossover method, and a 19.9 MAE and a 26.5
RMSE for the Twitter algorithm. Both metrics indicate the
prediction quality, with errors ranging from 0 to infinity and
lower values being better.
Once the algorithms returned quantitative values, we
adopted the use of the Wilcoxon Signed-rank (WSR) test
statistic to verify if both algorithms are statistically different.
The WSR test is a non-parametric test used to assess the
null hypothesis that two related paired samples come from
the same distribution [53]. More precisely, we computed
the breaking points using both algorithms for the 30 airports considered in this study. Then, we converted the
detected breaking point dates into the Julian format, and
then we applied the WSR test to check if both algorithms
are statistically different. The obtained p-value confirmed
that the differences between the two algorithms’ results
are statistically significant, considering a confidence level
of 95%. Thus, from hereon we use the best configuration
of the SMA crossover since this method presented a better
performance.

(b)
2020 (real)

2019 (estimate)

2020 (estimate)

Relative number of flights

1.0
0.8
0.6
0.4
0.2

3.2.2

0.0

To compute the recovery rate, we fitted a log-linear regression model considering a linear regression algorithm with
a mean squared error (MSE) as a cost function. In short,
we estimated the structural break for each time series and
their respective baseline, which corresponds to the average
number of flying airplanes. Then, we computed the log
of the difference between the daily estimations of counted
airplanes and the baseline value. The estimation of loglinear regression models considers such differences (in log
scale) as a dependent variable and the data timestamp as an
independent variable.
To measure the goodness of fit of regression models to
estimate the recovery rate for the airports, we adopted the Rsquared metric, also known as coefficient of determination,
which ranges from 0.0 to 1.0 and measures the proportion
of variance in the independent variable explained by dependent variables (Equation 3):
Pn
n
(yt − ŷt )2
1X
R-squared = 1 − Pt=1
yt (3)
,
ȳ
=
n
2
n t=1
t=1 (yt − ȳ)

March

April

May

June

July

August

September

(c)
Fig. 8. Average number of flights per month computed using our detector
(dashed lines) and OpenSky records (solid lines) for (a) known and (b)
unknown airports; thick black lines show the average of all airports in the
same chart. (c) Relative number of flights from March to September of
2019 and 2020 computed using Eurocontrol’s data for 41 EU countries
(solid lines) and our framework for 30 airports (dashed lines).

parameter space and then selected the best technique for our
problem considering their best configuration. To measure
the effectiveness of such methods to detect structural breaks,
we considered the date May 1st as being the observed breaking point, which reflects the period in which the airports
presented a significantly reduction in their operations. We
measure the ability of both techniques in detecting these
breaking points by computing the Mean Absolute Error
(MAE) and the RMSE between the observed and predicted
breaking points.
For the SMA crossover method, we analyzed the shortterm parameters considering values ranging from 7 to 49
days and the long-term parameters taking values ranging
from 14 to 98 days. From these experiments, we could
observe that SMA crossover method presented a better
performance using a 14-day window size for the shortterm parameter and a 49-day window size for the longterm. For the Twitter algorithm, we analyzed its two main
parameters, msize and beta parameters. For the msize, we
consider eight values ranging from 64 to 128 days, and for
the beta parameter (penalization parameter), we consider ten

Recovery rate and COVID-19 analysis

where yt and ŷt are the observed and predicted values
for the time t. In this context, an R-squared of 0.0 means
that the fitted model does not explain any variation in the
independent variable around its mean, while an R-squared
of 1.0 means that the fitted model explains all variations in
the independent variable around its mean, i.e., the obtained
regression model fitted all data points [53].
Figure 9(a) shows the performance of the fitted models in terms of R-squared, from which we could observe
values higher than 0.8 for several airports. Also, Figures 9(b) and (c) illustrate airports with positive (first two

9
1.5

0.5

0.9

0.6
-0.0

0.0
0.5

(Recover Rate, New Cases)
(Recover Rate, New Deaths)

0.7

1.0

Pearson correlation

columns) and negative recovery rate (last column) and their
respective time series from Jan 1st, 2020 to July 30th, 2020.
Only two airports presented a negative recovery rate in the
considered period (MAN and WAW), meaning that their
activities was still decreasing after the breaking point.

-0.6

-0.9

0.8
0.3

-0.6 -0.5 -0.4 -0.7
-0.8

1.0

-0.1
-0.8

-0.6

-0.1
-0.7

0.7

0.5
0.2 0.2
0.2
-0.4 -0.2 -0.4
-0.8 -0.7 -0.7 -0.9
-0.6

-0.9 -0.8 -0.9

-0.7

-0.9

-0.9

1.5

0.5

0.5

-1.0

-0.9

-0.6

-0.8

-0.5

-0.8 -0.7 -0.7

-0.7

-0.2

-0.8

-0.9

-0.9

-0.4

0.3
-0.6

-0.4 -0.5
-0.8 -0.5

-0.9

IST (TUR)

LIS (PRT)

ARN (SWE)

OSL (NOR)

WAW (POL)

AMS (NLD)

FCO (ITA)

MXP (ITA)

DUB (IRL)

LTN (GBR)

LHR (GBR)

ATH (GRC)

Airports

LGW (GBR)

STN (GBR)

MAN (GBR)

CDG (FRA)

HEL (FIN)

ORY (FRA)

AGP (ESP)

BCN (ESP)

PMI (ESP)

MAD (ESP)

FRA (DEU)

CPH (DNK)

DUS (DEU)

TXL (DEU)

MUC (DEU)

ZRH (CHE)

VIE (AUT)

BRU (BEL)

2.0

Fig. 10. Correlation analysis between the recovery rates and the total
number of cases and deaths caused by the COVID-19 disease.
(a)

4

(b)

F INAL REMARKS

The measurements of human activity are nowadays an
essential task for planning actions to fight against huge
outbreaks that impact human daily activities as the COVID19 pandemic. In this context, the proposed approach for
measuring airport activities can serve society as a valuable
and independent indicator of human activity without any
political biases. Our solution now integrates the Rapid Action
Coronavirus Earth (RACE) observation dashboard [35], a
platform from the European Space Agency (ESA) that uses
Earth observation satellite data and artificial intelligence to
measure the impact of the coronavirus lockdown and to
monitor post-lockdown recovery, as illustrated in Figure 11.

(c)
Fig. 9. The top figure shows (a) the performance results (in terms of Rsquared) obtained after fitting a log-linear model to each airport data.
The second row (b) shows examples in which we could fit a perfect loglinear regression model and thus compute the recovery rate (LGW and
CDG), and an example in which we could not fit a log-linear regression
model (WAW), which suggests that this airport does not present a clear
recovery pattern. Finally, the third row (c) shows the time series for these
three examples as well as the baseline and detected breaking point.

Finally, we present an analysis of the COVID-19 situation
and the public’s politics for border opening by correlating
the recovery rates and the 14-day moving average of the
daily number of new cases and deaths, as illustrated in
Figure 10. This study considered the official number of
cases and deaths reported until July 30th, 2020 [54], [55].
When we correlated the recovery rate and the daily number
of new cases of COVID-19, we observed a strong positive
correlation between both variables for VIE, PMI and ZRH.
This suggests that these airports restarted their activities
while the number of new cases was still increasing. Conversely, we observed a strong negative correlation between
the recovery rate and the daily new cases of COVID-19
for several airports such as MUC and DUS airports from
German, and the SNT, LGW, LHR, and LTN airports from
Great Britain.
Of course, the positive correlations found in our analysis
do not imply the causation of the rise in the total number
of cases and deaths. However, we can surely state that the
indicator of activity presented in this work can reveal which
airports and countries demand more attention from the
authorities. This because airports that are expanding their
activities while the total number of cases and deaths caused
by the COVID-19 disease is increasing can negatively impact
the pandemic’s trajectory.

Fig. 11. RACE observation dashboard. The map shows the location of
the 30 airports being monitored. Red and blue circles in the map indicate
low and normal traffic levels, respectively, and dark blue circles show the
numbers of airports in that region. The bar chart in the right shows the
results of our method for a specific airport, which comprises the time
series of the number of flying airplanes. Finally, the three maps in the
bottom shows the traffic levels for three time periods: before the COVID19 pandemic (Dec/2019); early period after the pandemic, with mobility
restrictions (Apr/2020); and after a gradual reopening (Sep/2020).

Our detector was able to locate most airplanes appearing on satellite images with minimal false detections. On
average, we get less than one false detection per month
in each airport. Furthermore, our time series analysis can

10

be used to identify abnormal behaviors in air traffic and
correlate changes in the number of airplanes with COVID19 statistics. Decision-makers can use this information to
substantiate border control and lockdown measures.
Thanks to our semi-automatic annotation strategy, this
approach can be straightforwardly adapted to detect other
objects, such as ships [31] and transportation trucks [56],
and use this outcome to devise other informative indicators.

ACKNOWLEDGMENTS
Part of the equipment used in this project are supported by a
grant (CNS-1513126) from the USA National Science Foundation. We gratefully acknowledge the support of NVIDIA
Corporation with the donation of the Titan Xp GPU used
for this research. Funding from the University of South
Florida for the Institute for Artificial Intelligence (AI+X) is
also acknowledged. The authors would like to thank also
the research Brazilian agencies CNPq, CAPES and FAPESP.

R EFERENCES
[1]
[2]
[3]

[4]
[5]
[6]
[7]

[8]

[9]
[10]
[11]
[12]
[13]

[14]
[15]

United Nations Office for Disaster Risk Reduction, “The human
cost of disasters: an overview of the last 20 years (2000-2019),”
United Nations, Tech. Rep., 2020.
K. F. Smith, M. Goldberg, S. Rosenthal, L. Carlson, J. Chen,
C. Chen, and S. Ramachandran, “Global rise in human infectious
disease outbreaks,” J. R. Soc. Interface, vol. 11, no. 101, 2014.
C. Raymond, R. M. Horton, J. Zscheischler, O. Martius, A. AghaKouchak, J. Balch, S. G. Bowen, S. J. Camargo, J. Hess, K. Kornhuber,
M. Oppenheimer, A. C. Ruane, T. Wahl, and K. White, “Understanding and managing connected extreme events,” Nature Climate
Change, vol. 10, no. 7, pp. 611–621, Jul 2020.
R. Eyre, F. De Luca, and F. Simini, “Social media usage reveals
recovery of small businesses after natural hazard events,” Nature
Communications, vol. 11, no. 1, p. 1629, Apr 2020.
T. Simon, A. Goldberg, and B. Adini, “Socializing in emergencies –
a review of the use of social media in emergency situations,” IJIM,
vol. 35, no. 5, pp. 609–619, 2015.
C. Betsch, V. Colizza, S. del Valle, C. Ihekweazu, and C. Troncoso,
“A vision for actionable science in a pandemic,” Nature Communications, vol. 11, no. 1, p. 4960, Sep 2020.
R. Minetto, M. P. Segundo, G. Rotich, and S. Sarkar, “Measuring
human and economic activity from satellite imagery to support city-scale decision-making during covid-19 pandemic,” IEEE
Transactions on Big Data, vol. 7, no. 1, pp. 56–68, 2021.
S. Chang, E. Pierson, P. W. Koh, J. Gerardin, B. Redbird, D. Grusky,
and J. Leskovec, “Mobility network models of COVID-19 explain
inequities and inform reopening,” Nature, vol. 589, no. 1, p. 82–87,
Jan 2021.
“Worldometer – Coronavirus,” https://www.worldometers.info/
coronavirus/, accessed: 2021-04-20.
United Nations Sustainable Development Group, “A UN framework for the immediate socio-economic response to covid-19,”
United Nations, Tech. Rep., 2020.
N. Jean, M. Burke, M. Xie, W. M. Davis, D. B. Lobell, and S. Ermon,
“Combining satellite imagery and machine learning to predict
poverty,” Science, vol. 353, no. 6301, pp. 790–794, 2016.
M. M. Bennett and L. C. Smith, “Advances in using multitemporal
night-time lights satellite imagery to detect, estimate, and monitor
socioeconomic dynamics,” RSE, vol. 192, pp. 176–197, 2017.
F. Liu, A. Page, S. A. Strode, Y. Yoshida, S. Choi, B. Zheng,
L. N. Lamsal, C. Li, N. A. Krotkov, H. Eskes, R. van der A,
P. Veefkind, P. Levelt, J. Joiner, and O. P. Hauser, “Abrupt declines
in tropospheric nitrogen dioxide over china after the outbreak of
covid-19,” Science Advances, 2020.
M. Weiss, F. Jacob, and G. Duveiller, “Remote sensing for agricultural applications: A meta-review,” RSE, vol. 236, p. 111402, 2020.
C. Alcantara, T. Kuemmerle, A. V. Prishchepov, and V. C. Radeloff, “Mapping abandoned agriculture with multi-temporal modis
satellite data,” RSE, vol. 124, pp. 334–347, 2012.

[16] E. Hoppe, B. Bruckno, E. Campbell, S. Acton, A. Vaccari,
M. Stuecheli, A. Bohane, G. Falorni, and J. Morgan, Transportation
Infrastructure Monitoring Using Satellite Remote Sensing. John Wiley
& Sons, Ltd, 2016, ch. 14, pp. 185–198.
[17] M. Tello, C. López-Martı́nez, and J. J. Mallorqui, “Automatic vessel
monitoring with single and multidimensional sar images in the
wavelet domain,” P&RS, vol. 61, no. 3, pp. 260–278, 2006.
[18] E. Choi, D. K. Chu, P. K. Cheng, D. N. Tsang, M. Peiris, D. Bausch,
L. L. Poon, and D. Watson-Jones, “In-flight transmission of sarscov-2,” Emerging Infectious Disease, vol. 26, no. 11, pp. 2713–2716,
2020.
[19] N. C. Khanh, P. Q. Thai, H.-L. Quach, N.-A. H. Thi, P. C. Dinh,
T. N. Duong, L. T. Q. Mai, N. D. Nghia, T. A. Tu, L. N. Quang,
T. D. Quang, T.-T. Nguyen, F. Vogt, and D. D. Anh, “Transmission
of sars-cov 2 during long-haul flight,” Emerging Infectious Disease,
vol. 26, no. 11, pp. 2617–2624, 2020.
[20] A. Pavli, P. Smeti, S. Hadjianastasiou, K. Theodoridou, A. Spilioti,
K. Papadima, A. Andreopoulou, K. Gkolfinopoulou, S. Sapounas,
N. Spanakis, A. Tsakris, and H. C. Maltezou, “In-flight transmission of covid-19 on flights to greece: An epidemiological analysis,”
Travel Medicine and Infectious Disease, vol. 38, p. 101882, 2020.
[21] D. Lam, R. Kuzma, K. McGee, S. Dooley, M. Laielli, M. Klaric,
Y. Bulatov, and B. McCord, “xView: Objects in Context in Overhead Imagery,” arXiv, vol. 1802.07856, 2018.
[22] G.-S. Xia, X. Bai, J. Ding, Z. Zhu, S. Belongie, J. Luo, M. Datcu,
M. Pelillo, and L. Zhang, “DOTA: A Large-Scale Dataset for Object
Detection in Aerial Images,” in CVPR, 2018.
[23] A. Zhao, K. Fu, H. Sun, X. Sun, F. Li, D. Zhang, and H. Wang,
“An effective method based on acf for aircraft detection in remote
sensing images,” GRSL, vol. 14, no. 5, pp. 744–748, 2017.
[24] B. Kamgar-Parsi, A. K. Jain, and J. E. Dayhoff, “Aircraft detection:
a case study in using human similarity measure,” TPAMI, vol. 23,
no. 12, pp. 1404–1414, 2001.
[25] F. Zhang, B. Du, L. Zhang, and M. Xu, “Weakly supervised learning based on coupled convolutional neural networks for aircraft
detection,” TGRS, vol. 54, no. 9, pp. 5553–5563, 2016.
[26] D. Grosgeorge, M. Arbelot, A. Goupilleau, T. Ceillier, and R. Allioux, “Concurrent segmentation and object detection cnns for aircraft detection and identification in satellite images,” in IGARSS,
2020.
[27] “Rapid Action on Coronavirus and EO – Airports: throughput,”
https://race.esa.int/?indicator=E13b, accessed: 2021-01-21.
[28] “EUROCONTROL – COVID-19 dashboard,” https://www.
eurocontrol.int/, accessed: 2021-01-21.
[29] F. Zhao, L. Xia, A. Kylling, R. Li, H. Shang, and M. Xu, “Detection
flying aircraft from landsat 8 oli data,” P&RS, vol. 141, pp. 176–
184, 2018.
[30] United States Geological Survey, “Landsat 8 (l8) data users handbook,” Department of the Interior, Tech. Rep., 2019.
[31] H. Heiselberg, “Aircraft and ship velocity determination in
sentinel-2 multispectral images,” Sensors, vol. 19, no. 13, 2019.
[32] Y. Liu, B. Xu, W. Zhi, C. Hu, Y. Dong, S. Jin, Y. Lu, T. Chen, W. Xu,
Y. Liu, B. Zhao, and W. Lu, “Space eye on flying aircraft: from
sentinel-2 msi parallax to hybrid computing,” RSE, p. 19, 2020.
[33] Sentinel User Handbook and Exploitation Tools, “Sentinel-2 user
handbook,” European Space Agency, Tech. Rep., 2015.
[34] Y. Lecun, Y. Bengio, and G. Hinton, “Deep learning,” Nature, vol.
521, no. 7553, pp. 436–444, 5 2015.
[35] “Rapid Action on Coronavirus and EO – Airports: airplanes traffic,” https://race.esa.int/?indicator=E13d, accessed: 2021-01-21.
[36] T. Lin, P. Goyal, R. Girshick, K. He, and P. Dollár, “Focal loss for
dense object detection,” TPAMI, vol. 42, no. 2, pp. 318–327, 2020.
[37] “Sentinel-Hub,” https://www.sentinel-hub.com/, accessed: 202101-21.
[38] S. Ren, K. He, R. Girshick, and J. Sun, “Faster r-cnn: Towards realtime object detection with region proposal networks,” in NeurIPS,
2015, pp. 91–99.
[39] R. Minetto, M. Pamplona Segundo, and S. Sarkar, “Hydra: An
ensemble of convolutional neural networks for geospatial land
classification,” IEEE TGRS, vol. 57, no. 9, pp. 6530–6541, 2019.
[40] J. Long, E. Shelhamer, and T. Darrell, “Fully convolutional networks for semantic segmentation,” in CVPR, 2015, pp. 3431–3440.
[41] X. Glorot, A. Bordes, and Y. Bengio, “Deep sparse rectifier neural
networks,” in AISTATS, vol. 15, 2011, pp. 315–323.
[42] S. Ioffe and C. Szegedy, “Batch normalization: Accelerating deep
network training by reducing internal covariate shift,” in ICML,
2015, pp. 448–456.

11

[43] A. Neubeck and L. Van Gool, “Efficient non-maximum suppression,” in ICPR, vol. 3, 2006, pp. 850–855.
[44] N. Menini, A. E. Almeida, R. Lamparelli, G. Le Maire, R. S.
Oliveira, J. Verbesselt, M. Hirota, and R. da S. Torres, “Tucumã:
A toolbox for spatiotemporal remote sensing image analysis [software and data sets],” GRSM, vol. 7, no. 3, pp. 110–122, 2019.
[45] D. P. Roy, H. Huang, L. Boschetti, L. Giglio, L. Yan, H. H. Zhang,
and Z. Li, “Landsat-8 and sentinel-2 burned area mapping a combined sensor multi-temporal change detection approach,”
RSE, vol. 231, p. 111254, 2019.
[46] E. L. Bullock, C. E. Woodcock, and C. E. Holden, “Improved
change monitoring using an ensemble of time series algorithms,”
RSE, vol. 238, p. 111165, 2020.
[47] A. C. Szakmary, Q. Shen, and S. C. Sharma, “Trend-following
trading strategies in commodity futures: A re-examination,” JBF,
vol. 34, no. 2, pp. 409–426, 2010.
[48] N. A. James, A. Kejariwal, and D. S. Matteson, “Leveraging cloud
data to mitigate user experience from ‘breaking bad’,” in BigData,
2016, pp. 3499–3508.
[49] G. J. Székely and M. L. Rizzo, “Energy statistics: A class of statistics
based on distances,” J. Stat. Plan. Inference, vol. 143, no. 8, pp. 1249–
1272, 2013.
[50] E. H. Van Nes and M. Scheffer, “Slow recovery from perturbations
as a generic indicator of a nearby catastrophic shift,” The American
Naturalist, vol. 169, no. 6, pp. 738–747, 2007.
[51] A. J. Veraart, E. J. Faassen, V. Dakos, E. H. van Nes, M. LÃŒrling,
and M. Scheffer, “Recovery rates reflect distance to a tipping point
in a living system,” Nature, vol. 481, no. 7381, pp. 357–359, 2012.
[52] “OpenSky Network,” https://opensky-network.org/, accessed:
2021-01-21.
[53] J. Devore, Probability and Statistics for Engineering and the Sciences.
Brooks/Cole Publishing Company, 1987.
[54] J. Hasell, E. Mathieu, D. Beltekian, B. Macdonald, C. Giattino,
E. Ortiz-Ospina, M. Roser, and H. Ritchie, “A cross-country
database of covid-19 testing,” Scientific Data, vol. 7, no. 1, p. 345,
Oct 2020.
[55] B. Xu, M. U. G. Kraemer, B. Xu, B. Gutierrez, S. Mekaru, K. Sewalk,
A. Loskill, L. Wang, E. Cohn, S. Hill, A. Zarebski, S. Li, C.-H.
Wu, E. Hulland, J. Morgan, S. Scarpino, J. Brownstein, O. Pybus,
D. Pigott, and M. Kraemer, “Open access epidemiological data
from the covid-19 outbreak,” The Lancet Infectious Diseases, vol. 20,
no. 5, p. 534, 2020.
[56] “Rapid Action on Coronavirus and EO – Number of Trucks,”
https://race.esa.int/?indicator=E12c, accessed: 2021-01-21.

