CONTACT TRACING ENHANCES THE EFFICIENCY OF COVID-19 GROUP TESTING
Ritesh Goenka,?1 Shu-Jie Cao,?2 Chau-Wai Wong,3 Ajit Rajwade,1 Dror Baron3
1

IIT Bombay, India,

2

ShanghaiTech University, China,

arXiv:2011.14186v1 [stat.AP] 28 Nov 2020

ABSTRACT
Group testing can save testing resources in the context of the
ongoing COVID-19 pandemic. In group testing, we are given
n samples, one per individual, and arrange them into m < n
pooled samples, where each pool is obtained by mixing a
subset of the n individual samples. Infected individuals are
then identified using a group testing algorithm. In this paper, we use side information (SI) collected from contact tracing (CT) within non-adaptive/single-stage group testing algorithms. We generate data by incorporating CT SI and characteristics of disease spread between individuals. These data are
fed into two signal and measurement models for group testing, where numerical results show that our algorithms provide
improved sensitivity and specificity. While Nikolopoulos et
al. utilized family structure to improve non-adaptive group
testing, ours is the first work to explore and demonstrate how
CT SI can further improve group testing performance.
Index Terms— Contact tracing, non-adaptive group testing, compressed sensing, overlapping group L ASSO, generalized approximate message passing (GAMP).
1. INTRODUCTION
Widespread testing has been promoted for combating the ongoing COVID-19 pandemic. Samples are typically collected
from nasal or oropharyngeal swabs, and then processed by
a reverse transcription polymerase chain reaction (RT-PCR)
machine. However, widespread testing is hindered by supply
chain constraints and long testing times.
Pooled or group testing has been suggested for improving testing efficiencies [2]. Group testing involves mixing a
subset of n individual samples into m < n pools. The measurement process can be expressed as y = N(Ax), where x
is a vector that quantifies the health status of the n individuals, A is an m × n binary pooling matrix with Aij = 1 if the
jth individual contributes to the ith pool, else Aij = 0, y is
a vector of m noisy measurements or tests, and N represents
a probabilistic noise model that relates the noiseless pooled
results, Ax, to y. We consider two signal and noise models.
Model M1: A binary noise model used by Zhu et al. [3],
?

RG and SJC have made equal contributions. AR acknowledges support
from SERB Grant #10013890, IITB-WRCB Grant #DONWR04-002, and
DST-Rakshak grant #DST0000-005. CWW acknowledges support from NSF
Grant #2030430. The supplemental document can be found on the webpages
of the last three authors.

3

North Carolina State University, USA

where x is binary, w = Ax is an auxiliary vector, and the
measurement yi ∈ {0, 1} depends probabilistically on wi ,
where Pr(yi = 1|wi = 0) and Pr(yi = 0|wi > 0) are probabilities of erroneous tests.
Model M2: A multiplicative noise model of the form y =
Ax◦z as used in Ghosh et al. [4], where ◦ represents elementwise multiplication, z is a vector of m noisy elements defined
as zi = (1+q)ηi , q ∈ (0, 1] is a known amplification factor for
RT-PCR, ηi ∼ N (0, σ 2 ), and σ 2  1 is a known parameter
controlling the strength of the noise in RT-PCR. Under model
M2, x and y represent viral loads in the n individuals and m
pools, respectively. Assuming reasonably high viral loads in
x, Poisson effects in y can be ignored [4].
For both models, the objective is to estimate x from y
and A. We use single-stage non-adaptive algorithms as in
[3, 4], rather than two-stage algorithms, which employ a second stage of tests depending on results from the first stage, as
in Heidarzadeh and Narayanan [5] or the classical approach
by Dorfman [6]. The main advantage of non-adaptive algorithms is that they save on testing time, which is quite high for
RT-PCR. Algorithms for estimation of x from y and A [4, 7]
rely primarily on the sparsity of x, which is a valid assumption for COVID-19 due to low prevalence rates [8]. Zhu et
al. [3] also exploit probabilistic information such as the prevalence rate, structure in x, and side information (SI). Finally,
Nikolopoulos et al. [1] showed how SI about family-style
structure can reduce the number of required tests, m.
In this paper, we show how to estimate x while utilizing contact tracing (CT) SI, which allows one to analyze the
spread of the pandemic [9]. Our contributions are twofold.
First, we propose a generative model for a population of n
individuals that characterizes the spread of COVID-19 by explicitly using CT SI. Second, we show that CT SI, when used
appropriately, can help algorithms such as generalized approximate message passing (GAMP) [10] or LASSO variants [11, 12] better estimate x from y and A. Our work uses
more SI than Nikolopoulos et al. [1], who only considered
family-style structure in binary group testing.
2. DATA GENERATION MODEL
In this section, we present a generative infection model incorporating CT SI, which we later use to prepare simulated
data for algorithmic evaluation. We model a population of
n individuals using a dynamical or time-varying graphical
model that contains nodes {vi }ni=1 and undirected edges

100
80
60
40
20
0

Fig. 1. State transition diagram for a node. A node is infectious only between days k1 and k2 (both inclusive) after
getting infected. In our work, we set (k1 , k2 ) = (3, 7).
 (t) n
(t)
eij i,j=1 . On a given day t, an edge eij between nodes
(t) (t) 
vi and vj encodes CT SI τij , dij , which can be acquired
(t)

via Bluetooth-based CT applications [13]. Here, τij repre(t)
dij

sents the contact duration and
represents a measure of
the physical proximity between two individuals. On day t, a
node can be in one of the following states: susceptible, infected, infectious, and recovered. To keep the model simple,
we assume that there are no reinfections, i.e., recovered is a
terminal state, despite some reports of reinfection [14].
We adopt a simplified infection dynamic wherein the infectious period is preceded and followed by the infected state.
We propose the following design parameters for the infection
dynamics based on a World Health Organization report on
COVID-19 [15]. Specifically, a node vi remains infected but
noninfectious for k1 = 3 days. On day t + k1 , the node
becomes infectious and may transmit the disease to a sus(t+k )
ceptible neighboring node vj with probability pi,j 1 whose
construction is described below. An infectious node can potentially transmit the infection until k2 = 7 days after getting infected, and becomes noninfectious afterward. We also
model a small fraction of stray infections that may occur, for
example, due to sporadic contact with contaminated surfaces.
Such infections only affect nodes in the susceptible state with
a probability p1 = 2 × 10−4 of our choice. A state diagram
for a general node is illustrated in Fig. 1. Regarding the vi(t)
(t)
ral load xi for node i on day t, we assume xi = 0 if the
node is susceptible or recovered. For an infected or infectious node, we make a simplified assumption that its viral
(t)
load xi ∼ Uniform(1, 32768),1 once drawn, remains constant throughout the combined 14-day period of infection.
(t)
Next, we model the probability pi,j that the disease is
transmitted from node vi to vj on day t. We view the infection
times of the population throughout the pandemic as a nonhomogeneous Poisson process with time-varying rate function
(t)
λ(t). Consider a τij -hour contact on day t when susceptible
node vj is exposed to infectious node vi . The average infection rate λij (t) for day t is assumed to be proportional to both
(t)
(t)
the viral load xi and the physical proximity dij , namely,
1 The cycle threshold for RT-PCR commonly ranges from 19 to 34 cycles
[16, Fig. 3], where 34 cycles corresponds to a low initial viral load of a few
molecules, and each cycle roughly doubles the viral density. Therefore, we
estimate the largest possible viral load as 234−19 = 215 = 32768.

No. of people infected/recovered

No. of people infected

120

0

50

100

150

200

250

600
500
400
300
200

= 1.76%
= 1.39%
= 0.98%
= 0.68%

100
0

0

50

100

150

Day t

Day t

(a)

(b)

200

250

Fig. 2. (a) The number of active infections, and (b) cumulative infections at different inter-clique contact levels α. We
chose 50-day windows for testing proposed algorithms.
(t)

(t)

λij (t) = λ0 xi dij , where λ0 is a tunable, baseline Poisson
rate. The probability that vj is infected
 by the end of contact

(t)

(t)

(t)

(t)

(t)

period τij is therefore pi,j = 1−exp −λ0 xi dij τij

for

t ∈ [k1 , k2 ] + ti . From the standpoint of susceptible node vj ,
all its neighbors vk that are infectious contribute to its probaQ
(t) 
bility of getting infected on day t, namely, 1 − k 1 − pk,j .
While generating our data, we considered n = 1000
nodes divided into cliques based on the distribution of family
sizes in India [17, pg. 18], for a duration of tmax = 250
days. Fig. 2 shows the number of active infections and the
cumulative number of infections at the end of each day. The
clique structures were kept constant throughout the tmax days,
whereas inter-clique contacts corresponding to sporadic contacts between people were dynamically added and removed.
The varying inter-clique contact level α affects the sparsity
of the underlying vector x as it brings infections to new
cliques/families. Pooling of samples is performed at the beginning of each day from tpeak − 24 to tpeak + 25, where tpeak
is the day with the maximum number of active infections.
3. PROPOSED GROUP TESTING ALGORITHMS
This section describes two classes of group testing algorithms
for reconstructing the health status vector x from the pooled
tests, y, and pooling matrix, A.
Algorithms for binary noise. For model M1, Zhu et al. [3]
use generalized approximate message passing (GAMP) [10]
for group testing estimation. GAMP is comprised of two
components. The first component consists of an input channel
that relates a prior for n individuals’ viral loads, x = (xi )ni=1 ,
and pseudo data, v = x + q ∈ Rn , where the n coordinates
of x are correlated, and q is additive white Gaussian noise
with qi ∼ N (0, ∆). We estimate x from v using a denoising
function, often called a denoiser,
x
bi = gin (v) = E [Xi | V = v] ,

(1)

where we use the convention that when both the upper
and lower case versions of a symbol appear, the upper
case is a random variable and the lower case its realization, and E [Xi |v] represents E [Xi |V = v] when the context is clear. The second component of GAMP consists
of an output channel relating the auxiliary vector w to
the noisy measurements y as reviewed in Sec. 1. We

adopt the output channel denoiser of Zhu et al. [3], hi =
gout (yi ; ki , θi ) = (E [Wi | yi , ki , θi ] − ki )/θi , where θi is the
estimated variance of hi , and ki is the mean of our estimate
for wi . Since yi depends probabilistically
on wi , iwe have
h
−ki )2
f (wi | yi , ki , θi ) ∝ Pr (yi | wi ) exp − (wi2θ
, where
i
Wi is approximated as Gaussian in the derivation of GAMP.
While Zhu et al. [3] considered Bernoulli x, which implies a scalar separable denoiser gin for the input channel,
this paper accounts for probabilistic dependencies within x.
Our first probabilistic model considers groups of people, for
example, members of a family. Each family is modeled as
entirely healthy with probability 1 − πvf , else each individual within the family is infected with probability πind . This
model relates to our generative model of Sec. 2 by using family structure as SI. Denoting the pseudo data of family F by
v F , the denoiser for the ith individual of family F is given by
family
(2)
gin
(v ) = E Xi |F viral, v F Pr F viral|v F ,
 F


where E Xi |F viral, v F and Pr F viral|v F are parameterized by πvf , πind , and ∆. For detailed expressions, we refer
readers to Sec. 1.1 of the supplemental document.
Our second probabilistic model uses CT. Consider a hypothetical widespread testing program that relies on CT SI,
where all individuals are tested 8 days before the group testing
program begins resulting in a good estimate of their groundtruth health status. After the program begins, probability estimates from the previous group test are used as priors for
the n individuals when performing the current group test. We
provide detailed analysis in Secs. 2.2–2.3 of the supplemental
document on the use of prior infection status. The final form
of the denoiser for the CT model is as follows:







n 
h

 io−1
CT
gin
(vi ) = 1+ Pr(Xi = 1)−1 −1 exp vi − 12 ∆
. (3)

Here, Pr(Xi = 1) for day k + 1 can be estimated by aggregating CT information of individual i over the past 8 days,
(k+1)
Qk
Qn
(d) 
c
namely, Pr
(Xi = 1) = 1 −
1 − pb ,
d=k−7

j=1

i,j

(d)
pbi,j

where
is the estimated probability of infection of individual i due to contact with individual j. This probability,
(d)
(d) (d)
pbi,j , can be determined by the CT information (τij , dij ), as
well as their infectionstatus as follows:
−1 
(d)
(d) (d) (d)
pbi,j = exp − λ τij dij Ψij + 
,
(4)
(d)

(d)

(d)
c (Xi = 0) Pr
c (Xj = 0), λ is a Poisson
where Ψij = 1 − Pr
rate parameter, and  is used to avoid division by zero. Note
(t)
that pbi,j depends on λ, which is unknown in practice. We
estimate it using a plug-in approach by Ma et al. [18]. More
details are given in Sec. 1.2 of the supplemental document.
Algorithms for multiplicative noise. For model M2, recall that x and y represent viral loads of individual samples and pools, respectively. The core algorithm presented
b L ASSO =
in [4] uses the well-known L ASSO estimator, x
2
arg minx ky − Axk2 + ρkxk1 [19], where ρ is a smoothness parameter. L ASSO exploits the sparsity of x but uses
no SI. Despite the multiplicative nature of the noise, L ASSO

yields good estimation performance [4] in terms of three
commonly used measures: (i) relative root mean squared
bk2 /kxk2 ; (ii) false
error (RRMSE) = kx − x
 negative rate
(FNR) = #incorrectly detected negatives #true positives;
and (iii) false positive rate (FPR) = #incorrectly detected
positives #true negatives. Note that FNR = 1− sensitivity
and FPR = 1− specificity.
In some cases, the n individuals in x can be partitioned
into n1  n disjoint groups of people, for example family
members, who interact closely with each other and are thus
likely to pass the virus between group members. This familystyle structure leads to a situation where either all members
of the group are uninfected, or a majority of members are
infected. Note that the family-style structure also includes
groups of coworkers, students taking a course together, and
people sharing common accommodation. If reliable SI about
how the n individuals are partitioned into families is available, and only a small portion of families, n2  n1 , are
infected, then L ASSO can be replaced by group square-root
L ASSO (S QRT-G LASSO) [11].2 The latter is defined as
n1
X
b S QRT-G LASSO = arg min ky − Axk2 + ρ
kxg k2 , (5)
x
x

g=1

where xg consists of viral loads of people from the gth family.
In other cases, accurate family SI may be unavailable or
unreliable. Moreover, family SI does not account for contact between members of different families. In such cases,
we use CT SI commonly available via Bluetooth [13] to directly infer family-style structure using clique detection algorithms; contacts between members of different families can
also be considered to be small cliques. In particular, we use
the Bron–Kerbosch algorithm [21] to find maximal cliques in
the CT graph, and label each clique as a family. Note that one
could generate these groups differently [22, Sec. 7], for example, decomposition into k-clique communities [23]. However, such a decomposition may partition the n individuals
into n3  n family structures that overlap with each other,
unlike the earlier case of disjoint families. In a scenario with
overlapping families, we use the overlapping group squareroot L ASSO (C OMP -S QRT-O GLASSO) estimator [22],
b S QRT-O GLASSO = arg min ky − Axk2 + ρ Ωoverlap (x), (6)
x
x
P
where Ωoverlap (x) = inf v∈VG ,Pg∈G vg =x g∈G kvg k2 , G
denotes a set of possibly overlapping groups each containing
a subset of the n individuals in x, VG is a set of |G|-tuples of
vectors v = (v g )g∈G , g is an index for the groups in G, and
v g ∈ Rn is a vector whose support is a subset of g. Advantages of O GLASSO over G LASSO for overlapping groups are
summarized in Fig. 1 and Sec. 3 of [22].
In all three algorithms, we imposed a non-negativity constraint on x. Moreover, all algorithms were preceded by a
step that executed combinatorial orthogonal matching pursuit
(C OMP). C OMP declares all samples that contributed to a pool
2 We observed that S QRT-G LASSO , which has an ` data fidelity term
2
instead of a squared `2 one [20], outperformed G LASSO. In contrast, conventional L ASSO outperformed S QRT-L ASSO.

375

150

300

375

FPR
150

300

375

Number of measurements m
0.25
0.20
0.15
0.10
0.05
0.00
0.05
0.10
0.15
0.20
0.25

FPR

FNR

0.25
0.20
0.15
0.10
0.05
0.00
0.05
0.10
0.15
0.20
0.25

150

300

375

Family
Contact Tracing

150

300

375

Number of measurements m

0.30
0.25
0.20
0.15
0.10
0.05
0.00
0.05
0.10
0.15
0.20
0.25
0.30

COMP
COMP-LASSO
COMP-SQRT-GLASSO
COMP-SQRT-OGLASSO

FNR

300

FPR

FNR
FPR

M2

150

Number of measurements m

0.30
0.25
0.20
0.15
0.10
0.05
0.00
0.05
0.10
0.15
0.20
0.25
0.30

FPR

375

8.86%

FNR

300

0.25
0.20
0.15
0.10
0.05
0.00
0.05
0.10
0.15
0.20
0.25

FPR

FNR
150

Number of measurements m
0.10
0.08
0.06
0.04
0.02
0.00
0.02
0.04
0.06
0.08
0.10

6.01%

FPR

FPR

M1

0.25
0.20
0.15
0.10
0.05
0.00
0.05
0.10
0.15
0.20
0.25

FNR

3.98%

.11

FNR

0.10
0.08
0.06
0.04
0.02
0.00
0.02
0.04
0.06
0.08
0.10

FNR

2.12%

Sparsity:

.41 .27

150

300

375

.64 .51

150

300

375

Number of measurements m
Fig. 3. Performance of the proposed group testing methods M1 (top row) with binary noise and M2 (bottom row) with multiplicative noise at four averaged sparsity levels and three measurement levels for a population of n = 1000 individuals.
Number of measurements m

Number of measurements m

with zero viral load to be negative. This C OMP preprocessing
step reduces the problem size and improves all three algorithms’ performance, as well as speed. We henceforth refer to
our algorithms as C OMP -L ASSO, C OMP -S QRT-G LASSO and
C OMP -S QRT-O GLASSO.
4. NUMERICAL RESULTS
We now present numerical results obtained for the two models, M1 and M2. The data was generated based on Sec. 2,
and group testing inference was performed using the algorithms proposed in Sec. 3. We generated datasets using four
levels of cross-clique contacts, leading to four averaged sparsity levels, 2.12%, 3.98%, 6.01%, and 8.86%, for x. At each
sparsity level, we perform pooling experiments using Kirkman triple matrices as proposed in [4] for three measurement
setups, m ∈ {150, 300, 375}. Measurement vectors y for M1
were generated using probabilities for erroneous binary tests,
Pr(yi = 1|wi = 0) = 0.001 and Pr(yi = 0|wi > 0) = 0.02,
per Hanel and Thurner [24]. Vectors y for M2 were generated by setting the parameter reflecting the strength of noise
in RT-PCR to σ 2 = 0.01. Fig. 3 shows the performance of
the proposed algorithms in terms of FNR and FPR3 averaged
across the inference results obtained for the time window of
50 days described in Sec. 2.
For model M1, we tested the family denoiser (2) and the
CT denoiser (3). Fig. 3 shows that the CT denoiser outperforms the family denoiser in all settings. Both algorithms
yield lower (better) FNR and FPR as the number of measurements, m, increases. Moreover, the CT denoiser’s error rates
are below 0.05, except for the challenging cases where the
sparsity level is 8.86% and m ∈ {150, 300}.
3 For M1, we chose to report the FPR and FNR pair such that the sum of
the two error rates is minimized. The complete ROC curves are shown in
Sec. 2.1 of the supplemental document. For M2, we reported the error rates
by thresholding the estimated viral load using τ = 0.2. We noticed that the
error rates do not change much when τ varies between 0 and 1.

Number of measurements m

For model M2, we tested four algorithms: C OMP, C OMP L ASSO, C OMP -S QRT-G LASSO, and C OMP -S QRT-O GLASSO.
The results show that both C OMP -S QRT-G LASSO and C OMP S QRT-O GLASSO outperform C OMP -L ASSO in terms of FNR
and FPR, which shows the benefit of using CT SI. Note that
C OMP -S QRT-O GLASSO performs on par with C OMP -S QRTG LASSO, even though the former infers everything on the
fly from CT SI without explicit access to family SI. The
C OMP algorithm by itself produces no false negatives (corresponding to FNR = 0), but many false positives. Further,
all four algorithms yield lower (better) FNR and FPR as m
increases or the averaged sparsity level decreases. Finally,
we remark that C OMP -S QRT-O GLASSO outperforms C OMP S QRT-G LASSO for more general CT graphs consisting of
slightly incomplete cliques. We refer the readers to Sec. 3 of
the supplemental document for details.
Our algorithms, when presented with SI, reduce the FNR
and FPR, despite not knowing which individuals are infected
within each infected family (around 70% of the individuals
are infected within an infected family on average). Note that
none of the algorithms for model M2 make use of previous
inference results, whereas the CT denoiser for model M1
uses such information. This distinction makes the two approaches applicable in different scenarios, namely, the CT
denoiser can be used for a CT and testing program where
the same population is tested at regular intervals, e.g., warehouse employees, whereas C OMP -S QRT-O GLASSO is useful
when a population has to be tested only once. Furthermore,
while model M1 performs well in the presence of erroneous
binary tests, it does not yield viral load estimates as C OMP S QRT-O GLASSO does. Viral load estimates could prove to be
useful, since there is a positive correlation between mortality
and viral loads [25, 26].
Acknowledgment: The authors thank Junan Zhu for allowing them to use his implementation of GAMP with SI in their
implementation of the family and CT denoisers.

5. REFERENCES
[1] P. Nikolopoulos, T. Guo, C. Fragouli, and S. Diggavi, “Community aware group testing,” https://arxiv.org/abs/2007.08111.
[2] B. Abdalhamid et al., “Assessment of specimen pooling to conserve SARS CoV-2 testing resources,” American Journal of
Clinical Pathology, vol. 153, 2020.
[3] J. Zhu, K. Rivera, and D. Baron, “Noisy pooled PCR for virus
testing,” https://arxiv.org/abs/2004.02689, 2020.
[4] S. Ghosh, R. Agarwal, M. A. Rehan, S. Pathak, P. Agrawal,
Y. Gupta, S. Consul, N. Gupta, R. Goyal, A. Rajwade, and
M. Gopalkrishnan, “A compressed sensing approach to grouptesting for COVID-19 detection,” https://arxiv.org/abs/2005.
07895, 2020.
[5] A. Heidarzadeh and K. Narayanan, “Two-stage adaptive pooling with RT-qPCR for COVID-19 screening,” https://tinyurl.
com/y2d8lt9m, 2020.
[6] R. Dorfman, “The detection of defective members of large populations,” Annals of Mathematical Statistics, vol. 14, no. 4, p.
436–440, 1943.
[7] N. Shental et al., “Efficient high throughput SARS-CoV-2
testing to detect asymptomatic carriers,” https://tinyurl.com/
ydctgdyc, 2020.
[8] D. Benatia, R. Godefroy, and J. Lewis, “Estimating COVID19 prevalence in the united states: A sample selection model
approach,” https://doi.org/10.1101/2020.04.20.20072942.
[9] Center for Disease Control and Prevention, “Contact tracing
for COVID-19,” https://tinyurl.com/y9zdjlhv.
[10] S. Rangan, “Generalized approximate message passing for estimation with random linear mixing,” in IEEE Int. Symp. Inf.
Theory, 2011, pp. 2168–2172.
[11] M. Yuan and Y. Lin, “Model selection and estimation in regression with grouped variables,” J. Royal Stat.Soc. Series B,
vol. 68, no. 1, 2006.
[12] D. Jacot, G. Greub, K. Jaton, and O. Opota, “Viral load of
SARS-CoV-2 across patients and compared to other respiratory
viruses,” Microbes and Infection, 2020.
[13] A. Hekmati, G. Ramachandran, and B. Krishnamachari,
“CONTAIN: Privacy-oriented contact tracing protocols for
epidemics,” https://arxiv.org/abs/2004.05251.
[14] W. Haseltine, “What COVID-19 reinfection means for vaccines,” https://tinyurl.com/y6cq2mhj.
[15] World Health Organization, “Coronavirus disease 2019
(COVID-19) situation report–73,”
https://tinyurl.com/
ybnbky8m.
[16] B. Buchan and et al., “Distribution of SARS-CoV-2 PCR cycle threshold values provide practical insight into overall and
target-specific sensitivity among symptomatic patients,” American Journal of Clinical Pathology, 2020.
[17] United Nations, “Household size and composition around the
world 2017,” https://tinyurl.com/vo7hrlv.
[18] Y. Ma, J. Tan, N. Krishnan, and D. Baron, “Empirical Bayes
and full Bayes for signal estimation,” in Inf. Theory App. Workshop, San Diego, CA, Feb. 2014, pp. 994–1001.

[19] T. Hastie, R. Tibshirani, and M. Wainwright, Statistical Learning with Sparsity: The LASSO and Generalizations. CRC
Press, 2015.
[20] A. Belloni, V. Chernuzhukov, and L. Wang, “Square-root
LASSO: Pivotal recovery of sparse signals via conic programming,” Biometrika, vol. 98, no. 4, pp. 791–806, 2011.
[21] C. Bron and J. Kerbosch, “Algorithm 457: Finding
all cliques of an undirected graph,” Commun. ACM,
vol. 16, no. 9, p. 575–577, 1973. [Online]. Available:
https://doi.org/10.1145/362342.362367
[22] L. Jacob, G. Obozinski, and J.-P. Vert, “Group LASSO with
overlap and graph LASSO,” in Int. Conf. Mach. Learning,
2009.
[23] G. Palla, I. Derényi, I. Farkas, and T. Vicsek, “Uncovering the
overlapping community structure of complex networks in nature and society,” Nature, vol. 435, pp. 814–818, 2005.
[24] R. Hanel and S. Thurner, “Boosting test-efficiency by
pooled testing strategies for SARS-CoV-2,” arXiv preprint
arXiv:2003.09944, 2020.
[25] L. F. Westblade, G. Brar, L. C. Pinheiro, D. Paidoussis,
M. Rajan, P. Martin, P. Goyal, J. L. Sepulveda, L. Zhang,
G. George, D. Liu, S. Whittier, M. Plate, C. B. Small,
J. H. Rand, M. M. Cushing, T. J. Walsh, J. Cooke, M. M.
Safford, M. Loda, and M. J. Satlin, “SARS-CoV-2 viral
load predicts mortality in patients with and without cancer
who are hospitalized with COVID-19,” Cancer Cell, 2020.
[Online]. Available: http://www.sciencedirect.com/science/
article/pii/S1535610820304815
[26] E. Pujadas, F. Chaudhry, R. McBride, F. Richter, S. Zhao,
A. Wajnberg, G. Nadkarni, B. S. Glicksberg, J. Houldsworth,
and C. Cordon-Cardo, “SARS-CoV-2 viral load predicts
COVID-19 mortality,” Lancet Respiratory Medicine, vol. 8,
no. 9, p. e70, Sep. 2020. [Online]. Available: https:
//doi.org/10.1016/S2213-2600(20)30354-4
[27] D. Chicco and G. Jurman, “The advantages of the matthews
correlation coefficient (mcc) over f1 score and accuracy in binary classification evaluation,” BMC Genomics, vol. 21, 2020.

Note: This is a supplemental document for “Contact tracing enhances the efficiency of COVID-19 group testing,” submitted to 2021 IEEE International Conference on Acoustics, Speech and Signal Processing by Ritesh Goenka,? Shu-Jie
Cao,? Chau-Wai Wong, Ajit Rajwade, and Dror Baron. RG and SJC have made equal contributions to the paper.
1. ALGORITHMIC DETAILS OF M1

and

1.1. Family Denoiser
We now formalize a family-based infection mechanism that
can be used in designing group testing algorithms for improving the detection accuracy. We define MF as the set of indices of all members of family F. We say that F is viral
when there exists viral material in the family. Next, define
the infection probability of individual i within viral family
F as πind = Pr(Xi = 1 | F viral), for all i ∈ MF , and
πvf = Pr(F viral). Note that the infection status of individuals in a viral family are conditionally independent and identically distributed (i.i.d.).
Under our definition, family F being viral need not be attributed to any individual i ∈ MF . After all, viral material
can be on an infected pet or contaminated surface. For this
model, once the family is viral, the virus spreads independently with a fixed probability πind . Of course, our simplified
model may not accurately reflect reality. That said, without
a consensus in the literature on how coronavirus spreads, it
is unrealistic to create a more accurate model. On the other
hand, our model is plausible, and we will see that it is mathematically tractable.
We further assume that individuals cannot be infected unless the family is viral, i.e., Pr(Xi = 1 | F not viral) = 0.
The family structure serves as SI and allows the group testing
algorithm to impose the constraint that people living together
have strongly correlated health status.
Next, we derive the exact form of the denoiser (1)
by incorporating the family-based infection mechanism.
Denote the pseudodata of the members of family F as
v F = (vi )i∈MF , the family-based denoiser for ith individual
can be decomposed as follows:
family
gin
(v F )
=E [Xi | v F ]
= Pr(Xi = 1 | v F )
= Pr(Xi = 1, F viral | v F )
= Pr(F viral | v F ) Pr(Xi = 1 | v F , F viral),

(7a)
(7b)
(7c)
(7d)

Pr(F viral | v F )
f (v F , F viral)
.
f (v F , F viral) + f (v F , F not viral)

xk ∈ΩF i∈MF

h

(10a)
(10b)

i
f (vi |Xi = xk,i ) Pr(Xi = xk,i |F viral) ,

where N (x; µ, σ 2 ) :=

√ 1
2πσ 2

exp



(x−µ)2
2σ 2


, and ΩF =

{0...00, 0...10, . . . , 1...11} is a power set comprised of
2|MF | distinct infection patterns for family F. The second
term of (7d) can be simplified as follows:
Pr(Xi = 1 | v F , F viral)
= Pr(Xi = 1 | vi , F viral)
= Pr(Xi = 1, vi | F viral) / Pr(vi | F viral)
πind N (vi ; 1, ∆)
πind N (vi ; 1, ∆) + (1 − πind ) N (vi ; 0, ∆)

−1
1 − πind N (vi ; 0, ∆)
= 1+
·
πind
N (vi ; 1, ∆)

h
 i−1

−1
= 1 + πind − 1 exp vi − 21 ∆
.
=

(11a)
(11b)
(11c)
(11d)
(11e)

1.2. Contact Tracing Denoiser
While family structure SI characterizes part of the spread of
the disease, individual members of a family will presumably
all come in close contact with each other, hence CT SI will
include cliques for these individuals. Additionally, CT SI describes inter-family contacts. Therefore, CT SI can characterize the spread of the disease more comprehensively than
family SI. To exploit the CT SI, we encode it for each individual i into the prior probability of infection, Pr(Xi = 1),
and use the following scalar denoiser:
CT
gin
(vi )
=E [Xi |vi ] = Pr(Xi = 1|vi )
(12a)
=f (vi |Xi = 1) Pr(Xi = 1)/f (vi )
(12b)
io−1
n 
h


. (12c)
= 1+ Pr(Xi = 1)−1 −1 exp vi − 12 ∆

Here, Pr(Xi = 1) for day k + 1 can be estimated by aggregating CT information of individual i over a so-called SI period
from day k − 7 to day k as follows

where the first term of (7d) is

=

f (v F , F viral) = πvf f (v F | F viral)
X Y
= πvf

(8)

(k+1)

c
Pr

(Xi = 1) = 1 −

k
n
Y
Y

(d) 
1 − pbi,j ,

(13)

d=k−7 j=1

The two quantities in (8) can be further expanded as
f (v F , F not viral)
=(1 − πvf ) f (v F | F not viral)
Y
=(1 − πvf )
N (vi ; 0, ∆),
i∈MF

(d)

where pbi,j is the estimated probability of infection of individ(9a)
(9b)
(9c)

(d)

ual i due to contact with individual j. This probability, pbi,j ,
(d) (d)
(τij , dij ),

can be determined by the CT information
as their infection status as follows:

−1 
(d)
(d) (d) (d)
pbi,j = exp − λ τij dij Ψij + 
,

as well
(14)

3.98%

2.12%

0.4

0.4

0.4

0.2

0

0.2

0
0.5

1

0.2

0
0

0.5

FNR

1

0
0

0.5

FNR

1

0

0.15

0.15

0.15

0.05

0
0.1

0.2

0.3

0.4

0.1
0.05

0
0

FPR

0.15

FPR

0.2

FPR

0.2

0.1

0.1

0.2

0.3

FNR

0.4

0.1
0.05

0
0

FNR

1

FNR

0.2

0.05

0.5

FNR

0.2

0.1

m = 150
m = 300
m = 375

FPR

0.4

FPR

0.6

FPR

0.6

0.2

FPR

8.86%

0.6

0

CT denoiser

6.01%

0.6

FPR

Family denoiser

Sparsity:

0
0

0.1

0.2

FNR

0.3

0.4

0

0.1

0.2

0.3

0.4

FNR

Fig. 4. Performance of M1 in terms of ROC when family denoiser (top row) and CT denoiser (bottom row) are used. Columns
correspond to averaged sparsity levels ranging from 2.12% to 8.86%. Within each plot, the performance under three measurement levels for a population of n = 1000 individuals is compared. The dot on each curve corresponds to an operating point
that minimizes the sum of FPR and FNR. The CT denoiser significantly outperforms the family denoiser with error rates mostly
below 0.05. The estimation problem is more challenging when fewer measurements are used at a higher sparsity level.
(d)

(d)

(d)
c (Xi = 0) Pr
c (Xj = 0), λ is an unwhere Ψij = 1 − Pr
known Poisson rate parameter, and  is used to avoid division
by zero. We estimate λ with maximum likelihood (ML) using
the pseudodata of all individuals, i.e.,

bML = arg max
λ
λ

n
Y

f (vi |λ),

(15)

i=1

where f (vi |λ) = f (vi |Xi = 1) Pr(Xi = 1|λ) + f (vi |Xi =
bML is obtained, it is plugged into
0) Pr(Xi = 0|λ). Once λ
(14) for calculating the prior probability [18]. Note that this
plug-in strategy is also used for two other denoisers, namely,
family
Bernoulli
λ = ρ for gin
(vi ) and λ = (πvf , πind ) for gin
(v).
2. ADDITIONAL RESULTS FOR M1
In Sec. 4 of the main paper, we reported the performance of
M1 in a compact way, due to space limitations, by choosing
a representative operating point on an ROC curve instead of
using the whole curve. In this section, we provide complete
ROC curves that correspond to the top row of Fig. 3 of the
main paper. Fig. 4 illustrates M1’s performance for family
and CT denoisers at different measurement and sparsity levels. The dot on each curve corresponds to the operating point
that minimizes the total error rate, i.e., the sum of FPR and
FNR, as reported in Sec. 4 of the main paper. The closer a dot
is to the origin of the FPR–FNR plane, the better the performance it reflects. Comparing the ROC curves in the top row to
those in the bottom row, we note that the CT denoiser significantly outperforms the family denoiser at all sparsity levels.
The CT denoiser, with most of its FNR and FPR < 5%, can
achieve as low as 15% of the total error rate of the family

denoiser. Across different sparsity levels, the algorithm performs less accurately as the sparsity level increases. In each
plot, lower measurement rates make it more challenging for
the group testing algorithm.
We also examine the stability of the thresholds corresponding to the operating points we selected to report results
in Fig. 3 of the main paper. Our empirical results reveal that at
a particular sparsity level, the variation of the threshold due to
different design matrices or denoisers is less than 0.003. As
the sparsity level increases from 2.12% to 8.86%, the threshold only drops from 0.160 to 0.137. Hence, the threshold
for minimizing the total error rate is insensitive to the testing
conditions.
3. ADDITIONAL EXPERIMENTS FOR M1
3.1. Using Prior Knowledge of the Infection Status
In this subsection, we examine the advantage that prior
knowledge of the population’s infection status in the startup
phase provides our proposed algorithm for the M1 binary
model. As stated in Sec. 3 of the main paper and in (13), our
algorithm iteratively uses the updated probability of infection,
c i = 1), estimated from an SI period of 8 immediately
Pr(X
preceding days. Note that for days k < 8, we had to use the
ground-truth infection status of each individual in the startup
phase to generate the results reported in Sec. 4 of the main
paper. However, ground-truth infection data from the startup
phase may provide our approach an unfair advantage over the
algorithms proposed for M2. Below, we investigate whether
this advantage is significant.
We examine how varying the amount of startup information impacts our algorithm’s quality. Specifically, we ran-

0.35

4. AN ADDITIONAL EXPERIMENT FOR M2

pexcluded = 1
pexcluded = 0.75

0.3

4.1. Data Generation

pexcluded = 0.5
pexcluded = 0.1

FNR+FPR

0.25

pexcluded = 0

0.2
0.15
0.1
0.05
0

0

5

10

15

20

25

30

35

40

45

50

Day t

Fig. 5. Performance of M1 when a proportion, pexcluded , of
the population’s health states in the startup phase is unknown.
The curves reveal that in the absence of up to 50% prior
knowledge of the infection status of the population, the accuracy of M1 is close to that when complete startup information
is available.

domly replace a portion, pexcluded ∈ {0, 0.1, 0.5, 0.75, 1}, of
the population’s infection status by an estimated probability
of infection, e.g., 5%, for a setup that has a true averaged
sparsity level of 7.2%. Using a probability instead of a binary
value, 0 or 1, gives the algorithm soft probabilistic information instead of hard ground-truth style information. Fig. 5
shows that even with 50% prior knowledge of the infection
status of individuals, our detection accuracy for M1 is close
to that when using complete prior information after ramping
up for 8 days. The averages of the total error rates across time
for increasing pexcluded are 0.038, 0.039, 0.046, 0.148, and
0.407, respectively. We also tried to replace the startup infection status by an estimated probability of infection of 10%,
but only observed negligible performance differences. The
results show that the CT algorithm is robust to the absence of
up to 50% of startup infection information.

For this experiment, we use a different and slightly more general contact tracing graph to simulate the spread of infection.
Recall that the adjacency matrix of the contact graph has a
block diagonal structure with sizes of cliques coming from
the distribution of family sizes in India [17, pg. 18]. However, in this case, we allow two consecutive (according to the
order in which cliques appear along the diagonal of the contact matrix) non-trivial cliques (i.e., cliques with more than
one node) to have an overlap of one node with probability
half. This assumption is reasonable since the concept of family encompasses more general groups such as people at the
same workplace, students studying in the same classroom,
etc. Furthermore, we remove α = 5% of the edges from this
block diagonal structure, thus converting the existing cliques
into “almost-cliques.” This modified block diagonal structure
is kept constant over time while the cross-clique contacts are
updated every day. Except for the changes in the underlying
contact tracing graph, the rest of the data generation method
is the same as that described in Sec. 2 of the main paper.
4.2. Inference
We use the four algorithms (including C OMP) for multiplicative noise described in Sec. 3 of the main paper. However,
instead of using maximal cliques as groups in C OMP - SQRTOGLASSO , we use the decomposition of the contact tracing
graph into overlapping 3-clique communities [23]. An algorithm for detecting k-clique communities can be found in
Sec. 1 of [23, Supplementary Notes]. The first step of this
algorithm involves finding the maximal cliques in the contact
graph, for which we use the Bron-Kerbosch algorithm [21]. In
the next step, we detect 3-clique communities and label each
of those as groups. Further, we also label as groups the maximal cliques that are not part of any of these communities, in
order to ensure that every contact is taken into account. The
advantage of using 3-clique communities over just maximal
cliques is that the former is able to capture “almost cliques,”
i.e., cliques with a small fraction of absent pairwise contacts.

3.2. Duration of Startup SI Period
We investigated the impact of the duration of the startup SI
on estimation performance. In principle, the longer the SI duration, the more accurate we expect the results to be. There
is a trade-off between the accuracy of our algorithm and the
startup SI infection status information that needs to be precollected before the initialization of the testing algorithm. In
our experiment, we tested three startup SI durations, namely,
4 days, 8 days, and 12 days. Our experimental results (omitted for brevity) show that the estimation accuracy is somewhat
insensitive to the duration of the SI period. Hence, for the experiments conducted for this paper, we chose 8 days as the SI
period.

4.3. Numerical Results
We present the results in a format similar to that in Sec. 4 of
the main paper, but for the contact graph described in Sec. 4.1.
Fig. 6 shows the mean values (across 50 signals) of the false
negative rate (FNR) and false positive rate (FPR) obtained for
four different sparsity levels. The sparsity levels were obtained by varying the amount of cross-clique contacts. We
remark that the length of each bar in Fig. 6, FNR + FPR,
is equal to 1 − Youden’s Index. Further, we plot heat maps
(Fig. 7) to compare the performance of the four algorithms
under consideration—the intensity of gray corresponds to the
mean value (across 50 signals) of the Matthews Correlation

0.05
0.00
0.05

FPR

FPR

0.10
0.15
0.20

150

300

375

Number of measurements m

150

300

375

Number of measurements m

COMP
COMP-LASSO
COMP-SQRT-GLASSO
COMP-SQRT-OGLASSO

FPR

0.10

0.6
0.5
0.4
0.3
0.2
0.1
0.0
0.1
0.2
0.3
0.4
0.5
0.6

FPR

FNR

FNR

0.5
0.4
0.3
0.2
0.1
0.0
0.1
0.2
0.3
0.4
0.5

FNR

0.30
0.25
0.20
0.15
0.10
0.05
0.00
0.05
0.10
0.15
0.20
0.25
0.30

0.15

FNR

0.20

150

300

375

Number of measurements m

150

300

375

Number of measurements m

0.8
0.7

0.24

0.49

0.52

0.29

0.34

0.61
0.47

8.66% 6.25% 4.84% 3.20%
Average fraction of people infected s

0.6
0.5
0.4
0.3
0.2

300
150

0.9
0.67

0.67

0.70

0.77

0.8
0.7

0.50
0.26

0.54
0.31

0.57
0.35

0.68
0.51

8.66% 6.25% 4.84% 3.20%
Average fraction of people infected s

0.6
0.5
0.4
0.3
0.2

375
300
150

0.9
0.71

0.71

0.76

0.81

0.8
0.7

0.57
0.35

0.61
0.46

0.65
0.48

0.74
0.64

8.66% 6.25% 4.84% 3.20%
Average fraction of people infected s

0.6
0.5
0.4
0.3
0.2

0.9

375

0.73

0.73

0.78

0.82

300

0.59

0.63

0.67

0.76

150

0.40

0.48

0.52

0.64

0.8
0.7

8.66% 6.25% 4.84% 3.20%
Average fraction of people infected s

0.6

MCC

0.45

375

Number of measurements m

0.72

Number of measurements m

0.63

MCC

150

0.61

MCC

300

0.9
0.60

Number of measurements m

375

MCC

Number of measurements m

Fig. 6. Figure showing mean FNR and FPR values for the contact graph from Section 4.1, for mean sparsity levels of 3.20%,
4.84%, 6.25%, 8.66% (from left to right).

0.5
0.4
0.3
0.2

0.20

0.1
0.2

0.28

0.26

0.15

0.20

0.3
0.4

0.50

0.40

0.37

0.25

8.66% 6.25% 4.84% 3.20%
Average fraction of people infected s

0.5
0.6

0.0
375

0.16

0.11

0.13

0.09

0.1
0.2

300

0.16

0.16

0.09

0.11

0.3
0.4

150

0.34

0.22

0.18

0.12

8.66% 6.25% 4.84% 3.20%
Average fraction of people infected s

0.5
0.6

Number of measurements m

0.20

0.0
375

0.13

0.10

0.12

0.08

300

0.12

0.12

0.08

0.08

150

0.26

0.16

0.15

0.09

0.1
0.2
0.3
0.4

8.66% 6.25% 4.84% 3.20%
Average fraction of people infected s

RRMSE

150

0.17

RRMSE

300

0.0
0.21

Number of measurements m

375

RRMSE

Number of measurements m

Fig. 7. Figure showing mean MCC values obtained using C OMP, C OMP -L ASSO, C OMP -S QRT-G LASSO, C OMP -S QRTO GLASSO (from left to right).

0.5
0.6

Fig. 8. Figure showing mean RRMSE values obtained using C OMP -L ASSO, C OMP -S QRT-G LASSO, C OMP -S QRT-O GLASSO
(from left to right).
Coefficient (MCC). The MCC is defined as
MCC = p

TP × TN − FP × FN
(TP+FP)(TP+FN)(TN+FP)(TN+FN)

, (16)

and has been proposed as a comprehensive metric to evaluate
the performance of binary classification algorithms [27]. Its
values range from −1 to +1, where a value closer toward +1
is desirable. The RRMSE values can be seen from the heat
maps in Fig. 8 (we do not provide a heat map for C OMP since
it does not estimate viral loads).
5. ADDITIONAL RESULTS FOR M2
For model M2, we present a comparison of the four algorithms for the experiment described in Sec. 4 of the main
paper. Fig. 9 and Fig. 10 show a comparison of the performance of the algorithms under consideration in terms of mean
MCC and mean RRMSE values, respectively. Further, we remark that the true viral loads of the false negatives yielded

by C OMP -L ASSO variants are concentrated toward lower values. For instance, only about 29% of the false negatives given
by C OMP -S QRT-O GLASSO had viral load values greater than
212 = 4096.
6. SENSING MATRIX DESIGN
As mentioned in the main paper, we use Kirkman triple matrices as sensing matrices for performing pooling. A Kirkman
triple (binary) matrix A can be partitioned into 3n/m submatrices of dimensions m × m/3, each of which contains exactly one nonzero entry in each row and three nonzero entries
in each column. Further, the dot product of any two columns
of the matrix A should not exceed 1. For a given value of n,
m(< n) must satisfy the following conditions:
1. m must be of the form 3n1 , where n1 divides n, since
the number of sub-matrices and the number of columns
in each sub-matrix must be integers.

0.80

0.8
0.7

0.21

0.29

0.58
0.36

0.63
0.54

8.86% 6.01% 3.98% 2.12%
Average fraction of people infected s

0.6
0.5
0.4
0.3
0.2

300
150

0.71

0.81

0.84

0.8
0.7

0.51
0.22

0.54
0.30

0.65
0.40

0.70
0.60

8.86% 6.01% 3.98% 2.12%
Average fraction of people infected s

0.6
0.5
0.4
0.3
0.2

375
300
150

0.9
0.74

0.79

0.88

0.90

0.8
0.7

0.64
0.44

0.67
0.54

0.76
0.60

0.79
0.72

8.86% 6.01% 3.98% 2.12%
Average fraction of people infected s

0.6
0.5
0.4
0.3
0.2

0.9

375

0.74

0.79

0.88

0.90

300

0.64

0.68

0.76

0.79

150

0.44

0.55

0.61

0.73

0.8
0.7

8.86% 6.01% 3.98% 2.12%
Average fraction of people infected s

0.6

MCC

0.49

0.9
0.66

MCC

150

0.46

MCC

300

375

Number of measurements m

0.75

Number of measurements m

0.65

Number of measurements m

0.57

MCC

Number of measurements m

0.9

375

0.5
0.4
0.3
0.2

0.18

0.15

0.1

0.22

0.11

0.12

0.3
0.4

0.52

150

0.43

0.26

0.19

8.86% 6.01% 3.98% 2.12%
Average fraction of people infected s

0.5
0.6

0.08

0.06

0.07

0.1
0.2

300

0.12

0.08

0.07

0.06

0.3
0.4

150

0.16

0.14

0.10

0.07

8.86% 6.01% 3.98% 2.12%
Average fraction of people infected s

0.5
0.6

0.0
375

0.10

0.08

0.06

0.07

300

0.12

0.08

0.07

0.06

150

0.16

0.13

0.10

0.07

0.1
0.2
0.3
0.4

8.86% 6.01% 3.98% 2.12%
Average fraction of people infected s

RRMSE

0.26

300

0.10

RRMSE

0.2

0.0
375

Number of measurements m

0.14

Number of measurements m

0.0
0.24

375

RRMSE

Number of measurements m

Fig. 9. Figure showing mean MCC values obtained using C OMP, C OMP -L ASSO, C OMP -S QRT-G LASSO, C OMP -S QRTO GLASSO (from left to right).

0.5
0.6

Fig. 10. Figure showing mean RRMSE values obtained using C OMP -L ASSO, C OMP -S QRT-G LASSO, C OMP -S QRT-O GLASSO
(from left to right).
2.

3
2



· n ≤ m(m − 1)/2 since a triple contains
and a pair must belong to at most one triple.

3
2



pairs

For n = 1000, the only values of m which satisfy the above
constraints are 120, 150, 300, 375, 600, and 750. We construct Kirkman triple matrices with m = 150, 300, 375 and
use them in our experiments. The matrices are constructed
based on a few simple rules:
1. The indices of ones in each column form an arithmetic
progression (AP).
2. The matrix has a block structure and the common difference of the AP remains constant throughout each
block. Furthermore, the sum of all columns in a block
yields the vector consisting of all ones.
3. The common difference values {dB : B is a block} are
chosen such that the multi-set {r · dB : r ∈ {n : n ∈
N, n < 3}, B is a block} has no duplicate values.
Fig. 11 shows the structure of a 375×1000 Kirkman triple
matrix obtained using the above approach. Let B be any
block and let dB denote the common difference of the AP
for block B as indicated in the figure. Then, the ith column
of B is given by
Bi =

3−1
X

eβi +jdB ,

βi = mod(i, dB ) + 3dB [i/dB ], (17)

j=1

where [·] denoted the greatest integer function and ej denotes
the jth standard basis vector. Clearly, any block B must have
dimensions 3nB × nB , where dB divides nB .

As m decreases, it becomes harder to design matrices satisfying all three rules specified earlier. However, it is possible to relax the third rule in such cases and still obtain a
matrix satisfying the required constraints. For example, our
150 × 1000 Kirkman triple matrix does not obey the third
rule. We further remark that one may design balanced matrices with a different number of (say k) ones in each column
such that the dot product of every pair of columns is bounded
by 1, using the above approach. Such matrices would arise
from the Steiner systems S(2, k, m) [just as Kirkman matrices arise from S(2, 3, m)]. For example, it is straightforward
to design a 400 × 1000 matrix with k = 4 using our approach.

59

1

5

25

60

61

62

125

66

65

64

63

Fig. 11. A 375 × 1000 Kirkman triple matrix obtained using our approach. The number written within each block is equal to
the corresponding common difference value and the blocks without number markings are zero matrices. The blocks having less
than m = 375 rows have dimensions equal to 3dB × dB .

