1

vContact: Private WiFi-based IoT
Contact Tracing with Virus Lifespan

arXiv:2009.05944v2 [cs.CR] 27 Jan 2021

Guanyao Li, Siyan Hu, Shuhan Zhong, Wai Lun Tsui, and S.-H. Gary Chan
Abstract—Covid-19 is primarily spread through contact with the virus which may survive on surfaces with a lifespan of hours or even
days if not sanitized. To curb its spread, it is hence of vital importance to detect those who have been in contact with the virus for a
sustained period of time, the so-called close contacts. Most of the existing digital approaches for contact tracing focus only on direct
face-to-face contacts. There has been little work on detecting indirect environmental contact, which is to detect people coming into a
contaminated area with the live virus, i.e., an area last visited by an infected person within the virus lifespan.
In this work, we study, for the first time, automatic IoT contact tracing when the virus has a lifespan which may depend on the
disinfection frequency at a location. Leveraging the ubiquity of WiFi signals, we propose vContact, a novel, private, pervasive and fully
distributed WiFi-based IoT contact tracing approach. Users carrying an IoT device (phone, wearable, dongle, etc.) continuously scan
WiFi access points (APs) and store their hashed IDs. Given a confirmed case, the signals are then uploaded to a server for other users
to match in their local IoT devices for virus exposure notification. vContact is not based on device pairing, and no information of other
users is stored locally. The confirmed case does not need to have the device for it to work properly. As WiFi data are sampled
sporadically and asynchronously, vContact uses novel and effective signal processing approaches and a similarity metric to align and
match signals at any time. We conduct extensive indoor and outdoor experiments to validate vContact performance. Our results
demonstrate that vContact is effective and accurate for contact detection. The precision, recall and F1-score of contact detection are
high (up to 90%) for close contact proximity (2m). Its performance is robust against AP numbers, AP changes and phone heterogeneity.
Having implemented vContact as an Android SDK and installed it on phones and smart watches, we present a case study to
demonstrate the validity and implementability of our design in notifying its users about their exposure to the virus with a specific
lifespan.
Index Terms—Contact Tracing, Exposure Notification, COVID-19, Data Management and Analytics, Social Impacts.

F

1

I NTRODUCTION

The outbreak of COVID-19 has had a profound impact
on our lives and global economy. COVID-19, like many
other infectious diseases, is primarily spread through viral
contact. Recent studies have shown that the virus has a
lifespan: in airborne droplets it can last more than 10 minutes, and on surfaces it can survive for hours to days if not
properly disinfected (in low temperatures it may last even
longer) [1] [2]. The health of any person coming into contact
with the live virus for a sustained period of time, say 15–30
minutes, may be at risk [3]. In order to effectively contain the
spread of the disease, tracing and quarantining these close
contacts as soon as possible is of paramount importance.
Traditionally, close contacts are traced manually through
personal interviews with infected people by medical officers. Such a manual approach is labour-intensive and
slow. Due to mis-memory, the contact information may be
incomplete or error prone. Furthermore, the patient may not
know everyone in his/her proximity, and those coming into
the same area within the virus lifespan after he/she has left.
•

•

The authors are with the Department of Computer Science and Engineering, The Hong Kong University of Science and Technology, Kowloon,
Hong Kong, China.
E-mail: gliaw@cse.ust.hk, siyanhu@ust.hk, szhongaj@cse.ust.hk, ptsuiwl@ust.hk, and gchan@cse.ust.hk.
This work has been submitted to the IEEE for possible publication.
Copyright may be transferred without notice, after which this version may
no longer be accessible.

To overcome the above limitations of manual tracing, we
propose vContact, a novel, private and digital contact tracing solution using the Internet of things (IoT) with possibly
location-dependent virus lifespan. Anyone in contact with
the living virus is considered at risk. This includes those
simultaneously located with the patient, and those sharing
the same environment which the patient has left. vContact
leverages ubiquitous WiFi signals to achieve pervasive, fully
distributed and automated contact tracing. Note that, although for concreteness our discussion will focus on WiFi
signals, vContact can be straightforwardly extended to other
radio-frequency (RF) signals such as Bluetooth and their
combinations. To the best of our knowledge, this is the first
work on using RF signals for private IoT contact tracing
with a virus lifespan.
We illustrate the process of vContact in Figure 1. A user
carries a WiFi-enabled IoT device (phone, wearable, dongle,
etc.). For concreteness and ease of illustration, we use a
phone as the example in the figure. With an installed app, it
periodically scans for WiFi, with each scan collecting a signal
vector consisting of two elements: 1) the signal IDs, which
are the hashed (and optionally encrypted) values of the
MAC addresses of the WiFi access points (APs); and 2) the
corresponding received signal strength indicators (RSSIs) of
the signal IDs. Each signal vector is associated with a timestamp, which is the scanning/collection time of the signals.
Over time, the device collects and stores a time series of the
signal vectors, termed the signal profile. The signal profile
may be kept for a certain duration corresponding to the

2

cannot be applied for environmental contamination, i.e., the
case with non-zero spatial-temporal virus lifespan.
vContact complements the above and may be integrated
with them (such as [3] [7]). Compared with prior arts,
vContact has the following strengths and unique features:
•

Fig. 1. The process of vContact contact tracing using WiFi.

virus incubation period, usually 14 to 28 days for Covid-19.
Upon positive confirmation in hospital, the patient has
the following two possibilities:
•

•

With the installed app: With the consent of the patient,
the health officer may access his/her signal profile.
(Before sharing with the officer, the patient may
blank out some time spans of the signal profile for
personal reasons.) Because the signal IDs are hashed
(and possibly encrypted) from AP MACs, the officer does not know the patient’s geo-locations, but
only clusters of anonymized IDs and their collection
times. Based on that, the officer works with the
patient to identify the physical venues presenting potential health risks to the public. The corresponding
anonymized IDs are extracted and labelled with their
projected virus lifespan at the location at that time
(depending on disinfection frequency). The resultant
signal profile is then uploaded to a secure server
for other IoT users to download and match with
their own local profile in a distributed manner. Upon
detecting a close contact, the user is alerted at once
in private to check their health condition and seek
medical advice.
Without the app: In this case, the confirmed case has
to rely on his/her memory to recall the major venues
and visit time as in the manual case. Then some staff
will go to these venues (the infected areas) to collect
offline their WiFi information and label them with
the visit time and viral lifespan at that time. These
manually labelled data are then uploaded after being
processed, and matched by the other IoT users the
same way as in the previous case.

There have been prior works on automatic digital contact
tracing. Some use GPS [4] and cellular signals [5]. While
effective, these approaches do not work well in indoor
environments due to signal blockage. Because they are also
based on explicit user geo-locations, and such locations may
be computed or stored in other’s networks, the systems
raise concerns regarding location privacy. Due to these
reasons, they have not become mainstream. Some privacypreserving approaches based on phone-to-phone pairing
using Bluetooth Low Energy (BLE) have attracted much attention and been implemented recently [3] [6] [7]. However,
they work for only direct face-to-face contact tracing, and

•

•

Contact detection with virus lifespan: vContact is the
first piece of work for ubiquitous IoT contact tracing
to capture the realistic scenario of virus lifespan
which may be location-dependent and temporally
varied depending on disinfection operation. It comprehensively covers, in a single framework, those in
direct face-to-face contact and indirect environmental
exposure in the areas previously visited by an infected person. The lifespan of the virus, set at the
time of signal upload, may be heterogeneous and
customized depending on the frequency of disinfection operation in the venue.
No device-to-device pairing and communication: Prior
contact tracing proposals based on Bluetooth require
device pairing, which means both devices, including
the infected one, have to have installed the app
or software in order to work properly. To achieve
tracing effectiveness, they hence demand a high
adoption rate (in the range of reportedly 40% – 70%).
Moreover, such a device pairing approach may suffer
from replay/relay attack [8] and raise privacy and
security concerns [9]. In contrast to such pairing, each
vContact device operates independently without any
pairing or communication, and does not require the
confirmed case to have already had the IoT device.
This greatly relaxes the adoption barrier and provides a graceful adoption path. Furthermore, users
do not store any information of or exchange any messages with other users; it hence offers much better
protection of user anonymity, privacy and attacks.
Privacy by design: vContact is privacy-by-design.
First, it does not require a user registration process, and hence accesses no personal information
such as names, phone numbers, IDs, contact lists,
images/videos, etc. Second, the collected data never
leave the local storage without the explicit consent of
the owner, and even so (i.e., the case of a confirmed
case) no personally identifiable data are uploaded,
and the data remain anonymous at the server. Finally, vContact is fully decentralized. The collected
data are exclusively stored in one’s own device,
and the contact is computed and detected locally
on the device in a scalable manner without any
other centralized entity (party or server) having full
information. As no user data are stored anywhere
beyond one’s device, a user may exit the system at
any time by device removal or app un-installation
without leaving his/her data behind. Upon detection
of close contact, vContact conveys the message to
its users in private. It is clear that such data fragmentation and minimization protect data privacy,
and prevent data re-purposing, abuse, and mis-use.
Due to its distributed and hence scalable nature, it is
deployable from small local communities to across a
country.

3

Fig. 2. Overview of contact detection using WiFi in vContact.

•

No GPS-based geo-location: vContact is not based
on GPS. It is based on the hashed values of WiFi
MAC addresses (namely signal IDs) without storing
the user’s physical geo-location. This leads to much
stronger location confidentiality than other GPSbased approaches, because the association of signal
IDs to their physical locations takes an enormously
and prohibitively large amount of manual work (that
is to visit every indoor and outdoor spot of the
city and logging down the locations of all the MAC
addresses encountered). Furthermore, unlike other
GPS approaches, vContact can detect indoor contacts
and hence is more pervasive.

Detecting close contact using WiFi data is a challenging
problem. It is because signal vectors are sampled sporadically at random discrete times. Such independence and
asynchrony among IoT devices results in difficulties detecting contact at any arbitrary time. Furthermore, signals may
be sparsely sampled in the space (once every minute or so)
Therefore, the scanned IDs and their RSSIs at a location at a
distinct time may be different because of the change in the
environment. Moreover, due to the device heterogeneity on
antenna design and sensitivity, the collected signal IDs may
also differ for different users.
vContact overcomes these problems by employing an
efficient approach to represent the values between consecutive signal vectors and a novel similarity metric to match
signal values for contact tracing. We present in Figure 2 an
overview of vContact. It first processes the discrete signal
profile from a confirmed case or infected area by transforming it into a continuous profile (the processed profile). Using
that, given the signal vector of a user at time t, if t falls in
the time range of the virus lifespan of a processed vector,
vContact compares their level of matching using a novel
signal similarity metric. If the similarity is larger than a
given threshold, the user is said to be in contact with the
virus at t. A user is identified as a close contact if the contact
time exceeds a certain sustained period of time as specified
by health officials.
vContact is simple, and we have implemented it as
a software development kit (SDK) and Android app. We
conduct extensive indoor and outdoor experiments with a
diverse and representative set of IoT devices such as smart
watches and phone brands in the market (Samsung, Honor,

Huawei Nova, Huawei Mate30, Xiaomi and OPPO). Our
results show that it achieves high precision, recall and F1score (up to 90% for the contact proximity of 2m), and
its performance is robust against AP numbers, AP changes
and devices of different brands. vContact can achieve good
accuracy even when the AP number is low (as few as
five APs in our experiments), meaning that it is widely
applicable to city or suburban areas.
The remainder of this paper is organized as follows.
We introduce related works in Section 2. In Section 3 we
present the approach of vContact. We have implemented
vContact as an SDK, and discuss the experiment setting
and illustrative results in Section 4. With the SDK, we
have installed it in IoT smart watches and built an app,
and present its implementation details and measurement in
Section 5.1. We conclude with future works in Section 6.

2

R ELATED WORKS

Automatic contact tracing has attracted much attention in
both academia and industry due to its importance in containing the the spread of the Covid-19 pandemic [8] [10]
[11]. In this section, we present the prior arts in the area.
Some studies have used signals which reveal user geolocation, such as GPS, cellular data, and radio frequency
identification (RFID). GPS signal provides a user’s exact
location for contact tracing [12] [13] [14] [15], but it is
usually weak and noisy in indoor environments, limiting
its contact coverage. Cellular data can be used to infer a
user’s public transportation trips [16] [17], which is crucial
for contact tracing. Given the data, one can detect users
taking the same bus, train, or subway with a confirmed
case. However, this approach often has high location errors,
because the coverage of the cell tower is large, and close
proximity is difficult to detect. Some researchers have also
proposed using RFID to understand contact [18] [19]. However, special devices have to be deployed for data collection. Meanwhile, some geo-location based contact tracing
systems have been deployed around the world, such as
Corowarner in Turkey [20], Aarogya Setu in India [21], Cotrack in Argentina [22]. Corowarner and Aarogya Setu use
GPS data, while Cotrack fuses signals of RFID, GPRS, GPS,
and telecommunication technologies. All the above works
may be extended to contact tracing with the virus lifespan.
However, they may raise privacy concerns as they are based
on user’s physical geo-location. By contrast, vContact offers
much better location confidentiality, achieves better location
accuracy, and is pervasive and easy to use.
Location privacy is a major concern for contact tracing [23]. To better protect it, some works propose using a magnetometer [24]. However, geomagnetism suffers
from location ambiguity, which may lead to unsatisfactory
proximity detection in practice. There has also been much
work based on device-to-device message exchange using
Bluetooth [6] [25] [26] [27]. User devices broadcast their
ID using Bluetooth, and scan the nearby IDs. Based on
the scanned IDs, one can know if he/she has had close
contact with an infected case [28]. Among the Bluetooth approaches, centralised solutions rely on a third-party server
for contact tracing. Among these works, BlueTrace [29] and
ROBERT [30] are the two most representative protocols.

4

They use a decentralised framework to collect data, but a
centralised system to analyze the exposure risks. Bluetooth
data are collected via device-to-device communication and
are stored locally. Once a user is infected, he/she can upload
his/her scanned data to a security server for analysis. Users
who are at risk will then be identified by the centralised
system. The major difference of the two protocols is the
way that people know their risks. In BlueTrace, the health
authority would proactively contact the individuals who
have a high likelihood of virus exposure, while users of
ROBERT have to periodically probe the server for their
risk score of exposure. Based on the BlueTrace protocol, the
automatic contact tracing app TraceTogether [31] has been
deployed in Singapore, which is the first national deployment of the Bluetooth-based contact tracing system. Based
on a similar concept to that of TraceTogether, another system
called COVIDSafe has been deployed in Australia to slow
the spread of COVID-19 [32]. Furthermore, DESIRE [33] is
an extension of the ROBERT protocol, which is based on
the same architecture of ROBERT with some major privacy
improvements.
Since a third-party server may raise the concern of
possible data abuse, other works advocate a fully distributed approach, where the exposure detection and notifications are processed on an individual device. Representative works include PACT-UW [7], DP-3T [3], PACT-MIT [34]
and Pronto-C2 [35] (Note that both PACT-UW and PACTMIT are termed as PACT in their origin papers). In these
decentralised systems, users collect the encrypted IDs of
their nearby users and store them locally. When someone is
confirmed as being infected, he/she can upload his/her encrypted ID for other users to download for contact tracing.
Compared with centralised solutions, only the encrypted
IDs of infected cases are uploaded for the decentralised
solutions, and contact information is distributed on user
devices for storage.
Based on the concept of decentralised systems, Google
and Apple provide a toolkit for privacy-preserving contact
tracing using Bluetooth [36]. Some Bluetooth-based decentralised systems have also been deployed in some countries,
such Covid Watch in the US [37] and SwissCovid [38] in the
Switzerland. All these schemes are independently designed
and very similar, apart from some minor variations in
implementation and efficiency. All the above works focus
on detecting face-to-face close contact, and they cannot be
extended to the case with virus lifespan. We propose a
private WiFi-based approach to detect close contacts with
virus lifespan. To the best of our knowledge, this is the
first piece of work considering a virus lifespan in private
contact tracing using WiFi. Moreover, no IoT device pairing
or communication are needed in our proposed scheme, and
hence no minimal adoption rate.

3

V C ONTACT

D ETAILS

We present the details of vContact in this section. We first
discuss its data processing approaches to construct the processed profile from the raw signal profile, for the patient
with and without the installed app on their IoT devices in
Section 3.1 and Section 3.2, respectively. We then introduce
in Section 3.3 an efficient and novel signal similarity metric

Fig. 3. Signal profile processing for a confirmed case with app.

to measure signal similarity, given a user’s signal vector and
a processed vector. We summarize vContact and outline its
contact detection algorithm in Section 3.4.
We define signal vector and signal profile as follows.
Definition 1. (Signal vector) A signal vector A is represented
as {(a1 , s1 ), (a2 , s2 ), ..., (ai , si ), ..., (an , sn )}, where ai is
the signal ID (hashed and possibly encrypted AP MAC
address) and si is its RSSI.
Definition 2. (Signal profile) A user’s signal profile is defined as a sequence of signal vectors over time: W =
{(A1 , t1 ), (A2 , t2 ), ..., (Ai , ti ), ..., (An , tn )}, where Ai is
the signal vector scanned at time ti .
In other words, a signal vector represents the signals and
RSSIs scanned by an IoT device at a certain time, while a signal profile is a collection of the signal vectors over time. The
contact tracing is then stated as follows. Given a user’s signal profile W = {(A1 , t1 ), (A2 , t2 ), ..., (Ai , ti ), ..., (An , tn )},
detect if the user has contact with the virus at each ti by
comparing the similarity of the signal vector at that time
with the signal profile of a confirmed case or an infected
area.
3.1

Profile processing for a patient with the app

Signals are not sampled continuously but at sporadic and
random intervals. Consequently, signal data are not continuously observable, leading to difficulty in comparing signal
similarity at any arbitrary time. We propose here a data
processing approach to construct continuous profiles from
raw signal profiles for patients with our installed software.
We show an example of signal profile processing in Figure 3. A confirmed case’s signal profile
{(A1 , t1 ), (A2 , t2 ), (A3 , t3 ), (A4 , t4 )} consists of some signal
vectors at discrete times. We aim to construct a continuous
processed profile from the raw signal profile so that the
signal vector at any arbitrary time can be compared. To
achieve this, we construct the processed vectors Âi from any
two consecutive signal vectors Ai and Ai+1 , and consider
the virus lifespan τi . The virus lifespan τi may vary with
time.
Definition 3. (Processed vector) A processed vector is defined as: Â = {(a1 , smin
, smax
), (a2 , smin
, smax
), ..., (ai ,
1
1
2
2
min max
min max
si , si ), ..., (an , sn , sn )},
where
(ai , smin
, smax
) denotes that the RSSI range of a
i
i
signal ai is from smin
to smax
.
i
i
The signal strength in a processed vector is represented as a range instead of an exact value in a signal
vector. Given two consecutive signal vectors in a signal
profile Ai = {(ai1 , si1 ), ..., (aij , sij ), ...(ain , sin )} at ti and
i+1
i+1 i+1
i+1 i+1
Ai+1 = {(ai+1
1 , s1 ), ..., (ak , sk ), ...(am , sm )} at ti+1 ,

5

the processed vector in the time range from ti to ti+1 is
denoted as Â = {(a` , smin
, smax
)|` = 1, 2, ..., |Ai ∪ Ai+1 |},
`
`
where a` ∈ Ai .a ∪ Ai+1 .a and (smin
, smax
) is denoted as
`
`

i+1
i+1
i
i
for a` ∈ Ai ∩ Ai+1 ;
 (min(sj , sk ), max(sj , sk )),
i
(γ, sj ),
for a` ∈ Ai , a` ∈
/ Ai+1 ;

(γ, si+1
),
for
a
∈
A
,
a
/ Ai .
`
i+1 ` ∈
k
(1)
Here, γ is a value indicating a weak signal strength, which
is set to be −100 in our experiments. Then, we construct a
continuous processed profile from a confirmed case’s signal
profile considering the virus lifespan. We present a formal
definition of a processed profile.

Fig. 4. Signal profile processing for an infected area.
TABLE 1
Average number of signals in a signal vector for various mobile phones
Phone
Honor
Huawei Mate 30
OPPO
Huawei Nova
Xiaomi

Average number of signals
75.00
128.12
180.16
92.87
102.09

Definition 4. (Processed profile) A processed profile
contains a sequence of processed vectors over time: Ŵ =
start end
{(Â1 , tstart
, tend
, t2 ), ..., (Âi , tstart
, tend
), ...
1
1 ), (Â2 , t2
i
i
start end
(Âm , tm , tm )}, where Âi is a processed vector for the
time slot from tstart
to tend
, and (tstart
, tend
) indicates
i
i
i
i
Ai .a|} where aj is a scanned signal in W (i.e., aj ∈ ∪ni Ai .a),
the time slot of the virus lifespan.
and smin
is the minimum signal strength of aj in W while
j
Given a confirmed case’s signal profile W
= smax
is
the
maximum signal strength of aj in W ; the
j
{(A1 , t1 ), (A2 , t2 ), ..., (Ai , ti ), ...(An , tn )}, the processed surviving time of the virus in the infected area is from t
profile is represented as Ŵ = {(Â1 , t1 , t2 + τ1 ), (Â2 , t2 , t3 + to t + τ .
τ2 ), ..., (Âi , ti , ti+1 + τi ), ..., (Ân−1 , tn−1 , tn + τn−1 )}, where
Âi is constructed from Ai and Ai+1 and τi is the virus
3.3 Signal similarity metric
lifespan for the time slot from ti to ti+1 . Note that τi is
given by the health officer, and it can vary for different time We propose a signal similarity metric to compare the simislots depending on the frequency of disinfection operation larity of a signal vector with a processed vector for exposure
detection. The metric considers the signal IDs overlap ratio
in the venues.
and the RSSI difference.
Intuitively, the closer a user is to the location of the virus,
3.2 Signal profile processing for infected areas
the more signal IDs are shared between the user’s signal
For the case where the patient has not installed the app, we vectors and the vectors in the processed profile. Thus, we
need to extract the signals in the infected areas through a could use the overlap ratio of two vectors’ signal IDs to
survey (signal collection process). We can evaluate if a user indicate their proximity. Given a user signal vector A at time
has been in contact with an infected area by measuring the t and a processed vector Â, the overlap ratio is calculated
similarity of her/his signal vector and signal vectors of each as:
position in the area. However, collecting WiFi data for every
|A.a ∩ Â.a|
,
(2)
O=
position in the infected area is inefficient. We propose an
min(|A.a|, |Â.a|)
efficient approach to construct the processed profile for an
infected area using just some sampled signal data in the where A.a is the Signal IDs in A, Â.a is the signal IDs in Â,
area.
and | · | denotes the number of signal IDs.
Instead of collecting signal data at every position, staff
The reason for using min(|A.a|, |Â.a|) is to mitigate the
walk around the area with a WiFi-on device such as a impact of the dynamic environment and device heterogenephone or a Raspberry Pi. The collected signal profile is ity. An IoT device such as a phone or smart watch may
some signal vectors over time. To generate a representative scan different numbers of WiFi APs at a location at different
processed profile for the area, we aggregate all signals times. Moreover, different IoT devices may have different
and their RSSIs in the signal profile. As shown in Fig- abilities to scan signals, with two co-located devices scanure 4, we merge the signal vectors in the signal profile ning different numbers of signals. Table 1 shows the average
{(A1 , t1 ), (A2 , t2 ), (A3 , t3 ), (A4 , t4 )} which are collected in numbers of signals in a signal vector of various co-located
the infected area. We also consider the time range [t, t0 ] when phones in a shopping mall. The average number of signals is
a confirmed case stays in the area and the virus lifespan τ heterogeneous for different phones. The difference could be
to construct the processed profile for the infected area.
significant for some phones. In this case, using |A.a|, |Â.a|
The processed profile of an area is represented as or other terms (e.g. |A.a ∪ Â.a|) as the denominator will
Ŵ = (Â, tstart , tend ), where Â is a processed vector and introduce more variance.
[tstart , tend ] is the time range of the virus lifespan. Given
A signal could cover a large area, so it is possible that
the signal profile collected in the infected area W = two vectors with a large proportion of common signals
{(A1 , t1 ), (A2 , t2 ), ..., (Ai , ti ), ...(An , tn )}, the time range of are not in close proximity. Thus, we also consider the RSSI
a confirmed case staying in the area [t, t0 ], and the virus difference to denote the proximity. If a user stays close with
lifespan τ , the processed profile Ŵ = (Â, tstart , tend ) is con- the virus, the RSSI difference of the same signal in two
structed as follows: Â = {(aj , smin
, smax
)|j = 1, 2, ..., | ∪ni vectors should be small. Given a user signal vector A =
j
j

6

{(a1 , t1 ), (a2 , t2 ), ...(ai , ti ), ...(an , tn )} and a processed vector Â = {(a1 , smin
, smax
), (a2 , smin
, smax
), ..., (aj , smin
,
1
2
2
2
j
max
min max
sj ), ..., (am , sm , sm )}, for ak ∈ A.a ∩ Â.a, its RSSI
difference is calculated as
 min
,
 sj − si , si < smin
j
max
si − smax
,
s
>
s
,
(3)
d(ak ) =
i
j
j

0,
otherwise.
The average RSSI difference at a timestamp is defined as
P
ak ∈(A.a∩Â.a) d(ak )
D=
,
(4)
|A.a ∩ Â.a|
where | · | denotes the number of signal IDs.
When a user has contact with the virus, the overlap score
O (Equation 2) should be large, while the RSSI difference
D (Equation 4) should be small. Therefore, we define the
signal similarity of A and Â as

P (A, Â) =

O
,
D+1

(5)

where 0 ≤ P (A, Â) ≤ 1. A larger P (A, Â) indicates closer
proximity.
3.4

The vContact algorithm

Algorithm 1: Contact Detection
1

2

3
4

5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21

Input: A user’s signal profile W1 ;
A confirmed case’s or an infected area’s
signal profile W2 ;
Virus lifespan {τi |i = 1, 2, ..., |W2 | − 1};
A proximity threshold α.
Output: results of contact detection at different
timestamps.
Initialize S to empty;
Construct the processed profile Ŵ from W2 and
{τi |i = 1, 2, ..., |W2 | − 1};
foreach (Ai , ti ) ∈ W1 do
contact = False;
foreach (Âj , tstart
, tend
j
j ) ∈ Ŵ do
start
if tj
≤ ti ≤ tend
then
j
s = P (Ai , Âj );
if s ≥ α then
contact = True;
break;
end
end
end
if contact == True then
Add (T rue, ti ) to S ;
else
Add (F alse, ti ) to S ;
end
return S

Anyone having contact with the surviving virus may be
at risk. Given a user’s signal vector Ai at ti , if the timestamp
ti is within the virus lifespan, and the similarity of Ai and
the processed profile of a confirmed case or an infected area

is larger than a threshold, the user will be detected as having
contact with the virus at ti . The algorithm is presented in
Algorithm 1.
Given a user’s signal profile W1 , the signal profile of
a confirmed case or an infected area W2 , the virus lifespan {τi |i = 1, 2, ..., |W2 | − 1} and a proximity threshold
α, we first construct the processed profile from W2 and
{τi |i = 1, 2, ..., |W2 | − 1} (Line 4). Then, for each signal
vector Ai at time ti in W1 , if ti falls in the time slot of a
processed vector in the processed profile, we calculate the
signal similarity (using Equation 5) at ti (Line 7 ∼ 9). If
the similarity at ti is larger than the given threshold α, the
user is identified as having contact with the virus at ti (Line
11). The algorithm evaluates the similarity of each signal
vector in W1 and Ŵ , and returns a list of detection results.
The threshold α depends on how we define the contact
proximity for close contact. We will discuss the relationship
between the signal similarity and physical proximity, and
the determination for the proximity threshold α in the
following section.

4

I LLUSTRATIVE E XPERIMENTAL R ESULTS

We have implemented and packaged vContact as a Software Development Kit (SDK). In this section, we present
illustrative experimental results on the SDK, using phones
as IoT devices. We first introduce the experiment settings in
Section 4.1. Then we study how to set the threshold α in Section 4.2. We present the performance of vContact for patients
with app and infected areas in different sites in Sections 4.3
and 4.4, respectively. Then, we compare vContact with other
state-of-the-art approaches in Section 4.5. The studies on
the impacts of different AP numbers, dynamic environment
and heterogeneous devices are covered in Sections 4.6, 4.7
and 4.8, respectively. Finally, we discuss the impact of data
sampling rate in Section 4.9.
4.1

Experimental settings

We collect WiFi data using five mobile phones in three different sites. The brands and models of phones are different,
and include Honor, Huawei Nova, Huawei Mate30, Xiaomi,
and OPPO. According to some latest reports, these brands
are representative in the market. The three experimental
sites are an office, a bus station, and a store in a shopping
mall. The size of the office is around 10m×12m. The bus
station is an outdoor area, the size of which is around
2m×15m. The area in the shopping mall for experiments
is a large store with a size of 20m×25m. The total signal
numbers are 32 in the office, 109 in the bus station, and 301
in the shopping mall. The average number of signals (i.e.,
scanned APs) in signal vectors of the office, bus station, and
shopping mall are 19.02, 24.0, 46.29, respectively.
To evaluate the detection performance for the case where
the signal profiles of confirmed cases are available, we first
put the five mobile devices at a location `0 for 10 minutes
to collect the WiFi data in each site. The WiFi signals with
RSSIs scanned by a device are collected. Then we put the
devices at a location `i for 10 minutes for data collection,
where i = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and the distance between
`0 and `i is i meters. The data sampling rate is set as 5s per

7

record, so we have around 120 records of data for a device
in each distance setting for each site.
To evaluate the detection performance for the case where
a confirmed case’s signal profile is unavailable, we walk in
the experimental sites to collect WiFi data using a mobile
phone to construct the processed profiles for each site. Then
we wander around and outside the area with five mobile
phones collecting WiFi data for testing. The time when
we were in and outside the area is recorded during the
experiments.
Given the data D collected by a user’s device, we use
Da to denote the data which are collected when the user
has contact with the virus (i.e., within the contact proximity
with a confirmed case or in an infected area), and use Db
to denote the data which are detected as having contact
with the virus. The Da is the ground-truth data while the
Db is the detection result. Precision, recall, and F1-score are
used as metrics to evaluate the contact detection results. The
precision is defined as

precision =

|Da ∩ Db |
,
|Db |

(6)

where | · | represents the data size. Similarly, recall is defined
as
|Da ∩ Db |
recall =
.
(7)
|Da |
Based on the definition of precision and recall, F1-score is
defined as
precision ∗ recall
F1 = 2 ∗
.
(8)
precision + recall
We compare vContact with some other state-of-the-art
approaches, which are introduced as follows,
•

•

•

Bluetooth: It is widely used for digital contact tracing,
such as schemes [34] [7] [3]. To collect Bluetooth data,
two mobile devices are put at a distance of k meters
for 10 minutes in the three experimental sites, where
k is set to be {1, 2, . . . , 10}. We use one device as the
broadcaster, and another as the scanner. The scanner
can scan the Bluetooth signal from the broadcaster,
and the RSSI is recorded over time. For each contact
proximity k meters, a threshold is selected for contact
detection. If a received signal strength is larger than
the threshold, they are detected as having contact.
Jaccard similarity: It is used to evaluate the similarity
of two sets, and it is defined as the size of the
intersection divided by the size of the union of two
sets. If the Jaccard similarity of two signal vectors is
larger than a threshold, they are identified as within
the contact proximity. It is also used in a relevant
work for proximity estimation [39].
Average Manhattan distance (AMD): It is used in previous works [9] [39], which is defined as
P
|RSSIA,i − RSSIB,i |
,
(9)
AM D = i
N
where RSSIA,i is the received signal strength of AP
i measured by user A, and N is the total number of
overlapping APs. If the AMD of two signal vectors
is less than a threshold, they are identified as within
the contact proximity.

•

Average Euclidean distance (AED): It is also used in the
previous work [9], which is defined as
pP
2
i (RSSIA,i − RSSIB,i )
AED =
,
(10)
N
where RSSIA,i is the received signal strength of AP
i measured by user A, and N is the total number of
overlapping APs. If the AED of two signal vectors
is less than a threshold, they are identified as within
the contact proximity.

For the baseline approaches AMD and AED, given two
signal vectors A and B , if a signal is scanned in A but not
in B , the signal strength is set as -100 in B for calculation,
and vice versa.
4.2

Threshold α

As mentioned in Section 3, the contact detection algorithm
relies on a threshold α to identify contacts. In this section,
we discuss the selection of α. Given the contact proximity
k m, if the distance of a user and the virus is less than k m,
she/he should be detected as having contact with the virus.
Intuitively, α is relevant to the contact proximity and it
should be different for different contact proximities. We use
the data collected at `0 in a site as the data from confirmed
cases, and detect contacts for data which are collected at
`i (i > 0) in the same site. When k meters is set as the contact
proximity, Da contains the data collected at `i where i ≤ k .
Precision and recall are used as metrics, and the results
of α versus precision and recall for k = 1m, k = 2m and
k = 4m are presented in Figure 5. As the threshold α increases, the precision increases while the recall declines. The
reason is that a larger threshold indicates closer proximity.
Thus, increasing the threshold would lead to high precision.
However, if the threshold is set to be too large, some of
the data the distance of which is less than k m will not be
detected, resulting in a drop in recall.
The threshold can be selected according to the requirements of precision and recall for close contact detection. To
balance the precision and recall, we select the intersection
points, the precision and recall of which are equal for our
following discussion. In Figure 5(a), the precision and recall
for k = 1m are low when α is set as 0.25, which indicates
that identifying contact within 1m is difficult. As shown
in Figures 5(b), the precision and recall for k = 2m have
a significant improvement when the threshold is around
0.20. The precision and recall in Figure 5(c) for k = 4m
are high (around 70%) if the threshold is around 0.17. We
use the same strategy to select thresholds for other contact
proximities.
4.3

Site study

We present the performance of contact detection in different
sites in this section. We use different distances (k = 1m,
2m, 3m, 4m, 5m) to denote the contact proximity, and
the threshold is set according to the discussion in Section
4.2. Results of precision, recall and F1-score versus contact
proximity are shown in Figure 6.
In Figure 6(a), as the contact proximity increases, the
precision in the three sites increases, indicating that it is

8
1

1
recall
precision

performance

0.6

0.4

0.6

0.4

0.2

0.4

0.2

0

0.05

0.1

0.15

0.2

0.25

contact proximity (m)

0.3

0

0.35

recall
precision

0.8

performance

0.6

0

recall
precision

0.8

performance

0.8

1

0.2

0

0.05

0.1

0.15

0.2

0.25

contact proximity (m)

(a) k = 1m.

0.3

0

0.35

0

0.05

0.1

0.15

0.2

0.25

contact proximity (m)

(b) k = 2m.

0.3

0.35

(c) k = 4m.

Fig. 5. Precision and Recall for different contact proximity K .
1

0.8

0.8

0.8

0.6

0.6

recall

0.6
0.4

0.4

office
shopping mall
bus station

0.2
0

recall

1

precision

1

1

2

3

contact proximity (m)

0.4

office
bus station
shopping mall

0.2

4

5

(a) Precision.

0

1

2

3

contact proximity (m)

office
bus station
shopping mall

0.2

4

0

5

1

(b) Recall.

2

3

contact proximity (m)

4

5

(c) F1-score.

Fig. 6. Performance in different sites.

4.4

In-out detection of infected areas

Contact detection for confirmed cases without the app is to
detect whether a user has been in or outside an infected area.
We construct processed profiles for the office, bus station,
and a store in a shopping mall using the collected WiFi
data. Then we compare the similarity between the processed
profile of the area and the data collected in and outside
the area. If the similarity is larger than the threshold α, the
data are identified as being collected in the area and having
contact with the virus. α is set as 0.2 in the experiment.
Precision and recall are used as the metrics for evaluation.
The results are shown in Figure 7. The detection in all the
sites achieves good performances. The precision and recall

1

precision
recall

0.8
Performance

easier to detect contacts within a greater proximity. The
precision for k = 1m is low in all sites. The result shows
the difficulties of identifying whether the contact happens
in 1m because the WiFi signals within a 1-m range are
usually similar. However, the precision has significant improvements for larger contact proximity. The precision is
high (50% – 70%) when the proximity is 2m. The precision indoors (office and shopping mall) is better than the
precision outdoors because WiFi signals are more stable
indoors. The improvement is more significant in the office
scenario compared with the shopping mall scenario. The
recall shown in 6(b) indicates the good performance of
vContact to detect those who have close contact. We present
the F1-score result in Figure 6(c), indicating the satisfactory
overall performance of vContact.

0.6
0.4
0.2
0

office

bus stationshopping mall
Different sites

Fig. 7. Precision and recall of in-out detection.

are high for the three sites, illustrating that vContact is very
efficient for in-out detection of infected areas.
4.5

Comparison with other approaches

As the baseline approaches rely on a selected threshold to
detect contact, for a given contact proximity, we use the
same strategy to select thresholds as discussed in Section
4.2. Precision, recall, and F1-score are used as metrics for
performance comparison.
The results of precision, recall and F1-score versus proximity on the three datasets are presented in Figures 8 (the
office), 9 (the bus station), and 10 (the shopping mall).
In Figure 8, the precision, recall, and F-1 score of different approaches increase as the contact proximity increases.
vContact always outperforms other baseline approaches on
the metrics of precision and F-1 score. vContact has higher

9
1

0.8

0.8

0.8

0.6

0.6

recall

0.6
0.4

0.4

vContact
AMD
Jaccard
AED
Bluetooth

0.2
0

recall

1

precision

1

1

2

3

contact proximity (m)

4

0.4

vContact
AMD
Bluetooth
AED
Jaccard

0.2
0

5

1

2

3

contact proximity (m)

(a) Precision.

4

vContact
AMD
Jaccard
AED
Bluetooth

0.2
0

5

1

2

(b) Recall.

3

contact proximity (m)

4

5

(c) F-1 score.

Fig. 8. Comparison with baseline approaches on the office dataset.
1

0.8

0.8

0.8

0.6

0.4

0.4

Bluetooth
vContact
Jaccard
AMD
AED

0.2
0

0.6

recall

0.6

precision

1

precision

1

1

2

3

contact proximity (m)

4

0.4

vContact
Bluetooth
AED
Jaccard
AMD

0.2
0

5

1

2

(a) Precision.

3

contact proximity (m)

4

vContact
Bluetooth
Jaccard
AMD
AED

0.2
0

5

1

2

(b) Recall.

3

contact proximity (m)

4

5

(c) F-1 score.

Fig. 9. Comparison with baseline approaches on the bus station dataset.
1

0.8

0.8

0.8

0.6

0.4

0.4

vContact
Bluetooth
AED
Jaccard
AMD

0.2
0

0.6

recall

0.6

precision

1

precision

1

1

2

3

contact proximity (m)

(a) Precision.

4

0.4

vContact
AMD
Bluetooth
Jaccard
AED

0.2

5

0

1

2

3

contact proximity (m)

4

vContact
Bluetooth
AMD
AED
Jaccard

0.2

5

(b) Recall.

0

1

2

3

contact proximity (m)

4

5

(c) F-1 score.

Fig. 10. Comparison with baseline approaches on the shopping mall dataset.

recall than others when contact proximity is less than 5m
and has similar performance to Bluetooth when the contact
proximity is 5m. The curves of precision, recall and F1-score
on the other datasets have a similar trend to that on the
office dataset. As shown in Figure 9(a), the precision of
Bluetooth is slightly higher than vContact on the bus station
dataset. But vContact has better performance than Bluetooth
and other approaches with respect to recall and F1-score. As
for the performance on the shopping mall dataset, vContact
has similar precision to Bluetooth when contact proximity is
1m and 2m, but has a significant improvement on precision
when contact proximity is 3m and 4m. In Figure 10(b),
vContact has similar recall to Bluetooth and AMD. vContact
always outperforms other approaches which use WiFi data
for detection. Overall, vContact has a higher F-1 score than

other approaches in all datasets, indicating that it is more
efficient for contact detection. We can also learn from the
figures that vContact and other approaches have better
performance in the indoor scenario, and the improvement
of vContact is more significant compared with the outdoor
site.
4.6

AP number

In this part, we evaluate the impact of AP number on the
performance when the contact proximity is set as k = 2m.
. We randomly filter σ% signals from the signal vectors for
each site, and compare the signal similarity of two devices
for contact detection. The filtering rate σ% is set to be 10%
– 90%. The precision and recall versus the average signal
number are presented in Figure 11.

10

0.8

0.8

0.8

0.6

performance

1

performance

1

performance

1

0.6

0.4

0.6

0.4

recall
F1−score
precision

0.2
0

5

10

recall
F1−score
precision

0.2
0

15

average AP number

0.4

5

10

15

(a) Office.

0

20

average AP number

recall
F1−score
precision

0.2

5

10

(b) Bus station.

15

20

25

30

35

average AP number

40

45

(c) Shopping mall.

Fig. 11. Impact of signal numbers (AP numbers) on the performance of contact detection.
0.8

1
office
bus station
shopping mall

0.7

0.8
office
bus station
shopping mall

0.9

0.7

precision

0.6

F1

recall

0.6

0.8

0.5

0.5
0.4

0.7

0.4

office
shopping mall
bus station

0.3

0.3
0.1

0.2

0.3

0.4

0.5

0.6

filtering rate

0.7

0.8

0.9

0.6
0.1

0.2

0.3

(a) Precision.

0.4

0.5

0.6

filtering rate

0.7

0.8

0.9

0.2
0.1

0.2

0.3

(b) Recall.

0.4

0.5

0.6

filtering rate

0.7

0.8

0.9

(c) F1-score.

Fig. 12. Impact of different filtering rates on the performance of contact detection.
0.6

1
1

0.4

0.8
0.6

0.2

0.4

0.4
office
shopping mall
bus station

0.1
0

0.6

F1

0.3

office
shopping mall
bus station

0.8

recall

precision

0.5

office
bus station
shopping mall

1

2

3

0.2

0.2
4

noise

5

6

7

(a) Precision.

8

0

1

2

3

4

noise

5

(b) Recall.

6

7

8

0

1

2

3

4

noise

5

6

7

8

(c) F1-score.

Fig. 13. Impact of different noise levels on the performance of contact detection.

In Figure 11, as the average signal number increases, the
precision increases slightly. The precision is still acceptable
when the average signal number is small. Even removing
90% of the signals, the precision does not drop significantly
for the office and shopping mall sites. The precision outdoors (the bus station) is more stable than others. The recall
shown in Figure 11 does not have obvious change as the
signal number changes, demonstrating the robustness of our
approach.
4.7

Environmental dynamicity

APs in a site may change at different times, for example,
some APs may shut down or the RSSIs may be different.
We study the impact of the difference of APs and RSSIs
on the performance of vContact. Following the previous

experiments, two phones are put at a distance of 2m for
data collection.
To study the impact of the difference of APs, we filter
out σ% signal IDs from the signal profile of a phone while
another remain the same. The filtering rate σ% is set to
be 10% – 90%. The precision, recall and F1 score versus
the filtering rates are presented in Figure 12. As shown
in Figure 12(a), when more signals are filtered (i.e., σ%
becomes larger), the precision, recall and F1 score all decline.
However, even with 50% of the signals filtered, vContact
still achieves good performance in the three sites, which
illustrates the robustness of vContact w.r.t the difference of
APs.
Furthermore, to evaluate the impact of the difference of
RSSIs, we add a Gaussian noise to the RSSIs in one phone’s

11
1

1

0.8

0.8

0.8

0.6

0.6

precision

1

0.4

0.4

Nova
OPPO
Xiaomi
Mate30
Honor

0.2
0

F1

recall

0.6

1

2

3

contact proximity (m)

4

0.4
Honor
Xiaomi
OPPO
Mate30
Nova

0.2

5

0

1

(a) Precision.

2

3

contact proximity (m)

Nova
OPPO
Xiaomi
Mate30
Honor

0.2

4

0

5

1

2

(b) Recall.

3

contact proximity (m)

4

5

(c) F1-score.

Fig. 14. Performance of different devices.

0.9

signal profile as follows,
(11)

where si is the raw RSSI and d is the Gaussian noise. γ%
is set to be 1 – 8. The precision, recall and F1 score versus
the filtering rates are presented in Figure 13. The precision
of vContact at the bus stop and shopping mall increases
slightly when the noise becomes larger. The reason is that
when the noise becomes large, the signal similarity becomes
smaller and false positive declines. However, the recall and
F1 score drop with the increase in the noise. Overall, the
performance of vContact remains good when the noise is
small (less than 3) but it drops significantly when the noise
is large.
4.8

Heterogeneous devices

Different devices have different abilities to scan WiFi signals. Two co-located devices may scan different signals and
RSSIs. We evaluate the performance of different devices. For
each device, we compare its data at `0 with other devices’
data at `i (i > 0) in the same site. We set the contact
proximity as 1m – 5m, and set the threshold following the
discussion in Section 4.2. Precision, recall and F1-score are
used as metrics.
The precision versus contact proximity for different devices in the office site is presented in Figure 14(a). Given the
contact proximity, the precision is different for distinct devices, which is consistent with our discussion. As the contact
proximity increases, the precision of all devices increases.
The precision of all devices significantly increases when
k ≥ 2m. The recall versus contact proximity for different
devices in the office is presented in Figure 14(b). Similar to
the result of precision, the performance of all devices has
a large improvement in recall when k = 2m. All devices
achieve high recall when k ≥ 2m, indicating the good
performance of our approach on recall. The F1-score result
is shown in 14(c), which demonstrates the good overall
performance of all tested devices. The results demonstrate
that our approach is effective and can be applied to phones
of different brands.
4.9

Data sampling rate

Since the APs and their RSSIs of a site do not change in a
short time, the impact of data sampling rates is not obvious

0.8

accuracy

si = si + d, d ∼ Gaussian(0, γ),

0.7
0.6
0.5
0.4
10

20

30

40

50

time interval (s)

60

70

80

Fig. 15. Impact of different time intervals.

when users are stationary. Consequently, we discuss its
impact for the scenario when users are moving.
Some users are walking in groups in the campus with
their mobile phone to collect WiFi data. The time interval
of data is set as 10s – 80s in the experiment. For the data
of the same group, we use recall as the metric to evaluate
the performance of contact detection. The result of recall is
presented in Figure 15. As the time interval becomes larger,
the recall of the detection declines. The reason is that users
may scan WiFi data at two locations where the similarity
of the WiFi is significantly different when users are moving
and the time interval is larger. As a result, contact is more
difficult to detect.

5

I OT I MPLEMENTATION AS A C ASE S TUDY

With the vContact SDK, we have installed it into Android
smart watches whose data are synced to one’s phone.
Through an app, the user is notified of his/her exposure
duration to the virus. We report the smart watch implementation details and user interface in Section 5.1. Besides smart
watches, we have also installed the SDK on Android phones.
We validate its design and performance in Section 5.2.
5.1

Smart watch implementation

Our SDK can be run independently on Android phones for
data collection and exposure detection. It can also run on
Android IoT devices to collect data and transit the data to
an Android/iOS phone for exposure detection. We show in
Figure 16 an IoT smart watch system we have built based
on vContact. The smart watches pair with phones through

12

Fig. 16. Data transition from smart watches to Android and IOS phones.

an Android or iOS app, as illustrated here with an Android
phone and iPhone. Scanned data of the smart watches are
synced with their phone apps for exposure computation and
notification.
The user interface of the phone app is shown in Figure 17. As shown in Figure 17(a), once a user turns on the
button of “Exposure data collection”, the app will start to
scan nearby WiFi and store the data locally every 1 minute.
Users may turn off data collection anytime and anywhere
for personal reasons. The signal IDs (i.e., the AP MAC
addresses) are encrypted when the data are stored. If a
user is confirmed as being infected, she/he could upload
her/his signal profile to the server (Figure 17(b)), so that
others could download the data for matching. If a user has
close contact with a confirmed case, she/he will receive a
notification, showing when the close contact happened and
how long the contact duration was (Figure 17(c)). In the app,
data are downloaded and matched automatically every day.
For the purpose of testing, we also have a testing mode as
shown in Figure 17(d), by which we can download the data,
and trigger the detection manually during the testing.
5.2

Testing and validation for phones

Besides smart watches, we have installed the SDK on five
Android phones, namely Honor, Huawei Nova, Huawei
Mate30, Xiaomi, and OPPO. We present here a case study
on these phones. We set the contact proximity as 2m for
testing. The app collects WiFi data every 1 minute. Hence,
the detection approach introduced in Section 3 will report
a detection result (i.e., true or false) for the data at each
minute. In our testing, if a user stays with the virus within
2m for more than 5 minutes in a 10-minutes sliding time
window, she/he will receive a possible exposure notification. The virus lifespan is set to be 30 minutes. Note that the
contact duration, the length of the sliding time window and
the virus lifespan are parameters for the app, which can be
changed according to the advice of the health officer.
We test the app in an office using the five phones. The
procedures are as follows. One of the phones is selected as
the confirmed case, and other phones are put at a location
which is 2m away from the confirmed case. The button
“Exposure data collection” is turned on for 15 minutes.

Then, the confirmed case uploads its signal profile, and
the other phones download the signal profile for matching.
After that, we put other phones at a location which is 4m
away from the confirmed case and repeat the testing. Each
phone is selected as the confirmed case in turn. The ideal
result is that a phone only receives a notification when it is
2m away from the confirmed case but there is no notification
for√4m. The testing results are presented in Tables 2 and 3.
A represents that a phone receives a notification, while ×
means it does not receive a notification.
Table 2 shows the results of exposure notification for 2m.
It illustrates the good performance of our app for exposure
notification. The performance of the Honor phone is not as
good as that of other phones, indicating the different ability
of phones to scan WiFi signals.
We show the results of exposure notification for 4m in
Table 3. Compared with the results in Table 2, more phones
are detected as having non-close contact, which is consistent
with our expectation. Performance is distinct for different
phones, but the overall performance is good.

6

C ONCLUSION AND FUTURE WORKS

We have proposed vContact, a novel WiFi-based private IoT
contact tracing scheme with virus lifespan which may be
spatial-temporally different due to the sanitization process.
By detecting close contact based on the similarity of WiFi
data, vContact captures both direct face-to-face and indirect
environmental contact. To the best of our knowledge, this
is the first work to consider the virus lifespan for private
contact tracing using WiFi. We propose and study data
processing approaches and a signal similarity metric for
close contact detection. Due to the ubiquity of WiFi signals,
vContact can be pervasively deployed for contact tracing.
We conduct extensive experiments on vContact by implementing it as an SDK. Our experimental results show that
vContact achieves high precision, recall and F1-score (up
to 90% when the contact proximity is 2m) for different
experimental sites, and its performance is robust against AP
numbers, and devices of different brands. Even with a small
number of signals (5), vContact still achieves good performance. This mean it is widely applicable to city or suburban
areas. It is also robust against environmental changes to
detect indirect contact, even if a substantial fraction (50%)
of the APs have been changed. We have installed vContact
SDK into IoT devices of smart phones and watches, and
validate the simplicity, implementability and efficiency of
our design.
We discuss below the possible future directions of the
work. One is to extend vContact so that it can be integrated
with other non-RF signals such as INS and geomagnetism to
strengthen its contact tracing capability, especially in areas
where WiFi or Bluetooth are not available. Another direction
is to identify those dynamic or ephemeral APs (e.g., hotspots
of smart phone) from their MAC address, so that they
could be filtered out in contact tracing. To this end, we
can build a dynamic, scalable and crowd-sourced reference
database for those permanent MACs to improve further the
robustness of vContact. Yet another direction is to strike
a balance between power conservation and WiFi scanning
frequency. To preserve battery without compromising on

13

(a) Exposure data collection.

(b) Share positive test result.

(c) Possible exposure notification.

(d) Testing mode.

Fig. 17. The user interface of an app to notify users of viral exposure duration.
TABLE 2
Result of exposure notification for a separation of 2m.
User
Confirmed Case
Honor
Mate30
OPPO
Huawei Nova
Xiaomi

Honor
–
×
√

Mate 30
√
–
√
√
√

×
×

OPPO
√
√
–
√
√

Huawei Nova
√
√
√
–
√

Vivo
√
√
√
√
–

TABLE 3
Result of exposure notification for a separation of 4m.
User
Confirmed Case
Honor
Mate30
OPPO
Huawei Nova
Xiaomi

Honor

Mate 30

OPPO

–
×
×
×
×

×
–
√

×
√

×
√

tracing accuracy, we may use a lower data sampling rate
when users are stationary and a higher one when moving.
To achieve this, we need to devise a dynamic data sampling
algorithm by estimating user activity using INS or other
signals.

[4]

R EFERENCES

[6]

[1]

[2]
[3]

W. Aylin and G. Shayanne, “One chart shows how long the
coronavirus lives on surfaces like cardboard, plastic, wood,
and steel,” ”https://www.businessinsider.com/coronavirus-lifespan-onsurfaces-graphic-2020-3”, 2020.
R. Gray, “Covid-19: How long does the coronavirus last on surfaces?” ”https://www.bbc.com/future/article/20200317-covid-19-howlong-does-the-coronavirus-last-on-surfaces”, 2020.
C. Troncoso, M. Payer, J.-P. Hubaux, M. Salathé, J. Larus,
E. Bugnion, W. Lueks, T. Stadler, A. Pyrgelis, D. Antonioli et al.,
“Decentralized privacy-preserving proximity tracing,” Github DP3T documents, vol. 12, 2020.

[5]

[7]

[8]

[9]

–
×
√

Huawei Nova
√

Vivo
√

×
√

×
√

–
√

×
–

A. Berke, M. Bakker, P. Vepakomma, R. Raskar, K. Larson, and
A. Pentland, “Assessing disease exposure risk with location histories and protecting privacy: A cryptographic approach in response
to a global pandemic,” arXiv preprint arXiv:2003.14412, 2020.
A. Wesolowski, C. O. Buckee, L. Bengtsson, E. Wetter, X. Lu,
and A. J. Tatem, “Commentary: containing the ebola outbreak-the
potential and challenge of mobile network data,” PLoS currents,
vol. 6, 2014.
J. Bell, D. Butler, C. Hicks, and J. Crowcroft, “Tracesecure:
Towards privacy preserving contact tracing,” arXiv preprint
arXiv:2004.04059, 2020.
J. Chan, S. Gollakota, E. Horvitz, J. Jaeger, S. Kakade, T. Kohno,
J. Langford, J. Larson, S. Singanamalla, J. Sunshine et al., “Pact:
Privacy sensitive protocols and mechanisms for mobile contact
tracing,” arXiv preprint arXiv:2004.03544, 2020.
N. Ahmed, R. A. Michelin, W. Xue, S. Ruj, R. Malaney, S. S.
Kanhere, A. Seneviratne, W. Hu, H. Janicke, and S. K. Jha, “A
survey of covid-19 contact tracing apps,” IEEE Access, vol. 8, pp.
134 577–134 601, 2020.
P. Sapiezynski, A. Stopczynski, D. K. Wind, J. Leskovec, and
S. Lehmann, “Inferring person-to-person proximity using wifi

14

[10]
[11]
[12]
[13]
[14]
[15]
[16]

[17]

[18]

[19]

[20]
[21]
[22]
[23]
[24]
[25]
[26]

[27]
[28]
[29]

[30]
[31]
[32]
[33]

signals,” Proceedings of the ACM on Interactive, Mobile, Wearable and
Ubiquitous Technologies, vol. 1, no. 2, pp. 1–20, 2017.
J. Li and X. Guo, “Covid-19 contact-tracing apps: A survey on the global deployment and challenges,” arXiv preprint
arXiv:2005.03599, 2020.
L. Reichert, S. Brack, and B. Scheuermann, “A survey of automatic
contact tracing approaches,” Cryptol. ePrint Arch., IACR, Bellevue,
WA, USA, Tech. Rep, vol. 672, p. 2020, 2020.
F. Qi and F. Du, “Tracking and visualization of space-time activities for a micro-scale flu transmission study,” International Journal
of Health Geographics, vol. 12, no. 1, pp. 1–16, 2013.
J. K. Fitzsimons, A. Mantri, R. Pisarczyk, T. Rainforth, and Z. Zhao,
“A note on blind contact tracing at scale with applications to the
covid-19 pandemic,” arXiv preprint arXiv:2004.05116, 2020.
L. C. Klopfenstein, S. Delpriori, G. M. Di Francesco, R. Maldini,
B. D. Paolini, and A. Bogliolo, “Digital ariadne: Citizen empowerment for epidemic control,” arXiv preprint arXiv:2004.07717, 2020.
L. Reichert, S. Brack, and B. Scheuermann, “Privacy-preserving
contact tracing of covid-19 patients,” Sourced from, 2020.
G. Li, C.-J. Chen, W.-C. Peng, and C.-W. Yi, “Estimating crowd
flow and crowd density from cellular data for mass rapid transit,”
in Proceedings of the 6th International Workshop on Urban Computing,
Halifax, NS, Canada, 2017, pp. 18–30.
G. Li, C.-J. Chen, S.-Y. Huang, A.-J. Chou, X. Gou, W.-C. Peng,
and C.-W. Yi, “Public transportation mode detection from cellular
data,” in Proceedings of the 2017 ACM on Conference on Information
and Knowledge Management, 2017, pp. 2499–2502.
L. Isella, M. Romano, A. Barrat, C. Cattuto, V. Colizza, W. Van den
Broeck, F. Gesualdo, E. Pandolfi, L. Ravà, C. Rizzo et al., “Close
encounters in a pediatric ward: measuring face-to-face proximity
and mixing patterns with wearable sensors,” PloS one, vol. 6, no. 2,
p. e17144, 2011.
M. Salathé, M. Kazandjieva, J. W. Lee, P. Levis, M. W. Feldman,
and J. H. Jones, “A high-resolution human contact network for infectious disease transmission,” Proceedings of the National Academy
of Sciences, vol. 107, no. 51, pp. 22 020–22 025, 2010.
Turkey,
“Corowarner,”
https://www.aa.com.tr/en/latest-oncoronavirus-outbreak/turkey-to-use-contact-tracing-app-to-detectcoronavirus/1804425, 2020.
India, “Aarogya setu mobile app,” https://www.mygov.in/aarogyasetu-app/, 2020.
Argentia, “Cotrack,” https://www.cotecna.com/en/services/government/
cargo-tracking-solution-cotrack, 2020.
H. Cho, D. Ippolito, and Y. W. Yu, “Contact tracing mobile apps
for covid-19: Privacy considerations and related trade-offs,” arXiv
preprint arXiv:2003.11511, 2020.
S. Jeong, S. Kuk, and H. Kim, “A smartphone magnetometer-based
diagnostic test for automatic contact tracing in infectious disease
epidemics,” IEEE Access, vol. 7, pp. 20 734–20 747, 2019.
A. Hekmati, G. Ramachandran, and B. Krishnamachari, “Contain:
privacy-oriented contact tracing protocols for epidemics,” arXiv
preprint arXiv:2004.05251, 2020.
F. Sattler, J. Ma, P. Wagner, D. Neumann, M. Wenzel, R. Schäfer,
W. Samek, K.-R. Müller, and T. Wiegand, “Risk estimation of sarscov-2 transmission from bluetooth low energy measurements,”
arXiv preprint arXiv:2004.11841, 2020.
Y. Xia and G. Lee, “How to return to normalcy: Fast and comprehensive contact tracing of covid-19 through proximity sensing
using mobile devices,” arXiv preprint arXiv:2004.12576, 2020.
C. Günther, M. Günther, and D. Günther, “Tracing contacts to
control the covid-19 pandemic,” arXiv preprint arXiv:2004.00517,
2020.
J. Bay, J. Kek, A. Tan, C. S. Hau, L. Yongquan, J. Tan, and T. A. Quy,
“Bluetrace: A privacy-preserving protocol for community-driven
contact tracing across borders,” Government Technology AgencySingapore, Tech. Rep, 2020.
C. Castelluccia, N. Bielova, A. Boutet, M. Cunche, C. Lauradoux,
D. Le Métayer, and V. Roca, “Robert: Robust and privacypreserving proximity tracing,” White Paper, 2020.
Singapore, “Tracetogether,” https://www.tracetogether.gov.sg, 2020.
Australian, “Covidsafe,” https://www.health.gov.au/resources/appsand-tools/covidsafe-app, 2020.
C. Castelluccia, N. Bielova, A. Boutet, M. Cunche, C. Lauradoux,
D. Le Métayer, and V. Roca, “Desire: A third way for a european
exposure notification system leveraging the best of centralized and
decentralized systems,” White Paper, 2020.

[34] R. L. Rivest, J. Callas, R. Canetti, K. Esvelt, D. K. Gillmor, Y. T.
Kalai, A. Lysyanskaya, A. Norige, R. Raskar, A. Shamir, E. Shen,
I. Soibelman, M. Specter, V. Teague, A. Trachtenberg, M. Varia,
M. Viera, D. Weitzner, J. Wilkinson, and M. Zissman, “Pact: Private
automated contact tracing,” https://pact.mit.edu/, 2020.
[35] G. Avitabile, V. Botta, V. Iovino, and I. Visconti, “Towards defeating mass surveillance and sars-cov-2: The pronto-c2 fully decentralized automatic contact tracing system,” Cryptology ePrint
Archive, Report 2020/493, 2020. https://eprint. iacr. org . . . , Tech.
Rep., 2020.
[36] Google and Apple, “Privacy-preserving contact tracing,”
https://www.apple.com/covid19/contacttracing, 2020.
[37] A. Sydney, Von, B.-M. Isaiah, B. Daniel, C. Jesse, F. Rhys, H. Mike,
O. N. Mark, Ingle, V. Nguyen, J. Petrie, J. Schwaber, Z. Szabo,
A. Veeraghanta, M. Voloshin, T. White, and H. Xue, “Slowing the spread of infectious diseases using crowdsourced data,”
https://www.covid-watch.org/, 2020.
[38] Switzerland, “Swisscovid,” https://en.wikipedia.org/wiki/SwissCovid,
2020.
[39] M. Dmitrienko, A. Singh, P. Erichsen, and R. Raskar, “Proximity
inference with wifi-colocation during the covid-19 pandemic,”
arXiv preprint arXiv:2009.12699, 2020.

