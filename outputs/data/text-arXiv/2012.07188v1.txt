H OSPITAL C APACITY P LANNING U SING D ISCRETE E VENT
S IMULATION U NDER S PECIAL C ONSIDERATION OF THE
COVID-19 PANDEMIC

arXiv:2012.07188v1 [stat.AP] 14 Dec 2020

A P REPRINT
Thomas Bartz-Beielstein
IDEA, TH Köln
Steinmüllerallee 1, 51643 Gummersbach, Germany
thomas.bartz-beielstein@th-koeln.de
Olaf Mersmann
IDEA, TH Köln
Steinmüllerallee 1, 51643 Gummersbach, Germany
olaf.mersmann@th-koeln.de

Frederik Rehbach
IDEA, TH Köln
Steinmüllerallee 1, 51643 Gummersbach, Germany
frederik.rehbach@th-koeln.de
Eva Bartz
Bartz und Bartz GmbH
Goebenstr. 10, 51643 Gummersbach, Germany
eva.bartz@bartzundbartz.de

December 15, 2020

A BSTRACT
We present a resource-planning tool for hospitals under special consideration of the COVID-19
pandemic, called babsim.hospital. It provides many advantages for crisis teams, e.g., comparison
with their own local planning, simulation of local events, simulation of several scenarios (worst / best
case). There are benefits for medical professionals, e.g, analysis of the pandemic at local, regional,
state and federal level, the consideration of special risk groups, tools for validating the length of stays
and transition probabilities. Finally, there are potential advantages for administration, management,
e.g., assessment of the situation of individual hospitals taking local events into account, consideration
of relevant resources such as beds, ventilators, rooms, protective clothing, and personnel planning,
e.g., medical and nursing staff. babsim.hospital combines simulation, optimization, statistics, and
artificial intelligence processes in a very efficient way. The core is a discrete, event-based simulation
model.
Keywords Statistics · Applications, Computer Science · Computers and Society

1

Introduction

Resource and capacity planning with respect to the COVID-19 pandemic is a challenging task for hospitals. This
paper describes BaBSimHospital, a resource planning tool that was developed in cooperation with ICU experts, crisis
teams, and health administrations. babsim.hospital combines simulation, optimization, statistics, and artificial
intelligence processes in a very efficient way. The core is a discrete, event-based simulation model. Sequential parameter
optimization (SPOT) is used to optimize the parameters (status transition probabilities, length of stay, distribution
properties) Bartz-Beielstein, Lasarczyk, and Preuss (2005). For modeling purposes, distributions (including a truncated
and translated Gamma distribution) were specially developed by us in order to realistically simulate the length of stay.
babsim.hospital takes into account different risks for individual groups of people (age and gender-specific) and can be
used for any resources beyond the planning of bed capacities.
Using BaBSimHospital provides the following advantages for crisis teams:
• comparison with your own local planning,
• simulation of local events,

A PREPRINT - D ECEMBER 15, 2020

• adaptation to your own situation,
• simulation of any scenario (worst / best case),
• simulation of any pandemic scenario, considering the local situation,
• standardized approach.
And, there are benefits for medical professionals, e.g,
• analysis of the pandemic at local, regional, state and federal level,
• consideration of special risk groups,
• validation of the length of stay,
• validation of the probabilities.
Finally, there are potential advantages for administration, management, e.g.,
• assessment of the situation of individual hospitals taking local events into account,
• consideration of relevant resources: beds, ventilators, rooms, protective clothing,
• personnel planning: medical and nursing staff.
The ideas used in the babsim.hospital implementation are based on the paper by Lawton and McCooe (2019).
babsim.hospital is implemented in the statistical programming language R, see R Core Team (2020). It uses a
discrete-event simulation, which uses the simmer package (Ucar, Smeets, and Azcorra 2019).
This paper describes practical aspects (“how to use”) of the babsim.hospital package. Although this paper focuses
on the situation in Germany, it can be used for different settings. For example, we have used data from UK to model a
local configuration. Even, if there are no real-world data available, the user can perform simulations based on synthetic
data. How to use synthetic data and the theoretical background of babsim.hospital is described in Bartz-Beielstein
et al. (2020).
This paper is structured as follows. Section2.2 describes the data, which are necessary for the simulation. How to
run a simulation is described in Section 3. The visualization of simulation results is illustrated in Section 4. Section
4 also presents the error measure, which is used for the optimizations. The optimization procedure is introduced in
Section 5. How to visualize the optimized parameter settings is discussed in Section 6. Section 7 describes how data for
future simulations can be generated. babsim.hospital provides tools for a deeper understanding of the simulation
parameters. The corresponding tools from statistics and sensitivity analysis are described in Section 8.

2
2.1

Packages and Data
Packages

A clean start and loading the required packages can be performed as follows:
rm(list=ls())
suppressPackageStartupMessages({
library("SPOT")
library("babsim.hospital")
library("simmer")
library("simmer.plot")
library("plotly")
library("rpart")
library("rpart.plot")
})
We need at least version 2.1.8 of SPOT.
packageVersion("SPOT")
%> [1] '2.1.10'
2

A PREPRINT - D ECEMBER 15, 2020

2.2

Simulation and Field Data

The babsim.hospital simulator models resources usage in hospitals, e.g., number of ICU beds (y), as a function of
the number of infected individuals (x). In addition to the number of infections, information about age and gender will
be used as simulation input.
In general, the simulator requires two types of data: simulation data that describes the spread of the pandemic over time
and field data that contains daily resource usage data. Included in the package are tools to generate synthetic data, e.g.,
you can generate simulation and field data to run the simulations. This procedure is described in Bartz-Beielstein et al.
(2020).
To demonstrate the usage of real-world data, we have included two sample datasets from Germany.
• Simulation data, i.e., input data for the simulation. We have included a data sample from the German [Robert
Koch-Institute](https://www.rki.de) (RKI). Please take the copyright notice, which is shown in Section 10
(Appendix) under advisement, if you plan to use the RKI data included in the package.
• Field data. We have included a data sample from the German [DIVI Register](https://www.intensivregister.de/).
The field data is used to validate the output of the simulation. Please take the copyright notice, which is shown
in Section 10 (Appendix) under advisement, if you plan to use the RKI data included in the package.
2.2.1

Simulation Data

First, we will take a closer look at the simulation data. Here, we will use the data from the RKI Server.
babsim.hospital provides a function to update the (daily) RKI data.

updateRkidataFile("https://www.arcgis.com/sharing/rest/content/items/f10774f1c63e40168479a1feb6c7ca74/da
Users are expected to adapt this function to their local situation. The downloaded data will be available in the package as
rkidata. Due to data size limits on CRAN, the full dataset is not included in the babsim.hospitalpackage. Instead,
we provide a subset of the Robert Koch-Institut dataset with 10,000 observations in the package.

str(babsim.hospital::rkidata)
%> 'data.frame':
500734 obs. of 18 variables:
%> $ FID
: int 32 86 87 88 89 90 91 92 93 94 ...
%> $ IdBundesland
: int 1 1 1 1 1 1 1 1 1 1 ...
%> $ Bundesland
: chr "Schleswig-Holstein" "Schleswig-Holstein" "Schleswig-Holstein" "Schlesw
%> $ Landkreis
: chr "SK Kiel" "SK Kiel" "SK Kiel" "SK Kiel" ...
%> $ Altersgruppe
: chr "A15-A34" "A35-A59" "A35-A59" "A35-A59" ...
%> $ Geschlecht
: chr "M" "M" "M" "M" ...
%> $ AnzahlFall
: int 1 1 1 1 1 1 1 1 1 1 ...
%> $ AnzahlTodesfall
: int 0 0 0 0 0 0 0 0 0 0 ...
%> $ Refdatum
: chr "2020/09/01 00:00:00" "2020/09/02 00:00:00" "2020/09/03 00:00:00" "2020
%> $ IdLandkreis
: int 1002 1002 1002 1002 1002 1002 1002 1002 1002 1002 ...
%> $ Datenstand
: chr "12.12.2020, 00:00 Uhr" "12.12.2020, 00:00 Uhr" "12.12.2020, 00:00 Uhr"
%> $ NeuerFall
: int 0 0 0 0 0 0 0 0 0 0 ...
%> $ NeuerTodesfall
: int -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 ...
%> $ Meldedatum
: chr "2020/08/27 00:00:00" "2020/08/30 00:00:00" "2020/09/03 00:00:00" "2020
%> $ NeuGenesen
: int 0 0 0 0 0 0 0 0 0 0 ...
%> $ AnzahlGenesen
: int 1 1 1 1 1 1 1 1 1 1 ...
%> $ IstErkrankungsbeginn: int 1 1 0 1 0 1 1 1 1 0 ...
%> $ Altersgruppe2
: chr "Nicht übermittelt" "Nicht übermittelt" "Nicht übermittelt" "Nicht über
The rkidata can be visualized as follows (here region = 0 is Germany, region = 5 is North Rhine-Westphalia,
region = 5374 Oberbergischer Kreis, etc.):
p <- ggVisualizeRki(data=babsim.hospital::rkidata, region = 5374)
print(p)
3

A PREPRINT - D ECEMBER 15, 2020

Robert−Koch Institut (RKI)

Infektionen

90

Legende

60

7−Tage Durchschnitt
Tagesmeldung

30

0
Sep

Okt

Nov

Dez

Datum

After downloading the rkidataset, these data will be preprocessed. Not all the information from the original rkidata
data set is required by the babsim.hospital simulator. The function getRkiData() extracts the subset of the raw
rkidata required by our simulation, optimization, and analysis:
rki <- getRkiData(rki = rkidata)
%> getRkiData(): Found days with negative number of cases. Ignoring them.
str(rki)
%> 'data.frame':
1055516 obs. of 7 variables:
%> $ Altersgruppe: chr "A15-A34" "A35-A59" "A15-A34" "A35-A59" ...
%> $ Geschlecht : chr "M" "W" "M" "W" ...
%> $ Day
: Date, format: "2020-09-01" "2020-09-01" ...
%> $ IdBundesland: int 1 1 1 1 1 1 1 1 1 1 ...
%> $ IdLandkreis : int 1002 1002 1004 1004 1053 1053 1053 1053 1054 1056 ...
%> $ time
: num 0 0 0 0 0 0 0 0 0 0 ...
%> $ Age
: num 25 47 25 47 2 25 25 70 25 10 ...
As illustrated by the output from above, we use the following simulation data:
1. ‘Altersgruppe‘: age group (intervals, categories), represented as character string
2. ‘Geschlecht‘: gender
3. ‘Day‘: day of the infection
4. ‘IdBundesland‘: federal state
5. ‘IdLandkreis‘: county
6. ‘time‘: number of days (‘0‘ = start data). It will be used as ‘arrivalTimes‘ for the ‘simmer‘ simulations.
7. ‘Age‘: integer representation of ‘Altersgruppe‘
2.2.2

Field Data

Next, we will describe the field data, i.e., the real ICU beds (or other resources). Similar to the rkidata, which is
available online and can be downloaded from the RKI Server, the field data is also available online. It can be downloaded
from the DIVI Server as follows, where YYYY-MM-DD should be replaced by the current date, e.g, 2020-10-26.

4

A PREPRINT - D ECEMBER 15, 2020

updateIcudataFile("https://www.divi.de/joomlatools-files/docman-files/divi-intensivregister-tagesreports
Note, the data structures on the DIVI server may change, so it might be necessary to modify the following procedure.
Please check the hints on the DIVI web page. Contrary to the updateRkidataFile() function, which downloads
the complete historical dataset, the updateIcudataFile() function only downloads data for a single date. The
downloaded data will be available in babsim.hospital as icudata. As described in the Appendix (Section 10, the
DIVI dataset is not open data. Therefore, only an example data set, that reflects the structure of the original data from
the DIVI register, is included in the babsim.hospital package as icudata:
str(babsim.hospital::icudata)
%> 'data.frame':
40470 obs. of 9 variables:
%> $ bundesland
: int 1 1 1 1 1 1 1 1 1 1 ...
%> $ gemeindeschluessel
: int 1001 1002 1003 1004 1051 1053 1054 1055 1056 1057 ...
%> $ anzahl_meldebereiche
: int 3 5 2 1 1 2 3 3 2 1 ...
%> $ faelle_covid_aktuell
: int 0 1 0 0 0 0 0 0 1 0 ...
%> $ faelle_covid_aktuell_beatmet: int 0 0 0 0 0 0 0 0 0 0 ...
%> $ anzahl_standorte
: int 2 3 2 1 1 2 3 3 2 1 ...
%> $ betten_frei
: int 24 116 103 9 13 11 15 17 9 7 ...
%> $ betten_belegt
: int 31 113 114 16 41 13 24 35 28 5 ...
%> $ daten_stand
: Date, format: "2020-09-01" "2020-09-01" ...
The ìcudata can be visualized as follows (region = 0 is Germany, region = 5 is North Rhine-Westphalia, region
= 5374 is the Oberbergischer Kreis, etc.). Based on the icudata, two plots can be generated. The first plot shows the
ICU beds without invasive ventilation. ICU beds without ventilation can be calculated as faelle_covid_aktuell faelle_covid_aktuell_beatmet.
p <- ggVisualizeIcu(region = 5374)
print(p[[1]])

DIVI−Intensivregister

Nicht beatmet

7.5

Legende

5.0

7−Tage Durchschnitt
Tagesmeldung

2.5

0.0
Sep

Okt

Nov

Datum

The second plot shows ICU beds with ventilation:

5

Dez

A PREPRINT - D ECEMBER 15, 2020

print(p[[2]])

Invasiv beatmet

7.5

Legende

5.0

7−Tage Durchschnitt
Tagesmeldung

2.5

0.0
Sep

Okt

Nov

Dez

Datum

The icudata, i.e., the field data or real data, will be preprocessed as follows. The function getIcuBeds() converts
the 9 dimensional DIVI ICU dataset icudata (bundesland,gemeindeschluessel,. . . , daten_stand) into a data.frame with
two columns:
1. ‘intensiveBedVentilation‘
2. ‘Day‘
These are the two bed categories introduced above.
fieldData <- getIcuBeds(babsim.hospital::icudata)
str(fieldData)
%> 'data.frame':
102 obs. of 3 variables:
%> $ intensiveBed
: int 103 103 96 97 97 92 94 100 94 104 ...
%> $ intensiveBedVentilation: int 132 125 127 128 126 126 134 130 133 129 ...
%> $ Day
: Date, format: "2020-09-01" "2020-09-02" ...
Now that we have introduced the required data, we can perform the first simulations.

3

Performing Simulations

To run a simulation, the setting must be configured (seed, number of repeats, sequential or parallel evaluation, variable
names, dates, etc.). babsim.hospital uses a list to store information related to the configuration. We will describe
the components of this list first. The configuration list contains information about the simulation and field data.
region = 5374
seed = 123
simrepeats = 2
parallel = FALSE
percCores = 0.8
resourceNames = c("intensiveBed", "intensiveBedVentilation")
resourceEval = c("intensiveBed", "intensiveBedVentilation")
6

A PREPRINT - D ECEMBER 15, 2020

We can specify the field data based on icudata (DIVI) for the simulation as follows:
FieldStartDate = "2020-09-01"
icudata <- getRegionIcu(data = icudata, region = region)
fieldData <- getIcuBeds(icudata)
fieldData <- fieldData[which(fieldData$Day >= as.Date(FieldStartDate)), ]
rownames(fieldData) <- NULL
icu = TRUE
icuWeights = c(1,1)
Next, simulation data (RKI data) can be selected. The simulation data in our example, depend on the field data:
SimStartDate = "2020-08-01"
rkidata <- getRegionRki(data = rkidata, region = region)
simData <- getRkiData(rkidata)
simData <- simData[which(simData$Day >= as.Date(SimStartDate)), ]
simData <- simData[as.Date(simData$Day) <= max(as.Date(fieldData$Day)),]
simData$time <- simData$time - min(simData$time)
rownames(simData) <- NULL
Finally, we combine all field and simulation data into a single list() called data:
data <- list(simData = simData, fieldData = fieldData)
Configuration information is stored in the conf list, i.e., conf refers to the simulation configuration, e.g., sequential or
parallel evaluation, number of cores, resource names, log level, etc.
conf <- babsimToolsConf()
conf <- getConfFromData(conf = conf,
simData = data$simData,
fieldData = data$fieldData)
conf$parallel = parallel
conf$simRepeats = simrepeats
conf$ICU = icu
conf$ResourceNames = resourceNames
conf$ResourceEval = resourceEval
conf$percCores = percCores
conf$logLevel = 1
conf$w2 = icuWeights
set.seed(conf$seed)
In addition to the configuration list, a second list, which stores information about the simulation model parameters, is
used. The core of the babsim.hospital simulations is based on the simmer package. It uses simulation parameters,
e.g., arrival times, durations, and transition probabilities. There are currently 29 parameters (shown below) that are
stored in the list para.
para <- babsimHospitalPara()
str(para)
%> List of 29
%> $ AmntDaysInfectedToHospital
%> $ AmntDaysNormalToHealthy
%> $ AmntDaysNormalToIntensive
%> $ AmntDaysNormalToVentilation
%> $ AmntDaysNormalToDeath
%> $ AmntDaysIntensiveToAftercare
%> $ AmntDaysIntensiveToVentilation
%> $ AmntDaysIntensiveToDeath
%> $ AmntDaysVentilationToIntensiveAfter
%> $ AmntDaysVentilationToDeath
%> $ AmntDaysIntensiveAfterToAftercare

:
:
:
:
:
:
:
:
:
:
:
7

num
num
num
num
num
num
num
num
num
num
num

9.5
10
5
3.63
5
7
4
5
30
20
3

A PREPRINT - D ECEMBER 15, 2020

%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>

$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$

AmntDaysIntensiveAfterToDeath
:
GammaShapeParameter
:
FactorPatientsInfectedToHospital
:
FactorPatientsHospitalToIntensive
:
FactorPatientsHospitalToVentilation
:
FactorPatientsNormalToIntensive
:
FactorPatientsNormalToVentilation
:
FactorPatientsNormalToDeath
:
FactorPatientsIntensiveToVentilation
:
FactorPatientsIntensiveToDeath
:
FactorPatientsVentilationToIntensiveAfter:
FactorPatientsIntensiveAfterToDeath
:
AmntDaysAftercareToHealthy
:
RiskFactorA
:
RiskFactorB
:
RiskMale
:
AmntDaysIntensiveAfterToHealthy
:
FactorPatientsIntensiveAfterToHealthy
:

3.1

Simulation Runs

num
num
num
num
num
num
num
num
num
num
num
num
num
num
num
num
num
num

4
1
0.1
0.09
0.01
0.1
0.001
0.1
0.3
0.1
0.7
1e-05
3
0.0205
0.01
1.5
3
0.67

The babsim.hospital simulator requires the specification of
1. ‘arrivalTimes‘
2. configuration list ‘conf‘
3. parameter list ‘para‘
for the simulation. Arrival times were not discussed yet. babsim.hospital provides the function getRkiRisk() that
generates arrivals with associated risks. The Risk is based on age (Altersgruppe) and gender (Geschlect):
rkiWithRisk <- getRkiRisk(data$simData, para)
head(rkiWithRisk)
%>
Altersgruppe Geschlecht
Day IdBundesland IdLandkreis time Age
%> 1
A15-A34
M 2020-09-01
5
5374
0 25
%> 2
A15-A34
M 2020-09-01
5
5374
0 25
%> 3
A15-A34
M 2020-09-01
5
5374
0 25
%> 4
A35-A59
M 2020-09-01
5
5374
0 47
%> 5
A35-A59
W 2020-09-01
5
5374
0 47
%> 6
A35-A59
W 2020-09-01
5
5374
0 47
%>
Risk
%> 1 0.03946352
%> 2 0.03946352
%> 3 0.03946352
%> 4 0.04917457
%> 5 0.03278305
%> 6 0.03278305
To perform simulations, only two parameters are required:
1. ‘time‘: arrival time
2. ‘Risk‘: risk (based on age and gender)
A data.frame with these two parameters is passed to the main simulation function babsimHospital. Output from the
simulation is stored in the variable envs. The simulation run is started as follows:
8

A PREPRINT - D ECEMBER 15, 2020

4
4.1

Visualize and Evaluate Simulation Output
Simmer Plots

First, we illustrate how to generate plots using the simmer.plot package (Ucar, Smeets, and Azcorra 2019). In the
following graph, the individual lines are all separate replications. The smoothing performed is a cumulative average.
Besides intensiveBed and intensiveBedVentilation, babsim.hospital also provides information about the
number of non-ICU beds. The non-ICU beds are labeled as bed. Summarizing, babsim.hospital generates output
for three bed categories:
1. ‘bed‘
2. ‘intensiveBed‘
3. ‘intensiveBedVentilation‘
To plot resource usage for three resources side-by-side, we can proceed as follows:

resources <- get_mon_resources(envs)
resources$capacity <- resources$capacity/1e5
plot(resources, metric = "usage", c("bed", "intensiveBed", "intensiveBedVentilation"), items = "server")

Resource usage
bed

intensiveBed

intensiveBedVentilation

20

in use

15

item
server

10

5

0
0

50

100

150

200 0

50

100

150

200 0

50

100

150

200

time
Note, each resource can be plotted separately. For example, the following command generates a plot of non icu beds.
plot(resources, metric = "usage", "bed", items = "server", steps = TRUE)
9

A PREPRINT - D ECEMBER 15, 2020

Resource usage
bed

40

in use

item
server
20

0
0

50

100

150

200

time
4.2

Evaluation of Simulation Results

babsim.hospital provides functions for evaluating the quality of the simulation results. Simulation results depend
on the transition probabilities and durations, i.e., a vector of more than 30 variables. These vectors represent parameter
settings. babsim.hospital provides a default parameter set, that is based on knowledge from domain experts (doctors,
members of COVID-19 crises teams, mathematicians, and many more). We can calculate the error (RMSE) of the
default parameter setting, which was used in this simulation, as follows:
fieldEvents <- getRealBeds(data = data$fieldData,
resource = conf$ResourceNames)
res <- getDailyMaxResults(envs = envs, fieldEvents = fieldEvents, conf=conf)
resDefault <- getError(res, conf=conf)
print(resDefault)
%> [1] 9.412271
The error is 9.4122709.
4.3

Generating babsim.hospital Plots

In addition to the original simmer plot, babsim.hospital provides functions for visualization. Here, we illustrate
how babsim.hospital plots can be generated. Before we deescribe these plots, readers should be aware of the fact,
that we do not use the full data, simulation results are completely wrong and do not represent any real-world situation!
The following figures are included to demonstrate the working principles of the visualization procedures.
p <- plotDailyMaxResults(res)
plot(p)
10

A PREPRINT - D ECEMBER 15, 2020

Bettenauslastung: Gemeldet DIVI und Simulation

5

Legende
0

babsim

15

GA

10

Beatmet

Belegte Intensiv Betten

Nicht beatmet

10

5

0
Sep

Okt

Nov

Dez

Datum
Note, ggplot and plotlycan be used as follows to generate interactive plots.
ggplotly(p)

5

Optimization

As discussed above, babsim.hospital provides a default parameter set, which can be used for simulations. The
function babsimHospitalPara() provides a convenient way to access the default parameter set:
para <- babsimHospitalPara()
babsim.hospital provides an interface to optimize the parameter values of the simulation model. The following
code is just a quick demo. To run the following code, the complete rkidata and icudata data sets must be available.
Please download the data from RKI and DIVI or provide your own simulation and field data! Note: results are stored in
the directory results.
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>
%>

[1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]
60%

"2020/09/01 00:00:00" "2020/12/11 00:00:00"
"2020-09-01" "2020-12-11"
"trainDataSim: 2020-10-05" "trainDataSim: 2020-12-11"
"trainDataField: 2020-11-02" "trainDataField: 2020-12-11"
"Starting optimization loop:"
"#########################################"
"Repeat: 1 ###############################"
"trainConfSim: 2020-10-05" "trainConfSim: 2020-12-11"
"trainConfField: 2020-11-02" "trainConfField: 2020-12-11"
"Warning cutting some x0 parameters as there are too many"
"Starting Surrogate Optimization"
"*******************************"
completed.
11

A PREPRINT - D ECEMBER 15, 2020

%> [1] 79
%> [1] "results/test_2020_Dez.14_00.54_V11.5.16R1.RData"
%> [1] "results/test_2020_Dez.14_00.54_V11.5.16R.RData"

The code from above was shown for didactical purposes. It starts a short optimization run to illustrate the underlying optimization procedure. Results from real the runoptDirect() runs are stored in the paras.rda file. babsim.hospital
provides results from several regions (towns and counties in Germany), e.g.:

• ‘getParaSet(5374)‘: Oberbergischer Kreis

• ‘getParaSet(5315)‘: City of Cologne

• ‘getParaSet(5)‘: North-Rhine Westphalia

• ‘getParaSet(0)‘: Germany

5.1

Use Optimized Parameters

Results, i.e., parameter settings, of the short runoptDirect() optimization from above can be used as follows:
xy <- resDemo$best.df
para <- getBestParameter(xy)
res <- modelResultHospital(para=para,
conf=conf,
data = data)
resOpt <- getError(res, conf=conf)
print(resOpt)
%> [1] 6.566368

These results show that even a very short optimization improves the error: The improved is 6.5663677, which is smaller
than 9.4122709. This improvement can also be visualized.

p <- plotDailyMaxResults(res)
print(p)
12

A PREPRINT - D ECEMBER 15, 2020

Bettenauslastung: Gemeldet DIVI und Simulation

5

Legende
0
12.5

babsim
GA

10.0
7.5

Beatmet

Belegte Intensiv Betten

Nicht beatmet

10

5.0
2.5
0.0
Sep

Okt

Nov

Dez

Datum

6

Visualize Parameter Settings

Besides using the optimized parameters for simulations, which allows improved simulations, the optimized parameters
can be used for analysing the parameter settings. babsim.hospital includes several tools to analyze parameter
settings. You might recall that parameter settings consist of
• transition probabilities, e.g., the probability that an infected individual has to go to the hospital.
• durations, e.g., the time span until an infected individual goes to the hospital (in days).
The following plot illustrates the transition probabilities. It uses the following states:
1. ‘infec‘: infected
2. ‘out‘: transfer out, no hospital required
3. ‘hosp‘: hospital
4. ‘normal‘: normal station, no ICU
5. ‘intens‘: ICU (without ventilation)
6. ‘vent‘: ICU ventilated
7. ‘intafter‘: intensive aftercare (from ICU with ventilation, on ICU)
8. ‘aftercare‘: aftercare (from ICU, on normal station)
9. ‘death‘: patient dies
10. ‘healthy‘: recovered
The transition matrix, that stores the probabilities, is shown below:

13

A PREPRINT - D ECEMBER 15, 2020

para <- babsimHospitalPara()
getMatrixP(para = para)
%>
[,1] [,2] [,3] [,4]
%> [1,]
0 0.9 0.1 0.0
%> [2,]
0 1.0 0.0 0.0
%> [3,]
0 0.0 0.0 0.9
%> [4,]
0 0.0 0.0 0.0
%> [5,]
0 0.0 0.0 0.0
%> [6,]
0 0.0 0.0 0.0
%> [7,]
0 0.0 0.0 0.0
%> [8,]
0 0.0 0.0 0.0
%> [9,]
0 0.0 0.0 0.0
%> [10,]
0 0.0 0.0 0.0

[,5]
0.00
0.00
0.09
0.10
0.00
0.00
0.00
0.00
0.00
0.00

[,6] [,7]
[,8] [,9] [,10]
0.000 0.0 0.00000 0e+00 0.000
0.000 0.0 0.00000 0e+00 0.000
0.010 0.0 0.00000 0e+00 0.000
0.001 0.0 0.00000 1e-01 0.799
0.300 0.0 0.60000 1e-01 0.000
0.000 0.7 0.00000 3e-01 0.000
0.000 0.0 0.32999 1e-05 0.670
0.000 0.0 0.00000 0e+00 1.000
0.000 0.0 0.00000 1e+00 0.000
0.000 0.0 0.00000 0e+00 1.000

This matrix can be visualized as follows:
visualizeGraph(para=para, option = "P")

Wahrscheinlichkeiten (Prozent)
infec
10

90

hosp
90

normal
10

death

10

79.9
10 30

9
0.1

out
1

intens 30 vent
60

70

healthy100aftercare33 intafter
67
0

Similar to the probabilities, durations can be visualized:
The corresponding matrix is shown below:

7

Extend RKI Data

babsim.hospitalcan be used to simulate several scenarios, i.e., possible developments of the pandemic. To simulate
these scenarios, arrival events must be generated. The function extendRki() adds new arrival events. To generate new
arrivals, three parameters must be specified:
1. ‘data‘: an already existing data set, i.e., the history
2. ‘EndDate‘: last day of the simulated data (in the future)
3. ‘R0‘: base reproduction values (R0) at the first day of the scenario and at the last day of the scenario. A linear
interpolation between these two values will be used, e.g., if ‘R0 = c(1,2)‘ and ten eleven days are specified, the
following R0 values will be used: (1.0, 1.1, 1.2, 1.3, ..., 1.9,2.0).
data <- getRkiData(babsim.hospital::rkidata)
%> getRkiData(): Found days with negative number of cases. Ignoring them.
n <- as.integer( max(data$Day)-min(data$Day) )
14

A PREPRINT - D ECEMBER 15, 2020

StartDay <- min(data$Day) + round(n*0.9)
data <- data[which(data$Day >= StartDay), ]
EndDate <- max(data$Day) + 14
dataExt <- extendRki(data = data,
EndDate = EndDate,
R0 = c(0.1, 0.2))

To illustrate the extendRki() data extension procedure, a short example is shown below:

visualizeRkiEvents(data = data, region=5374)

80
60
40
20

COVID−19 Cases

100

Infizierte. Region: 5374

Dez 01

Dez 03

Dez 05

Dez 07
Date

The following plot shows the result of the data extension:

visualizeRkiEvents(data = dataExt, region = 5374)
15

Dez 09

Dez 11

A PREPRINT - D ECEMBER 15, 2020

80
60
40
0

20

COVID−19 Cases

100

Infizierte. Region: 5374

Dez 07

Dez 14

Dez 21

Date

8

Sensitivity Analysis

We will describe only a very quick parameter analysis. A detailed analysis will be presented in a forthcoming paper.
Here, we demonstrate how machine laerning tools (regression trees) can be used to visualize the most important
parameters of the simulation model.

param <- getParaSet(5374)
n <- dim(param)[2] - 1
y <- param[,1]
x <- param[,2:dim(param)[2]]
fitTree <- buildTreeModel(x=x,
y=y,
control = list(xnames = paste0('x', 1:n)))
rpart.plot(fitTree$fit)
16

A PREPRINT - D ECEMBER 15, 2020

3.7
100%
yes

x8 >= 5.4 no

3.6
49%

3.8
51%

x23 < 0.0045

x3 < 4

3.4
21%

3.7
27%

x14 >= 0.13

3.8
39%

x3 >= 4.8

x7 >= 3.3

3.5
17%

3.8
34%

x3 < 5.8

x11 >= 2.6
3.7
27%
x26 >= 0.014
3.7
19%
x8 < 5

3.3
10%

3.6
11%

3.4
12%

3.8
5%

3.9
10%

3.5
12%

3.6
13%

3.8
6%

3.9
8%

4.1
7%

4.1
5%

getParameterNameList(c(24, 25, 3, 10))
%>
x24
x25
%> "AmntDaysAftercareToHealthy"
"RiskFactorA"
%>
x3
x10
%> "AmntDaysNormalToIntensive" "AmntDaysVentilationToDeath"

Sevral additional tools are available, e.g., to perform a sensitivity analysis, because babsim.hopital uses the R
package SPOT (sequential parameter optimization toolbox) to improve parameter settings.SPOT implements a set of
tools for model-based optimization and tuning of algorithms (surrogate models, optimizers, DOE). SPOT can be used
for sensitivity analysis, which is in important under many aspects, especially:

• understanding the most important factors (parameters) that influence model behavior. For example, it is of
great importance for simulation practitioners and doctors to discover relevant durations and probabilities.

• detecting interactions between parameters, e.g., do durations influence each other?

The fitness landscape can be visualized using the function plotModel. Again, we would like to mention that these
results are only shown for didactical purposes. They are not a valid statistical analysis, because the optimization via
simulation runs are too short and do not produce sufficient results. Here, the interaction between the first two model
parameters, i.e., AmntDaysInfectedToHospital, and AmntDaysNormalToHealthy, is shown.
SPOT::plotModel(res$modelFit, which = c(1,2) ,xlab = c("x1", "x2"))
17

A PREPRINT - D ECEMBER 15, 2020

y
13

x2

12
11

12

10

11

9
10
8
9
7

8

9

10

11

12

13

x1

A

regression-based parameter screening can be performed to discover relevant (and irrelevant) model parameters:
fitLm <- SPOT::buildLM(x=res$x,
y=res$y,
control = list(useStep=TRUE))
summary(fitLm$fit)
%>
%> Call:
%> lm(formula = y ~ x.12 + x.13 + x.14 + x.15 + x.24 + x.25 + x.26,
%>
data = df)
%>
%> Residuals:
%>
Min
1Q Median
3Q
Max
%> -3.7513 -1.2679 -0.1442 1.0313 6.1996
%>
%> Coefficients:
%>
Estimate Std. Error t value Pr(>|t|)
%> (Intercept) 16.9509
2.0349
8.330 2.14e-13 ***
%> x.12
0.2486
0.1004
2.475
0.0148 *
%> x.13
0.5088
0.3603
1.412
0.1606
%> x.14
-31.8801
5.6697 -5.623 1.38e-07 ***
%> x.15
-30.2948
14.6745 -2.064
0.0413 *
%> x.24
-0.4782
0.2884 -1.658
0.1000
%> x.25
1.5502
0.5214
2.973
0.0036 **
%> x.26
22.1438
9.3273
2.374
0.0193 *
%> --%> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
%>
%> Residual standard error: 1.785 on 113 degrees of freedom
%>
(1 observation deleted due to missingness)
%> Multiple R-squared: 0.3807, Adjusted R-squared: 0.3423
%> F-statistic: 9.924 on 7 and 113 DF, p-value: 1.307e-09
18

A PREPRINT - D ECEMBER 15, 2020

9

Summary

Based on ideas presented by Lawton and McCooe (2019), we developed a resource planning tool for hospitals that
considers the specific situation of the COVID-19 pandemic. babsim.hospital is implemented in the statistical
programming language R, see R Core Team (2020), and uses a discrete-event simulation model. The simmer package
(Ucar, Smeets, and Azcorra 2019) was used to implement the simulation model.
babsimhospital was developed in cooperation with ICU experts, crisis teams, and health administrations. It combines
simulation, optimization, statistics, and artificial intelligence processes in a very efficient way.
Sequential parameter optimization (SPOT) is used to optimize the parameters (status transition probabilities, length
of stay, distribution properties) Bartz-Beielstein, Lasarczyk, and Preuss (2005). For modeling purposes, distributions
(including a truncated and translated Gamma distribution) were specially developed by us in order to realistically
simulate the length of stay. babsim.hospital takes into account different risks for individual groups of people (age and
gender-specific) and can be used for any resources beyond the planning of bed capacities.
Using babsim.hospital provides many advantages for crisis teams, e.g., comparison with your own local planning,
simulation of local events, adaptation to your own situation, simulation of any scenario (worst / best case), simulation
of any pandemic scenario, considering the local situation, and enables a standardized approach. And, there are benefits
for medical professionals, e.g, analysis of the pandemic at local, regional, state and federal level, the consideration
of special risk groups, tools for validating the length of stays and transition probabilities. Finally, there are potential
advantages for administration, management, e.g., assessment of the situation of individual hospitals taking local events
into account, consideration of relevant resources: beds, ventilators, rooms, protective clothing, and personnel planning,
e.g., medical and nursing staff.
babsim.hospital is open source and will be available on CRAN, see (https://cran.r-project.org).

10

Appendix

10.1

Copyright Notices

10.1.1

RKI Data

Please take the following copyright notice under advisement, if you plan to use the RKI data included in the package:
Die Daten sind die „Fallzahlen in Deutschland“ des Robert Koch-Institut (RKI) und stehen unter
der Open Data Datenlizenz Deutschland Version 2.0 zur Verfügung. Quellenvermerk: Robert KochInstitut (RKI), dl-de/by-2-0
Haftungsausschluss: „Die Inhalte, die über die Internetseiten des Robert Koch-Instituts zur Verfügung
gestellt werden, dienen ausschließlich der allgemeinen Information der Öffentlichkeit, vorrangig der
Fachöffentlichkeit“.
Taken
from
https://npgeo-corona-npgeo-de.hub.arcgis.com/datasets/
dd4580c810204019a7b8eb3e0b329dd6_0.
10.1.2

DIVI Data

We have included a data sample from the German DIVI Register: https://www.intensivregister.de/. Please take the
following copyright notice under advisement. The DIVI data are not open data. The following statement can be found
on the DIVI web page:
Eine weitere wissenschaftliche Nutzung der Daten ist nur mit Zustimmung der DIVI gestattet.
Therefore, only an example data set, that reflects the structure of the original data from the DIVI
register, is included in the babsim.hospital package as icudata.

11

References

Bartz-Beielstein, Thomas, Eva Bartz, Frederik Rehbach, and Olaf Mersmann. 2020. “Optimization of High-dimensional
Simulation Models Using Synthetic Data.” arXiv e-Prints, September, arXiv:2009.02781. http://arxiv.org/
abs/2009.02781.
19

A PREPRINT - D ECEMBER 15, 2020

Bartz-Beielstein, Thomas, Christian Lasarczyk, and Mike Preuss. 2005. “Sequential Parameter Optimization.” In
Proceedings 2005 Congress on Evolutionary Computation (CEC’05), Edinburgh, Scotland, edited by B McKay and
others, 773–80. Piscataway NJ: IEEE Press. https://doi.org/10.1109/CEC.2005.1554761.
———. 2005. “Sequential Parameter Optimization.” In Proceedings 2005 Congress on Evolutionary Computation
(CEC’05), Edinburgh, Scotland, edited by B McKay and others, 773–80. Piscataway NJ: IEEE Press. https:
//doi.org/10.1109/CEC.2005.1554761.
Lawton, Tom, and Michael McCooe. 2019. “Policy: A Novel Modelling Technique to Predict Resource -Requirements
in Critical Care a Case Study.” Future Healthcare Journal 6 (1): 17–20. https://doi.org/10.7861/
futurehosp.6-1-17.
R Core Team. 2020. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for
Statistical Computing. https://www.R-project.org/.
Ucar, Iñaki, Bart Smeets, and Arturo Azcorra. 2019. “Simmer: Discrete-Event Simulation for r.” Journal of Statistical
Software, Articles 90 (2): 1–30. https://doi.org/10.18637/jss.v090.i02.

20

