INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS
AND THRESHOLDING

arXiv:2005.08858v1 [math.NA] 18 May 2020

YUAN GAO, GUANGZHEN JIN, AND JIAN-GUO LIU
Abstract. We propose an equilibrium-driven deformation algorithm (EDDA) to simulate the
inbetweening transformations starting from an initial image to an equilibrium image, which covers images varying from a greyscale type to a colorful type on plane or manifold. The algorithm
is based on Fokker-Planck dynamics on manifold, which automatically cooperates positivity,
unconditional stability, mass conservation law, exponentially convergence and also the manifold
structure suggested by dataset. The thresholding scheme is adapted for the sharp interface
dynamics and is used to achieve the finite time convergence. Using EDDA, three challenging
examples, (I) facial aging process, (II) coronavirus disease 2019 (COVID-19) invading/treatment
process, and (III) continental evolution process are conducted efficiently.

1. Introduction
Inbetweening auto-animation is to automatically generate animations (motions) given a starting and end images. The classical method for auto-animation use detailed kinematic equations
for each object in the starting images, which is precise but time consuming due to case by case
c.f. [CBE+ 15, ZTG+ 18].
Instead of analyzing the detailed kinematic equation for each object, we aim to propose
an efficient and universal algorithm for inbetweening auto-animation based on Fokker-Planck
dynamics on manifold and thresholding. We call this algorithm equilibrium-driven deformation
algorithm (EDDA).
EDDA regards the end image as an equilibrium state of a Fokker-Planck equation and the
inbetweening motion is driven by an underlying potential force determined by the equilibrium.
This viewpoint is especially useful when the detailed physical process is not clear or hard to
describe. For instance, the inbetweening motion of aging process, tumor growth, pneumonia
invading for coronavirus disease 2019 (COVID-19) or the formation of current continents/oceans
starting from pangaea.
We first consider a Fokker-Planck equation in a flat domain Ω ⊂ R` with a unique equilibrium
π and no-flux boundary condition in Section 2 and then we propose an efficient solver for this
Fokker-Planck equation in Section 3. The numerical solver for this part is based on structured
grids and finite volume method [EGH00]. An unconditionally stable explicit time discretization
is introduced, which automatically enjoys positivity, mass conservation law, exponentially convergence and also efficiency. For a Fokker-Planck equation on a closed manifold, we propose
a similar efficient solver based on point clouds and the associated Voronoi tessellation in Section 4. The Voronoi tessellation automatically gives the manifold information and can be used
to approximate surface gradient/divergence in the Fokker-Planck equation. Based on this, an
analogue unconditionally stable explicit time discretization is introduced.
Date: May 19, 2020.
1

2

Y. GAO, G. JIN, AND J.-G. LIU

To realize the end image (the equilibrium) at finite time and the sharp dynamics of the
inbetweening motion, we combine the explicit-time-discretization of the Fokker-Planck equation
with the thresholding dynamics. When the equilibrium image has a sharp interface, the scheme
adapting thresholding step converges faster than the purely Fokker-Planck iteration and the
relative error reaches machine accuracy at finite time.
In Section 5, we apply EDDA proposed for either structured grids on Ω ⊂ R` , or for pointclouds which suggests an underlining manifold to conduct three challenging and important examples: (I) facial aging process, (II) COVID-19 invading/treatment process, and (III) continental
evolution process. In Example (I), inbetweening facial aging process at each time is simulated
and potentially reveals the detailed changes of different part of human face over time. In Example (II), the inbetweening evolution of COVID-19 pneumonia invading before treatment and the
fading away after treatment are simulated, which shows a good agreement with computerized
tomography (CT) scans and also reveals promising application in the studying of pathology for
COVID-19. In Example (III), the Fokker-Planck dynamics and thresholding are combined together to simulate the continental drifting process, which may suggest a new explanation for the
formation of the current five continents of the world. From those examples from quite different
research fields, EDDA are shown to be a very efficient and universal method with enormous
potential applications in other fields of science and industry.
2. Fokker-Planck equation and equilibrium
Suppose Ω ⊂ R` is a closed subset in R` . Assume the end image on Ω is described by a
equilibrium density π(x) : Ω → R. The value of ρ indicates the gray level of the image for a
grayscale image. In the case of Red-Green-Blue (RGB) image, we use three separate densities
to indicate the RGB levels of the image separately. Then with π ∝ e−φ , the Fokker-Planck
equation is given by

 ρ 
(2.1)
∂t ρ = ∆ρ + ∇ · (ρ∇φ) = ∇ · π∇
π
with initial data ρ0 satisfying
Z
Z
(2.2)
ρ0 dx =
π dx.
Ω

Ω

We consider the following natural no-flux boundary condition
ρ
(2.3)
n·∇
= 0 on ∂Ω.
π
(2.1) can be recast as the relative entropy formulation

ρ
(2.4)
∂t ρ = ∇ · ρ∇ ln
.
π
See Section 4 for a Fokker-Planck equation on a d dimensional smooth closed submanifold of
`
R.
Now we state the ergodicity of Fokker-Planck equation (2.1). Assume
(2.5)

π > 0,

π ∈ C 1 (Ω̄).

Let L2 (Ω; π1 dx) be the weighted Sobolev space. Define the Fokker-Planck operator for (2.1) as
L∗ : D(L∗ ) ⊂ L2 (Ω; π1 dx) → R with D(L∗ ) := {u ∈ H 2 (Ω; π1 dx); ∂n πu = 0 on ∂Ω}
u
(2.6)
L∗ u := −∇ · (π∇ ).
π

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

3

This can be regarded as the adjoint operator of the generator L = − π1 ∇ · (π∇) of Fokker-Planck
equation (2.1). One can see L∗ is self-adjoint operator in L2 (Ω; π1 dx) with compact resolvent
(λI + L∗ )−1 for λ large enough. Thus L∗ has only discrete spectrum without finite accumulation
points. Furthermore, since π > 0, for ρ ∈ D(L),
Z
ρ
∗
(2.7)
L ρ = 0, =⇒ π|∇ |2 dx = 0, =⇒ ρ = cπ.
π
Therefore, we conclude 0 is the simple principal eigenvalue of L∗ with the corresponding eigenfunction π, which leads to the spectral gap of L∗ in L2 (Ω; π1 dx), i.e.
hL∗ u, ui 1 ≥ chu, ui 1 ,

(2.8)

π

for u s.t. hu, πi 1 = 0.

π

π

R

Thus due to (ρ − π) dx = 0, we have the following Poincare’s inequality
Z
Z 
ρ

2
ρ
(2.9)
|∇
− 1 |2 π dx ≥ c
− 1 π dx.
π
π
Therefore, multiplying (2.1) by πρ − 1, by (2.3) we have
Z
Z
Z
1 d
ρ 2
(ρ − π)2
(ρ − π)2
(2.10)
dx = − π|∇ | dx ≤ −c
dx,
2 dt
π
π
π
which gives the ergodicity that
(2.11)

kρ(·, t) − πkL2 (Ω; 1 dx) ≤ e−2ct kρ(·, 0) − πkL2 (Ω; 1 dx) .
π

π

3. EDDA based on structured grids
We present the numerical method based on structured grids for a Fokker-Planck equation on
d−c
2D domain Ω := [a, b] × [c, d]. Let the grid size be ∆x = b−a
N , ∆y = M . Define the cells as
(3.1)

Cij = ((i − 1)∆x, i∆x) × ((j − 1)∆y, j∆y),

i = 1, · · · , N, j = 1, · · · , M.

Then the cell centers (xi , yi ) are
1
1
xi = a + (i − )∆x, yj = c + (j − )∆y, i = 1, · · · , N, j = 1, · · · , M.
2
2
We use ρi,j to approximate the value of ρ(xi , yj ) and take πi,j = π(xi , yj ). Then the continuoustime finite volume scheme is





πi,j + πi+1,j ρi+1,j
ρi,j
πi−1,j + πi,j ρi,j
ρi−1,j
1
ρ̇i,j =
−
−
−
∆x2
2
πi+1,j
πi,j
2
πi,j
πi−1,j





(3.3)
πi,j + πi,j+1 ρi,j+1
ρi,j
πi,j−1 + πi,j ρi,j
ρi,j−1
1
+
−
−
−
∆y 2
2
πi,j+1 πi,j
2
πi,j
πi,j−1
(3.2)

for i = 1, · · · , N, j = 1, · · · , M with the no-flux boundary condition (2.3). We assume the
equilibrium π satisfies
(3.4)

π0,j = π1,j , πN +1,j = πN,j

j = 1, · · · , M,

πi,0 = πi,1 , πi,M +1 = πi,M

i = 1, · · · , N,

then the no-flux boundary condition (2.3) is reduced to
(3.5)

ρ0,j = ρ1,j , ρN +1,j = ρN,j

j = 1, · · · , M,

ρi,0 = ρi,1 , ρi,M +1 = ρi,M

i = 1, · · · , N.

4

Y. GAO, G. JIN, AND J.-G. LIU

Denote ρki,j as the value of ρ at tk = k∆t with time step size ∆t. Now we introduce an
unconditionally stable explicit time discretization for (3.3)
(3.6)
!
!!
k+1
k
ρk+1
ρk+1
ρki−1,j
πi−1,j + πi,j ρi,j
πi,j + πi+1,j ρki+1,j
1
i,j − ρi,j
i,j
−
−
−
=
∆t
∆x2
2
πi+1,j
πi,j
2
πi,j
πi−1,j
!
!!
k+1
k
ρk+1
ρ
ρ
π
+
π
πi,j + πi,j+1 ρki,j+1
1
i,j−1
i,j
i,j
i,j−1
i,j
−
−
−
+
∆y 2
2
πi,j+1
πi,j
2
πi,j
πi,j−1
for i = 1, · · · , N, j = 1, · · · , M with the no-flux boundary condition (3.5).
We now further simplify (3.6) as
(3.7)




 k+1
ρi,j
πi−1,j + πi,j
∆t πi,j + πi+1,j
∆t πi,j + πi,j+1 πi,j−1 + πi,j
1+
+
+
+
2
2
∆x
2πi,j
2πi,j
∆y
2πi,j
2πi,j
πi,j
!
ρki,j
πi−1,j + πi,j ρki−1,j
∆t πi,j + πi+1,j ρki+1,j
=
+
+
πi,j
∆x2
2πi,j
πi+1,j
2πi,j
πi−1,j
!
πi,j−1 + πi,j ρki,j−1
∆t πi,j + πi,j+1 ρki,j+1
+
.
+
∆y 2
2πi,j
πi,j+1
2πi,j
πi,j−1
Define
(3.8)

λi,j

1
:=
∆x2



πi,j + πi+1,j
πi−1,j + πi,j
+
2πi,j
2πi,j



1
+
∆y 2



πi,j + πi,j+1 πi,j−1 + πi,j
+
2πi,j
2πi,j


.

Then (3.7) can be rewritten as
(1 +

∆tλi,j )ρk+1
i,j

=ρki,j

(3.9)
+

πi,j + πi+1,j ρki+1,j
πi−1,j + πi,j ρki−1,j
+
2
πi+1,j
2
πi−1,j
!
πi,j + πi,j+1 ρki,j+1
πi,j−1 + πi,j ρki,j−1
+
.
2
πi,j+1
2
πi,j−1

∆t
+
∆x2
∆t
∆y 2

!

Denote h := max{∆x, ∆y}. From (3.9), we recast the scheme using a rescaled generator operator
(3.10)
ρk+1
i,j
πi,j

ρki,j
1
∆t
−
=
πi,j 1 + ∆tλi,j ∆x2

πi,j + πi+1,j ρki+1,j
πi−1,j + πi,j ρki−1,j
+
2πi,j
πi+1,j
2πi,j
πi−1,j

!

!
πi,j−1 + πi,j ρki,j−1
∆tλi,j ρki,j
πi,j + πi,j+1 ρki,j+1
+
−
2πi,j
πi,j+1
2πi,j
πi,j−1
1 + ∆tλi,j πi,j
!
!
hπ + π
ρki+1,j
ρki,j
ρki−1,j
πi,j + πi−1,j ρki,j
∆t
i,j
i+1,j
=
−
−
−
1 + ∆tλi,j 2∆x2 πi,j
πi+1,j
πi,j
2∆x2 πi,j
πi,j
πi−1,j
!
!
ρki,j
ρki,j−1 i
πi,j+1 + πi,j ρki,j+1
πi,j + πi,j−1 ρki,j
ρk
+
−
−
−
=:
−∆t(L
)i,j ,
h
2∆y 2 πi,j
πi,j+1 πi,j
2∆y 2 πi,j
πi,j
πi,j−1
π
1
∆t
+
1 + ∆tλi,j ∆y 2

Now we state the the positivity, maximal principle, mass conservation law and ergodicity of
the scheme (3.7) as follows.

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

5

Proposition 3.1. Let πi,j = π(xi , yj ) > 0. Let ∆t be the time step and consider the explicit
scheme (3.6) for the numerical solution ρki,j with (3.5). Assume the initial data ρ0 > 0 satisfies
N X
M
X

(3.11)

(1 + ∆tλi,j )ρ0i,j =

N X
M
X

i=1 j=1

(1 + ∆tλi,j )πi,j .

i=1 j=1

Then we have
(i) positivity preserving property
(3.12)

ρki,j > 0, i = 1, · · · , N, j = 1, · · · , M

=⇒

ρk+1
i,j > 0, i = 1, · · · , N, j = 1, · · · , M ;

(ii) the mass-conversation law
N X
M
X

(3.13)

(1 + ∆tλi,j )ρk+1
i,j =

i=1 j=1

i=1 j=1

(iii) the unconditional maximal principle for
(3.14)
(iv) the

ρk+1
i,j

max

πi,j

i,j

`∞

N X
M
X
(1 + ∆tλi,j )ρki,j .

ρi,j
πi,j

≤ max
i,j

ρki,j
;
πi,j

contraction

(3.15)

max
i,j

ρk+1
i,j
πi,j

− 1 ≤ max

ρki,j
−1 ;
πi,j

≤ c|µ2 |k ,

|µ2 | < 1,

i,j

(v) the exponential convergence
ρki,j
−1
πi,j

(3.16)

`F

where µ2 is the second eigenvalue of A defined in (3.26).
Proof. For (i), from (3.9), since π > 0, we know ρki,j > 0 implies ρk+1
i,j > 0.
To prove (ii), taking summation in (3.9), we have the
(3.17)
!
N X
M
N X
M
N X
M
k
k
X
X
X
ρ
ρ
π
+
π
π
+
π
∆t
i,j
i+1,j
i+1,j
i−1,j
i,j
i−1,j
(1 + ∆tλi,j )ρk+1
ρki,j +
+
i,j =
∆x2
2
πi+1,j
2
πi−1,j
i=1 j=1
i=1 j=1
i=1 j=1
!
N X
M
X
πi,j−1 + πi,j ρki,j−1
∆t πi,j + πi,j+1 ρki,j+1
+
+
.
∆y 2
2
πi,j+1
2
πi,j−1
i=1 j=1

The second term in the RHS of (3.17) is
N X
M
N
+1 X
M
X
X
∆t πi,j + πi+1,j ρki+1,j
∆t πi−1,j + πi,j ρki,j
=
∆x2
2
πi+1,j
∆x2
2
πi,j
i=1 j=1

(3.18)

=

N X
M
X
i=1 j=1

i=2 j=1

∆t πi−1,j +
∆x2
2

πi,j ρki,j
πi,j

k
∆t πN,j + πN +1,j ρN +1,j
∆t π0,j + π1,j ρk1,j
+
−
∆x2
2
πN +1,j
∆x2
2
π1,j

N X
M

X
∆t πi−1,j + πi,j ρki,j
∆t  k
k
=
+
ρ
−
ρ
,
N
+1,j
1,j
∆x2
2
πi,j
∆x2
i=1 j=1

6

Y. GAO, G. JIN, AND J.-G. LIU

where we used the no-flux boundary condition (3.4). Similarly, the third term in the RHS of
(3.17) is
N X
M
N
−1 X
M
X
X
∆t πi−1,j + πi,j ρki−1,j
∆t πi+1,j + πi,j ρki,j
=
∆x2
2
πi−1,j
∆x2
2
πi,j
i=1 j=1

(3.19)

=

i=0 j=1

N X
M
k
X
∆t πN,j + πN +1,j ρN,j
∆t π0,j + π1,j ρk0,j
∆t πi+1,j + πi,j ρki,j
−
+
∆x2
2
πi,j
∆x2
2
πN,j
∆x2
2
π0,j
i=1 j=1

=

N X
M

X
∆t  k
∆t πi+1,j + πi,j ρki,j
k
−
ρ
−
ρ
0,j .
∆x2
2
πi,j
∆x2 N,j
i=1 j=1

One can shift index for the last two terms in the RHS of (3.17) similarly. Therefore, using the
no-flux boundary condition (3.5), we have the mass balance
N X
M
X

(3.20)

(1 + ∆tλi,j )ρk+1
i,j =

i=1 j=1

N X
M
X
(1 + ∆tλi,j )ρki,j .
i=1 j=1

To prove (iii), directly taking maximum in the RHS of (3.7) implies
(3.21)

(1 + ∆tλi,j )

ρk+1
i,j
πi,j

ρki,j
≤ (1 + ∆tλi,j ) max
,
i,j πi,j

which leads to (4.17).

To prove (iv), subtract (1+∆tλi,j ) from both sides of (3.7) and then multiply by sgn

ρk+1
i,j
πi,j


−1 .

Thus using same argument with (iii), we have
(3.22)

(1 + ∆tλi,j )

ρk+1
i,j
πi,j

ρki,j
− 1 ≤ (1 + ∆tλi,j ) max
−1 ,
i,j
πi,j

which implies (4.18).
Now we prove (v). Recall (3.10), i.e.
ρk+1
i,j
πi,j
(3.23)

−

ρki,j
ρk
= − ∆t(Lh )i,j
πi,j
π
hπ + π
∆t
i,j
i+1,j
=
1 + ∆tλi,j 2∆x2 πi,j
+

πi,j+1 + πi,j
2∆y 2 πi,j

ρki,j+1
πi,j+1

!
!
ρki+1,j
ρki,j
ρki−1,j
πi,j + πi−1,j ρki,j
−
−
−
πi+1,j
πi,j
2∆x2 πi,j
πi,j
πi−1,j
!
!
ρki,j
ρki,j−1 i
πi,j + πi,j−1 ρki,j
−
−
−
.
πi,j
2∆y 2 πi,j
πi,j
πi,j−1

By shifting index and no-flux boundary condition (3.5) we have
(3.24)
!2
!2
X h πi,j + πi+1,j ρki+1,j
ρki,j
ρki−1,j
πi,j + πi−1,j ρki,j
ρk k
h−Lh , ρ i1+∆tλ = −
−
+
−
π
2∆x2
πi+1,j
πi,j
2∆x2
πi,j
πi−1,j
i,j
!2
!2
i
ρki,j
ρki,j−1
πi,j+1 + πi,j ρki,j+1
πi,j + πi,j−1 ρki,j
+
−
+
−
.
2∆y 2
πi,j+1 πi,j
2∆y 2
πi,j
πi,j−1

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

From this, one know
ρ∞
(3.25)
Lh
= 0,
π
Denote uki,j =

hLh

ρ∞ ∞
, ρ i1+∆tλ = 0
π

=⇒

ρ∞ = cπ = π.

ρki,j
πi,j .

uk+1
i,j
(3.26)

=⇒

7

Then (3.10) is recast as


h
πi,j + πi−1,j k
πi,j + πi+1,j k
1
k
u + ∆t
u
+
u
=
1 + ∆tλi,j i,j
2∆x2 πi,j i+1,j
2∆x2 πi,j i−1,j
πi,j + πi,j−1 k i
πi,j+1 + πi,j k
u
+
u
=: (Auk )i,j .
+ ∆t
i,j+1
2∆y 2 πi,j
2∆y 2 πi,j i,j−1

By the Perron-Frobenius theorem, µ1 = 1 is the simple, principal eigenvalue of A with the
ground state u∗i,j ≡ 1 and other eigenvalues µi of A satisfy |µi | < µ1 . Notice also the mass
conservation for initial data u0 =

ρ0
π

satisfying (4.16), i.e.,

hu0 − u∗ , u∗ i(1+∆tλ)π = 0.

(3.27)

Since also A is self-adjoint operator in the weighted space l2 ((1 + ∆tλ)π), we can express u0
using
(3.28)

u0 − u∗ =

M
N
X

c` u` ,

u` is the eigenfunction corresponding to µ` .

`=2

Therefore, we have
(3.29)

uk − u∗ = A(u0 − u∗ ) =

M
N
X

c` µk` u` ,

`=2

which concludes
uk − 1

(3.30)

l∞

≤ c|µ2 |k

with |µ2 | < 1.


3.1. Thresholding for sharp dynamics. In this section, we combine the thresholding scheme
with the Fokker-Planck dynamics to generate the inbetween motions with sharp interface, i.e.,
the density is described by linear combinations of two characteristic functions. In the computations later, one will see that the thresholding scheme also helps to achieve the finite time
convergence to the sharp equilibrium density.
Notice the dynamics of the Fokker-Planck equation is invariant when replacing ρ by cρ.
Therefore, the initial density shall be adjust based on the mass conservation law (3.11). After
this initial adjustment, assume initial data ρ0i,j ∈ {ρ0s , ρ0b }, which takes alternatively the value
ρ0s , ρ0b . Assume the equilibrium is πi,j ∈ {πs , πb } which takes alternatively the value πs , πb .
To combine the thresholding scheme with the Fokker-Planck dynamics, we need to choose the
threshold ξ k at each step to conserve (3.13) as follows:
Step 1. Given ρki,j ∈ {πs , πb }, compute the explicit Fokker-Planck scheme (3.7) to update
ρ̃k+1
i,j ∈ [πs , πb ] for any i = 1, 2, · · · , N and j = 1, 2, · · · , M .
Step 2. Choose threshold ξ k+1 and define
(3.31)

ρk+1
i,j := πs χ{i,j;ρ̃k+1 ≤ξ k+1 } + πb χ{i,j;ρ̃k+1 >ξ k+1 }
i,j

such that ρk+1 satisfies (3.13).

i,j

8

Y. GAO, G. JIN, AND J.-G. LIU

In Step 2, ξ k+1 can be found using bisection such that
X
X
f (ξ k+1 ) :=
(1 + λi,j ∆t)ρk+1
−
(1 + λi,j ∆t)πi,j = 0.
i,j
i

i

4. EDDA based on point-clouds: Fokker-Plank equation on N
Suppose (N , dN ) is a d dimensional smooth closed submanifold of R3 . Assume the end image
on N is described by a equilibrium density ρ∞ (x) : N → R. Then the Fokker-Planck equation
is given by



ρ
(4.1)
∂t ρ = divN · ρ∞ ∇N
,
ρ∞
P
where ∇N := di=1 τiN ∇τ N is surface gradient, ∇τ N = τiN · ∇ is the tangential derivative in the
i
i
P
direction of τiN and divN is the surface divergence defined as divN ξ = di=1 τiN · ∇τ N ξ. This
i
can be recast as the relative entropy formulation


ρ
.
(4.2)
∂t ρ = divN · ρ∇N ln
ρ∞
4.1. Construction of Voronoi tessellation and the upwind scheme on manifold N .
In this section, we construct an upwind scheme based on Voronoi tessellation for manifold N ,
which automatically gives a positive-preserving upwind scheme for the Fokker-Planck (4.1).
Suppose (N , dN ) is a d dimensional smooth closed submanifold of R3 and dN is induced by
the Euclidean metric in R3 . Q := {yi }ni=1 are sampled from the equilibrium density π = ρN
∞.
Define the Voronoi cell as
(4.3)

Ci := {y ∈ N ; dN (y, yi ) ≤ dN (y, yj ) for all yj ∈ Q},

with the volume |Ci | = Hd (Ci ). Then N = ∪ni=1 Ci is a Voronoi tessellation of manifold N . One
can see each Ci is star shaped. Denote the Voronoi face for cell Ci as
(4.4)

Γij := Ci ∩ Cj , and its area as |Γij | = Hd−1 (Γij )

for any j = 1, · · · , n. If Γij = ∅ or i 6= j then we set |Γij | = 0.
Let χCi be the characteristic function such that χCi = 1 for y ∈ Ci and 0 otherwise. For
i = 1, · · · , n,
n
X
approx
ρi χCi (y)
ρ
(y) =
i=1

P
is the piecewise constant probability distribution on N provided ni=1 ρi |Ci | = 1 and ρi ≥ 0.
Pn
Let π be the approximated equilibrium density at yi satisfying i=1 πi |Ci | = 1. If ρapprox (y) =
P i
i ρi χCi (y) is an approximation of density ρN (y), then ρi is an approximation of the density
ρN (yi ).
Define the associated adjacent grids as
(4.5)

V F (i) := {j; Γij 6= ∅}.

Then using the finite volume method and the divergence theorem on manifold, we have
 approx 
Z
X Z
d
d
ρ
(4.6)
ρi |Ci | =
ρapprox Hd (Ci ) =
πn · ∇N
Hd−1 (Γij ),
dt
dt Ci
π
Γij
j∈V F (i)

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

9

where n is the unit outward normal vector field on ∂Ci . Based on this, we introduce the following
upwind scheme. For i = 1, · · · , n,


ρj
d
ρi
1 X πi + πj
(4.7)
−
.
ρi |Ci | =
|Γij |
dt
2
|yi − yj |
πj
πi
j∈V F (i)

We now interpret the upwind scheme as the forward equation for a Markov process with
transition probability Pij (from j to i) and jump rate λj
X
d
(4.8)
λj Pij ρj |Cj | − λi ρi |Ci |, i = 1, 2, · · · , n;
ρi |Ci | =
dt
j∈V F (i)

where
λi :=
(4.9)

1
2|Ci |πi

X
j∈V F (i)

πi + πj
|Γij |,
|yi − yj |

i = 1, 2, · · · , n;

1 πi + πj |Γij |
, j ∈ V F (i); Pij = 0, j ∈
/ V F (i).
λj 2πj |Cj | |yi − yj |
P
One can see it satisfies i Pij = 1 and the detailed balance property
Pij :=

Pij λj πj |Cj | = Pji λi πi |Ci |.

(4.10)

We refer to [GLW20] for the ergodicity of this Markov process.
In practice, instead of the |Ci |, Γij in (4.8), one shall use the approximated coefficients C̃i and
Γ̃ij because we do not know the exact metric information of the manifold based only on point
clouds. We omit the algorithm of finding the approximated C̃i and Γ̃ij and refer to [GLW20].
4.2. Unconditional stable explicit time stepping and exponential convergence. Now
we propose an unconditionally stable explicit time discretization for the upwind scheme (4.7),
which enjoys several good properties as the scheme (3.6), such as maximal principle, mass
conservation law and exponential convergence.
Let ρki be the discrete density at discrete time k∆t. To achieve both stability and efficiency,
we introduce the following unconditional stable explicit scheme
(4.11)

X
ρkj
ρk+1
ρk+1
ρki
i
i
=
− λ∆t
+ ∆t
λi Pji ,
πi
πi
πi
πj

i = 1, 2, · · · , n

j∈V F (i)

which is


k
k
k
X
ρ
ρk+1
ρ
λ
∆t
ρ
j
i
i

= i +
Pji − i  .
πi
πi
1 + λi ∆t
πj
πi

(4.12)

j∈V F (i)

For uk+1
:=
i

ρk+1
i
πi ,

the matrix formulation of (4.12) is
uk+1 = (I + ∆tB̂)uk ,

(4.13)
where
(
(4.14)

B̂ := {b̂ij } =

λi
− 1+λ
,
i ∆t
λi
1+λi ∆t Pji ,

j = i;
j 6= i.,

with

X
j

b̂ij = 0.

10

Y. GAO, G. JIN, AND J.-G. LIU

We give the following proposition for several properties of scheme (4.11). The proof of this
proposition is similar to Proposition 3.1 so we omit it.
Proposition 4.1. Let ∆t be the time step and consider the explicit scheme (4.11). Assume the
initial data satisfies
X
X
(4.15)
(1 + λi ∆t)ρ0i |Ci | =
(1 + λi ∆t)πi |Ci |.
i

i

Then we have
(i) the conversational law for gik+1 := (1 + ∆tλi )ρk+1
|Ci |, i.e.
i
X
X
(4.16)
(1 + λi ∆t)ρk+1
|Ci | =
(1 + λi ∆t)ρki |Ci |;
i
i

i

(ii) the unconditional maximal principle for
(4.17)

max

ρi
πi

ρk+1
j

j

πj

≤ max
j

ρkj
.
πj

(iii) the `∞ contraction
(4.18)

max
i

ρk+1
ρk
i
− 1 ≤ max i − 1 ;
i
πi
πi

(iv) the exponential convergence
ρki
−1
πi

(4.19)

≤ c|µ2 |k ,

|µ2 | < 1,

`∞

where µ2 is the second eigenvalue of I +∆tB̂ (in terms of magnitude), i.e. µ2 = 1−gapB̂ ∆t
and gapB̂ is the spectral gap of B̂.
4.3. Thresholding for sharp dynamics. Assume the initial density is adjusted based on the
mass conservation law (4.15). We now give the sharp dynamics by combining the Fokker-Planck
equation on manifold with the thresholding scheme.
Assume initial data ρ0i ∈ {ρ0s , ρ0b }, which takes alternatively the value ρ0s , ρ0b . Assume the
equilibrium is πi ∈ {πs , πb } which takes alternatively the value πs , πb .
Similar to Section 3.1, we choose the threshold ξ k at each step to conserve (4.15) as follows.
Step 1. Given ρki ∈ {πs , πb }, compute the explicit scheme (4.11) to update ρ̃k+1
∈ [πs , πb ] for
i
any i = 1, 2, · · · , n.
Step 2. Choose threshold ξ k+1 and define
(4.20)

ρk+1
:= πs χ{i;ρk+1 ≤ξk+1 } + πb χ{i;ρk+1 >ξk+1 } ,
i
i

i = 1, 2, · · · , n

i

such that ρk+1 satisfies (4.15). Here ξ k+1 can be found using bisection such that
X
X
(4.21)
f (ξ k+1 ) :=
(1 + λi ∆t)ρk+1
|Ci | −
(1 + λi ∆t)πi |Ci | = 0.
i
i

i

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

11

Figure 1. The semilog plot of temporal evolution of relative root mean square
errors for the RGB facial aging transformation with parameters ∆t = 0.01, T =
100 and ∆x = ∆y = 10−4 . The red, green and blue lines represent the relative
errors of the corresponding color modes.

5. Computations
In this section, three numerical examples are carried out to examine the capability and efficiency of the equilibrium-driven deformation algorithm (EDDA), which are the RGB colored
facial aging transformation, the pneumonia of COVID-19 invading and fading away on CT scan
images and the continental evolution process.
5.1. Example I: RGB colored facial aging transformation. In this example, we have two
images with the same size in the RGB color model showing a ladys face at two different age,
and employ the model to simulate the transformation from one image (initial) to another image
(equilibrium), which will illustrate the facial aging process with time. The strategy is to define
each image as three matrices, each matrix containing the value of a color mode (R or G or B).
Then the transformation between the two images is completed by applying the inbetweening
auto-animation three times based on Fokker-Planck dynamics (2.1).
The two images are extracted from [Posml] and are both 355 pixels in width and 575 pixels
in height, which means a total of 204125 pixel points in each image. The initial image data is
first adjusted to meet the mass conservation law (3.11). Time step ∆t is set to 0.01 and the
total number of iterations is set to 10000 thus the final iteration time T = 100. The horizontal
resolution ∆x and ∆y are both 10−4 . We use the unconditional stable explicit time stepping
scheme (3.6) and the no-flux boundary condition (3.5) to the Fokker-Planck equation (2.1) in
domain Ω.
The relative root mean square errors (3.16) for the three color-modes are illustrated in Fig.
1 separately in semiology plot. Except for the different descend rates for the three colors, all
simulated errors have the exponential convergence rates, which is consistent with the analysis
in Proposition 3.1.
In order to see the transformation process between the two images, the images after iteration
step 40, 100, 200, 400, 1000, 2000, 4000 and 10000 are shown and compared with the initial and
the equilibrium images in Fig. 2. The transformation process between two images are fast in
the beginning (e.g. before step 200) and relatively slow after then. The transformation process
in Fig. 2 clearly reveals the potential changes in different parts of the ladys face and hair with

12

Y. GAO, G. JIN, AND J.-G. LIU

Figure 2. Facial aging transformation from initial to equilibrium with parameters ∆t = 0.01, T = 100 and ∆x = ∆y = 10−4 . The updated results after time
step 40, 100, 200, 400, 1000, 2000, 4000, 10000 are shown and compared to the
initial and equilibrium images.
time. After 10000 steps of iterations, the updated image is nearly the same with the equilibrium
except for the hair color.
5.2. Example II: COVID-19 pneumonia invading and fading away on CT scan images. In this section we will focus on an example based on the COVID-19 pneumonia invading
and fading away process in a patients lung reflected on CT scan images and try to show the
possible COVID-19 pneumonia growth dynamics with time before and after the treatment. In
order to fulfill the task, two parts of simulations are presented. In the first part, two CT scan
images taken on a patients lungs in the beginning (January 23th) and severe state (February
2nd) of the disease [ZL20] are selected to be the initial and equilibrium state, respectively; see
Fig. 3 (left). In the second part, two scan images at the severe state (February 2nd) and after a few-days treatment (February 9th) are selected to be the initial and equilibrium state,
respectively; see Fig. 3 (right). Each CT scan image can be represented by a gray scale image
matrix thus the same method in Example I can be applied. The CT scan images are all cropped
to 461 pixels in width and 370 pixels in height, which means a total of 170570 pixel points in
each image. The time step ∆t is 0.01 and the total number of iterations is 6000 thus the final
iteration time T = 60. The resolutions are ∆x = ∆y = 10−4 .
After 6000 iterations, the relative root mean square errors from two parts of simulations both
decrease with an exponential rate, as is shown in Fig. 4. Moreover, the image evolution after
step 20, 50, 100, 200, 500, 1000, 5000, 10000 (see Fig. 5) clearly demonstrate the pneumonia
invading process into the patients lungs caused by COVID-19 in a few days (upper group of
figures in Fig. 5) and the pneumonia fading away from the lungs after a stem cell treatment is

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

Figure 3. Chest CT images of the critically severe COVID-19 patient [ZL20].
The left column of figures illustrates the evading of pneumonia from January 23th
to February 2nd and the right column illustrates the fading away of pneumonia
from February 2nd to February 15th after treatment.

Figure 4. The semilog plot of temporal evolution of the relative root mean
square errors for COVID-19 pneumonia invading and fading away on CT scan
images with the parameters ∆t = 0.01, T = 100 and ∆x = ∆y = 10−4 . (up) The
error evolution for the pneumonia invading process simulation. (down) The error
evolution for the pneumonia fading away process simulation.

13

14

Y. GAO, G. JIN, AND J.-G. LIU

Figure 5. The simulated COVID-19 pneumonia invading and fading away
process on CT scan images with the parameters ∆t = 0.01, T = 100 and
∆x = ∆y = 10−4 . Results after the step 20, 50, 100, 200, 500, 1000, 2000,
5000 are illustrated and compared to the initial and equilibrium scan images.
The white part inside the lungs shown on images indicates the evidence of pneumonia. (up) The pneumonia invades into the patients lungs caused by COVID-19.
(down) The pneumonia fades away from the lungs after a stem cell treatment is
applied to the patient.
applied to the patient (lower group of figures in Fig. 5), indicating a potential success of this
treatment [ZL20]. We can further compare the evolution process with the real CT scan images
taken on January 30th (see Fig. 3) and find satisfactory agreements, which indicates promising
applications in this field.
5.3. Example III: Continental evolution process with thresholding for sharp dynamics. In this section, we try to reveal the evolution process of continentals in the world from
Pangaea supercontinent (250 million years ago) to the current globe. In order to clearly distinguish the sharp dynamics evolving the continentals and the oceans, the thresholding scheme

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

15

Figure 6. The unit sphere and the Voronoi cells on it. There are totally 3000
cells on the sphere. The red dots indicate locations of the point clouds on the
sphere. The polygons with red edges are the Voronoi polygons generated with
CVT algorithm.

(4.20) and the Fokker-Planck dynamics (4.11) are combined to generate the inbetweening motions with the above sharp interfaces. The numerical experiment is carried out as follows.
Step (I). A group of points is selected on a unit sphere to be the dataset points. With the
Centroidal Voronoi Tessellation (CVT) method on the unit sphere [Ren97, DGJ03], the Voronoi
cells on the unit sphere are generated and the locations of dataset points are adjusted accordingly to ensure the uniformity of these cells. Thus, the distributions of continentals and oceans
derived from Pangaea period and current globes topography are described by two values (i.e.
πs and πb ) on the Voronoi cells and are set to be the initial and equilibrium states, respectively.
The Voronoi cell area Ci , i = 1, · · · , n, with the total number of dataset points n, is computed
and the Voronoi face Γij is determined by the geodesic length of the neighboring arc between
cell i and j.
Step (II). Update the density at each point using the explicit scheme (4.11) linear Fokker-Planck
equation.
Step (III). After several linear iteration steps, the threshold is selected following the steps in
Section 4.3 and the thresholding scheme is applied to update the data.
The computations for Step (II) and Step (III) will be looped until reaches the total iteration
steps. Besides, a simulation case which only evolves the linear Fokker-Planck equation is carried
out as the comparison.
For example III, we select a total of 3000 dataset points and generate the Voronoi cells on
the unit sphere via the CVT approximation algorithm; see Fig. 6 The standard deviation for all
the cell areas is 3.2 × 10−4 , which means the nearly uniform distributions of data points on the
sphere. The values at continental cells and the ocean cells are set to 0.9 and 0.1, respectively.
The time step ∆t is set to 0.05 and the total number of linear iterations before the (k + 1)th thresholding adjustment is set to 2k, k = 1, · · · , Nt , where Nt = 50 is the times of the
thresholding adjustments. The threshold ξk is determined by bisection method such that (4.21)
is satisfied. Here, the bisection domain limitation criterion is set to 10−6 . The total number of
iterations for the comparison simulation is set to be 10000.

Root Mean Square Error

16

Y. GAO, G. JIN, AND J.-G. LIU
0.1

Linear + Cut-off
Linear

0.01

0.001

0

0

200

400

600

800

1000

1200

Time Step

Figure 7. The semilog plot of temporal evolution of relative root mean square
errors for the continental evolution process with thresholding for sharp dynamics
with ∆t = 0.05 and the total number of the thresholding adjustments is Nt = 50.
The linear iterations before the (k + 1)th thresholding adjustment is 2k. The
red line indicates the error of simulations with only the linear Fokker-Planck
algorithm while the blue line is the error of the linear algorithm combined with
the thresholding scheme. The black dotted lines indicate the time steps when
the thresholding adjustments are applied.
Criterion
10−3 10−4 10−5 10−6
Steps (Linear)
1737 4026 6304 8581
Steps (Threshold) 960 960 960 960
Table 1. Comparison of the needed steps to reach the criterions between linear
method and threshold method.

Fig. 7 shows the temporal variations of the relative root mean square errors for the numerical
example in the first 1200 time steps. The error from the thresholding method generally have a
descend trend although with some abrupt increase due to the thresholding adjustments. The
error decreases to nearly zero (less than the machine accuracy) after the 30th thresholding
adjustment (a total of 960 time steps), which indicates the data is updated to the equilibrium.
As a comparison, the error of the simulation via the linear method (red line in Fig. 7), which
leads an exponential convergence rate, is smaller than that from thresholding method before the
960th time step (black circle in Fig. 7) and is larger after then. In order to further compare the
efficiency of the two methods, we calculated the total time steps needed for the error to reach
the criterions and listed them in Table 1. The comparisons clearly reveal the efficiency of the
thresholding adjustment in the application of the sharp dynamics, especially when the criterion
is small.
The continental evolution on the sphere after the 2th, 5th, 10th, 30th thresholding adjustment is illustrated and compared with the initial and equilibrium states in Fig. 8. After several
steps of thresholding adjustment, the sharp shapes of continentals quickly move from the initial
Pangaea supercontinent towards the equilibrium state of current continentals. The distributions
of continentals and oceans reaches the equilibrium state after the 28th thresholding adjustment,

INBETWEENING AUTO-ANIMATION VIA FOKKER-PLANCK DYNAMICS AND THRESHOLDING

17

Figure 8. The evolutions of continental movements on the unit sphere with
the parameter ∆t = 0.05 and the total number of the thresholding adjustments
is Nt = 50. The continental evolution on the sphere after the 2th, 5th, 10th,
30th thresholding adjustment are illustrated and compared with the initial and
equilibrium states. The black dots and polygons in each subplot illustrate the
point clouds and the Voronoi cells, respectively. The orange and blue patch
indicate the land and ocean, respectively. TH is short for thresholding step. The
formation of the Antarctic is revealed at the bottom (southern part) of the globe
(black arrow in TH 5). Note that the globes are shown in the same view angle
so the Antarctic continental is out of view in the last two subplots.
exactly the same as the current distributions. Although the evolution of the continental movements is simulated with the data-driven model, some potential dynamics of continental drifting
such as the Antarctic formation can be noticed in the evolutions, which may contribute to the
detailed explanation of the continental drifting theory.
6. Discussion
We propose an efficient and universal equilibrium-driven deformation algorithm (EDDA) to
simulate the inbetweening transformations given an initial and equilibrium. The algorithm automatically cooperates positivity, unconditional stability, mass conservation law, exponentially
convergence and also the manifold structure suggested by dataset. Using EDDA, three challenging examples, (I) facial aging process, (II) COVID-19 invading/treatment process, and (III)

18

Y. GAO, G. JIN, AND J.-G. LIU

continental evolution process are conducted efficiently. EDDA is shown to be a very efficient and
universal method with enormous potential applications in other fields of science and industry.
Acknowledge
The authors would like to thank Prof. Haiyan Gao for helpful suggestions. J.-G. Liu was
supported in part by the National Science Foundation (NSF) under award DMS-1812573. G.
Jin was supported in part by the the Natural Science Foundation of Guangdong Province under
award 2019A1515011487 and the Fundamental Research Funds for the Central Universities under
award 20184200031610059.
References
[CBE+ 15] Matthew Cong, Michael Bao, Jane L E, Kiran S Bhat, and Ronald Fedkiw. Fully automatic generation of anatomical face simulation models. In Proceedings of the 14th ACM SIGGRAPH/Eurographics
Symposium on Computer Animation, pages 175–183, 2015.
[DGJ03] Qiang Du, Max D. Gunzburger, and Lili Ju. Voronoi-based finite volume methods, optimal
voronoi meshes, and pdes on the sphere. Computer Methods in Applied Mechanics and Engineering,
192(3536):39333957, Aug 2003.
[EGH00] Robert Eymard, Thierry Gallouët, and Raphaèle Herbin. Finite volume methods. Handbook of numerical analysis, 7:713–1018, 2000.
[GLW20] Yuan Gao, Jian-Guo Liu, and Nan Wu. Data-driven efficient solvers and predictions of conformational
transitions for langevin dynamics on manifold in high dimensions. arxiv preprint, 2020.
[Posml]
Washington Post. Can your face reveal how long you’ll live?, http://www.dailylife.com.au/health-andfitness/dl-fitness/can-your-face-reveal-how-long-youll-live-20140708-3bjsk.html.
[Ren97]
Robert J Renka. Algorithm 772: Stripack: Delaunay triangulation and voronoi diagram on the surface
of a sphere. ACM Transactions on Mathematical Software (TOMS), 23(3):416–434, 1997.
[ZL20]
Wei Hou Yingmei Feng Yanlei Yang Qin Han Guangliang Shan Fanyan Meng Dongshu Du Shihua
Wang Junfen Fan Wenjing Wang Luchan Deng Hongbo Shi Hongjun Li Zhongjie Hu Fengchun Zhang
Jinming Gao Hongjian Liu Xiaoxia Li Yangyang Zhao Kan Yin Xijing He Zhengchao Gao Yibin
Wang Bo Yang Ronghua Jin Ilia Stambler Lee Wei Lim Huanxing Su Alexey Moskalev Antonio Cano
Sasanka Chakrabarti Kyung-Jin Min Georgina Ellison-Hughes Calogero Caruso Kunlin Jin Robert
Chunhua Zhao Zikuan Leng, Rongjia Zhu. Transplantation of ace mesenchymal stem cells improves
the outcome of patients with covid-19 pneumonia. Aging and disease, 11(2):216, 2020.
[ZTG+ 18] Michael Zollhöfer, Justus Thies, Pablo Garrido, Derek Bradley, Thabo Beeler, Patrick Pérez, Marc
Stamminger, Matthias Nießner, and Christian Theobalt. State of the art on monocular 3d face reconstruction, tracking, and applications. In Computer Graphics Forum, volume 37, pages 523–550. Wiley
Online Library, 2018.
Department of Mathematics, Duke University, Durham, NC
E-mail address: yuangao@math.duke.edu
Southern marine science and engineering Guangdong laboratory, Zhuhai, China, Key laboratory of marine resources and coastal engineering in Guangdong province, school of marine sciences, Sunyatsen University, Guangzhou, China
E-mail address: jingzh3@mail.sysu.edu.cn; gzjinouc@gmail.com
Department of Mathematics and Department of Physics, Duke University, Durham, NC
E-mail address: jliu@math.duke.edu

