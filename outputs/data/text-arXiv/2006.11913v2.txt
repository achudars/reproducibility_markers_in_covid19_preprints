Finding Patient Zero: Learning
Contagion Source with Graph Neural Networks

Chintan Shah†1

Nima Dehmamy†2

arXiv:2006.11913v2 [cs.SI] 27 Jun 2020

Albert-László Barabási1,4

Nicola Perra3

Alessandro Vespignani1

Matteo Chinazzi1
Rose Yu1,5∗

Abstract
Locating the source of an epidemic, or patient zero (P0), can provide critical
insights into the infection’s transmission course and allow efficient resource allocation. Existing methods use graph-theoretic centrality measures and expensive
message-passing algorithms, requiring knowledge of the underlying dynamics and
its parameters. In this paper, we revisit this problem using graph neural networks
(GNNs) to learn P0. We establish a theoretical limit for the identification of P0 in
a class of epidemic models. We evaluate our method against different epidemic
models on both synthetic and a real-world contact network considering a disease
with history and characteristics of COVID-19. We observe that GNNs can identify
P0 close to the theoretical bound on accuracy, without explicit input of dynamics
or its parameters. In addition, GNN is over 100 times faster than classic methods
for inference on arbitrary graph topologies. Our theoretical bound also shows
that the epidemic is like a ticking clock, emphasizing the importance of early
contact-tracing. We find a maximum time after which accurate recovery of the
source becomes impossible, regardless of the algorithm used.

1

Introduction

The ability to quickly identify the origin of an outbreak, or “finding patient zero”, is critically
important in the effort to contain an emerging epidemic. The identification of early transmission
chains and the reconstruction of the possible paths of diffusion of the virus can be the difference
between stopping an outbreak in its infancy and letting an epidemic unfold and affect a large share of
a population. Hence, solving this problem would be instrumental in informing and guiding contact
tracing efforts carried out by public health authorities, allowing for optimal resource allocation
that can maximize the probability of an early containment of the outbreak. Disease spreading is
modeled as a contagion process on a network [46, 39] of human-to-human interactions where infected
individuals are going to transmit the virus by infecting (with a certain probability) their direct contacts.
In general, contagion processes can capture a wide range of phenomena, from rumor propagation on
social media to virus spreading over cyber-physical networks [8, 4, 52, 35]. Therefore, learning the
source of a contagion process would also have broader impact on various domains, from detecting
sources of fake news to defending malware attacks.
Learning the index case (or P0) is a difficult problem. In this paper, we model disease spreading
as a contagion process (chains of transmissions) over a graph. The evolution of an outbreak is
noisy and highly dependent on the graph structure and disease dynamics. In addition, in real-world
∗
† Equal contribution; Correspondence:
shah.ch@husky.neu.edu, nima.dehmamy@kellogg.
northwestern.edu, roseyu@eng.ucsd.edu 1 Northeastern University, Boston MA, USA , 2 Northwestern
University, Evanston IL, USA, 3 Greenwich University, London, UK 4 Harvard University, Boston MA, USA,
5
University of California San Diego, USA.

Preprint. Under review.

epidemics, there is often a delay from the start of the outbreak to when epidemic surveillance and
contact tracing starts. Hence, we might only observe the state of the graph at some intermediate
times without access to the complete chains of transmission. Furthermore, due to its stochastic nature,
the same source node might lead to different epidemic spreading trajectories. Finally, learning P0
from noisy observations of graph snapshots is computationally intractable and the complexity grows
exponentially with the size of the graph [44].
Most work in learning the dynamics of a contagion process [42, 34, 27] have focused on inferring
the forward dynamics of the diffusion. In epidemiology, for example, [40] have studied learning the
temporal dynamics of diseases spreading on mobility networks. The problem of learning the reverse
dynamics and identifying diffusion sources has been largely overlooked due to the aforementioned
challenges. Two of the most notable exceptions in the area are “rumor centrality” [44] for contagion
processes on trees and Dynamic Message-passing (DMP) on graphs [29] but both require as input the
parameters of the spreading dynamics simulations.
Our goal is to provide fresh perspectives on the problem of finding patient zero using graph neural
networks (GNNs) [16]. First, we conduct a rigorous analysis of learning P0 based on the graph
structure and the disease dynamics, allowing us to find conditions for identifying P0 accurately. We
test our theoretical results on a set of epidemic simulations on synthetic graphs commonly used in
the literature [14, 1]. We also evaluate our method on a realistic co-location network for the greater
Boston area, finding performance similar to the synthetic data. To the best of our knowledge, our
work is the first to tackle the patient zero problem with deep learning and to test the approach on a
realistic contact network. In summary, we make the following contributions:
• We find upper bounds on the accuracy of finding patient zero in graphs with cycles, independent of the inference algorithm used.
• We show that beyond a certain time scale the inference becomes difficult, highlighting the
importance of swift and early contact-tracing.
• We demonstrate the superiority of GNNs over state-of-the-art message passing algorithms
in terms of speed and accuracy. Most importantly, our method is model agnostic and does
not require the epidemic parameters to be known.
• We validate our theoretical findings using extensive experiments for different epidemic
dynamics and graph structures, including a real-world co-location graph of the COVID-19
outbreak.

2

Related Work

Learning contagion dynamics Learning forward dynamics of contagion processes on a graph
is a well studied problem area. For instance, [42, 12] proposed scalable algorithms to estimate
the parameters of the underlying diffusion network, a problem known as network inference. Deep
learning has led to novel neural network models that can learn forward dynamics of various processes
including neural Hawkes processes [34] and Markov decision processes-based reinforcement learning
[27]. Learning forward contagion dynamics have also been intensively studied in epidemiology
[40, 50], social science [31], and cyber-security [41]. In contrast, research in learning the reverse
dynamics of contagion processes is rather scarce. Influence maximization [20], for instance, finds a
small set of individuals that can effectively spread information in a graph, but only maximizes the
number of affected nodes in the infinite time limit. Our problem is more difficult as we care not just
about the number of infected nodes, but which nodes were infected.
Finding patient zero In order to find patient zero, we aim to learn the reverse dynamics of
contagion processes. [44] were among the first to formalize the problem on trees in the context of
modeling rumor spreading in a network. [41, 49] studied similar problems for detecting viruses in
computer networks. More recent advances proposed a dynamic message passing algorithm [29] and
belief propagation [2] to estimate the epidemic outbreak source. Fairly recently, [15] reduced the
deanonymization of Bitcoin to the source identification problem in an epidemic and analyzes the
dynamics properties. On the theoretical side, [44, 53] analyzed the quality of the maximum likelihood
estimator and rumor centrality, but only for the simple SI model on trees. [3] found detectability
limits for patient zero in the SIR model using exact analytical methods and Monte Carlo estimators.
[22, 7] proved that it is possible to construct a confidence set for the predicted diffusion source nodes
with a size independent of the number of infected nodes over a regular tree. Our work provides fresh
2

perspectives on the patient zero problem on general graphs based on the recent development of graph
neural networks
Graph neural networks Graph neural networks have received considerable attention (see several
references in [6, 58, 55, 17]). While most research is focused on static graphs, a few have explored
dynamic graphs [28, 57, 23, 38, 47]. For example, [23] propose a deep graph model to learn both the
graph attribute and structure dynamics. They use a recurrent decoder to forecast the node attributes
for multiple time steps ahead. [47] take a continuous-time modeling approach where they take the
node embedding as the input and model the occurrence of an edge as a point process. [56] propose
a temporal graph attention layer to learn the representations of temporal graphs. However, most
research is designed for link prediction tasks and none of these existing studies have studied the
problem of learning the source of the dynamics on a graph.

3

Contagion Process and Patient Zero

Finding patient zero means tracing the contagion dynamics back to its initial state and identifying
the first nodes that started spreading. Here, we describe the disease dynamics on a network using
Susceptible-Infected-Recovered (SIR) and Susceptible-Exposed-Infected-Recovered (SEIR) [21]
compartmental models that assume that infected individuals develop immunity once they recover
from the infections.
3.1

Contagion processes on networks

In the SIR model, the population is split into
three compartments: susceptible (S) who are
susceptible to infection by the disease; infected
(I) who have caught the disease and are infectious; removed (R) who are removed from consideration after experiencing the full infectious
period.
Continuous time model For a contagion process on a graph G with N nodes, each vertex Figure 1: Visualization of the patient zero probrepresents an individual who is in contact only lem: uncover the original source (red node, left)
with its neighbors. We can represent the graph given a future state of a contagion process (right).
using the adjacency matrix A ∈ RN ×N , where
A[i, j] = 1 if two individuals are connected, 0
otherwise. Let Si , Ii , Ri be the average probabilities of node i being in each of the states, with
Si + Ii + Ri = 1. The SIR dynamics on a graph is given by [37]:
X
dSi
dRi
dSi
dIi
dRi
= −β
Aij Ij Si ,
= γIi ,
+
+
= 0.
(1)
dt
dt
dt
dt
dt
j
where β is the infection rate per contact and γ the recovery/death rate. We can derive the rate of
spreading given Eqn. (1). In early stages, when Si ≈ 1, the infection spreads as


X
(1)
Ii (t) ≈
exp [t(βA − γI)]ij Ij (0) ≈ exp [(βλ1 − γ)t] ψ (1) · I(0) ψi ,
(2)
j

Here, I is the identity matrix, λ1 is the largest eigenvalue of A and ψ (1) is the corresponding
eigenvector. The basic reproductive rate of a disease R0 ≡ βλ1 /γ is defined as the number of
secondary infections created by an index case in a fully susceptible population [19]. The disease will
spread and result in an epidemic if R0 > 1.
Discrete time model We can also use an equivalent discrete time SIR model. Let xti ∈ {S, I, R}
be the state of node i at time t. For a susceptible node i, its probability to become infected or removed
at time t + 1 is
Y
P (xt+1
= I|xti = S) = 1 −
(1 − βAij Ii (t)) ,
P (xt+1
= R|xti = I) = γ.
(3)
i
i
j

3

The SIR model doesn’t account for the incubation period, where an individual is infected but not
infectious. This is remedied by introducing an “exposed” (E) state, leading to the SEIR model. For a
susceptible node i, the probability to enter the exposed state, and becoming infectious at time t + 1 is
Y
P (xt+1
= E|xti = S) = 1 −
(1 − βAij Ii (t)) ,
P (xt+1
= I|xti = E) = α,
(4)
i
i
j

An infected node eventually enters the removed
Q state with probability γ, which is the same as SIR
(3). (3) and (4) yield (1) for very small β as j (1 − βAij Ii ) ≈ βAij Ii (proof in supp. B).
Finding patient zero Finding P0 can be formulated as a maximum likelihood estimation problem
for SIR and SEIR models. Specifically, we observe a snapshot of the state of the nodes at time step
t as xt := (xt1 , · · · , xtN ), with each node’s state xti ∈ {S, E, I, R}. The problem of finding P0 is
to search for a set of nodes Z = {i|x0i = I, i ∈ {1, · · · N }} which led to the observed state xt . A
common approach is to find Z such that the likelihood of observing xt is maximized:
Z ? = argmaxZ,|Z|≤k P (xt |Z)

(5)

where P (xt |Z) is the probability of observing xt with Z being the P0 set. We assume the number
of P0s is no larger than k. Estimating the original state of the dynamic system given the future
states requires computing the conditional likelihood P (xt |Z) exactly, which is intractable due to the
combinatorics of possible transmission routes.
3.2

Fundamental limit of finding patient zero

The technical difficulty of finding P0 in SIR and SEIR stems from: (1) presence of cycles in graphs
(higher-order transmission) (2) the removed state introducing additional uncertainty about temporal
order of infections (3) uncertainty of the exact time step of the observed states. For SI dynamics (i.e.
infection is permanent) on trees, existing theoretical results [44, 22] have established upper bounds
on the detection probability based on an estimator called “rumor centrality”. For graphs with cycles,
finding P0 becomes more elusive. We derive the fundamental limit considering the case where at
time t = 0 one node, P0, is infected and all of the other nodes are susceptible.
Ambiguity of patient zero on cyclic graphs For graph with cycles, if a cycle is embedded within
the infected subgraph, it will reduce the accuracy of predicting P0 because multiple scenarios can
lead to the same infection pattern in the cycle. For instance, take a 3-regular tree where the infection
has started from the root and spread to some level. If we remove the root and instead connect the
three children of the root as a triangle, the same infection pattern is possible with any of these three
nodes being P0. Based on this observation, the following theorem estimates the time horizon beyond
which finding P0 becomes difficult. We will focus on connected Erdős–Rényi (ER) random graphs
[14], where each edge has probability p, independent of other edges.
Theorem 1 (Time Horizon). In a connected random graph, no algorithm can accurately detect P0
after tmax time steps, approximately given by
tmax ∼

log N
γ(R0 − 1)

Proof: The proof (supp. B.8.1) follows from (2) and setting

(6)
P

i Ii (tmax )

∼ O(1)N .

The maximum detection accuracy of P0 on a connected ER would decrease when the infected
subgraph contains cycles. We focus on triangles, as they are the most prevalent cycles in a random
graph. We provide a conservative estimate assuming P0 is part of a triangle. This ignores cases where
the presence of triangles causes downstream error or the error arising from other types of cycles. We
derive an upper bound for the detection accuracy on a connected ER graph in the following theorem.
Theorem 2 (Detection Accuracy). In contagion process on a connected random graph G, with edge
probability p and with infected subgraph GI , the prediction accuracy for P0 is bounded from above
Pmax <

|GI |p
1 2
+ (1 − p)( 2 )
3 3

4

(7)

The proof (supp. B.8.2) follows from estimating number of triangles in subgraph GI of a dense ER
graph and noting each triangle can drop the accuracy of P0 to 1/3.
Figure 2 shows an example of how this upper bound behaves for different values of R0 . The graph is
a uniformly connected ER of N = 100, p = 2 log N/N and with γ = 0.4. In conclusion, on graphs
with cycles, we expect finding P0 after a time tmax ∼ O(log N ) to become difficult. This suggests
that to find P0 contact-tracing must be done promptly and in early stages.

4

Finding Patient Zero with Graph Neural Networks

We propose using GNNs for finding P0 and show that we can improve significantly upon state-ofthe-art methods, e.g. DMP. Moreover, using GNNs gives us the distinct advantage that they are
model-agnostic and do not require access to the epidemic dynamics parameters or the time t of
the graph snapshot. Our goal is not to propose a novel graph neural network architecture, but to
understand the trade-off between different probabilistic inference methods in the context of contagion
dynamics. Before we discuss our GNN solution, we briefly review Dynamic Message Passing.
Dynamic Message Passing DMP [29] estimates the probability of every node being the P0 in the
SIR model using message-passing equations and approximates the joint likelihood with a mean-field
time approach by assuming the following factorization:
Y
Y
Y
P (xt |Z) ≈
P (xti |Z)
P (xtj |Z)
P (xtk |Z)
(8)
i,xti =S

j,xtj =I

k,xtk =R

The algorithmic complexity of the DMP equations over a graph with N nodes and t ≤ T diffusion
steps is O(T N 2 hki) where hki is the average degree of the graph. Furthermore, DMP requires
providing the SIR epidemic parameters and the time t of the graph snapshot before performing
inference. For comparison, on a connected random graph, hki > log N , yielding > O(T N 2 log N )
time complexity for DMP. A trained GNN with l ∼ Dia(G) ∼ log N layers has complexity
O(N 2 log N ) in the inference step and does not require inputting the model parameters. This makes
it harder to scale DMP for large or dense graphs. DMP is proven to be exact on trees, e.g. [18], and
has been used on more general graphs with reasonable success.
Relation between Contagion Dynamics and GNNs Our use of GNNs for finding P0 is motivated
by the fact that the contagion dynamics (1) are a special case of Reaction-Diffusion (RD) processes
on graphs [10] which is structurally equivalent to GNNs, as shown in the following proposition.
Proposition 1. Reaction-diffusion dynamics on graphs is structurally equivalent to the messagepassing neural network ansatz.
Denoting pµi (t) ≡ P (xti = µ) of node i being in states such as µ ∈ {S, I, R} or µ ∈ {S, E, I, R} at
time t, a Markovian reaction-diffusion dynamics can be written as
!
!

X 
X
µ
µ
µ
µ ν
µ
pi (t + 1) = σ
F Aij · h(pj )
,
ha (pi ) = σ
Wa,ν pi + b
(9)
ν

j

Aaij

where
= θ(Aij )f (A)ij with θ(·) being the step function and σ(·) a nonlinear function. RD on
graphs is structurally equivalent to Message-passing Neural Networks (MPNN) [16], as RD involves
a message-passing step and a node-wise interaction among features (Supp. B.3), same as MPNN.
We choose the simpler architecture of GCN as in (10) instead of general MPNN. Finding P0 requires
learning the backward dynamics of RD, which seems to require the inverse of the propagation rule
(PR). Yet, each node can only get infected by its neighbors, so even the backward dynamics requires
message passing over the same adjacency matrix and should again have the structure of RD.
4.1

Learning with Graph Neural Networks

We employ a state-of-the-art GNN design, suggested by [13]. We make several modifications to the
model architecture to fit our problem. Given one-hot encoded node states xti ∈ {0, 1}M as the GNN
input, where M is the number of states and where the states are either {S, E, I, R} or {S, I, R},
(0)
we first apply a linear transformation hi = U xti with U ∈ RC×M . Denote the output of layer l
5

(l)

by hi , where i is the node index. We use graph convolutional network (GCN) [24] in each layer
g(h) = σg (f (A) · h · W + b), where W ∈ RC×C , b ∈ RC and f is called the propagation rule
P
in GCN. We use f (A) = D−1/2 AD−1/2 for the propagation rule, where Dij = δij k Aik is the
degree matrix. To include features of the central node, instead of adding self-loops, we use residual
connections between GCN layers and notice a significant increase in model performance. The action
of these higher GNN layers can be summarized as


(l+1)
(l)
(l)
(L)
hi
= hi + σ BN(g(hi )) ,
yi = P · ReLU(Q · hi )
(10)
where L is the number of layers and the output layer is parameterized by Q ∈ RD×D and P ∈ R1×D
to generate yi ∈ R, representing the probability that node i is P0. BN(·) denotes Batch Normalization
and σ(·) is a leaky-relu nonlinear activation function.
Architecture design guideline Using GNN to find P0 requires designing the appropriate neural
network architecture. The following proposition provides a guideline on choosing the depth of a
GNN based on the diameter of the underlying graph.
Proposition 2. In the worst case, after τ steps of RD dynamics on a graph with diameter Dia(G),
we need lM P > min (τ, Dia(G)) layers of message-passing (MP) to be able to identify all P0.
See supp. B.7 for proof. The intuition is that, each MP step can incorporate neighbors one more step
away. Since after τ steps P0 and the last infected nodes can be upto Dia(G) steps apart, any GNN
architecture doesn’t need to be much deeper than the diameter of the graph. Random graphs generally
have very short diameters, around Dia(G) ∼ log N , but geometric graphs, such as the Random
Geometric Graph (RGG), where nodes connect to nodes close-by, have larger diameters roughly
Dia(G) ∼ N 1/d where d is the dimensions of the space. For example, if there are no long-distance
travels, the contact network of people in a town or city is roughly an RGG in 2D.

5

Experiments

We perform extensive studies on performance of our GCNs in finding P0 in SIR and SEIR dynamics
over synthetic graphs with various graph topologies. In addition, we generate synthetic epidemic
outbreaks on top of a real world co-location network using a SEIR compartmental model that is
calibrated to simulate a contagion process with characteristics similar to a COVID-19 outbreak.
Experimental Setup We compare the performance of DMP [29] and different variants of GCNs,
following the architecture we described in sec. 4.1:
• DMP: Dynamic Message Passing algorithm
[29], we sample a graph snapshot O at time t with each node having a state xti ∈ {S, I, R}, and
select the node i that has the highest likelihood of generating O, that is P0= argmaxi P (O|x0i = I).
• GCN-S: symmetric GCN [24] f (A) = D1/2 AD1/2 , GCN-R: random walk f (A) = D−1 A, GCN-M:
mixture of propagation rules f (A) = A||D1/2 AD1/2
• GAT: Graph Attention Network [48]
We train our models using DGL [51] with a PyTorch backend. The task is to predict the probability
for each node being P0 given a single graph snapshot. We train the model with an ADAM optimizer
for 150 epochs with an initial learning rate of 0.003 and decay the learning rate by 0.5 when the
validation loss plateaus with a patience of 10 epochs. We perform hyperparameter tuning over a
validation set with a random search strategy. We sweep over the hyperparameter space and track our
experiments using Weights and Biases [5] choosing the model with the lowest validation error. We
run our experiments on Nvidia 2080Ti GPUs and report performance averaged over 4 random seeds.
We additionally report inference run times.
Evaluation Metrics We use top-1 accuracy to understand the effectiveness of our method. However,
due to the ambiguity of detecting patient zero, as elaborated in our theoretical analysis, top-1 accuracy
may not be the only evaluation measure to be relied upon. Therefore we also calculate the normalized
1 P
rank defined by Rt = 1 −
ru where Dt is the set of test samples at time t, N is the size
|Dt |N u∈Dt
6

Performance Comparison on Synthetic Graphs

Accuracy of P0

1.0

DMP

0.8

GCN-S

GCN-R

GCN-M

0.6
0.4
0.2
0.0

BA-Tree

BA-Dense

ER-Dense

Inference times

GAT

Dataset

DMP

GCN

GAT

BA-Tree
BA-Dense
ER-Dense
Geometric

14.40 hr
77.04 hr
71.77 hr
70.35 hr

3.89s
4.91s
4.93s
5.34s

3.18s
8.19s
9.66s
10.87s

Geometric

Figure 3: Mean Prediction accuracy/speed comparison for different methods for the test set over
T = 30 steps and R0 = 2.5. The time to perform inference over the test set for different models have
been listed above. Note that the time taken by GCN represents the mean time taken by GCN variants.
We observe that GNNs beat DMP by a large margin both in terms of speed and accuracy.
of the graph and ru is the index of the ground truth P0 in the reverse-sorted probability distribution.
Normalized rank is a retrieval metric that tells us how high the correct patient zero was in the learned
output distribution. It demonstrates the quality of the output distribution in learning the stochastic
dynamics and helps us understand how high was P0 ranked even if it was not ranked the first.
5.1

Experiments with Synthetic Networks

We use three graph models: ER random graph, Barabási-Albert (BA) graph
 [1] and Random Geometric Graph (Geometric or RGG) [11]. The density of all three (|E|/ N2 ) is adjustable, but BA can
produce exact trees. Fixing the number of nodes to N = 1, 000, we first obtain one random instance
of tree BA, and dense BA, ER and Geometric graphs with |E| ≈ 10, 000 using the NetworkX library
[36] and then use NDLib [43] to simulate SIR and SEIR epidemic dynamics on the graph (supp. A.1).
For each sample graph, we pick a P0 seed node i at random to be the patient zero at time t = 0 and
then we run S(E)IR a fixed number of steps T . The epidemic parameters (α, β, γ) are chosen such
that we can vary R0 to study model performance. We set γ = 0.4 and β = R0 γ/λ1 where λ1 is the
largest eigenvalue of the graph. For SEIR, we set α = 0.5. We generate 20, 000 simulations and
use 80 − 10 − 10 train-validation-test split. For each sample we select t ∈ {1, · · · T } uniformly at
random and try to predict P0 at time t = 0 given the graph adjacency matrix A and node features xti .
We first compare the top-1 prediction accuracy in SIR
and SEIR for different models averaged over 1 ≤
t ≤ T . Fig 3 compares the prediction accuracy and
average inference time for different models. We can
see that GNN-based models outperform the baseline
DMP both in accuracy and efficiency. We also want
to note that the training time for GNNs is under 7
hours, significantly less than the fastest DMP run
of 14.40 hr. It is also worth emphasizing that DMP
requires explicit input of β, γ and t while GNNs are
model agnostic.

Empirical Accuracy vs Theory

1.2

R0 = 2.5(acc)
R0 = 3.5(theo)
R0 = 3.5(acc)

R0 = 1.5(theo)
R0 = 1.5(acc)
R0 = 2.5(theo)

1.0
0.8
0.6
0.4
0.2
0.0
0.0

0.5

1.0

1.5

2.0

2.5

Time/tmax

3.0

3.5

4.0

To validate our theory, we plot the theoretical ac- Figure 2: Theoretical upper bound on accucuracy upper-bound and the empirical accuracy ob- racy (dashed line) vs experimental (solid line)
tained from GNN in Fig. 2. We note that the time on ER for varying R0 . While accuracy drops
scale and amount of drops are consistent with our below the theoretical limit at t ∼ tmax .
theoretical results on tmax (6) and the upper bound
on accuracy Pmax (7). Combined with the fact that all our GNN models have comparable accuracies,
this suggests that our GCN-based models may be approaching the fundamental limits we described
in 3.2.
Fig. 4 shows the trend of accuracy decay over the time steps t for different graph structures and R0
values. As expected, the accuracy is highest on a tree and when t is small. In graphs with cycles
(BA-Dense, ER-Dense, and Geometric) we also observe a nontrivial drop in accuracy which depends
both on t and R0 . For SIR we observe a drop in accuracy as a function of R0 and time, consistent
with our theoretical upper bound. The decay is slower for SEIR as the latent stage adds a delay to
the spread of the epidemic. The normalized rank of P0 remains high even over longer time horizons,
indicating that P0 could be narrowed down to small subset of the population with impressive accuracy.
7

SIR
Accuracy
SEIR
Accuracy
SIR
Rank
SEIR
Rank

1.0
0.8
0.6
0.4
0.2
1.0
0.8
0.6
0.4
0.2
1.0

(a) BA-Tree

(b) BA-Dense

(c) Geometric

(d) ER-Dense

0.8
0.6

1.00
0.97
0.94
0.91

R0 = 1.5
R0 = 2.5
R0 = 3.5

1 5 9 13 17 21 25 29 1 5 9 13 17 21 25 29 1 5 9 13 17 21 25 29 1 5 9 13 17 21 25 29
Time Steps

Time Steps

Time Steps

Time Steps

Figure 4: Performance of GCN-S for SIR and SEIR epidemic dynamics as top-1 accuracy over the
test set. The top-1 recovery accuracy of P0 vs time (first and second row) and normalized rank of P0
(third and fourth row) for different graph topologies with varying R0 values. Note that in BA-Tree
(a), which is a tree, the accuracy remains fairly high in both SIR and SEIR, consistent with existing
literature, and confirming that cycles significantly reduces accuracy of P0. Performance as normalized
rank over the test set indicates that P0 can be narrowed down to a small subset of the population.

5.2

Experiments with Boston co-location network and COVID-19 epidemic trajectory

Our real-world dataset consists of a co-location graph and simulations of an epidemic with the
natural progression of COVID-19. The co-location graph is constructed using the Cuebiq data
(https://www.cuebiq.com/about/data-for-good/ derived from [26, 25]) for two weeks from
23 March, 2020 to 5 April, 2020 (N = 384, 590 nodes). To reduce computational costs, we sample a
subgraph with N = 2, 689 nodes and |E| = 30, 376 edges while maintaining the degree distribution
and connectivity patterns of the original graph. For the epidemic simulations, we run a modified SEIR
model with asymptomatic infectious states on the co-location graph with R0 resembling COVID19 [9] and accordingly set R0 = 2.5. Each simulation contains 1 patient zero, selected uniformly
at random. The simulation is run for 50 days. We create a dataset with 10, 000 samples and an
80 − 10 − 10 train-validation-test split (supp. C).
The top-k accuracy performance over different days when the graph snapshot was observed are shown
in Fig. 5a. We can see that the top-1 accuracy falls steadily over time, the top-(10, 20) accuracy
remains fairly high for the first two weeks suggesting that we can retrieve P0 in the most likely 20
nodes out of a total 2, 689 candidates.
Top-k Accuracy

Normalized Rank

Interesting, while the top-1 accuracy
1.00
1.0
decreases significantly, degrading by
0.8
50% after 14 days, using normalized
0.96
0.6
rank, the model can narrow down the
k=1
0.4
0.92
set of patient zeros accurately even
k = 10
0.2
k = 20
R0 = 2.5
later in the epidemic, as shown in
0.88
0.0
1 8 15 22 29 36 43
1 8 15 22 29 36 43
Fig 5b. For the normalized rank, P0
Days
Days
can be recovered fairly accurately in
(a) Top-k accuracy
(b) Normalized rank
the first two weeks of the epidemic.
These results highlight an important
Figure 5: Performance on Boston co-location network with
trade-off between accurately detersimulations following the natural history of COVID-19.
mining patient zero and retrieving the
Shown here are the top-k accuracy and normalized rank.
general infected region.
8

6

Conclusion

We study contagion dynamics on a graph using graph neural networks (GNNs) to learn the reverse
dynamics of contagion processes and predict patient zero. We evaluate our method against different
epidemic models on both synthetic and a real-world contact network with a disease with the natural
history and characteristics of COVID-19. We observe that GNNs can efficiently infer the source of an
outbreak without explicit input of dynamics parameters. Most notably, GNN accuracy approaches our
predicted theoretical upper bound, indicating that further architecture refinements may not improve
performance significantly. In addition, GNN is over 100x faster for inference than classic methods for
arbitrary graph topologies. Extensions of this work may include learning using sequences of graph
snapshots, as well as allowing a set of patient zeros.

Broader Impact
This work will have a direct impact on improving societal resilience against epidemics, introducing
new computational tools to disease modeling, and informing and educating about the science of virus
transmission and prevention. Misuse of our research can lead to political biases and legitimizing
conspiracy theories of disease origin. The other ethical challenge of our framework is data privacy.
The mobility data used in this study – provided by Cuebiq through its Data for Good program
(https://www.cuebiq.com/about/data-for-good/) – are aggregated and privacy-enhanced
mobility data for academic research and humanitarian initiatives. These first-party data are collected
from users who have opted in to provide access to their GPS location data anonymously, through
a GDPR-compliant framework. Furthermore, in our analysis the geospatial information is used
only to create a series of co-location events that are used as proxy for human-to-human contacts.
Geolocation information is not actually used to conduct the research and no user-sensitive information
is available to us. On the technical side, our work highlights an aspect of graph neural networks
which has been largely ignored, namely whether or not certain inference problems on graphs are at
all information-theoretically possible. We find that in a general class of dynamic problems on graphs,
including epidemics and spreading of news or misinformation, finding the source requires prompt
action and that past a certain time it will be exceedingly difficult to find the source.

Acknowledgements
We thank Brennan Klein, Timothy LaRock, Stefan McCabe, Leo Torres, Lisa Friedland, and Maciej
Kos for the help provided in processing and preparing the mobility data. We thank Brennan Lake,
Filippo Privitera, and Zachary Cohen for their continuous support and assistance in using Cuebiq’s
data. We refer to http://covid19.gleamproject.org/mobility for additional analyses on
the impact of COVID-19 on mobility and contact patterns in the United States. M.C. and A.V.
acknowledge support from Google Cloud and Google Cloud Research Credits program to fund this
project. This work was supported in part by NSF #1850394, ONR-OTA (N00014-18-9-0001), Google
Faculty Research Award and Adobe Data Science Research Award. The findings and conclusions in
this study are those of the authors and do not necessarily represent the official position of the funding
agencies, the National Institutes of Health or U.S. Department of Health and Human Services.

References
[1] Réka Albert and Albert-László Barabási. Statistical mechanics of complex networks. Reviews of modern
physics, 74(1):47, 2002.
[2] Fabrizio Altarelli, Alfredo Braunstein, Luca Dall’Asta, Alejandro Lage-Castellanos, and Riccardo
Zecchina. Bayesian inference of epidemics on networks via belief propagation. Physical review letters, 112(11):118701, 2014.
[3] Nino Antulov-Fantulin, Alen Lančić, Tomislav Šmuc, Hrvoje Štefančić, and Mile Šikić. Identification
of patient zero in static and temporal networks: Robustness and limitations. Physical review letters,
114(24):248701, 2015.
[4] Andrea Baronchelli. The emergence of consensus: a primer. Royal Society open science, 5(2):172189,
2018.
[5] Lukas Biewald. Experiment tracking with weights and biases, 2020. Software available from wandb.com.

9

[6] Michael M Bronstein, Joan Bruna, Yann LeCun, Arthur Szlam, and Pierre Vandergheynst. Geometric deep
learning: going beyond euclidean data. IEEE Signal Processing Magazine, 34(4):18–42, 2017.
[7] Sébastien Bubeck, Luc Devroye, and Gábor Lugosi. Finding adam in random growing trees. Random
Structures & Algorithms, 50(2):158–172, 2017.
[8] Damon Centola and Michael Macy. Complex contagions and the weakness of long ties. American journal
of Sociology, 113(3):702–734, 2007.
[9] Matteo Chinazzi, Jessica T. Davis, Marco Ajelli, Corrado Gioannini, Maria Litvinova, Stefano Merler, Ana
Pastore y Piontti, Kunpeng Mu, Luca Rossi, Kaiyuan Sun, Cécile Viboud, Xinyue Xiong, Hongjie Yu,
M. Elizabeth Halloran, Ira M. Longini, and Alessandro Vespignani. The effect of travel restrictions on the
spread of the 2019 novel coronavirus (covid-19) outbreak. Science, 368(6489):395–400, 2020.
[10] Vittoria Colizza, Romualdo Pastor-Satorras, and Alessandro Vespignani. Reaction–diffusion processes and
metapopulation models in heterogeneous networks. Nature Physics, 3(4):276–282, 2007.
[11] Jesper Dall and Michael Christensen. Random geometric graphs. Physical review E, 66(1):016121, 2002.
[12] Nan Du, Le Song, Manuel Gomez Rodriguez, and Hongyuan Zha. Scalable influence estimation in
continuous-time diffusion networks. In Advances in neural information processing systems, pages 3147–
3155, 2013.
[13] Vijay Prakash Dwivedi, Chaitanya K. Joshi, Thomas Laurent, Yoshua Bengio, and Xavier Bresson.
Benchmarking graph neural networks, 2020.
[14] Paul Erdös, Alfréd Rényi, et al. On random graphs. Publicationes mathematicae, 6(26):290–297, 1959.
[15] Giulia Fanti and Pramod Viswanath. Deanonymization in the bitcoin p2p network. In Advances in Neural
Information Processing Systems, pages 1364–1373, 2017.
[16] Justin Gilmer, Samuel S Schoenholz, Patrick F Riley, Oriol Vinyals, and George E Dahl. Neural message
passing for quantum chemistry. In Proceedings of the 34th International Conference on Machine LearningVolume 70, pages 1263–1272. JMLR. org, 2017.
[17] Palash Goyal and Emilio Ferrara. Graph embedding techniques, applications, and performance: A survey.
Knowledge-Based Systems, 151:78–94, 2018.
[18] Yashodhan Kanoria, Andrea Montanari, et al. Majority dynamics on trees and the dynamic cavity method.
The Annals of Applied Probability, 21(5):1694–1748, 2011.
[19] Matt J Keeling and Pejman Rohani. Modeling infectious diseases in humans and animals. Princeton
University Press, 2011.
[20] David Kempe, Jon Kleinberg, and Éva Tardos. Maximizing the spread of influence through a social
network. In Proceedings of the ninth ACM SIGKDD international conference on Knowledge discovery and
data mining, pages 137–146, 2003.
[21] William Ogilvy Kermack and Anderson G McKendrick. A contribution to the mathematical theory of
epidemics. Proceedings of the royal society of london. Series A, Containing papers of a mathematical and
physical character, 115(772):700–721, 1927.
[22] Justin Khim and Po-Ling Loh. Confidence sets for the source of a diffusion in regular trees. IEEE
Transactions on Network Science and Engineering, 4(1):27–40, 2016.
[23] Thomas Kipf, Ethan Fetaya, Kuan-Chieh Wang, Max Welling, and Richard Zemel. Neural relational
inference for interacting systems. arXiv preprint arXiv:1802.04687, 2018.
[24] Thomas N Kipf and Max Welling. Semi-supervised classification with graph convolutional networks.
arXiv preprint arXiv:1609.02907, 2016.
[25] Brennan Klein et al. Reshaping a nation: Mobility, commuting, and contact patterns during the covid-19
outbreak, 2020.
[26] Brennan Klein, T LaRocky, S McCabey, L Torresy, Filippo Privitera, Brennan Lake, Moritz UG Kraemer,
John S Brownstein, David Lazer, Tina Eliassi-Rad, et al. Assessing changes in commuting and individual
mobility in major metropolitan areas in the united states during the covid-19 outbreak, 2020.
[27] Shuang Li, Shuai Xiao, Shixiang Zhu, Nan Du, Yao Xie, and Le Song. Learning temporal point processes
via reinforcement learning. In Advances in neural information processing systems, pages 10781–10791,
2018.
[28] Yaguang Li, Rose Yu, Cyrus Shahabi, and Yan Liu. Diffusion convolutional recurrent neural network:
Data-driven traffic forecasting. In International Conference on Learning Representations (ICLR), 2018.
[29] Andrey Y Lokhov, Marc Mézard, Hiroki Ohta, and Lenka Zdeborová. Inferring the origin of an epidemic
with a dynamic message-passing algorithm. Physical Review E, 90(1):012801, 2014.
[30] Naoki Masuda and Petter Holme. Temporal network epidemiology. Springer, 2017.

10

[31] Yasuko Matsubara, Yasushi Sakurai, B Aditya Prakash, Lei Li, and Christos Faloutsos. Rise and fall
patterns of information diffusion: model and implications. In Proceedings of the 18th ACM SIGKDD
international conference on Knowledge discovery and data mining, pages 6–14, 2012.
[32] Brendan D McKay et al. Practical graph isomorphism. Department of Computer Science, Vanderbilt
University Tennessee, USA, 1981.
[33] Brendan D. McKay and Adolfo Piperno. Practical graph isomorphism, ii. Journal of Symbolic Computation,
60:94 – 112, 2014.
[34] Hongyuan Mei and Jason M Eisner. The neural hawkes process: A neurally self-modulating multivariate
point process. In Advances in Neural Information Processing Systems, pages 6754–6764, 2017.
[35] Bimal Kumar Mishra and Neha Keshri. Mathematical model on the transmission of worms in wireless
sensor network. Applied Mathematical Modelling, 37(6):4103–4111, 2013.
[36] NetworkX developer team. Networkx, 2014.
[37] Mark Newman. Networks: an introduction. Oxford university press, 2018.
[38] Aldo Pareja, Giacomo Domeniconi, Jie Chen, Tengfei Ma, Toyotaro Suzumura, Hiroki Kanezashi, Tim
Kaler, and Charles E Leisersen. Evolvegcn: Evolving graph convolutional networks for dynamic graphs.
arXiv preprint arXiv:1902.10191, 2019.
[39] Romualdo Pastor-Satorras, Claudio Castellano, Piet Van Mieghem, and Alessandro Vespignani. Epidemic
processes in complex networks. Reviews of modern physics, 87(3):925, 2015.
[40] Romualdo Pastor-Satorras and Alessandro Vespignani. Epidemic spreading in scale-free networks. Physical
review letters, 86(14):3200, 2001.
[41] B Aditya Prakash, Jilles Vreeken, and Christos Faloutsos. Spotting culprits in epidemics: How many and
which ones? In 2012 IEEE 12th International Conference on Data Mining, pages 11–20. IEEE, 2012.
[42] Manuel Gomez Rodriguez, David Balduzzi, and Bernhard Schölkopf. Uncovering the temporal dynamics
of diffusion networks. 2011.
[43] Giulio Rossetti, Letizia Milli, Salvatore Rinzivillo, Alina Sîrbu, Dino Pedreschi, and Fosca Giannotti.
Ndlib: a python library to model and analyze diffusion processes over complex networks. International
Journal of Data Science and Analytics, 5(1):61–79, Dec 2017.
[44] Devavrat Shah and Tauhid Zaman. Rumors in a network: Who’s the culprit? IEEE Transactions on
information theory, 57(8):5163–5181, 2011.
[45] Nino Shervashidze, Pascal Schweitzer, Erik Jan van Leeuwen, Kurt Mehlhorn, and Karsten M Borgwardt.
Weisfeiler-lehman graph kernels. Journal of Machine Learning Research, 12(Sep):2539–2561, 2011.
[46] Daniel W Stroock and SR Srinivasa Varadhan. Multidimensional diffusion processes. Springer, 2007.
[47] Rakshit Trivedi, Mehrdad Farajtabar, Prasenjeet Biswal, and Hongyuan Zha. Dyrep: Learning representations over dynamic graphs. In International Conference on Learning Representations, 2019.
[48] Petar Veličković, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua Bengio.
Graph attention networks. arXiv preprint arXiv:1710.10903, 2017.
[49] Soroush Vosoughi, Mostafa ‘Neo’ Mohsenvand, and Deb Roy. Rumor gauge: Predicting the veracity of
rumors on twitter. ACM transactions on knowledge discovery from data (TKDD), 11(4):1–36, 2017.
[50] Emilia Vynnycky and Richard White. An introduction to infectious disease modelling. OUP oxford, 2010.
[51] Minjie Wang, Lingfan Yu, Da Zheng, Quan Gan, Yu Gai, Zihao Ye, Mufei Li, Jinjing Zhou, Qi Huang,
Chao Ma, Ziyue Huang, Qipeng Guo, Hao Zhang, Haibin Lin, Junbo Zhao, Jinyang Li, Alexander J Smola,
and Zheng Zhang. Deep graph library: Towards efficient and scalable deep learning on graphs. ICLR
Workshop on Representation Learning on Graphs and Manifolds, 2019.
[52] Yini Wang, Sheng Wen, Yang Xiang, and Wanlei Zhou. Modeling the propagation of worms in networks:
A survey. IEEE Communications Surveys & Tutorials, 16(2):942–960, 2013.
[53] Zhaoxu Wang, Wenxiang Dong, Wenyi Zhang, and Chee Wei Tan. Rumor source detection with multiple
observations: Fundamental limits and algorithms. ACM SIGMETRICS Performance Evaluation Review,
42(1):1–13, 2014.
[54] Boris Weisfeiler and Andrei A Lehman. A reduction of a graph to a canonical form and an algebra arising
during this reduction. Nauchno-Technicheskaya Informatsia, 2(9):12–16, 1968.
[55] Zonghan Wu, Shirui Pan, Fengwen Chen, Guodong Long, Chengqi Zhang, and Philip S Yu. A comprehensive survey on graph neural networks. arXiv preprint arXiv:1901.00596, 2019.
[56] Da Xu, Chuanwei Ruan, Evren Korpeoglu, Sushant Kumar, and Kannan Achan. Inductive representation
learning on temporal graphs. arXiv preprint arXiv:2002.07962, 2020.

11

[57] Jiaxuan You, Bowen Liu, Rex Ying, Vijay Pande, and Jure Leskovec. Graph convolutional policy network
for goal-directed molecular graph generation. arXiv preprint arXiv:1806.02473, 2018.
[58] Ziwei Zhang, Peng Cui, and Wenwu Zhu.
arXiv:1812.04202, 2018.

Deep learning on graphs: A survey.

12

arXiv preprint

A
A.1

Appendix
Dataset Details

Table 1 describes the details of the synthetic datasets.

Table 1: Description of the sampled graph statistics
Dataset
# of Nodes # of Edges Density Diameter
BA-Tree
BA-Dense
Geometric
ER-Dense

A.2

1,000
1,000
1,000
1,000

999
9,900
9,282
9,930

0.99
9.90
9.28
9.93

19
4
21
4

Hyper-parameter Details

Table 2: Description of hyper-parameters used. All of our models have been trained with 4 random
seeds. The initial learning rate is mentioned in the table below and additionally we decay the learning
rate by 0.5 with a patience of 10 epochs when the validation error plateaus. Note that GAT had 4
attention heads and has been trained with 5 layers due to a limitation on GPU memory.
Hyperparameters
GCN-S GCN-R GCN-M GAT
Number of Epochs
Batch Size
GNN Hidden Dim
Dropout
Number of GNN Layers
Initial Learning Rate

A.3

150
128
128
0.265
10
0.0033

150
128
128
0.265
10
0.0033

150
128
128
0.265
10
0.0033

150
32
128
0.265
5
0.004

Notes on DMP implementation

We include DMP [29] as a baseline against our proposed GNN based method. As DMP does not have code that
is publicly available, we implemented DMP using Python for a fair comparison with GNNs. Accordingly, our
implementation of DMP uses DGL [51] which enables us to vectorize belief propagation (BP) and marginalization
and now it runs in parallel for all nodes.
Given a graph G(V, E), we observe Ot as the state of the graph with nodes i ∈ V . DMP employs MLE
estimation to determine the node iP 0 that may have led to the observed snapshot O. For a single sample in our
dataset D, we use algorithm 1. In order to implement DMP efficiently, we implemented it as a message-passing
on a graph using DGL. We sequentially initialize node and edge features for all node i and then as we obtain
N = |V | set of graphs with node i acting as P0 in Gi . DMP then allows us to obtain i = argmaxi P (O|i). The
advantage of our implementation then is that we can process all N graphs in parallel as if it were one large graph
with N 2 nodes and E 2 edges thanks to DGL’s support for batching graphs. A salient feature of using DGL is
that the message passing framework allows us to additionally process all the nodes and edges for a single time
step t in parallel. The nature of BP algorithms do not allow us to do away with the for-loop over time t and that
remains the only sequential aspect of our implementation. Finally, we use algorithm 1 to process each sample
in our test set sequentially. It should be noted that we can further vectorize over a batch of samples in our test

13

set. However, the memory required for DMP is O(bN 2 E 2 ) with b being the size of the batch and so memory
requirements quickly blow up. Accordingly, we leave this aspect of implementation for future work.

Algorithm 1: Dynamic Message Passing given graph G, snapshot O and time t
for i ∈ V do
set node i to be P0
initialize node features and edge features with eq (12, 13) in DMP;
for (t = 0; t < t; t = t + 1) do
for e ∈ E do
perform message passing with eq (15, 16, 17) in DMP
for j ∈ V do
marginalize and update node states with eq (18, 19, 20) in DMP.
Calculate P (O|i) with eq 21 in DMP.
return i = argmaxi P (O|i)

A.4

Effect of varying number of GCN-S layers on top-1 accuracy

SIR
Accuracy

Fig. 6 shows the top-1 accuracy of P0 of the GCN-S model for varying number of layers. We do not observe a
significant effect coming from the number of layers. This may be due to the accuracy limitations with tmax and
cycles affecting all the models equally, and superseding other effects such as the diameter of the graph. Another
possible reason may be that the 20,000 samples on a graph of 1,000 nodes has many repetitions of the same P0,
resulting in both shallow and deep models memorizing patterns.

1.0
0.8
0.6
0.4
0.2

(a) BA-Tree

(b) BA-Dense

(c) Geometric

(d) ER-Dense
L=2
L=5
L=10
L=15

1 5 9 13 17 21 25 29 1 5 9 13 17 21 25 29 1 5 9 13 17 21 25 29 1 5 9 13 17 21 25 29

Time Steps

Time Steps

Time Steps

Time Steps

Figure 6: Performance of GCN-S for SIR epidemic dynamics as top-1 accuracy over the test set with
varying number of layers.

B
B.1

Theoretical Analysis
Early Stage Evolution of SIR and SEIR

The SIR equation on a graph are
X
dSi
= −β
Aij Ij Si ,
dt
j

dRi
= γIi ,
dt

dSi
dIi
dRi
+
+
= 0.
dt
dt
dt

(11)

P
In very early stages, when t  1/γ and i Ii + Ri  N , we have Si ≈ 1 and we have exponential for Ii
because
X
X
dIi
=β
Aij Ij Si − γIi ≈
(βAij − γδij ) Ij
dt
j
j
X
Ii (t) ≈
(exp[t (βA − γI)])ij Ij (0)
(12)
j

Expanding this using the eigen-decomposition A =

B.2

P

i

λi ψi ψiT yields eq. (2).

Transition Probabilities

More generally, when the graph is weighted, the probability of susceptible node i getting infected depends on
t
Aij and the probability of node j being in the infected state. For brevity, define pµ
i (t) ≡ P (xi = µ), with
µ ∈ {S, I, ..., R}. The infection probability in SIR (3) can be written as

Y
X
P (xt+1
= I|xti = S) = 1 −
1 − βAij pIj = β
Aij pIj − β 2 [ApI ]2 + O(β 3 ).
(13)
i
j

j

14

B.3

Reaction Diffusion Formulation

t
For brevity, define pµ
i (t) ≡ P (xi = µ). In a network diffusion process the assumption is that node i can only
be directly affected by state of node j if there is a connection between them, i.e. if Aij 6= 0. This restriction
means that the general reaction-diffusion process on a graph has the form

X 
Fa (A; p)µ
fa ga (A)ij ha (pj )µ
(14)
i ≡
j
µ
µ
pµ
i (t + 1) = F (A; p(t))i = σ ({Fa (A; p(t))i })

(15)

With
!
µ

ga (A)ij = θ(Aij )g̃a (A)ij

ha (pi ) = σa

X

µ
Wa,ν
pνi

+

bµ
a

(16)

ν

where θ(·) is the step function and σa (·) a nonlinear function.

B.4

Diffusion and the SI Model as Reaction Diffusion

In regular diffusion on a graph, we have two states S, I and diffusion is changing the S → I state. The
probability Pij ≡ P (xt+1
= I|xtj = S) of node i getting infected at t + 1, given node j was in the infected
i
state at time t, can be expressed in the form of is determined by the adjacency matrix Aij because node j can
I
only infect its neighbors. The infection probability is given by pIi (t + 1) = βAij pIj (t) and pS
i = 1 − pi . Hence,
for diffusion
X µ I ν
f1 (x) = x
g1 (A) = βA,
h1 (pj )µ =
δI δν pj .
(17)
ν

In regular diffusion there is no condition on the target node i and even if it is in the I state the dynamics is the
same. In the SI model, however, the infection only spreads to i if it is in the S state. Thus, we have to multiply
t
the dynamics by pS
i ≡ P (xi = S) which yields
pIi (t + 1) = βAij pIj (t)pS
i .

(18)

This can still be written as (9) by adding the extra functions
f2 (x) = x,

h2 (pj )µ =

g2 (A) = I,

X

δSµ δνS pνj

(19)

ν

and having
pi (t + 1)I = F1 (A; p(t))Ii F2 (A; p(t))S
i

(20)

where Fa = fa (ga · ha ) are as in (14). More complex epidemic spreading models such as SIR and SEIR can
also be written in a similar fashion. In SIR and SEIR the rest of the dynamic equations are linear and do not
involve the the graph adjacency A at all, meaning ga (A) = I in the rest of the equations.

B.5

Discrete Time Agent-based SIR as a Reaction Diffusion System

The agent-based models (3) and (4), which correct for double-counting of infection from multiple neighbours,
are sometimes written as
P (xt+1
= I|xti = S) = 1 − (1 − β)ξi ,
i

(21)
xtj

where ξi is the total number of neighbors j of i which are infected, meaning
= I. We will first show that this
is a special case of the form given in our paper. First, note that in (3) the terms can also be written as

Y
(1 − β)ξi =
1 − βδxtj ,I
(22)
j

In the probabilistic model, we have to replace the strict condition of j being in the I state with its probability, so
δxtj ,I → P (xtj = I) = pIj (t).
P (xt+1
= I|xti = S) = 1 −
i


Y
1 − β Âij pIj

(23)

j∈∂i

and for small β yield
P (xt+1
= I|xti = S) = β
i

X

Âij pIj − β 2

j

X
j,k

15

Âij pIj Âik pIk + O(β 3 )

(24)

P
I
which yields the simplified equation pi (t + 1)I = pS
i (t)
j β Âij pj (t). Note that if the infection rate per time
P
step β is large β j Âij pj can exceed 1, rendering (24) inconsistent with pIi being probabilities. Both (23) and
(24) both can be written in the form of RD (15) and (9). We utilize the h1 , g1 and h2 , g2 found for diffusion (17)
and SI (19)


X
µ
F1 (A; p)µ
log 1 − β Âij h1 (pj )µ
F1 (A; p)µ
(25)
i =
i = h2 (pi )
j

and defining the probability as
pIi (t

+ 1) =

F1 S
i



1 − exp

h

F2 Ii

i

=

pS
i (t)


Y
1−
1 − βAij pIj (t)

!

j

≈

βpS
i (t)

X

Aij pIj (t)

(26)

j

B.6

Graph Isomorphism and Ambiguity of Patient Zero

It may happen that the problem of finding P0 is unidentifiable when some nodes
5-step hash (RGG,N = 200, E = 650),
5-step hash (BA,N = 200, E = 199)
100 infected, 84 groups
115 infected, 38 groups
in the graph are identical. For instance,
when GI is a tree, if P0 is predicted to be
a leaf, all leaves sharing the same parent
are equally likely to be P0. In such cases,
we need to assess the accuracy of our prediction modulo automorphisms Aut(GI ).
Finding Aut(GI ) is the Graph Isomorphism (GI) problem, which is in NP, but
not known if it is NP-complete [32], with
existing algorithm being at least exponential in N [33]. We choose to use a simpler heuristic inspired by the WeisfeilerLehman (WS) graph kernel [54, 45]. A Figure 7: Equivalence classes of the quick hashing method
simple measure for encoding the local inspired by WL. Grey nodes are outside GI . The colors
structure of the graph is the number nodes indicate the equivalence classes. On the tree (right) GI has
(l)
ni within a distance l from node i. We 115 nodes, but only 38 distinguishable groups. The Random
label each node by the sequence ni = Geometric Graph (left), however, with |GI | = 100 has 84
(1)
(l
)
(1)
(ni , ..., ni max ). ni is the degree of groups.
(l)
node i and we have ni = θ(AlI )1 with
l
AI being the lth power of the adjacency matrix of the GI and θ(·) the step function.
Figure 7 shows that on trees there are many equivalent nodes, even non-leaf nodes. However, the structure
of contact networks where diseases spread is much more localized, similar to a “Random Geometric Graph”
(RGG). Left of Figure 7 shows that on RGG, the level of node equivalence is far less, with most nodes being
distinguishable. In general, we find non-tree graphs with sufficient randomness (e.g. RGG and random graphs),
there are very few equivalent nodes in small graphs. Hence, we believe in realistic settings this ambiguity won’t
play a major role in identifiability of P0.

B.7

Proofs

Proposition 3. Reaction-diffusion dynamics on graphs is structurally equivalent of the message-passing neural
network ansatz.
Proof: Analyzing the full stochastic model requires closely tracking the individual events and varies in each
run. Hence, we will work with mean-field diffusion dynamics using transition probabilities, instead. Denoting
pµi (t) ≡ P (xti = µ) of node i being in states such as µ ∈ {S, I, ..., R} at time t, a Markovian reaction-diffusion
dynamics can be written as
!
!

X 
X µ ν
µ
µ
µ
µ
pi (t + 1) = σ
F Aij · h(pj )
,
ha (pi ) = σ
Wa,ν pi + b
(27)
ν

j

where Aaij = θ(Aij )f (A)ij with θ(·) being the step function and σ(·) a nonlinear function. To see this, note that
RD processes on graphs involve a message-passing (MP) step (e.g. an infection signal coming from neighbors
of a node), and a reaction step where messages of different states µ passed to node i interact with each other

16

on node i. RD dynamics such as the SIR and SEIR models are also Markovian and the probability pµ
i (t) only
depends on the probabilities at t − 1. These are also the conditions satisfied by MPNN. In (27), A are a set of
propagation rules for the messages, which are only nonzero where A is nonzero, same as the aggregation rule in
MPNN. To have interactions between states µ occurring inside each fixed node i, h(pi ) can mix the states µ
but not change the node index i, leading to the form of h(pi ) in (27), which is the general ansatz for a neural
network with weight sharing for nodes, same as in MPNN, and graph neural networks in general.
Proposition 4. In the worst case, after τ steps of RD dynamics on a graph with diameter Dia(G), we need
lM P > min (τ, Dia(G)) layers of message-passing (MP) to be able to identify all P0 .
Proof: From (27), the MP step states that the state of node i at time t is only affected directly by its first neighbors
at time t − 1. By induction, at t − τ all nodes at most τ steps away from i can have affected its state, meaning

pi (t)µ = Fτ {pνj (t − τ )|ν = S, · · · , R; Aτij 6= 0}
(28)
The j for which Aτij 6= 0 are the nodes at most τ steps away from i. Assuming G is connected, define the

diameter of graph Dia(G) ≡ minl Alij 6= 0, ∀i, j , i.e. the maximum shortest distance between any two nodes.
Clearly, when τ ≥ Dia(G), the state of any node will depend on all other nodes in the past and |GI | = |G| = N .
After τ steps, P0 and the last infected nodes i can be a graph distance τ apart. In the worst case, finding P0
requires the MP function pP 0 calculated at node P0 to incorporate the last infected nodes. From (28), when
lM P < τ < Dia(G), with lM P MP steps it is impossible for pP 0 to become a function of a node i which is a
distance of more than lM P away. Hence we need at least τ MP steps, unless τ > Dia(G), in which case we can
go from any node to any other with lM P = Dia(G) MP steps.

Accuracy Drop and tmax

B.8
B.8.1

Proof of Theorem 1

1.0

0.8
Proof: To show this we will establish
bounds on the cycles the contagion may
S
0.6
encounter on a connected ER graph. Let
I
GI be the subgraph of G to which the
R
epidemic has spread, which includes all
0.4
[ (R0 1)(t tmax)]
nodes in the I and R states. ER graphs
are known to be locally tree-like, because
0.2
the probability of three connected
nodes
to


make a triangle is c = N3 p3 / N3 p2 =
0.0
p, same as edge probability. Using (2),
0
5
10
15
20
25
30
being locally tree-like means descendent
Time
nodes are likely not yet infected, allowing the exponential growth to persist until Figure 8: A logistic curve around the predicted tmax yields a
P
|GI | ∼ O(N
P ). However, the exponential good fit for the behavior of i Si (t).
growth of i Ii (t) in (2) leads to a depletion of susceptible nodes and a slow-down
P
of the epidemic. In fact, a logistic curve is a good approximation of the i Si (t) ≈ σ[γ(R0 − 1)(t − tmax )],
because in (1) when Ri ≈ 0, dSi /dt ≈ βAij (1 − Si )Si , which is a logistic equation. When t < tmax , the
logistic function is exponential,
as in (2), and it slows down when an O(1) fraction of nodes are infected, or
P
|GI | ∼ O(1)N . Setting i Ii (tmax ) + Ri (tmax ) ∼ O(1)N in (2), we get tmax ∼ log N/(βλ1 − γ), since
log O(1) ∼ 0. Plugging in R0 = βλ1 /γ, we obtain (6).

B.8.2

Proof of Theorem 2 Ptri

Proof: If P0 is in a triangle, we may miss it 2/3 of the times. Thus, the probability of detecting P0 is bounded by
P < 1 − Ptri × 2/3, where Ptri is the probability that P0 is in a triangle. Since edges in G are uncorrelated,
each having probability p, GI is also a connected random graph with the same edge probability p. Hence, in
GI all nodes have degree k ≈ p|GI |. Ptri is one minus the probability that none of the k neighbors of P0 are
|GI |p
connected, i.e. Ptri = 1 − (1 − p)( 2 ) , which proves the proposition.

C

Covid-19 Data and Simulations

Geolocation data Mobility data are provided by Cuebiq, a location intelligence and measurement platform.
Through its Data for Good program (https://www.cuebiq.com/about/data-for-good/), Cuebiq provides
access to aggregated and privacy-enhanced mobility data for academic research and humanitarian initiatives.
These first-party data are collected from users who have opted in to provide access to their GPS location data
anonymously, through a GDPR-compliant framework. Additionally, Cuebiq provides an estimate of home
17

Histogram of log(degrees) - 10 bins (Original Graph with 384, 590 nodes)

80000
60000
40000
20000
0

Histogram of log(degrees) - 10 bins (Original Graph with 2, 689 nodes)
600

Frequency

Frequency

100000

1

2

3

4

5

log(degree)

6

7

8

400
200
0

9

(a) Degree distribution of original network

1

2

3

4

5

log(degree)

6

7

8

9

(b) Degree distribution of subsampled network

Figure 9: Degree distribution of the original co-location network with 384, 590 nodes and the
subsampled network with 2, 689 nodes. We subsample the larger network to find a subgraph in order
to reduce computational costs of our experiments. We observe that the distribution of our subsampled
network is similar to the original graph.

and work census areas for each user. In order to preserve privacy, noise is added to these “personal areas”, by
upleveling these areas to the Census block group level. This allows for demographic analysis while obfuscating
the true home location of anonymous users and preventing misuse of data.

Colocation network The method for constructing the co-location graphs is as follows. First, we split each
day into five minute time windows, resulting in 288 time bins per day. For every location event, we use its
timestamp to assign it to a time bin, then assign the longitude-latitude coordinate of the observation to an
8-character string known as a geohash. A geohash defines an approximate grid covering the earth, the area of
which varies with latitude. The largest dimensions of an 8-character geohash are 38m x 19m, at the equator.
If a user does not have an observation for a given time bin, we carry the last observation forward until there is
another observation. We finally define two users to be co-located — and therefore to have a timestamped edge
in the graph — if they are observed in the same geohash in the same time bin. Accordingly, our co-location
graph is constructed by observing the greater Boston area over two weeks from 23 March, 2020 to 5 April, 2020
and results in a graph with N = 384, 590 nodes. To reduce computational costs, we sample a subgraph with
N = 2, 689 nodes and |E| = 30, 376 edges with similar degree distribution and connectivity patterns as the
original graph and can be observed in Fig 9.

Epidemic simulations in real data. We run a SEIR model on the real co-location network. In doing so,
we select parameters and modify the structure of the model to resemble the natural history of COVID-19 [9]. At
each time step nodes, according their health status, can be in one of five compartments: S, E, I, Ia , or R. Thus,
we split infectious nodes in two categories. Those that are symptomatic (I) and those that are asymptomatic
(Ia ). The first category infects susceptible node, with probability λ per contact. The second category instead
with probability ra λ. We set ra = 0.5 and consider that probability of becoming asymptomatic as pa = 0.5.
The generation time, that is the sum of incubation (α−1 ) and infectious period (γ −1 ), is set to be 6.5 days.
Specifically, we fix α−1 = 2.5 and γ −1 = 4 days. In a single, homogeneously mixed, population the basic
reproductive number of such epidemic model is R0 = (1 − pa + ra pa )β/γ where β is the per capita spreading
rate [19]. Here however, the epidemic model unfolds on top of the real co-location network. Hence, infected
nodes are able to transmit the disease only via contacts (with susceptible individuals) established during the
observation period. As mentioned above, the value of R0 is defined by the interplay between the disease’s
parameters as well as the structural properties of the network [39, 30]. For simplicity we approximate β = hkiλ,
where hki is the average number of connections in the network. We obtain λ = 0.073 after solving for R0
and plugging in hki = 30376/2689 = 11.29. The simulations start with an initial infectious seed selected
uniformly at random among all nodes. We then read and store the time-aggregated network in memory. The
infection dynamics, which are catalysed by the contacts between infectious and nodes, take place on such
network. The spontaneous transitions instead (i.e. transition from S to E and the recovery process), take place
independently of the connectivity patterns. After the infection and recovery dynamics, we print out the status,
with respect to the disease, of each node. Finally, we create a dataset with 10, 000 samples and an 80 − 10 − 10
train-validation-test split.

18

