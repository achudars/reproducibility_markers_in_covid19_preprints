ComPass: Proximity Aware Common
Passphrase Agreement Protocol for Wi-Fi
devices Using Physical Layer Security

arXiv:2103.06763v2 [cs.CR] 27 Apr 2021

Khan Reaz and Gerhard Wunder

Abstract Secure and scalable device provisioning is a notorious challenge in Wi-Fi.
WPA2/WPA3 solutions take user interaction and a strong passphrase for granted.
However, the often weak passphrases are subject to guessing attacks. Notably, there
has been a significant rise of cyberattacks on Wi-Fi home or small office networks during the COVID-19 pandemic. This paper addresses the device provisioning problem in Wi-Fi (personal mode) and proposes ComPass protocol to supplement WPA2/WPA3. ComPass replaces the pre-installed or user-selected passphrases
with automatically generated ones. For this, ComPass employs Physical Layer Security and extracts credentials from common random physical layer parameters between devices. Two major features make ComPass unique and superior compared
to previous proposals: First, it employs phase information (rather than amplitude or
signal strength) to generate the passphrase so that it is robust, scaleable, and impossible to guess. Our analysis showed that ComPass generated passphrases have 3
times more entropy than human generated passphrases (113-bits vs. 34-bits). Second, ComPass selects parameters such that two devices bind only within a certain
proximity (≤3m), hence providing practically useful in-build PLS-based authentication. ComPass is available as a kernel module or as full firmware.

1 Introduction
Connectivity is the key to the world of business, entertainment, education, and government services. While cellular dominates mobility use-case, 802.11 a.k.a Wi-Fi
is the single most widely used technology to access the internet when it comes to
streaming movies to the smart TV at home, making a video conference call at the
workplace, or merely sharing vacation photos from a hotel room or a café. In recent
Khan Reaz, Gerhard Wunder
Institute of Computer Science, Freie Universität Berlin, Germany, e-mail: kahn.reaz@ieee.
org

1

2

K. Reaz and G. Wunder

years, consumers have also embraced Wi-Fi for connecting new types of peripherals
as part of their daily life such as Amazon Alexa powered Echo devices or Google
Connected Home or Apple Home accessories.
Quite recently, the world has faced COVID-19 pandemic. Due to the lockdown,
people relied on home Wi-Fi more than ever to work remotely. Interpol reported
an alarming rate of cyberattacks during the pandemic months [14]. The increased
number of remote-working has made an adversary more interested in the radio part
of the communication since it is more straightforward to capture packets over the
air.
The Wi-Fi Alliance has developed several security protocols over the last decades
to secure Wi-Fi communication. Nevertheless, none of the protocols provides fullproof and future-proof security. Recently, a significant flaw, popularly known as
KRACK-attack was discovered, and it heavily affected all platforms [26]. To ease
the provisioning of credentials, especially for resource-constrained devices, Wi-Fi
Alliance had developed Wi-Fi Protected Setup (WPS) protocol. It gives consumers
an easier option to set up a secure Wi-Fi connection by pushing a button (PBC
mode), or entering a PIN, or via NFC interface [33]. However, WPS has a longstanding weak security, known as WPS PIN recovery [28].
In an effort to strengthen the security of Wi-Fi, WPA3 has been recently announced (last release v3.0 on December 2020) [34]. The new standard mandates a
higher cryptographic standard (192-bit key for enterprise mode, although 128-bit
for personal mode). It replaces the Pre-Shared Key (PSK) exchange with Simultaneous Authentication of Equals (SAE) and introduces Forward Secrecy. However,
a passphrase is still used. The newly introduced Wi-Fi Easy Connect [31] replaces
all previous methods of WPS with a Public Key Cryptography (PKC) based provisioning mechanism. In Wi-Fi Easy Connect, a network owner is presumed to have
a primary device (Configurator) with a rich user interface (e.g., a smartphone or
tablet with a camera) that runs the Device Provisioning Protocol (DPP). Here, all
Enrollees have electronic or printed QR codes or human-readable strings. The Configurator scans the code (the user can also manually type in the human-readable
strings) to provision the Enrollee with credentials. DPP relies on QR code scanning, which is not at all feasible for a large number of devices (Think of a premise
to be monitored with a Wi-Fi IP camera; then all the cameras have to be scanned
and connected to the network). The Wi-Fi Alliance has released another supporting
protocol, called Enhanced Open [10]. It is an adapted version of the Opportunistic Wireless Encryption (OWE) [32] protocol that aims to mitigate attacks on open
un-encrypted wireless networks. Here, the client (STA) and the access point (AP)
generate pairwise secret by performing Diffie-Hellman (DH) key exchange during
the 4-way handshake procedure. OWE is based on PKC, and PKC is threatened by
the uprising of quantum computers [17]. It is to be noted that the exponent size used
in the DH must be selected such that it has at least double the entropy of the entire
crypto-system, i.e., if we use a group whose strength is 128-bits, we must use more
than 256-bits of randomness in the exponent used in the DH calculation [18]. This
brings to the required DH key-size of 4200 bits at its best strength estimation [18].
The large key-size is a massive burden for the IoT ecosystem [17].

ComPass

3

In recent years several works have been done to generate the secret key using
PHY-layer properties based on Shannon’s [24], Wyner’s [36], and Maurer’s [20]
seminal information-theoretic security concept. In the Physical Layer Security
(PLS) approach, the inherent reciprocity property of the wireless channel and its
varying nature (i.e. randomness) is used to agree on a key between two legitimate
transceivers. Enthusiasm among researchers gave a significant rise towards developing key generation algorithms on this principle. Most of the existing works are
based on Amplitude or Received Signal Strength (RSS) [37, 25, 40, 39]. It is because
Amplitude and RSS show reciprocity without much effort and hence can be easily
reconciled to generate a symmetric key. On the other hand, the slightest displacement of the transceivers cause the Phase to vary significantly. Xi et al. proposed the
Dancing Signal (TDS) scheme in [37]. It requires devices to be within 5cm which
is very impractical since most of the cases APs are wall-mounted or hidden to keep
away unwanted hardware access. In TDS, keys are generated from the local entropy
source instead of the randomness of the wireless channel. Their evaluation showed
a good performance since the implementation is done on a traditional computer.
This will not be the case for resource-constrained IoT devices which are known
to have low entropy [17]. From the literature, it is well established that Amplitude
or Received Signal Strength (RSS) based existing methods are slow, need iterative
communications, authenticated channel, and a large number of samples to generate
a good quality key.
We propose ComPass to tackle the challenges mentioned above. It is a new proximity aware common passphrase agreement protocol for deployable Wi-Fi network
consisting of all classes of Wi-Fi devices (hence, some devices may have no camera
or keypad). Our PLS based proposed method uses Phase information of the wireless
channel and its varying nature (i.e., randomness) to agree on a passphrase between
two legitimate transceivers. With the ComPass generated passphrase, it is possible
to generate 128/192/256-bit (or higher) key with high entropy at a minimum communication overhead. Our intention is not to replace the well known WPA2/WPA3;
instead, supplement it with the new automated passphrase generation protocol.
The paper is organized as follows. A brief introduction to Wi-Fi channel measurement is given in Sec.2. We presented the end-to-end steps of the ComPass protocol in Sec.3. and its security analysis in Sec.4. Sec.5 describes the implementation
details. Our concluding remark is given in Sec.6.

2 Preliminaries
We revisit some of the core technologies of the Wi-Fi PHY, specifically Beamforming. It utilizes the knowledge (i.e., Channel State Information (CSI)) of the MIMO
channel to improve the receiver’s throughput significantly.
In the complex baseband MIMO channel model, a vector xk = [x1 , x2 , ...xNTx ]T
is transmitted in subcarrier k using OFDM scheme. The received vector yk =
[y1 , y2 , ...yNRx ]T is then modeled as:

4

K. Reaz and G. Wunder

yk = Hk xk + Z

(1)

Hk is the channel response matrix of dimensions NRx × NTx where NRx is the maximum number of receiving antenna, NTx is the maximum number of transmitting
antenna. Hk is expressed in complex number to represent the attenuation (i.e amplitude (kHk k) and the phase shift (6 Hk )) for each subcarrier k. Z is the additive
white Gaussian noise. The CSI is expressed as a multidimensional matrix taking
H = [NRx ][NTx ][NSc ] form. NSc is the number of used data subcarriers [38, 41]. Depending on the Wi-Fi chip, protocol version, bandwidth and channel estimation
method, the size of this matrix will vary. For example, a 3 × 3 MIMO device with
a Qualcomm Atheros Wi-Fi chip operating on IEEE 802.11n 5GHz band with a
BW =20/40 MHz would report CSI as a [3][3][56/114] matrix. We refer to the IEEE
standard [13] for the detailed explanation of the IEEE 802.11 PHY procedure.

3 ComPass Protocol
Let us define entities of the ComPass protocol. Access Point is kept hidden (to reduce Evil Twin attacks) and it has an Authenticator with a rich user interface. The
Enrollee is a device with limited interface (it can have a rich user interface too). Before initiating the protocol, devices are brought within proximity (≤ 3m). Summary
of the protocol steps are as follows
(1) With a button press or after booting, the Enrollee broadcasts its name-id with
random nonce in Wi-Fi infrastructure mode. Power button or existing WPS button can be re-programmed for this purpose.
(2) Authenticator verifies and confirms the Enrollee from an app or from the system’s Wi-Fi setting.
a. Authenticator and Enrollee perform procedures as mentioned in the following sections (3.1 to 3.5) to generate a common passphrase1 . Once connected, the Authenticator sends (SSID + AP-MAC) to the Enrollee. Subsequently, it sends Enrollee’s MAC+ passphrase1 to the Access Point. This
communication is already encrypted since the Authenticator has joined the
network beforehand.
b. Enrollee switch to Wi-Fi Client mode after receiving (SSID + AP-MAC)
from the Authenticator. It sends Association request to the Access Point appending hashed passphrase1 .
c. Access Point verifies the request by comparing hashed passphrase1 . If successful, it initiates procedures as described in Sec. (3.1 to 3.5).
(3) Access Point and Enrollee generates passphrase2 in the similar way.
(4) If successful, Access Point allows Enrollee to connect and it notifies Authenticator, else Enrollee returns to step (2)b. Finally, Authenticator and Access Point
delete the passphrase1 .

ComPass

5

Authenticator and Enrollee refer to STA and the Access Point as AP. We assume that the Authenticator joins the Access Point securely either by existing
WPA2/WPA3 method or by generating their common passphrase according to the
procedures mentioned in Sec. (3.1 to 3.5). New devices can only be joined through
the Authenticator(s). In the following subsections we present the intermediate steps
of the protocol and algorithms.

3.1 Synchronized CSI Collection
In the last few years, several toolchains have been developed by researchers to extract CSI from commercial off-the-shelf (COTS) devices. Among them, the Intel
CSI Tool (ICT) by Halperin et al. [9] and the Atheros CSI Tool (ACT) by Xie
et al. [38] are widely used. The recent release of nexmon CSI extraction tool [8]
has opened the door for extracting CSI from Broadcom and Cypress chipsets. Although there are some differences between these toolchains, they all report CSI to
the firmware’s user-space in a similar fashion. Hence, ComPass remains compatible
with all of them. In this paper, we worked with ACT to implement ComPass on
devices. We have patched some of the bugs that we found in ACT. For example,
previously, the driver reported CSI for all packets, including the acknowledgment
packets (ACK). It caused one device to have more CSI data than the other. The ACT
supports up to 3 RF chains, but the SoC firmware sometimes use the Link Adaptation technique (especially in LOS scenarios) to turn off some antennas. Also, the
time stamp associated with the reported CSI was according to each device’s local
clock. It caused misalignment for our intended use of the CSI to generate a common
passphrase on both devices.
One of the first challenges of PLS method is to ensure that the collected channel
measurements are coming from the packets that are exchanged within the channel’s
coherence time. This is to make sure that the collected channel measurements on
both sides hold reciprocity property. To mitigate the unwanted effects on CSI, we
employed a Synchronous CSI Collection (SCC) procedure between the devices to
ensures that they have a common time stamp (up to a certain accuracy) and only
CSI from the correct probing packets are logged. At first, STA aligns its local clock
with AP by utilizing the Linux built-in library. AP instructs STA to start exchanging
a fixed N number of dummy packets after waiting for td seconds. Once CSI for an
incoming packet is reported, it checks for Rx × Tx combination. If Rx 6= Tx , CSI value
is dropped. After collecting CSI for N packets, the protocol moves to the Parameter
Extraction step.

6

K. Reaz and G. Wunder

3.2 Parameter Extraction
A vast body of literature on channel-based key generation, specifically those who
implemented their schemes on COTS hardware relied only on the Amplitude/RSS
part of a signal; only a very few considered to work with the Phase part [25, 29].
However, the Amplitude fluctuation of the signal is very low in proximity and in
an static environment [23]. An active adversary can generate a synthetic channel
amplitude profile to mimic the intended transceiver. Conversely, Phase varies significantly in an indoor environment while respecting the reciprocity property [35].
Thus, it is nearly impossible for an adversary to generate a synthetic phase profile.
In this paper, we investigate the Phase part of the channel frequency response.
It is to be noted that the CSI reported by the Wi-Fi SoC driver contains the channel’s cumulative frequency response and the device’s inner circuitry response as it
goes through amplification, down-conversion, packet detection phase. All this additional processing contaminate the true channel response as verified by previous
works [41, 35, 19, 27, 37, 15]. Hence, the collected CSI needs sanitizing to remove
unwanted effects.
According to Zhu et al. [41], the measured phase φk = 6 H( fk ) can be decomposed as:
sin(2π · fs · k · ζ + εθ )
φk = atan εg ·
cos(2π · fs · k · ζ )

!
− 2π · fs · k · λ + β

(2)

where gain mismatch and phase mismatch is denoted by εg , and εθ respectively.
Unknown timing offset and phase offset error is indicated by ζ and β . λ sums up the
delay caused by time-of-flight (TOF), packet detection delay (PDD) and sampling
frequency offset (SFO). Note that AWGN is omitted since it would cancel out when
comparing phases of the measured CSI from two nodes.
We adapted the decomposition method of [41] to extract the relevant parameter from the measured CSI phase. We have studied the characteristics of these five
parameters through several measurement campaigns performed at various locations
at the Freie Universität Berlin and other private apartments that included LOS and
NLOS scenarios. Our key findings are: (i) The almost sigmoidal-shaped arcus tangent function of the Eq. 2 strongly conforms in the LOS scenario and fails in the
NLOS scenario. (ii) Cumulative delay parameter, λ is almost constant, which is
expected because TOF, PDD, SFO remains static for a low mobility environment.
Conveniently, λ could be useful to filter out CSI for a packet that arrived later than
the channel coherence time Tc . (iii) εg and εθ are the only useful parameter with
good statistical properties.
This revelation of our analysis encouraged us to extract εg and εθ from the
collected CSI and proceed to the next steps. Taking the Eq. 2 as a reference decomposition model, we estimate the default value for each of the five parameters
from the ideal arctan function: εg = 0.512, ζ = −0.02812, εθ = −0.006355, λ =
−0.02762, β = 0.1326. Then we perform a non-linear least square curve-fitting operation to estimate the parameters.

ComPass

7

Algorithm 1: Related algorithms for ComPass protocol

1
2
3
4
5
6
7
8

9
10
11
12
13
14
15
16

17
18
19
20
21

22
23
24

/* Step 1: Delay Aware Parameter Extractor (DAPPER) */
Input : CSI-phase: φk of N packets
Output: Parameter: εg
for i ← 1 to N do
Extract εg , ζ , εθ , λ , β by non-linear least-square curve fitting on Eq.2
if λi  λ0 then
Drop the associated εg
else
Continue
end
end
/* Step 2: Moving Window based quantizer (MOW) */
Input : Channel parameter εg
Output: Quantized bits QA for STA, QB for AP
Get the mean RT T from exchanged N packets
Calculate window size, w ← dmean(RT T )e
for j ← 1 to N/w do
for i ← 1 to w do
Calculate mean, w̄ ← ∑wi εg

1 for εgi ≥ w̄
QAi /Bi =
0 for otherwise
end
end
/* Step 3: Generate Secure Sketch at STA */
Input : QA , random strings R1 , R2
Output: SS
Generate R1 , R2 : where len(R1 = R2 ) = len(QA )
Multiply R1 and R2 to get MR1 R2
Use BCH to generate code: C ← BCHenc (MR1 R2 )
Generate syndrome of the code: syn(C)
return SS (QA , MR1 R2 , syn(C))
/* Step 4: Recovery at AP */
Input : QB , SS
Output: QA
Generate K(QB , SS )
Decode with BCH: N ← BCHdec (K)
return QB (SS , N) ≡ QA

Before we implemented ComPass on our COTS setup, we used a simulation tool
for the next steps by quantizing both εg and εθ . Our analysis showed that εg gives a
slightly better result. Henceforth, ∑Ni=1 εg is the parameter from the measured CSIphase that we will use in the following steps. The Delay Aware Parameter Extractor
(DAPPER) algorithm is described in the Step 1 of Algorithm 1. AP and STA perform
DAPPER independently.

8

K. Reaz and G. Wunder

3.3 Parameter Quantization
Existing lossy and lossless (as categorized by Zenger et al. in [39]) quantization
schemes in the literature tend to overlook the fact that the underlying reciprocity
would be broken if the guard-interval for converting measured complex-valued vectors to bit-string is calculated based on the whole CSI data set. Keeping this fact in
mind, we opted in for an adaptive moving window based quantizer (MOW) (Step
2 of Algorithm 1). It is a lossless scheme and produces bit-string at 1 Bit/sample.
The resulted scheme overcomes the well-known problem of burst 0’s and 1’s (i.e.,
000 . . . 0, 111 . . . 1).
In an one-hop wireless environment, Round-Trip-Time (RTT) can be a useful metric to roughly estimate the effective channel coherence
qtime (Tc ) instead of using the
Clarke’s mathematical reference model [22]: Tc = 16π(9f )2 , ( fm is the Doppler
m
spread). RTT is readily available for each packet, and it takes into account various
factors including propagation delay, clock offset, processing delay, motions of objects in the environment. We get the mean RTT value for the exchanged packets to
set the window size w for the MOW quantizer, which is then rounded up according
to the IEEE 745 standard respecting the half-to-even rule. The minimum is w = 3
since it needs at least 3 packets to successfully calculate the distance for two nodes
(with asynchronous clocks). Then starting from the most significant bit, we take w
element from εg and find the mean
 w̄ of that window. We convert each element of
1 for εgi ≥ w̄
the w to 1/0 such that QAi /Bi =
. After that, it moves to the next
0 for otherwise
window and continues until the last element. If the last window has fewer elements
than w, it will be filled by 0. This process will construct quantized bit strings QA for
STA and QB for the AP.

3.4 Reconciliation
Reconciliation shares the common properties of error-correction. The quantized bits
on AP and STA are not necessarily the same; thus they cannot be used as is. In [5],
Dodis et al. presented a new primitive: Secure Sketch (SS). We employ SS as the reconciliation protocol for its notable advantages over others [5]. It allows reconciling
one party’s quantized bits with the other at minimum leakage. We chose a binary
Bose–Chaudhuri–Hocquenghem (BCH) code based construction for SS, referred to
as PinSketch [11]. It is the most efficient, flexible, and linear over GF(2). One can
overcome the computation time by choosing an efficient decoding algorithm for the
BCH [5]. We designed the algorithm in a bottom-up approach using the available
BCH library in the Linux kernel [4].

ComPass

9

3.4.1 Secure Sketch:
SS generates public information X about its input a that can be used to reproduce
a from its correlated version a0 , where a ∈ M and the metric space M has a distance function δ . It is a randomized procedure involving Sketch and Recover such
that for input a ∈ M , Sketch produces a string s ∈ {0, 1}. The Recover procedure,
Recover(a0 , Sketch(a)) = a works when δ (a, a0 ) ≤ t, t is the number of error. It uses
random bit strings to mask original information from an adversary.

3.4.2 Construction Procedure:
At this point, STA and AP has quantized bit strings QA , and QB respectively which
are similar but not same. Our goal is to reconcile QB with QA at minimum leakage.
We start designing the algorithm by choosing the Galois field order m. In our case
m = 7 for generating a 128-bit key; which makes the maximum BCH codeword
size n = 127 ← (2m − 1). Details of the BCH algorithm is out of scope of this paper,
hence, we refer to the original works [2], [12] and its modified version for SS in [11].
With the optimum error-correcting capability set as t = 9 bits, we create blocks each
with 56 bits resulting 3 blocks. Because of the size of n, the last block has padding
bits. Then each block is treated independently to produce secure sketch according
to the Step 3 of Algorithm 1 and concatenated: SS ← Ss1 kSs2 kSs3 k
STA sent SS to AP as the helper string (note that SS does not expose the quantized
bits QA ). AP performs Recovery operation according to the Step 4 of Algorithm 1 to
find the mismatch in QB and correct them. Usually, in a BCH decoder, error locator
root-finding is done by Chien search [3]. However, in our implementation, we used
the technique of [1] for its better performance. It consists of factoring the error
locator polynomial using the Berlekamp Trace algorithm down to degree 4. After
that, the low degree polynomial solving technique of [42] is used. Fianally, AP and
STA possess the same bit string, resulting in QB ≡ QA .

3.5 Mapping bits to passphrase
We map each 8-bit (starting with MSB) of the QA /QB according to the widely
adopted 8-bit Unicode (UTF-8) (i.e., total 256 characters) encompassing the whole
alphabet set of a passphrase (lowercase, uppercase, numerals, and symbols). Since
there are some control and non-latin characters within the UTF-8 table, we changed
U+0000 – U+0020 → uppercase HEX, and U+0080 – U+00FF → lowercase HEX.
U+0021 – U+007E remains unchanged. This way, the generated passphrase complies with password policies such as lower and uppercase letters, digits and symbols (converted HEX are treated as regular AlphaNumeric). Finally, the resulted
passphrase is treated as per the IEEE 802.11 standard’s recommended passphrase to
PSK mapping, as defined in IETF RFC 2898 section 5.2 [16].

10

K. Reaz and G. Wunder

4 Security Analysis:
We used two well-known password quality estimators to evaluate ComPass generated passphrase. Microsoft’s zxcvbn toolkit [30] is used to calculate the number of
minimum attempts needed to guess (crack) a password using brute-force. zxcvbn’s
algorithm finds token, reversed, sequence, repeat, keyboard, date, and brute force
pattern to estimate strength (as shown in Fig. 1, and Fig. 2). KeePass– recommended by the German Federal Office for Information Security (BSI-E-CS001/003
1.5), and audited [7] by the European Commission’s Free and Open Source Software Auditing (EU-FOSSA 1) project is used to calculate the available entropy (as
shown in Fig. 3). We assume that the information leakage due to reconciliation is
negligible and at most tlog2 (n + 1) (as mentioned in Theorem 6.3 of [5]). Notably,
an upper bound is given by 56 bits in our case. Since it is a different metric than
the password strength, we leave its evaluation for future work. We have collected
50 Wi-Fi passphrases from various Cafes, Hotels, and users, which we label as the
human-generated passphrase. Then we use an Apple Macbook Pro (with dedicated
crpto processor) to generate another set of 50 passphrases using OSX Keychain’s
Password Assistant tool. Finally, we compare these two sets with 50 ComPass generated passphrases for AP (Bob) and STA (Alice).

Fig. 1 Guess analysis of passphrases generated by ComPass, machine, and human.

In Fig. 1, it is shown that the human-generated passphrases would need less than
1015 attempts, whereas machine-generated passphrases almost always need 1031
attempts to crack it using brute-force. ComPass-generated passphrases went up as
high as 1032 and never below 1024 guesses.
To evaluate an attacker’s (Eve) performance, we put Eve very close (≤ wavelength/2) to the Alice and generate 50 passphrases for Bob-Eve. Although Eve is
closely located to Alice, the Phase part of her channel profile is very different from
Alice’s (as also observed by Wu et al. in [35]). Whereas, Amplitude and Signal
Strength of the two is very similar. For this very reason, we chose to work with the
Phase (as we have explained earlier).

ComPass

11

Now, we compare Eve’s passphrases with Alice’s. We append the actual (AliceBob’s) passphrase with Eve’s and Alice’s to mimic the fact that Eve has partial
knowledge of the channel profile. Appending Alice-Bob’s passphrase to Alice does
not make a difference since repeat is recognized by zxcvbn, and KeePass. Eve’s
channel profile will be the product of Alice-Bob’s channel profile (HAB ) and BobEve’s channel profile (HEA ). Eve cannot separate it without a noiseless secondary
channel. Notice from Fig. 2 that the chances of Eve to guess the valid passphrase
would be very low as the number of guesses is drastically high even though Eve’s
channel profile consists of Alice-Bob’s channel profile.

Fig. 2 Guess analysis of passphrases between an attacker and the STA

We positioned the STA at different distances; (1, 3, 5, 10, 15)m apart from the
AP in various indoor environments to verify the proximity aspect of ComPass, .
We observed that the reconciliation scheme (in Sec. 3.4) fails when the distance is
greater than 3m. It happens due to the multi-path effect that causes the reciprocity
phenomenon to break, and thus there left almost negligible common randomness in
the channel-phase profile to generate a common passphrase.

Fig. 3 Available entropy (in bits) from ComPass, machine, and human generated passphrases.

Using KeePass entropy analysis tool, we show that on an average the humangenerated passphrases have 34-bit entropy, ComPass-generated ones have 113-bit,

12

K. Reaz and G. Wunder

and machine-generated passphrases have 168-bit entropy (Fig.3). Thus ComPass
generated passphrases have nearly 3 times more entropy than a typical human generated passphrase.

4.1 Outlook on Privacy Amplification
In a conventional channel-based key generation methods, a final step called Privacy
Amplification is performed to cover the lost entropy during the Reconciliation. We
forgo this additional step in our current implementation of ComPass protocol in
favor of a Secure Sketch based reconciliation protocol, which inherently provides
security against leakage. In our future work, we aim to incorporate the KECCAK
algorithm based NIST SHA-3 family hash functions for this purpose [6]. After this
step, we hope to see that the notches in the curve of the guess analysis of ComPass
generated passphrase is reduced.

5 Implementation
Our demo setup involves implementing the algorithms on COTS hardware. We
chose very ordinary and widely available TP-Link N750 routers (v1.5, v1.6), and
Android device (8.0+) playing the role of AP and STA. We were operating our devices in 802.11n and chose channel number 40 (on 5GHz) with BW = 20MHz. Our
patched version of ACT uses the upgraded ath10k driver instead of ath9k. All of
the devices were equipped with 3 × 3 antenna, and Modulation and Coding Scheme
(MCS)- index 16 is set to enable transmission with all 3 antennas. For the non-linear
least-squares fitting, we have used the least-square-cpp library by [21]. We enabled
the bidirectional channel estimation option, where two devices (regardless of their
role) exchange sounding Physcial Layer Protocol Data Unit (PPDU). The receiving STA computes an estimate of the MIMO channel matrix Hk for each subcarrier
k and for each RF chain. While it is possible to extract key-bits from all the available 9 antenna combination, we have implemented one of the nine paths for the
demo. We put our devices in various co-working rooms of Freie Universität Berlin
campus and private apartments resembling typical indoor environments to perform
measurements and protocol tests.

6 Conclusion
We presented ComPass, a PLS inspired common passphrase agreement protocol for
all classes of Wi-Fi devices governed by proximity (≤ 3m). It forgoes the necessity
of memory friendly short password generation by an user and the dependency on

ComPass

13

PKC. We showed that the ComPass generated passphrase has increased the number of guesses required to crack it using brute force or dictionary attack compared
to a typical human-generated passphrase, and it has increased the available entropy
3 times (113-bits vs. 34-bits). ComPass has been implemented on COTS hardware
running the latest OpenWrt. The compiled module is 143kb in size, and can be
installed on existing devices using opkg package manager or as a full firmware replacement.

References
1. Biswas, B., Herbert, V.: Efficient Root Finding of Polynomials over Fields of Characteristic 2.
Avilable at https://hal.archives-ouvertes.fr/hal-00626997/ (2009)
2. Bose, R.C., Ray-Chaudhuri, D.K.: On a class of error correcting binary group codes. Information and control 3(1), 68–79 (1960)
3. Chien, R.: Cyclic decoding procedures for Bose-Chaudhuri-Hocquenghem codes. IEEE
Transactions on information theory 10(4) (1964)
4. Djelic, I., Borgerding, M.: User BCH (Bose-Chaudhuri-Hocquenghem) encode/decode library based on BCH module from linux kernel. Available at https://github.com/
mborgerding/bch_codec (2015)
5. Dodis, Y., Ostrovsky, R., Reyzin, L., Smith, A.: Fuzzy extractors: How to generate strong keys
from biometrics and other noisy data. SIAM journal on computing 38(1), 97–139 (2008)
6. Dworkin, M.J.: SHA-3 Standard: Permutation-based Hash and Extendable-output Functions.
NIST Pubs (2015). DOI 10.6028/NIST.FIPS.202
7. EVERIS-NTT DATA Company:
KeePass Code Review Results Report.
Avilable
at
https://joinup.ec.europa.eu/collection/eu-fossa-2/
project-deliveries (2016)
8. Gringoli, F., Schulz, M., Link, J., Hollick, M.: Free Your CSI: A Channel State Information
Extraction Platform For Modern Wi-Fi Chipsets. In: Proceedings of the 13th International
Workshop on Wireless Network Testbeds, Experimental Evaluation & Characterization (2019)
9. Halperin, D., Hu, W., Sheth, A., Wetherall, D.: Tool release: Gathering 802.11 n traces with
channel state information. ACM SIGCOMM Computer Communication Review 41(1), 53–53
(2011)
10. Harkins, D., Kumari, W.: Opportunistic Wireless Encryption. RFC 8110 (2017). DOI 10.
17487/RFC8110. URL https://www.rfc-editor.org/rfc/rfc8110.html
11. Harmon, K., Johnson, S., Reyzin, L.: An implementation of syndrome encoding and decoding
for binary BCH codes, secure sketches and fuzzy extractors. Available at https://www.
cs.bu.edu/˜reyzin/code/fuzzy.html (2008)
12. Hocquenghem, A.: Codes correcteurs d’erreurs. Chiffres 2(2), 147–56 (1959)
13. IEEE: IEEE Std 802.11-2016 Part 11: Wireless LAN Medium Access Control (MAC) and
Physical Layer (PHY) Specifications (2016). DOI 10.1109/IEEESTD.2016.7786995
14. INTERPOL:
COVID-19
Cybercrime
Analysis
Report.
Available
at
https://www.interpol.int/en/News-and-Events/News/2020/
INTERPOL-report-shows-alarming-rate-of-cyberattacks-during-COVID-19
(2020)
15. Jung, P., Wunder, G.: On time-variant distortions in multicarrier transmission with application
to frequency offsets and phase noise. IEEE Transactions on Communications 53(9), 1561–
1570 (2005)
16. Kaliski, B.: PKCS #5: Password-based cryptography specification version 2.0. RFC 2898
(2000). DOI 10.17487/RFC2898. URL https://www.rfc-editor.org/rfc/
rfc2898.html

14

K. Reaz and G. Wunder

17. Kilgallin, J., Vasko, R.: Factoring RSA Keys in the IoT Era. In: IEEE International Conference
on Trust, Privacy and Security in Intelligent Systems and Applications (2019)
18. Kivinen, T., Kojo, M.: More Modular Exponential (MODP) Diffie-Hellman groups for Internet
Key Exchange (IKE). RFC 3526 (2003). DOI 10.17487/RFC3526. URL https://www.
rfc-editor.org/rfc/rfc3526.html
19. Kotaru, M., Joshi, K., Bharadia, D., Katti, S.: SpotFi: Decimeter Level Localization Using
WiFi. In: Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication, pp. 269–282 (2015)
20. Maurer, U.M.: Secret key agreement by public discussion from common information. IEEE
Transactions on Information Theory (1993)
21. Meyer, F.: A single header-only C++ library for least squares fitting. Available at https:
//github.com/Rookfighter/least-squares-cpp (2019)
22. Rappaport, T.: Wireless Communications: Principles and Practice pp. 165–166 (2001)
23. Reaz, K., Wunder, G.: Wireless Channel-based Autonomous Key Management for IoT (AutoKEY) on WiSHFUL Testbed. Avilable at http://www.wishful-project.eu/
sites/default/files/AutoKEY-leaflet.pdf (2017)
24. Shannon, C.E.: Communication theory of secrecy systems. The Bell System Technical Journal
28(4), 656–715 (1949)
25. Thai, C.D.T., Lee, J., Prakash, J., Quek, T.Q.: Secret Group-Key Generation at Physical Layer
for Multi-Antenna Mesh Topology. IEEE Trans. on Information Forensics and Security (2018)
26. Vanhoef, M., Piessens, F.: Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2. In:
Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM (2017)
27. Vasisht, D., Kumar, S., Katabi, D.: Decimeter-Level Localization with a Single WiFi Access
Point. In: 13th USENIX Symposium on Networked Systems Design and Implementation
(NSDI 16), pp. 165–178 (2016)
28. Vieböck, S.: Wi-Fi Protected Setup (WPS) PIN brute force vulnerability. CERT Vulnerability
Note VU 723755. URL https://www.kb.cert.org/vuls/id/723755/
29. Wang, Q., Xu, K., Ren, K.: Cooperative Secret Key Generation from Phase Estimation in
Narrowband Fading Channels. IEEE Journal on selected areas in communications 30(9),
1666–1674 (2012)
30. Wheeler, D.L.: zxcvbn: Low-budget Password Strength Estimation. In: 25th USENIX Security
Symposium, pp. 157–173 (2016)
31. Wi-Fi Alliance: Wi-Fi Easy Connect.
Available at https://www.wi-fi.org/
discover-wi-fi/wi-fi-easy-connect, visited on (23/10/2019)
32. Wi-Fi Alliance: Opportunistic Wireless Encryption Specification. Specification v1.0 (2019)
33. Wi-Fi Alliance: Wi-Fi Protected Setup Version 2.0.2 (2020)
34. Wi-Fi Alliance: WPA3 Specification Version 3.0 (2020)
35. Wu, C., Yang, Z., Zhou, Z., Qian, K., Liu, Y., Liu, M.: PhaseU: Real-time LOS identification
with WiFi. In: IEEE conference on computer communications, pp. 2038–2046. IEEE (2015)
36. Wyner, A.D.: The Wire-Tap Channel. The Bell System Technical Journal 54(8) (1975)
37. Xi, W., Qian, C., Han, J., Zhao, K., Zhong, S., Li, X.Y., Zhao, J.: Instant and Robust Authentication and Key Agreement among Mobile Devices. In: Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications Security (2016)
38. Xie, Y., Li, Z., Li, M.: Precise Power Delay Profiling with Commodity WiFi. MobiCom ’15.
ACM (2015). DOI 10.1145/2789168.2790124
39. Zenger, C., Zimmer, J., Paar, C.: Security analysis of quantization schemes for channel-based
key extraction. In: proceedings of the 12th EAI International Conference on Mobile and
Ubiquitous Systems: Computing, Networking and Services (2015)
40. Zenger, C.T., Chur, M.J., Posielek, J.F., Paar, C., Wunder, G.: A novel key generating architecture for wireless low-resource devices. In: 2014 International Workshop on Secure Internet
of Things. IEEE (2014)
41. Zhu, H., Zhuo, Y., Liu, Q., Chang, S.: π-splicer: Perceiving accurate CSI phases with commodity WiFi devices. IEEE Transactions on Mobile Computing 17(9), 2155–2165 (2018)
42. Zinoviev, V.: On the solution of equations of degree ≤ 10 over finite fields GF(2m ). Rapports
de recherche- INRIA (1996)

