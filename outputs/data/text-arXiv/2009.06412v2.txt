1

Comprehensive Comparison of Deep Learning
Models for Lung and COVID-19 Lesion
Segmentation in CT scans

arXiv:2009.06412v2 [eess.IV] 3 Feb 2021

Paschalis Bizopoulos, Nicholas Vretos and Petros Daras, Senior Member, IEEE

Abstract—Recently there has been an explosion in the use of
Deep Learning (DL) methods for medical image segmentation.
However the field’s reliability is hindered by the lack of a
common base of reference for accuracy/performance evaluation
and the fact that previous research uses different datasets for
evaluation. In this paper, an extensive comparison of DL models
for lung and COVID-19 lesion segmentation in Computerized
Tomography (CT) scans is presented, which can also be used as a
benchmark for testing medical image segmentation models. Four
DL architectures (Unet, Linknet, FPN, PSPNet) are combined
with 25 randomly initialized and pretrained encoders (variations
of VGG, DenseNet, ResNet, ResNext, DPN, MobileNet, Xception,
Inception-v4, EfficientNet), to construct 200 tested models. Three
experimental setups are conducted for lung segmentation, lesion
segmentation and lesion segmentation using the original lung
masks. A public COVID-19 dataset with 100 CT scan images (80
for train, 20 for validation) is used for training/validation and
a different public dataset consisting of 829 images from 9 CT
scan volumes for testing. Multiple findings are provided including
the best architecture-encoder models for each experiment as
well as mean Dice results for each experiment, architecture and
encoder independently. Finally, the upper bounds improvements
when using lung masks as a preprocessing step or when using
pretrained models are quantified. The source code and 600 pretrained models for the three experiments are provided, suitable
for fine-tuning in experimental setups without GPU capabilities.
Index Terms—COVID 19, deep learning, lung segmentation,
lesion segmentation

I. I NTRODUCTION
Coronavirus Disease 2019 (COVID-19) has emerged in
December of 2019 and was declared as a pandemic in March
of 2020 [1]. The Severe Acute Respiratory Syndrome Coronavirus 2 (SARS-CoV-2) has certain properties that makes it
highly infectious, thus, turning ineffective government policy
measures such as social distancing and increasing the need
for fast and accurate diagnosis of the disease. A well established, high resolution, imaging procedure that targets lungs
and depicts rich pathological information is Computerized
Tomography (CT) scan. More specifically, for a COVID-19
patient, CT scan images show bilateral patchy shadows or
ground glass opacity on the infected region [2], which are not
always visible in common X-Ray scans [3]. Another method
that has been used for COVID-19 diagnosis is the so-called
Reverse-Transcription Polymerase Chain Reaction (RT-PCR),
P. Bizopoulos, N. Vretos and P. Daras are with the Visual Computing Lab of the Information Technologies Institute, Centre for Research and Technology Hellas, Thessaloniki, Greece e-mail: pbizopoulos@protonmail.com,{vretos,daras}@iti.gr

which, however, has been found to have lower sensitivity
compared to CT [4] scan and is more time consuming.
Medical experts often need to examine a large number of
CT scan images, which is an error prone and time consuming
process. To that aim, automatic segmentation methods are
being proposed that segment regions-of-interest (ROIs) of
different size and shape such as lungs, nodules and lesions,
taking advantage of the CT scan resolution. These methods
facilitate medical experts in diagnosing by focusing on the
ROIs instead of the whole image. Methods for automatic
segmentation in the lung area from the literature include the
use of morphological operations [5], active contours [6] and
fuzzy clustering [7].
Feature engineering methods however, were surpassed by
end-to-end learning such as Deep Learning (DL) [8], which
were successfully applied in medical image segmentation
tasks [9]. More specifically, applications of DL methods in
medical image segmentation primarily target lungs [10], [11],
pathological lungs [12], infections [13], [14], [15], lungs
and infections [16], lungs and COVID-19 lesions [17]. The
majority of them uses encoder-decoder architectures such as
Unet [18] and its variations.
A major issue in the field of lung/lesion segmentation (and
medical image segmentation in general) is the use of different
datasets for evaluating newly proposed models. Moreover,
there is lack of benchmark baseline models that could play
the role of reference for evaluating the accuracy and the
performance of proposed models. Benchmarks for COVID19 in CT scan images were provided in the literature, such
as Ma et al. [19] that has a limited number of cases and
He et al. [20] that test 20 models for lung segmentation of
COVID-19 patients. Other comparison studies on similar tasks
such as lung nodule segmentation were proposed in [21],
which compare three non-learnable algorithms, where each
one is created by a different research group. Comparison
studies of deep learning image segmentation tasks has also
been conducted on non-medical images such as coral reef
images [22] where the authors test four models as well as aerial
city images [23] where the authors test 12 different models.
No previous work, to the best of our knowledge, includes a
comprehensive quantified comparison of 600 DL models on
the task of image segmentation.
In this paper, four of the most widely used DL image
segmentation architectures are explored, namely Unet [18],
Linknet [24], Feature Pyramid Network (FPN) [25] and Pyramid Scene Parsing Network (PSPNet) [26] combined with 25

encoders for lung and COVID-19 lesion segmentation in CT
scan images. The contribution of this paper in the field of
medical image segmentation can be summarized as follows:
•

•
•
•
•
•
•

X

derivation of best architecture-encoder combinations for
the three experiments that are conducted (lung, lesion and
lesion with lung masks experiments),
quantitative comparison of architectures,
quantitative comparison of encoders,
quantitative comparison of lesion segmentation with and
without masks (in this case lungs) as a preprocessing step,
quantitative comparison of random and ImageNet initialization,
open source implementation1 ,
release of 600 pretrained models of all experimental
setups for use by external researchers.

The rest of the paper is organized as follows: a detailed
description of the models and their components (architecture, encoder) is provided in Section II, the datasets used
are presented in Section III, the experimental setup used to
evaluate the models is shown in Section IV and the results
are demonstrated in Section V. Finally the findings in relation
with findings in the previous literature are shown in Section VI
and the final remarks are concluded in Section VII.

II. M ETHODS
In this Section the problem of segmentation is formalized
and the architectures and encoders that are used in this study
are presented.

architecture
encoder

2

backpropagation

Ŷ

L

Y

Fig. 1. High level overview of a lesion segmentation model with an
architecture consisting of an encoder trained using a single training augmented
image. X is the input, Y is the target mask, Ŷ is the predicted mask and
L is the loss function, which in this case is the Dice loss. Green and red
pixels at Ŷ depict correctly and falsely classified pixels, while green pixels
at Y depict the pixels of the target mask. Arrows denote the flow of the feedforward and backpropagation pass. X is passed to the architecture consisting
of a specific encoder and Ŷ is calculated. Then Ŷ and Y are used to calculate
the loss, which is then used to backpropagate the error to the weights. This
procedure is repeated for a number of times using more training examples till
L converges.

B. Architectures
A. Formalization
Let D be a dataset containing images X ∈ Rnr ,nc and
Y ∈ {0, 1}nr ,nc the corresponding target mask (in our case
nr = 512, nc = 512). Let mex,ar,en,ew be a DL model for
segmentation where ex denotes the specific experiment, ar the
architecture, en the encoder and ew the encoder weights. The
‘encoder’ is defined as the part of the model that performs
the feature extraction. The model mex,ar,en,ew is trained on
a dataset Dtrain ⊂ D consisting of Xtrain ∈ Rnr ,nc and
Ytrain ∈ {0, 1}nr ,nc . Moreover a validation dataset is defined
as Dval ⊂ D where Dval ∩ Dtrain = ∅ consisting of Xval ∈
Rnr ,nc and Yval ∈ {0, 1}nr ,nc . Therefore, the objective of
the experiments conducted in this study can be designed as,
finding an optimal point in the parameter space of mex,ar,en,ew
during training such that when presented with an input from
D such as Xval , its prediction Ŷval ∈ [0, 1]nr ,nc is as near as
possible with the target Yval . This is implemented by selecting
the model that performs the minimum validation error out of
all epochs. Subsequently, the selected models are tested on the
generalization ability on an unseen Dtest with Dtest ∩ D = ∅.
A high level overview of the training of the models can be
seen in Fig. 1.
1 https://github.com/pbizopoulos/comprehensive-comparison-of-deeplearning-models-for-lung-and-covid-19-lesion-segmentation-in-ct

Four architectures are used as the basis of the models to be
tested:
• Unet [18]
• Linknet [24]
• Feature Pyramid Network (FPN) [25]
• Pyramid Scene Parsing Network (PSPNet) [26]
Unet [18] combines an encoder that scales down the features
to a lower dimensional bottleneck and a decoder that scales
them up to original dimensions. It also uses skip connections
that were proven to improve image segmentation results [27].
Linknet [24] is similar to Unet with the difference of using
residual [28] instead of convolutional blocks in its encoder
and decoder networks. Feature Pyramid Network (FPN) [25]
is also similar to Unet with the difference of applying a 1 × 1
convolution layer and adding the features instead of copying
and appending them as done in the Unet architecture. The
Pyramid Scene Parsing Network (PSPNet) [26] exploits a
pyramid pooling module to aggregate the image global context
information with an auxiliary loss [29].
C. Encoders
The following encoders are used along with their variations
denoted in the parenthesis:
• VGG [30] (11, 13, 19)
• DenseNet [31] (121, 161, 169, 201)

3

ResNet [28] (18, 34, 50, 101, 152)
ResNext [32]
• Dual Path Networks (DPN) [33] (68, 98)
• MobileNet [34]
• Xception [35]
• Inception-v4 [36]
• EfficientNet [37] (b0, b1, b3, b4, b5, b6)
VGG [30] is named after the Visual Geometry Group that
proposed it and took the second place during the ImageNet
Competition in 2014 [38]. It was one of the first models
that demonstrated the importance of depth in DL and it is
preferred for tasks such as feature extraction due to its simple
repeating structure. On the other hand, ResNet’s [28] (abbreviation of Residual Networks) contributions allowed training
deep networks by using layers that learn residual functions
with reference to layer inputs, while DenseNet [31] uses
connections between each layer and every other layer in a feedforward fashion. Moreover ResNext [32] consists of a stack of
residual blocks, which are subject to two rules. The first one is
that layers that output spatial maps with the same size, share
hyper-parameters and the second is that when a spatial map is
downsampled by two, the width of the blocks is multiplied by
two. Dual Path Networks (DPN) [33] proposed as a network
that combines feature re-usage and feature exploration that
ResNet and DenseNet do respectively, while MobileNet [34]
constructed to fill the need of training and inferencing on
devices with low computational capabilities such as embedded
device and mobile phones. Xception [35] is a variation of
Inception Network [39] in which the inception modules have
been replaced with depthwise convolutions followed by a
pointwise convolution. Finally Inception-v4 [36] combines
previous inception architectures with residual connections
achieving state-of-the-art performance on the ImageNet, while
EfficientNet [37] is an improvement of MobileNet where the
compound scaling module was proposed as an efficient way
to uniformly scale depth, width and resolution.

TABLE I
A RCHITECTURE HYPERPARAMETERS

•
•

III. DATASETS
Two public COVID-19 CT scan datasets with lung and
lesion masks were used. The first dataset2 consists of 100
CT axial scans from < 40 patients with 512 × 512 size and
corresponding lung masks from [40] and lesion masks labeled
with four classes (none, ground-glass, consolidation, pleural
effusion). The original dataset, without the annotations, was
selected from the Italian Society of Medical and Interventional
Radiology3 . The second dataset4 consists of 829 images from
9 CT scan volumes (a set of CT scan images acquired from
the same patient at the same moment) with corresponding
target masks. 373 out of 829 were annotated as positive
and segmented by a radiologist by the same group as the
first dataset. Raw data from both datasets contain samples in
Hounsfield units [41].
Regarding preprocessing, first the positive classes of the
pixels of the images in the first dataset are merged into one,
2 http://medicalsegmentation.com/covid19/
3 https://www.sirm.org/category/senza-categoria/covid-19/
4 https://radiopaedia.org/articles/covid-19-3

Encoder
depth

Batch Norm

Unet

5

Yes (decoder)

Linknet

5

Yes (decoder)

FPN

5

No

PSPNet

3

Yes (encoder)

Architecture

Various
decoder channel sizes =
(256, 128, 64, 32, 16)
pyramid channels=256,
segment channels=128,
merge policy=add,
dropout=0.2
output channels=512,
dropout=0.2

converting the problem to a binary segmentation problem.
The CT scan images from the second dataset are resized to
512 × 512, and both datasets are normalized with µ = −500
and σ = 500. We use 80 scans from the first dataset for
training the models, 20 scans for validation and all scans from
the second dataset for the testing of the models.
In Fig. 2 the histograms of the pixel intensities of all the
CT scan images and the target masks in the test dataset after
normalization, for each of the three experiments, are depicted.
The considerable overlap between the histograms makes the
use of thresholding models in this kind of problem unsuitable,
thus justifying the use of learning models such as DL.
IV. E XPERIMENTAL SETUP
In this Section the experimental setup is presented. In total
three experiments are conducted:
• lung segmentation
• lesion segmentation (referred to as ‘lesion segmentation
A’)
• lesion segmentation with lung masks (referred to as
‘lesion segmentation B’)
The choice of these experiments covers balanced (lung
segmentation), unbalanced (lesion segmentation A) and unbalanced with preprocessing (lesion segmentation B) image
segmentation tasks and the findings could apply in image
segmentation tasks with non-medical images. Each of the
performed experiments uses a different target mask Y , where
for the ‘lesion segmentation B’ the corresponding lung masks
is also applied in the input image X.
Each model is constructed using a unique combination of
the four architectures described in subsection II-B and the
25 encoders referenced in subsection II-C. The selection of
architectures and encoders was based on the restriction of the
GPU memory of our graphics card, combined with the value
of batch size. Then, for each model we also test the randomly
initialized and its ImageNet pretrained version.
The default values for every hyperparameter of the models
were used (as seen in Table. I), to avoid favoring models that
were proposed after being evaluated in a controlled experimental setup. The activation function for all architectures was
sigmoid that squashes the output in the range of [0, 1].
For all experiments and in each epoch during training,
data augmentation is applied on the images from the training
dataset:

4

Normalized frequencies

100
10

1

10

100

Images
Masks

10

1

2

10

10

3

10

100

Images
Masks

10

1

2

10

2

10

3

10

3

4

10

4

10

4

10

5

10

5

10

5

10

6

10

6

10

6

10

7

10

7

10

7

2.0

1.5

1.0

0.5

0.0

0.5

Normalized values

1.0

1.5

2.0

(a) Lung segmentation

2.0

1.5

1.0

0.5

0.0

0.5

Normalized values

1.0

(b) Lesion segmentation A

1.5

2.0

Images
Masks

2.0

1.5

1.0

0.5

0.0

0.5

Normalized values

1.0

1.5

2.0

(c) Lesion segmentation B

Fig. 2. Histogram plots of the normalized pixel intensities for the images (blue) and target masks (orange) for each experimental setup. The vertical axis
depicts the normalized frequencies of each pixel intensity in the logarithmic scale. The outlier bar at zero is because most of the pixels in the target masks
are near zero.

horizontal/vertical flip each with probability 50%,
rotation with an angle chosen from a uniform distribution
with range [−180◦ , 180◦ ] and
• scale within a range of [0.5, 1.5] with zero padding
During training the Soft Dice Loss is used to calculate the
error of the model on the training dataset as:
nr P
nc
P
Yij Ŷij
•

•

Sof tDiceLoss = 1 − 2 nr nc
PP
i

j

i

j

Yij2 +

nr P
nc
P
i

j

,

(1)

Ŷij2 + 

where Yij , Ŷij are the pixel intensities at the ith column,
j row of the target mask and predicted mask, respectively
(which applies for Ytrain , Yval and Ytest ) and  = 10−5 . The
model selection is done using Soft Dice Loss in each epoch
during training on the validation dataset. During testing, the
predicted mask Ŷtest is binarized with a threshold value of
0.5 allowing us to use hard metrics for testing the models:
th

TP
(2)
TP + FN + 
TN
Specif icity =
(3)
TN + FP + 
2T P
Dice =
(4)
2T P + F P + F N + 
where T P , T N , F P and F N are the true positive, true
negative, false positive and false negative of Ŷ w.r.t Y ,
respectively and  = 10−5 to prevent division with zero. When
T P +F P = 0 the model has correctly identified that the input
does not have any positive pixel and in that case all metrics
are set to 1.
We train a total of 600 different models for the three
experiments each one for 200 epochs with a batch size of
2, which was the maximum possible considering the GPU
memory restriction. We use the optimizer [42] with the default
values of learning rate 0.001, β1 = 0.9, β2 = 0.999,  = 10−8 ,
without weight decay. Pytorch [43] and the ‘Segmentation
Models Pytorch’ library [44] were used for implementing the
experiments, a GeForce RTX 2080 Ti Graphics Card with
11Gb RAM from NVIDIA and an Intel Core i9-9900K CPU
Sensitivity =

@3.60GHz, on a Linux-based operating system for training
the models for two weeks. A pseudo-code implementation of
the experimental setup is shown in Algorithm 1.

Algorithm 1 Experimental setup
Input: epochs
Output: metrics
Hyperparameters: λ, batches
1: for ex = 1 to nexperiments do
2:
for ar = 1 to narchitectures do
3:
for en = 1 to nencoders do
4:
for ew = 1 to nencoder weights do
5:
for ep = 1 to epochs do
6:
for b = 1 to batches do
7:
Ytrain , Xtrain ∼ Dtrain
8:
Ytrain , Xtrain ← Augm(Ytrain , Xtrain )
9:
Ŷtrain ← mex,ar,en,ew (Xtrain )
10:
Ltrain ← DiceLoss(Ŷtrain ,Ytrain )
∂L
∂L
11:
∇Ltrain = ∂w
(1) , . . . ∂w (q)
∂L
12:
∆w(i) ← −λ ∂w
(i)
13:
end for
14:
for b = 1 to batches do
15:
Yval , Xval ∼ Dval
16:
Ŷval ← mex,ar,en,ew (Xval )
17:
Lval ← DiceLoss(Ŷval , Yval )
18:
end for
19:
if Lval < Lbest
val then
20:
mbest
ex,ar,en,ew ← mex,ar,en,ew
21:
end if
22:
end for
23:
Ŷtest ← mbest
ex,ar,en,ew (Xtest )
24:
metricsex,ar,en,ew = metrics(Ŷtest , Ytest )
25:
end for
26:
end for
27:
end for
28: end for
29: return metrics

5

B. Architecture comparison
In Fig. 5 the train and validation loss vs. epochs of the
four architectures segregated upon encoders is depicted. In all
experiments and architectures, the training loss during the 5
first epochs, decreases fast and in a slower rate during the next
epochs. We can observe the same behaviour for validation loss
during the 15 first epochs but with more variability, which can
be explained by the use of the dice loss as a validation metric.
More specifically, we observe faster convergence for PSPNet
for training loss compared to the other architectures, greater
variance for FPN and lower convergence for Linknet in both
training and validation. In Fig. 6 the Dice boxplots for the
three experiments is plotted. Regarding time performance for
training and inference, the fastest architecture is PSPNet and
the slowest is Linknet even having more parameters than Unet.
The mean Dice results for Unet are 93.77%±0.95% for lung
segmentation, 85.84% ± 0.64% for ‘lesion segmentation A’,
86.86% ± 0.83% for ‘lesion segmentation B’. The mean Dice
results for Linknet are 93.96%±0.96% for lung segmentation,
86.14% ± 0.79% for ‘lesion segmentation A’, 86.5% ± 0.82%
for ‘lesion segmentation B’. The mean Dice results for FPN are
92.9%±1.25% for lung segmentation, 85.29%±1.17% for ‘lesion segmentation A’, 86.52%±1.1% for ‘lesion segmentation
B’. The mean Dice results for PSPNet are 92.09%±1.06% for
lung segmentation, 84.61% ± 1.33% for ‘lesion segmentation
A’, 85.86% ± 1.12% for ‘lesion segmentation B’.

Lesion segmentation A
Lesion segmentation B
Lung segmentation

In Table. II the resulted metrics of all experiments are
presented. The best combination of architecture-encoder for
each combination of encoder weight initialization, experimental setup and metric are showin in bold. The mean Dice
results for each experiment are 93.18% ± 1.3% for lung
segmentation, 85.47% ± 1.17%, for ‘lesion segmentation A’
and 86.44% ± 1.04%, for ‘lesion segmentation B’. The best
performing models w.r.t. Dice for each experiment were the
resnet50-xception (95.58%) for lung segmentation, resnet18xception (87.56%) for lesion segmentation A and dpn98efficientnet-b4 (89.0%) for lesion segmentation B. In Fig. 3
the predicted masks for 24 out of the 600 models are depicted,
demonstrating the difference in segmentation quality between
the best (efficientnet-b4) and the worst (vgg19) performing
encoder of the models for each architecture, with randomly
initialized weights. In Fig. 4 the Dice vs. the number of
parameters is plotted, demonstrating that there is positive
correlation, suggesting that segmentation generally improves
when using higher number of parameters. However, this is not
a significant positive correlation. It is worth noting that the best
model is not the one with the largest number of parameters.

Lesion segmentation A

A. Overall

Lesion segmentation B

In this Section the results of the three experimental setups
are demonstrated, along with several comparisons between
experiments, architectures, encoders and weight initialization
schemes.

Lung segmentation

V. R ESULTS

(a) Unet

(b) Linknet

(c) FPN

(d) PSPNet

Fig. 3. Predicted masks on a CT scan image from the test data for 24 out
of 600 of the models. The three top columns correspond to predicted masks
generated from a model with the best encoder and the bottom three for the
worst. Rows correspond to each of the four architectures. Green and red depict
correctly and falsely classified pixels respectively.

In Fig. 7 the predictions as a volume for the three experiments, for the resnet18 encoder are visualized, demonstrating
good match with the original masks.
C. Lesion segmentation A vs. Lesion segmentation B
In the bottom two subfigures in Fig. 5 the difference of
the train and validation loss between the ‘lesion segmentation
A’ and ‘lesion segmentation B’ are depicted. We observe
convergence between the losses, which is an indication that
when training for large number of epochs the use of lung
masks, as a preprocessing step, is less required.
D. Random initialization vs. pretrained on ImageNet
In Fig. 8 the weights are depicted, in which we observe
that with random initialization the weights depict high and

6

TABLE II
M ETRICS
Lung segmentation
Sens
Spec
Dice
Architecture

Unet

Linknet

FPN

PSPNet

Global

None
Lesion segmentation A
Sens
Spec
Dice

Lesion segmentation B
Sens
Spec
Dice

Lung segmentation
Sens
Spec
Dice

imagenet
Lesion segmentation A
Sens
Spec
Dice

Lesion segmentation B
Sens
Spec
Dice

Pars(M)

Performance
related
Train(s)

Val(s)

Encoder
vgg11
vgg13
vgg19
resnet18
resnet34
resnet50
resnet101
resnet152
densenet121
densenet161
densenet169
densenet201
resnext5032x4d
dpn68
dpn98
mobilenetv2
xception
inceptionv4
efficientnet-b0
efficientnet-b1
efficientnet-b2
efficientnet-b3
efficientnet-b4
efficientnet-b5
efficientnet-b6
Mean
Std
vgg11
vgg13
vgg19
resnet18
resnet34
resnet50
resnet101
resnet152
densenet121
densenet161
densenet169
densenet201
resnext5032x4d
dpn68
dpn98
mobilenetv2
xception
inceptionv4
efficientnet-b0
efficientnet-b1
efficientnet-b2
efficientnet-b3
efficientnet-b4
efficientnet-b5
efficientnet-b6
Mean
Std
vgg11
vgg13
vgg19
resnet18
resnet34
resnet50
resnet101
resnet152
densenet121
densenet161
densenet169
densenet201
resnext5032x4d
dpn68
dpn98
mobilenetv2
xception
inceptionv4
efficientnet-b0
efficientnet-b1
efficientnet-b2
efficientnet-b3
efficientnet-b4
efficientnet-b5
efficientnet-b6
Mean
Std
vgg11
vgg13
vgg19
resnet18
resnet34
resnet50
resnet101
resnet152
densenet121
densenet161
densenet169
densenet201
resnext5032x4d
dpn68
dpn98
mobilenetv2
xception
inceptionv4
efficientnet-b0
efficientnet-b1
efficientnet-b2
efficientnet-b3
efficientnet-b4
efficientnet-b5
efficientnet-b6
Mean
Std
Mean
Std

89.03
92.80
92.73
89.68
87.51
94.21
93.35
94.31
93.92
92.67
91.26
82.66
93.49
88.70
92.66
93.52
92.94
92.08
87.72
90.53
89.17
91.14
90.89
91.29
90.38
91.15
2.62
92.04
92.67
90.31
90.61
93.06
92.70
93.56
89.45
92.34
93.22
93.10
92.71
93.42
93.76
92.85
92.16
92.88
94.13
92.46
92.62
90.37
89.71
92.48
90.03
89.81
92.10
1.38
88.12
87.91
89.12
89.24
92.77
92.98
92.05
90.00
92.42
91.24
91.17
90.87
91.88
90.73
93.01
93.18
90.82
91.13
90.76
90.76
91.42
89.29
90.25
89.27
89.55
90.80
1.46
90.77
89.43
87.39
86.38
84.05
89.58
90.55
90.25
89.29
89.07
87.17
91.04
89.81
81.71
89.81
89.07
90.17
90.12
87.38
88.12
86.03
88.52
89.11
89.09
89.17
88.52
2.13
90.64
2.36

99.82
99.77
99.83
99.85
99.78
99.83
99.79
99.81
99.78
99.88
99.84
99.70
99.88
99.88
99.84
99.87
99.85
99.82
99.86
99.89
99.88
99.89
99.91
99.90
99.79
99.84
0.05
99.87
99.82
99.83
99.87
99.85
99.74
99.69
99.66
99.80
99.82
99.81
99.79
99.86
99.87
99.85
99.88
99.87
99.76
99.81
99.86
99.87
99.83
99.81
99.87
99.93
99.82
0.06
99.84
99.87
99.77
99.78
99.75
99.76
99.81
99.68
99.77
99.85
99.80
99.77
99.80
99.83
99.81
99.76
99.85
99.80
99.81
99.83
99.85
99.84
99.86
99.88
99.83
99.81
0.05
99.68
99.74
99.75
99.75
99.74
99.79
99.71
99.81
99.82
99.82
99.90
99.76
99.81
99.81
99.76
99.74
99.77
99.74
99.79
99.76
99.86
99.80
99.79
99.83
99.80
99.78
0.05
99.81
0.06

91.00
92.41
94.07
91.98
89.75
95.08
91.60
94.90
93.66
94.62
93.08
85.61
94.57
91.54
93.89
94.95
94.07
93.28
89.99
92.80
91.66
93.19
93.13
93.41
92.19
92.66
2.04
93.85
92.82
92.62
92.94
94.56
93.16
92.26
89.62
93.76
94.43
94.16
93.58
94.40
94.74
93.75
94.00
94.37
94.20
93.69
94.26
92.31
91.37
93.77
91.89
91.97
93.30
1.19
90.24
89.94
90.75
90.93
94.07
93.96
93.89
91.22
93.77
93.35
92.96
92.07
93.58
92.78
94.29
94.24
92.51
93.02
92.17
92.56
93.12
91.07
92.28
91.31
91.02
92.44
1.29
92.34
91.74
89.77
89.21
87.35
91.96
92.12
92.47
91.99
91.53
90.28
92.85
91.86
85.86
91.52
91.31
92.17
91.70
89.46
90.23
88.71
90.82
90.80
91.10
91.05
90.81
1.63
92.30
1.82

79.47
83.35
80.36
80.69
79.75
81.85
83.08
82.15
81.95
81.80
80.44
83.15
82.56
80.32
85.15
82.06
80.58
83.82
81.76
83.33
82.16
82.18
80.28
80.60
82.83
81.83
1.38
79.99
83.14
82.18
81.31
81.15
81.38
81.98
80.45
79.31
81.02
80.49
81.58
82.49
78.95
83.36
79.51
81.66
82.62
81.84
82.68
81.29
81.85
80.81
79.73
82.97
81.35
1.20
79.18
76.46
73.33
76.83
75.13
80.12
79.66
79.78
81.72
79.75
80.67
80.19
80.49
75.16
79.04
74.74
78.57
80.67
80.29
81.40
81.31
82.14
78.99
83.52
80.56
79.19
2.49
79.44
75.65
72.30
76.12
78.26
75.51
77.97
77.15
79.47
79.95
80.23
77.43
79.45
79.86
79.43
80.03
77.62
81.33
82.90
82.84
81.00
80.02
81.85
80.49
80.14
79.06
2.39
80.36
2.32

99.87
99.87
99.87
99.86
99.89
99.88
99.90
99.93
99.89
99.91
99.87
99.92
99.93
99.92
99.91
99.91
99.92
99.87
99.92
99.88
99.90
99.91
99.94
99.95
99.91
99.90
0.02
99.90
99.91
99.89
99.91
99.89
99.91
99.92
99.91
99.90
99.92
99.94
99.89
99.91
99.92
99.92
99.90
99.93
99.87
99.90
99.90
99.92
99.93
99.95
99.96
99.92
99.91
0.02
99.91
99.92
99.90
99.90
99.90
99.94
99.94
99.92
99.92
99.91
99.92
99.92
99.92
99.89
99.94
99.95
99.95
99.94
99.95
99.90
99.94
99.93
99.96
99.93
99.94
99.92
0.02
99.90
99.92
99.92
99.91
99.87
99.90
99.87
99.91
99.85
99.85
99.90
99.92
99.91
99.92
99.93
99.88
99.91
99.86
99.91
99.91
99.92
99.94
99.91
99.92
99.95
99.90
0.03
99.91
0.02

81.49
84.55
81.78
82.26
82.98
84.10
85.25
85.55
83.64
84.21
82.11
85.68
85.43
83.96
86.83
84.93
83.61
84.88
84.73
85.36
84.63
85.10
84.65
84.86
85.56
84.33
1.31
82.66
85.43
83.50
84.45
83.41
84.34
85.06
83.19
82.50
84.51
84.53
83.92
84.95
82.90
85.87
82.12
84.91
83.78
84.27
84.98
84.59
84.95
85.05
84.47
85.90
84.25
1.00
82.83
80.27
77.93
80.81
79.33
84.56
84.37
83.61
84.97
83.83
83.63
84.32
84.50
78.71
83.64
79.60
83.68
84.73
84.97
84.32
84.98
85.77
84.11
86.70
85.03
83.25
2.31
82.51
80.23
76.95
80.29
80.64
79.38
80.25
81.20
81.30
81.13
83.24
81.60
82.77
83.96
83.27
82.93
81.83
83.16
85.03
85.67
84.34
84.27
85.25
84.17
85.00
82.42
2.08
83.56
1.93

81.60
81.57
83.20
79.79
82.17
83.24
80.85
83.61
79.45
82.04
79.48
81.46
82.77
80.79
79.93
81.12
84.07
82.21
81.52
79.01
80.93
79.42
82.06
80.30
81.16
81.35
1.37
82.97
82.11
83.83
83.46
80.92
81.76
80.86
83.33
82.16
81.74
82.98
79.85
79.44
81.43
83.80
82.68
85.05
81.83
80.85
82.62
81.48
82.07
82.49
83.60
81.31
82.18
1.28
81.51
81.52
81.45
81.92
81.26
79.95
82.51
80.74
81.84
79.96
82.79
79.93
81.10
79.47
80.86
82.64
81.46
81.30
79.26
82.05
83.12
79.21
81.91
80.34
80.67
81.15
1.08
79.72
80.85
81.18
79.40
79.20
80.29
84.28
84.10
78.87
77.58
82.46
80.26
80.74
81.38
79.15
83.09
78.86
81.99
82.60
80.69
80.30
81.07
80.76
83.04
81.78
80.95
1.66
81.41
1.44

99.95
99.96
99.94
99.93
99.91
99.92
99.93
99.91
99.94
99.92
99.93
99.94
99.94
99.93
99.94
99.95
99.93
99.93
99.94
99.95
99.92
99.94
99.94
99.93
99.94
99.93
0.01
99.94
99.95
99.94
99.94
99.93
99.94
99.94
99.91
99.93
99.92
99.94
99.95
99.95
99.95
99.93
99.92
99.94
99.90
99.95
99.92
99.94
99.94
99.94
99.93
99.96
99.94
0.01
99.94
99.93
99.86
99.95
99.94
99.93
99.92
99.93
99.95
99.93
99.92
99.95
99.94
99.93
99.94
99.93
99.96
99.95
99.96
99.93
99.94
99.96
99.92
99.92
99.94
99.93
0.02
99.95
99.94
99.92
99.93
99.91
99.94
99.88
99.89
99.90
99.91
99.89
99.89
99.94
99.93
99.94
99.91
99.95
99.89
99.92
99.94
99.93
99.92
99.93
99.90
99.92
99.92
0.02
99.93
0.02

85.85
86.02
87.22
83.92
85.52
86.63
85.01
86.58
83.98
85.25
83.52
85.59
86.15
84.44
84.44
85.51
87.06
85.99
85.81
83.80
84.94
83.99
86.31
84.75
85.39
85.35
1.03
86.38
86.38
87.62
86.69
84.91
85.77
85.09
86.75
85.78
85.54
86.38
84.28
84.11
85.46
87.16
86.05
88.28
84.95
85.64
86.40
85.69
86.32
86.39
87.28
86.00
86.05
0.96
85.82
85.73
84.81
86.10
85.42
84.42
86.17
85.22
86.40
84.35
86.41
84.38
85.74
84.11
85.50
86.42
86.25
85.90
84.68
86.09
87.15
84.24
85.74
84.43
84.93
85.46
0.83
84.75
85.44
85.31
83.87
83.19
84.83
86.35
86.36
83.02
81.97
85.65
83.71
85.29
85.33
83.82
86.07
83.87
85.58
86.33
85.27
84.72
84.96
84.88
86.61
85.61
84.91
1.15
85.44
1.08

91.08
92.52
91.96
94.61
91.76
94.33
93.68
92.26
92.77
92.11
91.96
91.07
93.26
91.38
91.48
91.82
93.06
91.82
92.20
89.73
89.90
92.47
92.84
92.42
92.74
92.21
1.12
92.25
93.26
92.97
92.35
92.46
94.01
93.37
93.89
93.57
91.51
92.49
93.51
93.20
92.61
92.42
94.88
93.97
93.99
92.34
92.75
91.06
92.30
91.35
88.25
92.12
92.67
1.27
88.98
89.36
88.09
91.04
90.86
90.27
89.60
90.98
91.84
90.42
91.57
91.49
92.85
93.93
89.78
90.82
92.97
93.35
90.17
92.43
90.39
91.98
93.08
92.32
92.34
91.24
1.45
89.96
89.39
89.19
90.05
91.57
92.29
90.65
92.50
91.90
91.68
91.97
91.32
90.94
91.33
91.67
89.12
90.72
90.55
90.83
87.93
88.50
88.49
88.50
89.26
87.96
90.33
1.39
91.61
1.60

99.88
99.89
99.87
99.87
99.91
99.85
99.87
99.87
99.86
99.86
99.91
99.89
99.90
99.89
99.90
99.91
99.89
99.86
99.90
99.91
99.91
99.90
99.89
99.91
99.91
99.89
0.02
99.86
99.89
99.87
99.89
99.86
99.83
99.82
99.84
99.90
99.91
99.89
99.83
99.91
99.91
99.83
99.86
99.88
99.85
99.91
99.87
99.89
99.86
99.92
99.90
99.88
99.87
0.03
99.82
99.89
99.78
99.83
99.85
99.85
99.82
99.87
99.81
99.87
99.82
99.87
99.85
99.83
99.83
99.90
99.85
99.83
99.87
99.83
99.88
99.87
99.88
99.88
99.88
99.85
0.03
99.80
99.78
99.82
99.87
99.75
99.76
99.81
99.77
99.80
99.80
99.80
99.75
99.83
99.78
99.77
99.83
99.85
99.78
99.79
99.81
99.79
99.84
99.88
99.85
99.81
99.80
0.03
99.85
0.04

92.63
94.24
93.57
95.58
93.78
94.54
95.06
94.15
94.26
94.02
93.98
93.02
94.98
93.41
93.55
93.71
94.13
92.17
93.53
91.35
91.98
93.74
94.20
94.06
94.48
93.77
0.95
93.85
94.57
93.96
93.97
93.97
93.88
94.36
95.10
95.21
93.54
94.25
94.58
94.90
94.49
92.82
94.97
95.24
94.07
94.19
93.44
92.59
93.22
93.44
90.68
93.66
93.96
0.96
90.94
91.31
89.72
92.56
92.67
92.62
91.43
93.14
93.11
92.08
92.93
93.19
94.17
94.75
91.82
93.05
94.36
94.70
91.92
93.62
92.25
93.51
94.71
93.85
94.07
92.90
1.25
91.80
91.36
91.24
92.50
92.67
93.28
92.47
93.75
93.29
93.29
93.55
92.35
92.78
92.89
92.70
91.63
92.67
91.93
92.41
90.19
90.39
90.91
90.97
91.54
89.81
92.09
1.06
93.18
1.30

81.79
82.73
83.84
81.97
81.56
81.38
81.30
82.13
82.24
81.16
81.56
81.83
81.64
80.94
83.77
82.84
80.18
82.45
83.44
81.19
82.39
80.06
82.00
81.84
84.06
82.01
1.01
81.67
81.95
81.43
83.30
81.10
80.54
80.95
82.84
83.28
81.99
82.29
81.84
83.36
80.81
82.04
83.89
83.43
83.32
82.41
83.20
83.46
83.08
82.84
80.71
83.49
82.37
1.01
79.12
78.34
79.25
81.46
80.19
80.24
80.13
82.77
82.93
78.91
79.79
83.56
82.47
80.32
80.72
81.65
83.78
80.35
80.45
81.60
79.02
84.28
82.02
80.82
81.48
81.03
1.59
81.31
79.87
79.26
83.32
84.05
79.45
77.04
79.94
83.83
81.45
80.52
83.57
79.69
79.85
80.46
75.43
81.98
78.91
80.64
81.82
80.84
81.52
81.05
80.29
81.47
80.70
1.93
81.53
1.59

99.92
99.91
99.90
99.95
99.95
99.95
99.93
99.93
99.96
99.95
99.94
99.95
99.96
99.95
99.93
99.94
99.96
99.96
99.93
99.94
99.95
99.96
99.96
99.95
99.93
99.94
0.02
99.94
99.93
99.93
99.94
99.96
99.96
99.94
99.93
99.94
99.94
99.95
99.95
99.95
99.95
99.95
99.93
99.95
99.94
99.94
99.95
99.93
99.94
99.94
99.96
99.95
99.94
0.01
99.95
99.95
99.92
99.95
99.96
99.94
99.96
99.94
99.94
99.96
99.96
99.94
99.95
99.93
99.94
99.94
99.95
99.96
99.94
99.95
99.96
99.91
99.93
99.95
99.94
99.94
0.01
99.93
99.94
99.95
99.90
99.87
99.93
99.94
99.94
99.92
99.93
99.94
99.93
99.94
99.93
99.94
99.96
99.83
99.95
99.93
99.94
99.94
99.96
99.92
99.95
99.92
99.93
0.03
99.94
0.02

84.71
85.43
85.27
86.04
85.75
85.69
84.94
85.51
86.69
85.51
85.68
86.00
86.14
85.27
86.56
86.55
84.88
86.62
86.43
85.28
86.53
85.08
86.41
86.02
87.09
85.84
0.64
85.57
85.29
85.17
86.69
85.32
85.09
84.58
85.68
86.79
85.88
86.23
85.89
86.98
84.96
86.08
87.10
87.07
87.16
86.29
87.04
86.55
86.87
86.73
85.36
87.04
86.14
0.79
83.99
83.18
83.06
85.85
84.98
85.03
84.91
86.29
86.58
84.09
84.70
87.27
86.62
84.19
84.82
86.07
87.56
85.27
84.51
85.96
83.85
86.46
85.95
85.46
85.71
85.29
1.17
85.41
84.72
83.94
86.07
85.12
84.01
81.22
84.34
86.29
84.83
85.12
86.66
84.05
83.46
84.86
81.07
83.37
83.83
84.81
86.10
85.30
85.99
85.35
84.60
84.81
84.61
1.33
85.47
1.17

84.07
84.46
83.06
83.76
81.92
83.33
82.79
83.16
81.97
80.79
82.24
84.17
81.58
83.29
83.25
83.13
83.80
83.84
82.06
82.29
83.62
84.86
83.05
84.41
83.65
83.14
0.97
82.74
84.88
83.31
83.19
80.81
81.28
83.55
81.31
82.36
83.78
82.07
83.11
82.39
81.58
82.65
81.03
81.54
82.80
82.45
83.39
82.49
80.62
85.31
83.31
82.17
82.57
1.15
82.68
82.80
82.23
81.18
83.22
81.99
81.25
82.30
83.35
82.80
80.34
83.79
80.08
83.48
82.14
81.17
82.81
78.03
82.38
83.78
82.82
83.65
85.16
82.17
81.13
82.27
1.43
83.72
82.64
81.62
83.19
81.37
79.33
81.72
81.55
80.85
83.78
83.48
81.54
83.72
79.29
79.01
83.76
81.17
82.03
82.40
81.46
82.98
81.39
83.74
83.37
82.87
82.08
1.41
82.51
1.32

99.94
99.94
99.93
99.92
99.93
99.92
99.94
99.94
99.93
99.92
99.94
99.91
99.96
99.92
99.93
99.95
99.94
99.95
99.94
99.95
99.94
99.94
99.95
99.94
99.93
99.94
0.01
99.94
99.92
99.92
99.92
99.95
99.95
99.94
99.94
99.95
99.91
99.95
99.92
99.94
99.93
99.93
99.96
99.96
99.96
99.94
99.94
99.95
99.96
99.94
99.94
99.96
99.94
0.01
99.93
99.95
99.93
99.96
99.95
99.95
99.95
99.94
99.93
99.94
99.96
99.94
99.97
99.93
99.94
99.96
99.93
99.96
99.94
99.94
99.95
99.94
99.94
99.96
99.96
99.95
0.01
99.91
99.93
99.93
99.91
99.92
99.95
99.90
99.92
99.88
99.89
99.90
99.93
99.90
99.93
99.93
99.91
99.93
99.89
99.94
99.93
99.95
99.94
99.93
99.94
99.95
99.92
0.02
99.94
0.02

87.67
87.95
86.62
86.85
85.76
86.63
86.51
86.84
85.69
84.62
86.04
87.18
85.99
86.44
86.52
87.19
87.63
87.68
86.33
86.88
87.49
88.44
87.32
87.76
87.41
86.86
0.83
86.38
87.82
86.64
86.75
84.96
85.53
87.10
85.25
86.32
86.43
86.25
86.31
86.18
85.43
86.16
85.96
86.11
87.15
86.86
87.49
86.93
85.80
88.66
87.28
86.80
86.50
0.82
86.84
87.17
86.48
85.81
86.92
86.43
85.63
86.53
86.97
86.59
85.31
87.38
85.19
87.10
86.47
86.11
86.57
82.77
86.56
87.62
87.29
87.56
89.00
86.79
86.03
86.52
1.10
86.98
86.64
85.93
86.49
85.09
84.49
84.79
85.43
83.77
86.25
86.35
85.77
86.39
83.93
83.45
86.17
85.52
85.20
86.77
85.85
87.22
85.73
87.66
87.24
87.34
85.86
1.12
86.44
1.04

18.25
18.44
29.06
14.32
24.43
32.51
51.51
67.15
13.60
38.73
21.20
28.57
31.99
16.95
71.33
6.63
28.77
48.79
6.25
8.76
10.05
13.16
20.22
31.22
43.82
27.83
17.29
10.48
10.67
21.29
11.66
21.77
31.17
50.16
65.81
10.42
40.73
19.14
28.26
30.64
13.64
74.11
4.32
27.26
46.16
4.17
6.67
7.89
10.93
17.86
28.74
41.25
25.41
18.44
11.30
11.49
22.11
13.04
23.15
26.11
45.10
60.75
9.29
29.49
15.05
20.86
25.58
13.92
61.91
4.21
23.24
43.57
5.76
8.26
9.46
12.47
19.35
30.17
42.59
23.53
15.77
10.01
10.20
20.82
11.32
21.43
24.29
43.29
58.93
7.74
27.85
13.27
18.88
23.77
12.21
60.26
2.26
21.14
41.69
4.06
6.56
7.76
10.75
17.61
28.42
40.82
21.81
15.73
24.64
16.99

0.32
0.37
0.44
0.50
0.71
0.94
1.62
2.27
2.32
3.25
3.40
4.06
1.43
2.09
3.13
0.87
0.94
2.41
1.42
1.91
1.92
2.09
2.56
3.13
3.54
1.91
1.08
0.38
0.40
0.46
0.55
0.80
1.01
1.69
2.34
2.44
3.30
3.54
4.22
1.56
2.21
3.30
0.96
1.02
2.45
1.43
2.01
2.01
2.19
2.74
3.22
3.64
2.00
1.11
0.27
0.30
0.38
0.48
0.73
0.91
1.61
2.27
2.29
3.09
3.37
4.07
1.42
2.07
3.10
0.87
0.90
2.37
1.35
1.90
1.92
2.07
2.50
3.13
3.51
1.88
1.08
0.20
0.22
0.27
0.27
0.35
0.48
0.47
0.65
0.79
0.82
0.80
0.82
0.70
0.79
1.05
0.37
0.27
0.64
0.50
0.79
0.77
0.78
0.90
1.12
1.24
0.64
0.29
1.60
1.11

0.06
0.07
0.08
0.09
0.12
0.16
0.28
0.39
0.42
0.59
0.61
0.78
0.29
0.42
0.65
0.15
0.16
0.42
0.25
0.33
0.34
0.38
0.46
0.55
0.62
0.35
0.20
0.07
0.07
0.08
0.09
0.14
0.18
0.29
0.40
0.44
0.62
0.64
0.81
0.31
0.44
0.68
0.17
0.18
0.43
0.27
0.35
0.35
0.40
0.47
0.56
0.64
0.36
0.21
0.06
0.06
0.07
0.09
0.12
0.16
0.28
0.39
0.42
0.58
0.61
0.78
0.29
0.42
0.64
0.15
0.16
0.42
0.25
0.34
0.34
0.37
0.46
0.55
0.62
0.34
0.20
0.04
0.04
0.05
0.05
0.06
0.08
0.08
0.11
0.15
0.16
0.15
0.16
0.13
0.15
0.21
0.06
0.05
0.11
0.09
0.14
0.14
0.14
0.16
0.20
0.23
0.12
0.05
0.29
0.21

100

1.0

95

95

0.8

90

90

85

85

80

80
Unet
Linknet
FPN
PSPNet

75
70

0

10

20

30

40

50

60

Number of parameters (106)

70

Unet
Linknet
FPN
PSPNet

75
80

70

0

15

95

10

90

5

85

0

80

5
Unet
Linknet
FPN
PSPNet

75
10

20

30

40

50

60

Number of parameters (106)

20

30

40

50

60

Number of parameters (106)

70

70

(c) Lesion segmentation B

80

15

0

10

20

30

40

50

60

Number of parameters (106)

70

0.4

0.2

0.2
20

40

60

80 100 120 140 160 180 200

(d) Lesion segmentation B-A

Fig. 4. Dice vs. number of parameters for the three experimental setups
and the difference between lesion segmentation B and A. The green regions
depict the kernel density estimate for all points using Gaussian kernels. The
method used to calculate the estimator bandwidth was Scott and the points
are assumed to be equally weighted.

0.8

0.4

0.2

0.2

A motivation for this study is that the large amount of new
models that are proposed, rarely conduct ablation studies and
do not compare with simple baselines. This study can be used
as a set of baseline models that DL model designers will
test on, to confirm and evaluate whether their novel model
performs better than other models, e.g. by comparing their
accuracy with models with the same number of parameters
and/or training/validation time.
A common preprocessing step for lesion segmentation is
using lung masks as either from manual annotation or from
an automatic method. This step naturally improves lesion
segmentation since the model only needs to search within the
lung region instead of the whole image. Moreover, the use of
this step is necessary in cases where the lesion is orders of
magnitude smaller than the lungs and the background, justifying the characterization of lesion datasets as ‘unbalanced’.
The arguments against using this preprocessing step is that
the complexity of the model and the cost of annotation by
the experts are increased. The question to be answered by
the expert is whether it is beneficial to increase the model
complexity and the annotation cost to achieve the additional
lesion segmentation accuracy increase. Related previous work
was conducted by Shi et al. [45], which categorized COVID19 segmentation models between:
• the lung-lesion-oriented models, which directly segment
lesions and

40

60

80 100 120 140 160 180 200

Unet
Linknet
FPN
PSPNet

0.8

0.0

0.4

0.4

0.2

0.2
60

80 100 120 140 160 180 200

0.4

Unet
Linknet
FPN
PSPNet

0.3
0.2
0.1

0.0

Unet
Linknet
FPN
PSPNet

20

40

60

80 100 120 140 160 180 200

Unet
Linknet
FPN
PSPNet

20

40

60

80 100 120 140 160 180 200

0.4

Unet
Linknet
FPN
PSPNet

0.3
0.2
0.1

0.0

0.0

0.1

0.1

0.2

0.2

0.3
0.4

80 100 120 140 160 180 200

0.8
0.6

40

60

1.0

0.6

20

40

0.8

0.4

20

20

1.0

0.6

1.0

Lesion segmentation B-A

VI. D ISCUSSION

0.0

0.6

0.0

low frequency textures after training. The Dice for using
random initialization is 87.1% ± 88.36% and for ImageNet
initialization is 4.1% ± 3.62%.

Unet
Linknet
FPN
PSPNet

Unet
Linknet
FPN
PSPNet

0.8

0.4

0.0

80

1.0

0.6

1.0

Unet
Linknet
FPN
PSPNet

10

Unet
Linknet
FPN
PSPNet

0.6

0.0

80

(b) Lesion segmentation A

100

0

10

Lesion segmentation A

Dice(%)

(a) Lung segmentation

70

Lung segmentation

100

Lesion segmentation B

Dice(%)

7

0.3
20

40

60

80 100 120 140 160 180 200

Epochs

(a) Train loss

0.4

20

40

60

80 100 120 140 160 180 200

Epochs

(b) Validation loss

Fig. 5. Training and validation loss plots with mean (line) and standard
deviation (patch) for the four architectures segregated upon encoders for
each experimental setup. Rows correspond to experimental setups and the
difference between lesion segmentation B and A and columns correspond to
train and validation losses.

•

the lung-region-oriented models, which first segment the
lungs and then pass the masked region for further segmentation or classification.

Regarding the encoder weight initialization experiment we
confirm previous research such as [46] that pretrained weights
significantly improve segmentation results, however we hypothesize that for as the number of epochs increases, the accuracy gap between them decreases. Similar positive findings
regarding transfer learning such as improved performance and
faster convergence were also reported in [47].
Limitations of this study include the use of small number
of training data, however this is partially solved by the use of
data augmentation methods that are applied on each training
epoch. Moreover, it is costly to gather and annotate medical
images especially when extreme events such as the COVID19 outbreak occur. Therefore, the use of this study training

Dice(%)

8

100

100

95

95

90

90

85

85

80

80

75

75

70

Unet

Linknet

FPN

PSPNet

70

Dice(%)

(a) Lung segmentation
100

100

95

95

90

90

85

85

80

80

75

75

70

Unet

Linknet

FPN

Unet

Linknet

FPN

PSPNet

(b) Lesion segmentation A

PSPNet

70

(c) Lesion segmentation B

None

imagenet

(d) Initialization

Fig. 6. Boxplots of Dice for the three experiments and for each architecture
in (a), (b) and (c) and weight initialization for all experiments in (d).

dataset is representative of medical datasets that exist in the
wild as summarized in [48], which contains samples in the
order of 102 to lower 103 .
Future work includes the use of neuron and layer attribution
methods to investigate reasons that specific combinations of
architectures and encoders perform better than others.
VII. C ONCLUSIONS
The need for fast, accurate and automatic diagnosis of
COVID-19 requires highly reliable and publicly available
models. We demonstrate specific properties that increase
model segmentation and help experts in improved diagnosis
by publicly providing pretrained models ready to be used for
fine-tuning in experimental setups without GPU.
ACKNOWLEDGMENT
This work received funding from the European Union’s
Horizon 2020 research and innovation programme under grant
agreement No 875325 (TeNDER, affecTive basEd iNtegrateD
carE for betteR Quality of Life).
R EFERENCES
[1] W. H. Organization et al., “Coronavirus disease 2019 (covid-19): situation report, 72,” 2020.
[2] D. Wang, B. Hu, C. Hu, F. Zhu, X. Liu, J. Zhang, B. Wang, H. Xiang,
Z. Cheng, Y. Xiong et al., “Clinical characteristics of 138 hospitalized
patients with 2019 novel coronavirus–infected pneumonia in wuhan,
china,” Jama, vol. 323, no. 11, pp. 1061–1069, 2020.
[3] M.-Y. Ng, E. Y. Lee, J. Yang, F. Yang, X. Li, H. Wang, M. M.-s.
Lui, C. S.-Y. Lo, B. Leung, P.-L. Khong et al., “Imaging profile of the
covid-19 infection: radiologic findings and literature review,” Radiology:
Cardiothoracic Imaging, vol. 2, no. 1, p. e200034, 2020.
[4] T. Ai, Z. Yang, H. Hou, C. Zhan, C. Chen, W. Lv, Q. Tao, Z. Sun, and
L. Xia, “Correlation of chest ct and rt-pcr testing in coronavirus disease
2019 (covid-19) in china: a report of 1014 cases,” Radiology, p. 200642,
2020.

[5] S. Hu, E. A. Hoffman, and J. M. Reinhardt, “Automatic lung segmentation for accurate quantitation of volumetric x-ray ct images,” IEEE
transactions on medical imaging, vol. 20, no. 6, pp. 490–498, 2001.
[6] M. Keshani, Z. Azimifar, F. Tajeripour, and R. Boostani, “Lung nodule
segmentation and recognition using svm classifier and active contour
modeling: A complete intelligent system,” Computers in biology and
medicine, vol. 43, no. 4, pp. 287–300, 2013.
[7] T. Manikandan and N. Bharathi, “Lung cancer detection using fuzzy
auto-seed cluster means morphological segmentation and svm classifier,”
Journal of medical systems, vol. 40, no. 7, p. 181, 2016.
[8] Y. LeCun, Y. Bengio, and G. Hinton, “Deep learning,” nature, vol. 521,
no. 7553, p. 436, 2015.
[9] S. Minaee, Y. Boykov, F. Porikli, A. Plaza, N. Kehtarnavaz, and
D. Terzopoulos, “Image segmentation using deep learning: A survey,”
arXiv preprint arXiv:2001.05566, 2020.
[10] B. A. Skourt, A. El Hassani, and A. Majda, “Lung ct image segmentation
using deep neural networks,” Procedia Computer Science, vol. 127, pp.
109–113, 2018.
[11] S. Jin, B. Wang, H. Xu, C. Luo, L. Wei, W. Zhao, X. Hou, W. Ma,
Z. Xu, Z. Zheng et al., “Ai-assisted ct imaging analysis for covid-19
screening: Building and deploying a medical ai system in four weeks,”
medRxiv, 2020.
[12] A. P. Harrison, Z. Xu, K. George, L. Lu, R. M. Summers, and D. J.
Mollura, “Progressive and multi-path holistically nested neural networks
for pathological lung segmentation from ct images,” in International
conference on medical image computing and computer-assisted intervention. Springer, 2017, pp. 621–629.
[13] D.-P. Fan, T. Zhou, G.-P. Ji, Y. Zhou, G. Chen, H. Fu, J. Shen, and
L. Shao, “Inf-net: Automatic covid-19 lung infection segmentation from
ct images,” IEEE Transactions on Medical Imaging, 2020.
[14] X. Chen, L. Yao, and Y. Zhang, “Residual attention u-net for automated
multi-class segmentation of covid-19 chest ct images,” arXiv preprint
arXiv:2004.05645, 2020.
[15] G. Wang, X. Liu, C. Li, Z. Xu, J. Ruan, H. Zhu, T. Meng, K. Li,
N. Huang, and S. Zhang, “A noise-robust framework for automatic
segmentation of covid-19 pneumonia lesions from ct images,” IEEE
Transactions on Medical Imaging, 2020.
[16] Q. Yan, B. Wang, D. Gong, C. Luo, W. Zhao, J. Shen, Q. Shi,
S. Jin, L. Zhang, and Z. You, “Covid-19 chest ct image segmentation–
a deep convolutional neural network solution,” arXiv preprint
arXiv:2004.10987, 2020.
[17] F. Shan, Y. Gao, J. Wang, W. Shi, N. Shi, M. Han, Z. Xue, and
Y. Shi, “Lung infection quantification of covid-19 in ct images with
deep learning,” arXiv preprint arXiv:2003.04655, 2020.
[18] O. Ronneberger, P. Fischer, and T. Brox, “U-net: Convolutional networks
for biomedical image segmentation,” in International Conference on
Medical image computing and computer-assisted intervention. Springer,
2015, pp. 234–241.
[19] J. Ma, Y. Wang, X. An, C. Ge, Z. Yu, J. Chen, Q. Zhu, G. Dong, J. He,
Z. He et al., “Towards efficient covid-19 ct annotation: A benchmark
for lung and infection segmentation,” arXiv preprint arXiv:2004.12537,
2020.
[20] X. He, S. Wang, S. Shi, X. Chu, J. Tang, X. Liu, C. Yan, J. Zhang, and
G. Ding, “Benchmarking deep learning models and automated model
design for covid-19 detection with chest ct scans,” medRxiv, 2020.
[21] J. Kalpathy-Cramer, B. Zhao, D. Goldgof, Y. Gu, X. Wang, H. Yang,
Y. Tan, R. Gillies, and S. Napel, “A comparison of lung nodule
segmentation algorithms: methods and results from a multi-institutional
study,” Journal of digital imaging, vol. 29, no. 4, pp. 476–487, 2016.
[22] A. King, S. M. Bhandarkar, and B. M. Hopkinson, “A comparison of
deep learning methods for semantic segmentation of coral reef survey
images,” in Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition Workshops, 2018, pp. 1394–1402.
[23] Q. Liu, A.-B. Salberg, and R. Jenssen, “A comparison of deep learning
architectures for semantic mapping of very high resolution images,” in
IGARSS 2018-2018 IEEE International Geoscience and Remote Sensing
Symposium. IEEE, 2018, pp. 6943–6946.
[24] A. Chaurasia and E. Culurciello, “Linknet: Exploiting encoder representations for efficient semantic segmentation,” in 2017 IEEE Visual
Communications and Image Processing (VCIP). IEEE, 2017, pp. 1–4.
[25] T.-Y. Lin, P. Dollár, R. Girshick, K. He, B. Hariharan, and S. Belongie,
“Feature pyramid networks for object detection,” in Proceedings of the
IEEE conference on computer vision and pattern recognition, 2017, pp.
2117–2125.
[26] H. Zhao, J. Shi, X. Qi, X. Wang, and J. Jia, “Pyramid scene parsing
network,” in Proceedings of the IEEE conference on computer vision
and pattern recognition, 2017, pp. 2881–2890.

Lesion segmentation B

Lesion segmentation A

Lung segmentation

9

(a) Mask

(b) Unet

(c) Linknet

(d) FPN

(e) PSPNet

Fig. 7. Reconstructed volumes from predicted masks. Reconstruction was done by stacking the predicted masks on the z-axis and then applying the marching
cubes algorithm.

[27] M. Drozdzal, E. Vorontsov, G. Chartrand, S. Kadoury, and C. Pal, “The
importance of skip connections in biomedical image segmentation,” in
Deep Learning and Data Labeling for Medical Applications. Springer,
2016, pp. 179–187.
[28] K. He, X. Zhang, S. Ren, and J. Sun, “Deep residual learning for image
recognition,” in Proceedings of the IEEE conference on computer vision
and pattern recognition, 2016, pp. 770–778.
[29] J. Hu, L. Li, Y. Lin, F. Wu, and J. Zhao, “A comparison and strategy of
semantic segmentation on remote sensing images,” in The International
Conference on Natural Computation, Fuzzy Systems and Knowledge
Discovery. Springer, 2019, pp. 21–29.
[30] K. Simonyan and A. Zisserman, “Very deep convolutional networks for
large-scale image recognition,” arXiv preprint arXiv:1409.1556, 2014.
[31] G. Huang, Z. Liu, L. Van Der Maaten, and K. Q. Weinberger, “Densely
connected convolutional networks,” in Proceedings of the IEEE conference on computer vision and pattern recognition, 2017, pp. 4700–4708.
[32] S. Xie, R. Girshick, P. Dollár, Z. Tu, and K. He, “Aggregated residual
transformations for deep neural networks,” in Proceedings of the IEEE
conference on computer vision and pattern recognition, 2017, pp. 1492–
1500.
[33] Y. Chen, J. Li, H. Xiao, X. Jin, S. Yan, and J. Feng, “Dual path
networks,” in Advances in neural information processing systems, 2017,
pp. 4467–4475.
[34] A. G. Howard, M. Zhu, B. Chen, D. Kalenichenko, W. Wang,
T. Weyand, M. Andreetto, and H. Adam, “Mobilenets: Efficient convolutional neural networks for mobile vision applications,” arXiv preprint
arXiv:1704.04861, 2017.
[35] F. Chollet, “Xception: Deep learning with depthwise separable convolutions,” in Proceedings of the IEEE conference on computer vision and
pattern recognition, 2017, pp. 1251–1258.
[36] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi, “Inception-v4,
inception-resnet and the impact of residual connections on learning,” in
Thirty-first AAAI conference on artificial intelligence, 2017.

[37] M. Tan and Q. V. Le, “Efficientnet: Rethinking model scaling for
convolutional neural networks,” arXiv preprint arXiv:1905.11946, 2019.
[38] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei, “Imagenet:
A large-scale hierarchical image database,” in 2009 IEEE conference on
computer vision and pattern recognition. Ieee, 2009, pp. 248–255.
[39] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan,
V. Vanhoucke, and A. Rabinovich, “Going deeper with convolutions,”
in Proceedings of the IEEE conference on computer vision and pattern
recognition, 2015, pp. 1–9.
[40] J. Hofmanninger, F. Prayer, J. Pan, S. Rohrich, H. Prosch, and G. Langs,
“Automatic lung segmentation in routine imaging is a data diversity
problem, not a methodology problem,” arXiv preprint arXiv:2001.11767,
2020.
[41] U. Schneider, E. Pedroni, and A. Lomax, “The calibration of ct
hounsfield units for radiotherapy treatment planning,” Physics in
Medicine & Biology, vol. 41, no. 1, p. 111, 1996.
[42] D. P. Kingma and J. Ba, “Adam: A method for stochastic optimization,”
arXiv preprint arXiv:1412.6980, 2014.
[43] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan,
T. Killeen, Z. Lin, N. Gimelshein, L. Antiga et al., “Pytorch: An
imperative style, high-performance deep learning library,” in Advances
in Neural Information Processing Systems, 2019, pp. 8024–8035.
[44] P. Yakubovskiy, “Segmentation models,” GitHub repository, 2019.
[45] F. Shi, J. Wang, J. Shi, Z. Wu, Q. Wang, Z. Tang, K. He, Y. Shi, and
D. Shen, “Review of artificial intelligence techniques in imaging data
acquisition, segmentation and diagnosis for covid-19,” IEEE reviews in
biomedical engineering, 2020.
[46] M. Orsic, I. Kreso, P. Bevandic, and S. Segvic, “In defense of pre-trained
imagenet architectures for real-time semantic segmentation of roaddriving images,” in Proceedings of the IEEE conference on computer
vision and pattern recognition, 2019, pp. 12 607–12 616.
[47] Y. Wang, Y. Zhang, Y. Liu, J. Tian, C. Zhong, Z. Shi, Y. Zhang, and
Z. He, “Does non-covid19 lung lesion help? investigating transferability

ImageNet initialization

Random initialization

10

(a) Before training

(b) After training

Fig. 8. Grid visualization of the 64 weights with size 7 × 7 of the first
convolutional layer for the Unet architecture with ResNet-18 encoder. The
two left and two right grids correspond to random and ImageNet pretrained
initialization, respectively. The data range of the colormap of the images has
been adjusted in the range [−0.4, 0.4].

in covid-19 ct image segmentation,” arXiv preprint arXiv:2006.13877,
2020.
[48] M. H. Hesamian, W. Jia, X. He, and P. Kennedy, “Deep learning techniques for medical image segmentation: Achievements and challenges,”
Journal of digital imaging, vol. 32, no. 4, pp. 582–596, 2019.

